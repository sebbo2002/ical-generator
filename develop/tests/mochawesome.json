{
  "stats": {
    "suites": 131,
    "tests": 447,
    "passes": 445,
    "pending": 2,
    "failures": 0,
    "start": "2025-05-03T15:56:10.211Z",
    "end": "2025-05-03T15:56:10.374Z",
    "duration": 163,
    "testsRegistered": 447,
    "passPercent": 100,
    "pendingPercent": 0.44742729306487694,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "60047d43-3d4f-4157-8b1c-26f5e869d232",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f8308c1c-c70b-4957-a65f-6ed2008d0bf0",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "53d859e4-7602-46c6-8fc5-c1e6da64b8ba",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({type:ICalAlarmType.display},null)},/`event`/)",
                  "err": {},
                  "uuid": "6a0c73a3-6664-4ab0-b9bb-c0038c43f8ff",
                  "parentUUID": "53d859e4-7602-46c6-8fc5-c1e6da64b8ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.display,unknown:true},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),\"display\")",
                  "err": {},
                  "uuid": "93bd46b3-c30e-4056-96a8-d652aef425de",
                  "parentUUID": "53d859e4-7602-46c6-8fc5-c1e6da64b8ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a0c73a3-6664-4ab0-b9bb-c0038c43f8ff",
                "93bd46b3-c30e-4056-96a8-d652aef425de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5d1bc39c-b77e-45a6-99ec-abf354505379",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.type(ICalAlarmType.display))",
                  "err": {},
                  "uuid": "4cbbbd2c-09a6-438e-a5ce-fea3ce446708",
                  "parentUUID": "5d1bc39c-b77e-45a6-99ec-abf354505379",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),\"display\");a.type(ICalAlarmType.audio);assert.strictEqual(a.type(),\"audio\")",
                  "err": {},
                  "uuid": "1cd3bdfb-2693-49f1-ba54-d3810f30491d",
                  "parentUUID": "5d1bc39c-b77e-45a6-99ec-abf354505379",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.type(\"BANANA\")},/`type`/);assert.throws(function(){a.type(null)},/`type`/)",
                  "err": {},
                  "uuid": "807ad67d-4599-4665-bc59-1a4cec378cbb",
                  "parentUUID": "5d1bc39c-b77e-45a6-99ec-abf354505379",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"ACTION:DISPLAY\")>-1)",
                  "err": {},
                  "uuid": "424516fb-cd39-4be5-82fd-08afe6ad34f1",
                  "parentUUID": "5d1bc39c-b77e-45a6-99ec-abf354505379",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4cbbbd2c-09a6-438e-a5ce-fea3ce446708",
                "1cd3bdfb-2693-49f1-ba54-d3810f30491d",
                "807ad67d-4599-4665-bc59-1a4cec378cbb",
                "424516fb-cd39-4be5-82fd-08afe6ad34f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ec92303-1a51-4437-ae78-992dbf6a5266",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.trigger(60*10))",
                  "err": {},
                  "uuid": "ef6bcad5-a299-424e-8f0c-a0e7bbe4249d",
                  "parentUUID": "6ec92303-1a51-4437-ae78-992dbf6a5266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;assert.strictEqual(a.trigger(),600);assert.strictEqual(a.triggerAfter(),-600);a.trigger(300);assert.strictEqual(a.trigger(),300);assert.strictEqual(a.triggerAfter(),-300);a.trigger(now);const dateResult=a.trigger();assert.deepStrictEqual(dateResult,now)",
                  "err": {},
                  "uuid": "5fd09f1d-7661-4adf-9e0a-5a686e9f67d1",
                  "parentUUID": "6ec92303-1a51-4437-ae78-992dbf6a5266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.trigger(Infinity)},/`trigger`/);assert.throws(function(){a.trigger(\"hi\")},/`trigger`/);assert.throws(function(){a.trigger(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "16e89a19-2fe5-4674-91f9-a637abc842e4",
                  "parentUUID": "6ec92303-1a51-4437-ae78-992dbf6a5266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(new Date);assert.ok(a.trigger()instanceof Date)",
                  "err": {},
                  "uuid": "3d1edd8e-3de8-43be-ad3a-7f30b8b2db72",
                  "parentUUID": "6ec92303-1a51-4437-ae78-992dbf6a5266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(moment());assert.ok(moment.isMoment(a.trigger()))",
                  "err": {},
                  "uuid": "b157f069-129d-4197-a53c-a3eeee362844",
                  "parentUUID": "6ec92303-1a51-4437-ae78-992dbf6a5266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(2*60);assert.strictEqual(a.trigger(),120)",
                  "err": {},
                  "uuid": "d206279f-4516-4940-8025-661b95ae8aba",
                  "parentUUID": "6ec92303-1a51-4437-ae78-992dbf6a5266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"2015-02-01T13:38:45.000Z\");const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"TRIGGER:-PT10M\"));a.trigger(trigger);assert.ok(a.toString().includes(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\"))",
                  "err": {},
                  "uuid": "972cd57c-7e2a-4732-9280-46c9b779b48f",
                  "parentUUID": "6ec92303-1a51-4437-ae78-992dbf6a5266",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef6bcad5-a299-424e-8f0c-a0e7bbe4249d",
                "5fd09f1d-7661-4adf-9e0a-5a686e9f67d1",
                "16e89a19-2fe5-4674-91f9-a637abc842e4",
                "3d1edd8e-3de8-43be-ad3a-7f30b8b2db72",
                "b157f069-129d-4197-a53c-a3eeee362844",
                "d206279f-4516-4940-8025-661b95ae8aba",
                "972cd57c-7e2a-4732-9280-46c9b779b48f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d6a0413-ad45-47a5-8dc6-d88a95e49dd5",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.triggerAfter(60*10))",
                  "err": {},
                  "uuid": "0ed1e18a-5240-4fe9-a2e0-839727e5a751",
                  "parentUUID": "0d6a0413-ad45-47a5-8dc6-d88a95e49dd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar)).triggerAfter(300);assert.strictEqual(a.triggerAfter(),300);assert.strictEqual(a.trigger(),-300)",
                  "err": {},
                  "uuid": "7ca5496e-1844-4ef9-bcbc-08249fb01e01",
                  "parentUUID": "0d6a0413-ad45-47a5-8dc6-d88a95e49dd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.triggerAfter(120);assert.strictEqual(a.trigger(),-120)",
                  "err": {},
                  "uuid": "0fbe72ba-ada4-4071-9d9b-b6f9dfb72a7f",
                  "parentUUID": "0d6a0413-ad45-47a5-8dc6-d88a95e49dd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.triggerAfter(Infinity)},/`trigger`/);assert.throws(function(){a.triggerAfter(\"hi\")},/`trigger`/);assert.throws(function(){a.triggerAfter(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "5533763f-25b4-433b-b598-c194ca10703e",
                  "parentUUID": "0d6a0413-ad45-47a5-8dc6-d88a95e49dd5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"20150201T133845Z\");const a=new ICalAlarm({triggerAfter:600},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"TRIGGER;RELATED=END:PT10M\")>-1);a.triggerAfter(trigger);assert.ok(a.toString().indexOf(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\")>-1)",
                  "err": {},
                  "uuid": "70a21b45-c4d4-469b-9779-e7f5b24b69c3",
                  "parentUUID": "0d6a0413-ad45-47a5-8dc6-d88a95e49dd5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ed1e18a-5240-4fe9-a2e0-839727e5a751",
                "7ca5496e-1844-4ef9-bcbc-08249fb01e01",
                "0fbe72ba-ada4-4071-9d9b-b6f9dfb72a7f",
                "5533763f-25b4-433b-b598-c194ca10703e",
                "70a21b45-c4d4-469b-9779-e7f5b24b69c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b7f40e7-baea-4fb9-8ca1-18d0ebc4b8e0",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.triggerBefore(60*10))",
                  "err": {},
                  "uuid": "a9a6c0af-9885-4d52-aeab-9981545b8e63",
                  "parentUUID": "4b7f40e7-baea-4fb9-8ca1-18d0ebc4b8e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;assert.strictEqual(a.triggerBefore(),600);a.trigger(300);assert.strictEqual(a.triggerBefore(),300);a.trigger(now);const dateResult=a.triggerBefore();assert.deepStrictEqual(dateResult,now)",
                  "err": {},
                  "uuid": "06387a3a-a21f-44a1-bf5b-8d39580edbc1",
                  "parentUUID": "4b7f40e7-baea-4fb9-8ca1-18d0ebc4b8e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.triggerBefore(Infinity)},/`trigger`/);assert.throws(function(){a.triggerBefore(\"hi\")},/`trigger`/);assert.throws(function(){a.triggerBefore(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "78dd264d-e4e9-4a18-a306-e865aafa4574",
                  "parentUUID": "4b7f40e7-baea-4fb9-8ca1-18d0ebc4b8e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;a.triggerBefore(now);assert.deepStrictEqual(a.trigger(),now)",
                  "err": {},
                  "uuid": "686dff63-7c93-49bc-a2af-18e99e974108",
                  "parentUUID": "4b7f40e7-baea-4fb9-8ca1-18d0ebc4b8e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({triggerBefore:moment()},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(moment.isMoment(a.trigger()))",
                  "err": {},
                  "uuid": "d4b6752f-04c1-47b1-a628-2a96fa9db162",
                  "parentUUID": "4b7f40e7-baea-4fb9-8ca1-18d0ebc4b8e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.triggerBefore(2*60);assert.strictEqual(a.trigger(),120)",
                  "err": {},
                  "uuid": "35d22bcb-37f8-4c91-939a-8ad82ff5cbda",
                  "parentUUID": "4b7f40e7-baea-4fb9-8ca1-18d0ebc4b8e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"2015-02-01T13:38:45.000Z\");const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"TRIGGER:-PT10M\")>-1);a.triggerBefore(trigger);assert.ok(a.toString().indexOf(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\")>-1)",
                  "err": {},
                  "uuid": "6f2ba07e-0ebb-4735-94e5-f166c7f72af2",
                  "parentUUID": "4b7f40e7-baea-4fb9-8ca1-18d0ebc4b8e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9a6c0af-9885-4d52-aeab-9981545b8e63",
                "06387a3a-a21f-44a1-bf5b-8d39580edbc1",
                "78dd264d-e4e9-4a18-a306-e865aafa4574",
                "686dff63-7c93-49bc-a2af-18e99e974108",
                "d4b6752f-04c1-47b1-a628-2a96fa9db162",
                "35d22bcb-37f8-4c91-939a-8ad82ff5cbda",
                "6f2ba07e-0ebb-4735-94e5-f166c7f72af2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "44d62282-f450-4834-a45d-81e644c94e9c",
              "title": "relatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm relatesTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.relatesTo(null));assert.deepStrictEqual(a,a.relatesTo(ICalAlarmRelatesTo.end))",
                  "err": {},
                  "uuid": "f04e9da2-b5ae-4e11-bc99-372ccbcdbcf8",
                  "parentUUID": "44d62282-f450-4834-a45d-81e644c94e9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm relatesTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.relatesTo(ICalAlarmRelatesTo.end);assert.strictEqual(a.relatesTo(),ICalAlarmRelatesTo.end);a.relatesTo(null);assert.strictEqual(a.relatesTo(),null)",
                  "err": {},
                  "uuid": "dc205a4a-ea96-4ac4-af08-4dc221c6d7f6",
                  "parentUUID": "44d62282-f450-4834-a45d-81e644c94e9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw if value is not `null`, \"START\" or \"END\"",
                  "fullTitle": "ical-generator Alarm relatesTo() should throw if value is not `null`, \"START\" or \"END\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.relatesTo(\"hi\")},/`relatesTo`/);assert.throws(function(){a.relatesTo(true)},/`relatesTo`/);assert.throws(function(){a.relatesTo(Infinity)},/`relatesTo`/)",
                  "err": {},
                  "uuid": "af06ce8a-0974-4dc6-9ede-0203d82cb325",
                  "parentUUID": "44d62282-f450-4834-a45d-81e644c94e9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change RELATED",
                  "fullTitle": "ical-generator Alarm relatesTo() should change RELATED",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"RELATED=START\")===-1);a.relatesTo(ICalAlarmRelatesTo.start);assert.ok(a.toString().indexOf(\"RELATED=START\")>-1);a.relatesTo(ICalAlarmRelatesTo.end);assert.ok(a.toString().indexOf(\"RELATED=END\")>-1)",
                  "err": {},
                  "uuid": "f2f80e7a-dd03-43a2-886f-5c8839a8b127",
                  "parentUUID": "44d62282-f450-4834-a45d-81e644c94e9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f04e9da2-b5ae-4e11-bc99-372ccbcdbcf8",
                "dc205a4a-ea96-4ac4-af08-4dc221c6d7f6",
                "af06ce8a-0974-4dc6-9ede-0203d82cb325",
                "f2f80e7a-dd03-43a2-886f-5c8839a8b127"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "854b0049-a405-49bf-9f1a-a422dadae627",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.repeat({interval:60,times:4}))",
                  "err": {},
                  "uuid": "0ca9a1a0-b46c-43c3-9631-4fed01889544",
                  "parentUUID": "854b0049-a405-49bf-9f1a-a422dadae627",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.repeat(),null);a.repeat({interval:60,times:4});assert.deepStrictEqual(a.repeat(),{interval:60,times:4})",
                  "err": {},
                  "uuid": "2745c3b6-5b05-41f4-abb9-2787618a6feb",
                  "parentUUID": "854b0049-a405-49bf-9f1a-a422dadae627",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.repeat({interval:60,times:Infinity})},/`repeat.times`/);assert.throws(function(){a.repeat({interval:60,times:\"hi\"})},/`repeat.times`/);assert.throws(function(){a.repeat({interval:60,times:true})},/`repeat.times`/);assert.throws(function(){a.repeat({interval:Infinity,times:4})},/`repeat.interval`/);assert.throws(function(){a.repeat({interval:\"hi\",times:4})},/`repeat.interval`/);assert.throws(function(){a.repeat({interval:true,times:4})},/`repeat.interval`/)",
                  "err": {},
                  "uuid": "8f89a2d0-db1d-4236-81b8-322041957bbd",
                  "parentUUID": "854b0049-a405-49bf-9f1a-a422dadae627",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({repeat:{interval:90,times:42},trigger:300},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"REPEAT:42\"));assert.ok(a.toString().includes(\"DURATION:PT1M30S\"));a.repeat(null);assert.ok(!a.toString().includes(\"REPEAT:42\"));assert.ok(!a.toString().includes(\"DURATION:PT1M30S\"))",
                  "err": {},
                  "uuid": "ce547d66-a414-45d4-ab14-6483bded58dc",
                  "parentUUID": "854b0049-a405-49bf-9f1a-a422dadae627",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({repeat:{interval:null,times:4},trigger:300},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat.interval`/)",
                  "err": {},
                  "uuid": "c2edd90a-9c4b-4e31-8989-5cc56300807c",
                  "parentUUID": "854b0049-a405-49bf-9f1a-a422dadae627",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({repeat:{interval:60,times:null},trigger:300},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat.times`/)",
                  "err": {},
                  "uuid": "2ce58af3-3449-4927-b9a5-faa091413959",
                  "parentUUID": "854b0049-a405-49bf-9f1a-a422dadae627",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is of wrong type",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is of wrong type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({repeat:true,trigger:300},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat` is not correct, must be an object!/)",
                  "err": {},
                  "uuid": "fdbaf2ae-d9d5-4f24-a5ef-bb9ee4dd7f2a",
                  "parentUUID": "854b0049-a405-49bf-9f1a-a422dadae627",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ca9a1a0-b46c-43c3-9631-4fed01889544",
                "2745c3b6-5b05-41f4-abb9-2787618a6feb",
                "8f89a2d0-db1d-4236-81b8-322041957bbd",
                "ce547d66-a414-45d4-ab14-6483bded58dc",
                "c2edd90a-9c4b-4e31-8989-5cc56300807c",
                "2ce58af3-3449-4927-b9a5-faa091413959",
                "fdbaf2ae-d9d5-4f24-a5ef-bb9ee4dd7f2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fbbaa470-aea2-4272-aeb3-a3e16a0bc601",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.attach(null));assert.deepStrictEqual(a,a.attach(\"https://sebbo.net/beep.aud\"))",
                  "err": {},
                  "uuid": "0f2c5d9c-5b06-43cf-8f5e-40f633ff6cd8",
                  "parentUUID": "fbbaa470-aea2-4272-aeb3-a3e16a0bc601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t={mime:\"audio/basic\",uri:\"https://example.com/alarm.aud\"};const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.attach(),null);a.attach(t);assert.deepStrictEqual(a.attach(),t);a.attach(\"https://www.example.com/beep.aud\");assert.deepStrictEqual(a.attach(),{mime:null,uri:\"https://www.example.com/beep.aud\"});a.attach({uri:\"https://www.example.com/beep.aud\"});assert.deepStrictEqual(a.attach(),{mime:null,uri:\"https://www.example.com/beep.aud\"});a.attach(null);assert.strictEqual(a.attach(),null)",
                  "err": {},
                  "uuid": "22a134b4-458d-403e-8f8d-c9af0ef116bb",
                  "parentUUID": "fbbaa470-aea2-4272-aeb3-a3e16a0bc601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.attach({mime:\"audio/basic\"})},/`attach.uri`/)",
                  "err": {},
                  "uuid": "1d01634d-fc74-44a3-a18a-b336d9be0218",
                  "parentUUID": "fbbaa470-aea2-4272-aeb3-a3e16a0bc601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.attach(Infinity)},/`attachment`/)",
                  "err": {},
                  "uuid": "5a00e7b8-e20a-45f2-81e7-4ec8fa2de4a8",
                  "parentUUID": "fbbaa470-aea2-4272-aeb3-a3e16a0bc601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.audio},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nATTACH;VALUE=URI:Basso\")>-1);a.attach(\"https://example.com/beep.aud\");assert.ok(a.toString().indexOf(\"\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud\")>-1);a.attach({mime:\"audio/basic\",uri:\"https://example.com/beep.aud\"});assert.ok(a.toString().indexOf(\"\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud\")>-1)",
                  "err": {},
                  "uuid": "fa2fd4bb-c2fc-49cd-a788-1d0f2dc9deb3",
                  "parentUUID": "fbbaa470-aea2-4272-aeb3-a3e16a0bc601",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f2c5d9c-5b06-43cf-8f5e-40f633ff6cd8",
                "22a134b4-458d-403e-8f8d-c9af0ef116bb",
                "1d01634d-fc74-44a3-a18a-b336d9be0218",
                "5a00e7b8-e20a-45f2-81e7-4ec8fa2de4a8",
                "fa2fd4bb-c2fc-49cd-a788-1d0f2dc9deb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72467bb0-d2fd-4f2b-97d5-901a38ec49b5",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.description(null));assert.deepStrictEqual(a,a.description(\"Hey Ho!\"))",
                  "err": {},
                  "uuid": "68118624-18dd-4f39-991f-a3ba228c02bc",
                  "parentUUID": "72467bb0-d2fd-4f2b-97d5-901a38ec49b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.description(),null);a.description(\"blablabla\");assert.deepStrictEqual(a.description(),\"blablabla\");a.description(null);assert.deepStrictEqual(a.description(),null)",
                  "err": {},
                  "uuid": "054be383-fb8d-4e7e-826d-f3910d025b02",
                  "parentUUID": "72467bb0-d2fd-4f2b-97d5-901a38ec49b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({description:\"Huibuh!\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nDESCRIPTION:Huibuh\")>-1)",
                  "err": {},
                  "uuid": "6950c9e2-1662-4515-a00d-1d61d49a8dfc",
                  "parentUUID": "72467bb0-d2fd-4f2b-97d5-901a38ec49b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({description:\"Example Event\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nDESCRIPTION:Example Event\")>-1)",
                  "err": {},
                  "uuid": "88a50656-5943-4ccd-aa9c-acc40fd485b7",
                  "parentUUID": "72467bb0-d2fd-4f2b-97d5-901a38ec49b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68118624-18dd-4f39-991f-a3ba228c02bc",
                "054be383-fb8d-4e7e-826d-f3910d025b02",
                "6950c9e2-1662-4515-a00d-1d61d49a8dfc",
                "88a50656-5943-4ccd-aa9c-acc40fd485b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2de5f6ab-03a7-42b9-b567-81e381789bbe",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.summary(null));assert.deepStrictEqual(a,a.summary(\"Hey Ho!\"))",
                  "err": {},
                  "uuid": "ffe6e83d-5a96-4595-9f27-521222f2a36f",
                  "parentUUID": "2de5f6ab-03a7-42b9-b567-81e381789bbe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.summary(),null);a.summary(\"blablabla\");assert.deepStrictEqual(a.summary(),\"blablabla\");a.summary(null);assert.deepStrictEqual(a.summary(),null)",
                  "err": {},
                  "uuid": "250ddafb-f1df-4110-b30b-bcc05cac975d",
                  "parentUUID": "2de5f6ab-03a7-42b9-b567-81e381789bbe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm summary() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({summary:\"Huibuh!\",type:ICalAlarmType.email},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nSUMMARY:Huibuh\")>-1)",
                  "err": {},
                  "uuid": "4d4b4b30-2c76-4dd1-b047-a9601f580291",
                  "parentUUID": "2de5f6ab-03a7-42b9-b567-81e381789bbe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm summary() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.email},new ICalEvent({start:new Date,summary:\"Example Event\"},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nSUMMARY:Example Event\")>-1)",
                  "err": {},
                  "uuid": "ec27d70d-40d8-4cfb-9ae1-96716f511691",
                  "parentUUID": "2de5f6ab-03a7-42b9-b567-81e381789bbe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ffe6e83d-5a96-4595-9f27-521222f2a36f",
                "250ddafb-f1df-4110-b30b-bcc05cac975d",
                "4d4b4b30-2c76-4dd1-b047-a9601f580291",
                "ec27d70d-40d8-4cfb-9ae1-96716f511691"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89c8b0d3-474c-4cd8-b06f-d5ef57c70f5f",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Alarm createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=new ICalAttendee({email:\"mail@example.com\"},alarm);assert.strictEqual(alarm.createAttendee(attendee),attendee,\"createAttendee returns attendee\");assert.deepStrictEqual(alarm.attendees()[0],attendee,\"attendee pushed\")",
                  "err": {},
                  "uuid": "66accd03-2589-4e2e-92f9-7f4f17e39377",
                  "parentUUID": "89c8b0d3-474c-4cd8-b06f-d5ef57c70f5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Alarm createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});assert.ok(alarm.createAttendee({email:\"mail@example.com\"})instanceof ICalAttendee);assert.strictEqual(alarm.attendees.length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "bf5580ee-596f-4c38-b519-a466d8319d45",
                  "parentUUID": "89c8b0d3-474c-4cd8-b06f-d5ef57c70f5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=alarm.createAttendee(\"Zac <zac@example.com>\");assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(alarm.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "a1d407c0-64e5-41dd-af59-1dadd0e45118",
                  "parentUUID": "89c8b0d3-474c-4cd8-b06f-d5ef57c70f5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Alarm createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});assert.throws(function(){alarm.createAttendee(\"foo bar\")},/isn't formated correctly/)",
                  "err": {},
                  "uuid": "1563ca7c-cabe-4766-80fd-f593d8882ffb",
                  "parentUUID": "89c8b0d3-474c-4cd8-b06f-d5ef57c70f5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=alarm.createAttendee({email:\"zac@example.com\",name:\"Zac\"});assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(alarm.attendees().length,1,\"attendee pushed\");assert.ok(alarm.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;CN=\"Zac\":MAILTO:zac@example.com'))",
                  "err": {},
                  "uuid": "24916583-7b09-4ce1-acc8-fe0dd0adc402",
                  "parentUUID": "89c8b0d3-474c-4cd8-b06f-d5ef57c70f5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66accd03-2589-4e2e-92f9-7f4f17e39377",
                "bf5580ee-596f-4c38-b519-a466d8319d45",
                "a1d407c0-64e5-41dd-af59-1dadd0e45118",
                "1563ca7c-cabe-4766-80fd-f593d8882ffb",
                "24916583-7b09-4ce1-acc8-fe0dd0adc402"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8370e20b-db4b-47ec-811d-65cc3fc96289",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Alarm attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});assert.strictEqual(alarm.attendees().length,0);const attendee=alarm.createAttendee({email:\"mail@example.com\"});assert.strictEqual(alarm.attendees().length,1);assert.deepStrictEqual(alarm.attendees()[0],attendee)",
                  "err": {},
                  "uuid": "7e6942ef-9e90-4ae2-9ad0-22810442c271",
                  "parentUUID": "8370e20b-db4b-47ec-811d-65cc3fc96289",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Alarm attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const foo=alarm.attendees([{email:\"a@example.com\",name:\"Person A\"},{email:\"b@example.com\",name:\"Person B\"}]);assert.strictEqual(alarm.attendees().length,2);assert.deepStrictEqual(foo,alarm)",
                  "err": {},
                  "uuid": "c77361f8-b3b0-425b-b3ab-cadecb20207c",
                  "parentUUID": "8370e20b-db4b-47ec-811d-65cc3fc96289",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e6942ef-9e90-4ae2-9ad0-22810442c271",
                "c77361f8-b3b0-425b-b3ab-cadecb20207c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a8669228-e123-4e6c-b797-26055d2835cd",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "2977c3cc-7a76-4737-8a86-4468cd8e7ede",
                  "parentUUID": "a8669228-e123-4e6c-b797-26055d2835cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2977c3cc-7a76-4737-8a86-4468cd8e7ede"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9c8aafb7-949b-4b18-a60a-f16b62a596bc",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.type(ICalAlarmType.display);a.trigger(120);assert.deepStrictEqual(a.toJSON(),{attach:null,attendees:[],description:null,interval:null,relatesTo:null,repeat:null,summary:null,trigger:120,type:\"display\",x:[]})",
                  "err": {},
                  "uuid": "b1dffe95-c47e-4fee-8d43-585bdcb0ad14",
                  "parentUUID": "9c8aafb7-949b-4b18-a60a-f16b62a596bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));new ICalAlarm(a.toJSON(),new ICalEvent({start:new Date},new ICalCalendar))",
                  "err": {},
                  "uuid": "77447150-fe4c-42c5-b421-b754a8c71812",
                  "parentUUID": "9c8aafb7-949b-4b18-a60a-f16b62a596bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b1dffe95-c47e-4fee-8d43-585bdcb0ad14",
                "77447150-fe4c-42c5-b421-b754a8c71812"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0fa36b52-2037-401a-ae83-a2a46eeaf0ea",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2ee7b64f-e08a-413b-ab6b-27107d024f6a",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={delegatedFrom:null,delegatedTo:null,email:\"john@example.org\",mailto:\"john+calendar@example.org\",name:\"John Doe\",role:ICalAttendeeRole.REQ,rsvp:false,sentBy:null,status:ICalAttendeeStatus.ACCEPTED,type:ICalAttendeeType.INDIVIDUAL,x:[]};const event=new ICalAttendee(data,new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(event.toJSON(),data)",
                  "err": {},
                  "uuid": "6edb88b4-f18b-4ed0-8a88-78007ead6c99",
                  "parentUUID": "2ee7b64f-e08a-413b-ab6b-27107d024f6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAttendee({email:\"foo@bar.com\"})},/`event`/)",
                  "err": {},
                  "uuid": "0119d415-6b30-4adf-b73b-ee266c5b2f79",
                  "parentUUID": "2ee7b64f-e08a-413b-ab6b-27107d024f6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee constructor() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAttendee({name:\"Testuser\"},new ICalEvent({start:new Date},new ICalCalendar))},/`email`/)",
                  "err": {},
                  "uuid": "f8ceb623-67b6-4dcf-95ee-ecaa775e65d8",
                  "parentUUID": "2ee7b64f-e08a-413b-ab6b-27107d024f6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6edb88b4-f18b-4ed0-8a88-78007ead6c99",
                "0119d415-6b30-4adf-b73b-ee266c5b2f79",
                "f8ceb623-67b6-4dcf-95ee-ecaa775e65d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a24a66b-1e0d-4072-b5bf-c82711e0cde8",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.name(),null);a.name(\"Sebastian\");assert.strictEqual(a.name(),\"Sebastian\")",
                  "err": {},
                  "uuid": "9d89fd93-ff24-401b-ad07-d0aeea6b9f87",
                  "parentUUID": "7a24a66b-1e0d-4072-b5bf-c82711e0cde8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.name(null));assert.deepStrictEqual(a,a.name(\"Sebastian\"))",
                  "err": {},
                  "uuid": "fced3abd-ad65-4042-bdfe-09d1f96a0529",
                  "parentUUID": "7a24a66b-1e0d-4072-b5bf-c82711e0cde8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.name(\"Sebastian\");assert.strictEqual(a.name(),\"Sebastian\");a.name(null);assert.strictEqual(a.name(),null)",
                  "err": {},
                  "uuid": "e23f8eaf-1d37-418b-841a-d77f2f1995e2",
                  "parentUUID": "7a24a66b-1e0d-4072-b5bf-c82711e0cde8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d89fd93-ff24-401b-ad07-d0aeea6b9f87",
                "fced3abd-ad65-4042-bdfe-09d1f96a0529",
                "e23f8eaf-1d37-418b-841a-d77f2f1995e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ba506abd-bac6-43e1-b782-c18ad4b1c988",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).email(\"foo@example.com\");assert.strictEqual(a.email(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "9a9471d3-891c-4308-94ca-766952ebf8f1",
                  "parentUUID": "ba506abd-bac6-43e1-b782-c18ad4b1c988",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.email(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "3a675c2e-269e-48b3-933c-8953491b4552",
                  "parentUUID": "ba506abd-bac6-43e1-b782-c18ad4b1c988",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"mail@example.com\")>-1)",
                  "err": {},
                  "uuid": "548c8fc0-3038-41cf-ae27-9da136ac0fd8",
                  "parentUUID": "ba506abd-bac6-43e1-b782-c18ad4b1c988",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a9471d3-891c-4308-94ca-766952ebf8f1",
                "3a675c2e-269e-48b3-933c-8953491b4552",
                "548c8fc0-3038-41cf-ae27-9da136ac0fd8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2cdd0b04-f9c8-42eb-9427-74d8ee1bc890",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.mailto(),null);a.mailto(\"foo@example.com\");assert.strictEqual(a.mailto(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "bc36e82b-3624-42aa-b64e-8050bdf66756",
                  "parentUUID": "2cdd0b04-f9c8-42eb-9427-74d8ee1bc890",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.mailto(null));assert.deepStrictEqual(a,a.mailto(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "c0e4bb05-9e6a-4f45-863b-d2973c144ff3",
                  "parentUUID": "2cdd0b04-f9c8-42eb-9427-74d8ee1bc890",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.mailto(\"mail2@example2.com\");assert.ok(a.toString().indexOf(\"EMAIL=mail@example.com\")>-1&&a.toString().indexOf(\"MAILTO:mail2@example2.com\")>-1)",
                  "err": {},
                  "uuid": "23f24fc9-6eb6-4c91-8d35-b980dd24f3fa",
                  "parentUUID": "2cdd0b04-f9c8-42eb-9427-74d8ee1bc890",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc36e82b-3624-42aa-b64e-8050bdf66756",
                "c0e4bb05-9e6a-4f45-863b-d2973c144ff3",
                "23f24fc9-6eb6-4c91-8d35-b980dd24f3fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13a6b5d8-37ef-47e9-b28d-91315176e8dd",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).sentBy(\"foo@example.com\");assert.strictEqual(a.sentBy(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "1e6dc833-d923-4dda-ba7b-7f3d6dcd3b2b",
                  "parentUUID": "13a6b5d8-37ef-47e9-b28d-91315176e8dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.sentBy(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "be09d05a-25cc-4373-8caf-ce7e8921cd04",
                  "parentUUID": "13a6b5d8-37ef-47e9-b28d-91315176e8dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\",sentBy:\"bar@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"bar@example.com\"))",
                  "err": {},
                  "uuid": "e3f6af73-76e9-44ff-a6f7-b6043f225343",
                  "parentUUID": "13a6b5d8-37ef-47e9-b28d-91315176e8dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e6dc833-d923-4dda-ba7b-7f3d6dcd3b2b",
                "be09d05a-25cc-4373-8caf-ce7e8921cd04",
                "e3f6af73-76e9-44ff-a6f7-b6043f225343"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6588ce0b-4f70-464b-b3c4-a6865348c7be",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.role(ICalAttendeeRole.REQ))",
                  "err": {},
                  "uuid": "674107d6-62ca-4511-a3fa-5b49723408d5",
                  "parentUUID": "6588ce0b-4f70-464b-b3c4-a6865348c7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).role(ICalAttendeeRole.REQ);assert.strictEqual(a.role(),\"REQ-PARTICIPANT\")",
                  "err": {},
                  "uuid": "4a1b5363-73e0-4f1f-b633-8e2094b8733c",
                  "parentUUID": "6588ce0b-4f70-464b-b3c4-a6865348c7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.role(\"\")},/Input must be one of the following: CHAIR, NON-PARTICIPANT, OPT-PARTICIPANT, REQ-PARTICIPANT/)",
                  "err": {},
                  "uuid": "6997e201-76cd-4505-935a-9147a245d1fa",
                  "parentUUID": "6588ce0b-4f70-464b-b3c4-a6865348c7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.role(\"COOKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "aeda118e-d539-43dd-9ac0-7c411603f278",
                  "parentUUID": "6588ce0b-4f70-464b-b3c4-a6865348c7be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",role:ICalAttendeeRole.NON},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"NON-PARTICIPANT\")>-1)",
                  "err": {},
                  "uuid": "09cfcf95-cfa1-4aa8-b90b-0d9e0bcad962",
                  "parentUUID": "6588ce0b-4f70-464b-b3c4-a6865348c7be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "674107d6-62ca-4511-a3fa-5b49723408d5",
                "4a1b5363-73e0-4f1f-b633-8e2094b8733c",
                "6997e201-76cd-4505-935a-9147a245d1fa",
                "aeda118e-d539-43dd-9ac0-7c411603f278",
                "09cfcf95-cfa1-4aa8-b90b-0d9e0bcad962"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "00e006a5-b88c-4047-a602-b4830cb8a1f0",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.rsvp(null));assert.deepStrictEqual(a,a.rsvp(true))",
                  "err": {},
                  "uuid": "860a43b2-2d3e-4632-b3f2-505f05c7769d",
                  "parentUUID": "00e006a5-b88c-4047-a602-b4830cb8a1f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.rsvp(true);assert.strictEqual(a.rsvp(),true);a.rsvp(false);assert.strictEqual(a.rsvp(),false)",
                  "err": {},
                  "uuid": "f1898dc1-6bdb-456f-8986-66dd3c1b4690",
                  "parentUUID": "00e006a5-b88c-4047-a602-b4830cb8a1f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.rsvp(),null);a.rsvp(false);assert.strictEqual(a.rsvp(),false);a.rsvp(null);assert.strictEqual(a.rsvp(),null)",
                  "err": {},
                  "uuid": "8efbd55f-1d72-4e23-b896-fb33b35c9375",
                  "parentUUID": "00e006a5-b88c-4047-a602-b4830cb8a1f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",rsvp:true},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\";RSVP=TRUE\")>-1)",
                  "err": {},
                  "uuid": "6c1d4c90-00ce-4cd1-a775-b6fa09f54d09",
                  "parentUUID": "00e006a5-b88c-4047-a602-b4830cb8a1f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "860a43b2-2d3e-4632-b3f2-505f05c7769d",
                "f1898dc1-6bdb-456f-8986-66dd3c1b4690",
                "8efbd55f-1d72-4e23-b896-fb33b35c9375",
                "6c1d4c90-00ce-4cd1-a775-b6fa09f54d09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "758b8dba-53d3-49ec-98ce-e310acd28f8a",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.status(null));assert.deepStrictEqual(a,a.status(ICalAttendeeStatus.ACCEPTED))",
                  "err": {},
                  "uuid": "66116763-32ba-457f-b434-e5abfe844cab",
                  "parentUUID": "758b8dba-53d3-49ec-98ce-e310acd28f8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.status(),null);a.status(ICalAttendeeStatus.ACCEPTED);assert.strictEqual(a.status(),\"ACCEPTED\");a.status(null);assert.strictEqual(a.status(),null)",
                  "err": {},
                  "uuid": "12628635-f34e-4a61-8165-61b66b18e81e",
                  "parentUUID": "758b8dba-53d3-49ec-98ce-e310acd28f8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.status(\"DRINKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "3e88852f-ff11-4fa3-9d08-0ebde28c1d5d",
                  "parentUUID": "758b8dba-53d3-49ec-98ce-e310acd28f8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",status:ICalAttendeeStatus.DECLINED},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"DECLINED\")>-1)",
                  "err": {},
                  "uuid": "23a4aea5-a060-4e2d-abc6-5bff8f45505c",
                  "parentUUID": "758b8dba-53d3-49ec-98ce-e310acd28f8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",status:ICalAttendeeStatus.NEEDSACTION},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"NEEDS-ACTION\")>-1)",
                  "err": {},
                  "uuid": "71b31027-d1ca-40b2-b48b-42c7fb98a9f9",
                  "parentUUID": "758b8dba-53d3-49ec-98ce-e310acd28f8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66116763-32ba-457f-b434-e5abfe844cab",
                "12628635-f34e-4a61-8165-61b66b18e81e",
                "3e88852f-ff11-4fa3-9d08-0ebde28c1d5d",
                "23a4aea5-a060-4e2d-abc6-5bff8f45505c",
                "71b31027-d1ca-40b2-b48b-42c7fb98a9f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "62daec30-e9cd-4acd-b98a-497ea36dc318",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.type(null),a);assert.deepStrictEqual(a.type(ICalAttendeeType.INDIVIDUAL),a)",
                  "err": {},
                  "uuid": "ea825464-9b7b-40c7-8669-af1c3f6fee3c",
                  "parentUUID": "62daec30-e9cd-4acd-b98a-497ea36dc318",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),null);a.type(ICalAttendeeType.ROOM);assert.strictEqual(a.type(),\"ROOM\");a.type(null);assert.strictEqual(a.type(),null)",
                  "err": {},
                  "uuid": "bf305750-eae7-41c1-8381-314582481161",
                  "parentUUID": "62daec30-e9cd-4acd-b98a-497ea36dc318",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.type(\"DRINKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "72e0e8a3-5e0b-4f47-9c33-fed03f1b06b5",
                  "parentUUID": "62daec30-e9cd-4acd-b98a-497ea36dc318",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mailing-list@example.com\",type:ICalAttendeeType.GROUP},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"GROUP\")>-1)",
                  "err": {},
                  "uuid": "347a5350-f53a-4987-9232-b3003542cde7",
                  "parentUUID": "62daec30-e9cd-4acd-b98a-497ea36dc318",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea825464-9b7b-40c7-8669-af1c3f6fee3c",
                "bf305750-eae7-41c1-8381-314582481161",
                "72e0e8a3-5e0b-4f47-9c33-fed03f1b06b5",
                "347a5350-f53a-4987-9232-b3003542cde7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a2a6035-cc8b-4ea7-835e-6fac91d256e9",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.delegatedTo(null));assert.deepStrictEqual(a,a.delegatedTo(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "dd4e0450-e69e-45ab-9063-75da6e89d1f1",
                  "parentUUID": "3a2a6035-cc8b-4ea7-835e-6fac91d256e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.delegatedTo(),null);a.delegatedTo(\"foo@example.com\");const result=a.delegatedTo();assert.ok(result);assert.strictEqual(result.email(),\"foo@example.com\");a.delegatedTo(null);assert.strictEqual(a.delegatedTo(),null)",
                  "err": {},
                  "uuid": "a7ef7dcd-b23f-4248-beff-9c995478a9e9",
                  "parentUUID": "3a2a6035-cc8b-4ea7-835e-6fac91d256e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({delegatedTo:\"foo@example.com\",email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"foo@example\")>-1)",
                  "err": {},
                  "uuid": "463d66a3-c621-45ad-b10e-69d7c62de750",
                  "parentUUID": "3a2a6035-cc8b-4ea7-835e-6fac91d256e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd4e0450-e69e-45ab-9063-75da6e89d1f1",
                "a7ef7dcd-b23f-4248-beff-9c995478a9e9",
                "463d66a3-c621-45ad-b10e-69d7c62de750"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2d19363-d7ed-4bf2-b772-9f00e8a20629",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.delegatedFrom(null));assert.deepStrictEqual(a,a.delegatedFrom(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "c4e74353-26cb-451f-b254-2d9b0ae2499f",
                  "parentUUID": "a2d19363-d7ed-4bf2-b772-9f00e8a20629",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.delegatedFrom(),null);a.delegatedFrom(\"foo@example.com\");let result=a.delegatedFrom();assert.ok(result);assert.strictEqual(result.email(),\"foo@example.com\");a.delegatedFrom({email:\"max.mustermann@example.com\",name:\"Max Mustermann\"});result=a.delegatedFrom();assert.ok(result);assert.strictEqual(result.name(),\"Max Mustermann\");assert.strictEqual(result.email(),\"max.mustermann@example.com\");a.delegatedFrom(null);assert.strictEqual(a.delegatedFrom(),null)",
                  "err": {},
                  "uuid": "b788edb5-f6c0-4cc2-acb4-42129e47af7c",
                  "parentUUID": "a2d19363-d7ed-4bf2-b772-9f00e8a20629",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({delegatedFrom:\"foo@example.com\",email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"foo@example.com\")>-1)",
                  "err": {},
                  "uuid": "3089b91e-b2ed-4746-ada9-f4d2659074fb",
                  "parentUUID": "a2d19363-d7ed-4bf2-b772-9f00e8a20629",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4e74353-26cb-451f-b254-2d9b0ae2499f",
                "b788edb5-f6c0-4cc2-acb4-42129e47af7c",
                "3089b91e-b2ed-4746-ada9-f4d2659074fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a61a575e-bff8-4b1b-b1ff-c1eba01e85ba",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.delegatesTo({email:\"mail@example.com\"})instanceof ICalAttendee)",
                  "err": {},
                  "uuid": "d84995b8-141b-4e3f-9ac3-d289bb3ad170",
                  "parentUUID": "a61a575e-bff8-4b1b-b1ff-c1eba01e85ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({email:\"muh@example.com\",name:\"Muh\"},event);assert.deepStrictEqual(new ICalAttendee({email:\"foo@example.com\"},event).delegatesTo(attendee),attendee)",
                  "err": {},
                  "uuid": "44970508-9dfb-4573-bd79-9fee059b610b",
                  "parentUUID": "a61a575e-bff8-4b1b-b1ff-c1eba01e85ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee=new ICalAttendee({email:\"zac@example.com\",name:\"Zac\"},new ICalEvent({start:new Date},new ICalCalendar)).delegatesTo({email:\"cody@example.com\",name:\"Cody\"});assert.strictEqual(attendee.name(),\"Cody\")",
                  "err": {},
                  "uuid": "4661bfa1-e4e5-4374-abd9-d9949ab00db0",
                  "parentUUID": "a61a575e-bff8-4b1b-b1ff-c1eba01e85ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d84995b8-141b-4e3f-9ac3-d289bb3ad170",
                "44970508-9dfb-4573-bd79-9fee059b610b",
                "4661bfa1-e4e5-4374-abd9-d9949ab00db0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "989b2603-9592-4af6-a337-24f72bb39ac2",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.delegatesFrom({email:\"bar@example.com\"})instanceof ICalAttendee)",
                  "err": {},
                  "uuid": "841b632c-d168-4ee7-9331-9093ac7cee54",
                  "parentUUID": "989b2603-9592-4af6-a337-24f72bb39ac2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({email:\"muh@example.com\",name:\"Muh\"},event);assert.deepStrictEqual(new ICalAttendee({email:\"bar@example.com\"},event).delegatesFrom(attendee),attendee)",
                  "err": {},
                  "uuid": "fabc8bb5-c0e0-452c-8f61-dc958994920e",
                  "parentUUID": "989b2603-9592-4af6-a337-24f72bb39ac2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"zac@example.com\",name:\"Zac\"},new ICalEvent({start:new Date},new ICalCalendar)).delegatesFrom({email:\"cody@example.com\",name:\"Cody\"});assert.strictEqual(a.name(),\"Cody\");const b=new ICalAttendee({delegatesFrom:{email:\"cody@example.com\",name:\"Cody\"},email:\"zac@example.com\",name:\"Zac\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(b.name(),\"Zac\")",
                  "err": {},
                  "uuid": "a28101d8-cb24-4922-bbc9-fc7ed135523b",
                  "parentUUID": "989b2603-9592-4af6-a337-24f72bb39ac2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "841b632c-d168-4ee7-9331-9093ac7cee54",
                "fabc8bb5-c0e0-452c-8f61-dc958994920e",
                "a28101d8-cb24-4922-bbc9-fc7ed135523b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2462ae95-95c7-49de-91cc-76d3be587d92",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.org\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.x(\"X-NUM-GUESTS\",\"5\"));assert.ok(a.toString().includes(\"ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org\"))",
                  "err": {},
                  "uuid": "8db8fac1-c234-41a2-8c19-bcc76133d6f5",
                  "parentUUID": "2462ae95-95c7-49de-91cc-76d3be587d92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8db8fac1-c234-41a2-8c19-bcc76133d6f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aac9bca4-71ec-4f6a-8599-fbe62842cd6e",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"max@example.com\",name:\"Max Mustermann\"},new ICalEvent({start:new Date},new ICalCalendar));a.delegatesTo(\"Moritz <moritz@example.com>\");assert.deepStrictEqual(a.toJSON(),{delegatedFrom:null,delegatedTo:\"moritz@example.com\",email:\"max@example.com\",mailto:null,name:\"Max Mustermann\",role:\"REQ-PARTICIPANT\",rsvp:null,sentBy:null,status:\"DELEGATED\",type:null,x:[]})",
                  "err": {},
                  "uuid": "650d48a0-d81a-48af-9bf6-a195d25e8b1a",
                  "parentUUID": "aac9bca4-71ec-4f6a-8599-fbe62842cd6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));new ICalAttendee(a.toJSON(),new ICalEvent({start:new Date},new ICalCalendar))",
                  "err": {},
                  "uuid": "992c7065-da17-4f2a-9aa5-8a4184f3685e",
                  "parentUUID": "aac9bca4-71ec-4f6a-8599-fbe62842cd6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "650d48a0-d81a-48af-9bf6-a195d25e8b1a",
                "992c7065-da17-4f2a-9aa5-8a4184f3685e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5f1a3da7-061b-4233-8bb1-5ce0d5021ef9",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "492dad56-2174-40a7-b65a-fcdbcae5273a",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={description:\"Hi, I am the description.\",events:[],method:ICalCalendarMethod.PUBLISH,name:\"Test Calendar\",prodId:\"//sebbo.net//ical-generator//EN\",scale:null,source:\"http://example.com/my/original_source.ical\",timezone:null,ttl:null,url:\"https://github.com/sebbo2002/ical-generator\",x:[]};const cal=new ICalCalendar(data);assert.deepStrictEqual(cal.toJSON(),data)",
                  "err": {},
                  "uuid": "73f8a2b2-aadd-4c8c-9c24-948e9ac850b5",
                  "parentUUID": "492dad56-2174-40a7-b65a-fcdbcae5273a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73f8a2b2-aadd-4c8c-9c24-948e9ac850b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53cbfc14-2b01-484c-bbf1-30464dcbe63c",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.prodId(\"//loremipsum.de//ical-tests//EN\");assert.strictEqual(cal.prodId(),\"//loremipsum.de//ical-tests//EN\")",
                  "err": {},
                  "uuid": "823657b4-01d2-4f14-8741-2ee824a4ed19",
                  "parentUUID": "53cbfc14-2b01-484c-bbf1-30464dcbe63c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.prodId(\"//loremipsum.de//ical-tests//EN\"))",
                  "err": {},
                  "uuid": "1fa70f8b-8e82-46b7-a5da-7bde293e442a",
                  "parentUUID": "53cbfc14-2b01-484c-bbf1-30464dcbe63c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId(256)},/`prodid`/)",
                  "err": {},
                  "uuid": "6a10823a-c9d7-4be0-bf01-7ceed6784798",
                  "parentUUID": "53cbfc14-2b01-484c-bbf1-30464dcbe63c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId({product:\"ical-tests\"})},/`prodid\\.company`/)",
                  "err": {},
                  "uuid": "433cde20-9811-48e1-b463-bfebff18aaf5",
                  "parentUUID": "53cbfc14-2b01-484c-bbf1-30464dcbe63c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId({company:\"sebbo.net\"})},/`prodid\\.product`/)",
                  "err": {},
                  "uuid": "1e258bd3-1d61-4dd0-a435-12c748f464b4",
                  "parentUUID": "53cbfc14-2b01-484c-bbf1-30464dcbe63c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().prodId({company:\"loremipsum.com\",product:\"awesome-unit-tests\"});assert.strictEqual(cal.prodId(),\"//loremipsum.com//awesome-unit-tests//EN\")",
                  "err": {},
                  "uuid": "1402fd41-9adb-4709-ba1c-fb9e8d6644c5",
                  "parentUUID": "53cbfc14-2b01-484c-bbf1-30464dcbe63c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().prodId({company:\"loremipsum.com\",language:\"DE\",product:\"awesome-unit-tests\"});assert.strictEqual(cal.prodId(),\"//loremipsum.com//awesome-unit-tests//DE\")",
                  "err": {},
                  "uuid": "2965c97b-fe57-4974-bbe0-ce6628f6d744",
                  "parentUUID": "53cbfc14-2b01-484c-bbf1-30464dcbe63c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "823657b4-01d2-4f14-8741-2ee824a4ed19",
                "1fa70f8b-8e82-46b7-a5da-7bde293e442a",
                "6a10823a-c9d7-4be0-bf01-7ceed6784798",
                "433cde20-9811-48e1-b463-bfebff18aaf5",
                "1e258bd3-1d61-4dd0-a435-12c748f464b4",
                "1402fd41-9adb-4709-ba1c-fb9e8d6644c5",
                "2965c97b-fe57-4974-bbe0-ce6628f6d744"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "05d7aa2e-e92f-45ca-8a17-1039d844a111",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.deepStrictEqual(c,c.method(null),\"method(null)\");assert.deepStrictEqual(c,c.method(ICalCalendarMethod.PUBLISH),\"method(enum)\")",
                  "err": {},
                  "uuid": "edbfc307-abbf-4714-92f5-cdd796265ae7",
                  "parentUUID": "05d7aa2e-e92f-45ca-8a17-1039d844a111",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.strictEqual(c.method(),null);c.method(null);assert.strictEqual(c.method(),null);c.method(ICalCalendarMethod.PUBLISH);assert.strictEqual(c.method(),\"PUBLISH\");c.method(null);assert.strictEqual(c.method(),null)",
                  "err": {},
                  "uuid": "1b19b936-e0d1-4e1e-872a-b6a8ff8131b4",
                  "parentUUID": "05d7aa2e-e92f-45ca-8a17-1039d844a111",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.throws(function(){c.method(\"KICK ASS\")},/Input must be one of the following: ADD, CANCEL, COUNTER, DECLINECOUNTER, PUBLISH, REFRESH, REPLY, REQUEST/)",
                  "err": {},
                  "uuid": "7cf708aa-e679-4ae5-941b-b944a7ff9336",
                  "parentUUID": "05d7aa2e-e92f-45ca-8a17-1039d844a111",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar({method:ICalCalendarMethod.PUBLISH});assert.strictEqual(c.method(),\"PUBLISH\");c.method(ICalCalendarMethod.ADD);assert.strictEqual(c.method(),\"ADD\")",
                  "err": {},
                  "uuid": "ded13ae9-d2d5-427e-a58d-4c65fdb66b5e",
                  "parentUUID": "05d7aa2e-e92f-45ca-8a17-1039d844a111",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edbfc307-abbf-4714-92f5-cdd796265ae7",
                "1b19b936-e0d1-4e1e-872a-b6a8ff8131b4",
                "7cf708aa-e679-4ae5-941b-b944a7ff9336",
                "ded13ae9-d2d5-427e-a58d-4c65fdb66b5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ee08f33a-18c7-4079-b23a-03bb5b84e119",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.name(null));assert.deepStrictEqual(cal,cal.name(\"Testevents\"))",
                  "err": {},
                  "uuid": "0e6def33-0ded-416b-ba60-8717e1b117e2",
                  "parentUUID": "ee08f33a-18c7-4079-b23a-03bb5b84e119",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.name(),null);cal.name(\"Testevents\");assert.strictEqual(cal.name(),\"Testevents\");cal.name(null);assert.strictEqual(cal.name(),null)",
                  "err": {},
                  "uuid": "9af991ea-3f2c-4932-b45e-05e6af00a2ac",
                  "parentUUID": "ee08f33a-18c7-4079-b23a-03bb5b84e119",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().name(\"Testevents\");cal.createEvent({start:new Date,summary:\"Example Event\"});assert.strictEqual(cal.name(),\"Testevents\")",
                  "err": {},
                  "uuid": "481c8813-02b5-4faa-a3b3-196113861405",
                  "parentUUID": "ee08f33a-18c7-4079-b23a-03bb5b84e119",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e6def33-0ded-416b-ba60-8717e1b117e2",
                "9af991ea-3f2c-4932-b45e-05e6af00a2ac",
                "481c8813-02b5-4faa-a3b3-196113861405"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0192815b-01cf-4213-b749-8ed4a7ecd9c3",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.description(null));assert.deepStrictEqual(cal,cal.description(\"Testbeschreibung\"))",
                  "err": {},
                  "uuid": "0217bdfc-39a0-4d47-9186-109fad500368",
                  "parentUUID": "0192815b-01cf-4213-b749-8ed4a7ecd9c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.description(),null);cal.description(\"Testbeschreibung\");assert.strictEqual(cal.description(),\"Testbeschreibung\");cal.description(null);assert.strictEqual(cal.description(),null)",
                  "err": {},
                  "uuid": "d1fa0ee3-93f2-431b-8cbe-a8d0d2cc001e",
                  "parentUUID": "0192815b-01cf-4213-b749-8ed4a7ecd9c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().description(\"Testbeschreibung\");cal.createEvent({start:new Date,summary:\"Example Event\"});assert.ok(cal.description(),\"Testbeschreibung\")",
                  "err": {},
                  "uuid": "5e206ede-df0c-49fb-8d9f-1788be630e2f",
                  "parentUUID": "0192815b-01cf-4213-b749-8ed4a7ecd9c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0217bdfc-39a0-4d47-9186-109fad500368",
                "d1fa0ee3-93f2-431b-8cbe-a8d0d2cc001e",
                "5e206ede-df0c-49fb-8d9f-1788be630e2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "632d064c-0936-44f9-9ab8-d0dce6ae1240",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.timezone(\"Europe/Berlin\"));assert.deepStrictEqual(cal,cal.timezone(null));assert.deepStrictEqual(cal,cal.timezone({generator:getVtimezoneComponent,name:\"Europe/Berlin\"}))",
                  "err": {},
                  "uuid": "b444e469-9fba-4362-ba5d-482b1a6b4172",
                  "parentUUID": "632d064c-0936-44f9-9ab8-d0dce6ae1240",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/Berlin\");cal.timezone(null);assert.strictEqual(cal.timezone(),null);cal.timezone({name:\"Europe/Berlin\"});assert.strictEqual(cal.timezone(),\"Europe/Berlin\")",
                  "err": {},
                  "uuid": "a7a6001c-005d-485b-9764-2f1627bfd7ca",
                  "parentUUID": "632d064c-0936-44f9-9ab8-d0dce6ae1240",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/Berlin\");cal.timezone(\"UTC\");assert.strictEqual(cal.timezone(),null)",
                  "err": {},
                  "uuid": "1faf9dd1-13f9-4882-b272-98bce1a2f694",
                  "parentUUID": "632d064c-0936-44f9-9ab8-d0dce6ae1240",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b444e469-9fba-4362-ba5d-482b1a6b4172",
                "a7a6001c-005d-485b-9764-2f1627bfd7ca",
                "1faf9dd1-13f9-4882-b272-98bce1a2f694"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6cf2d96-54ee-4050-8ea8-a26fc119a085",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal.ttl(60*60*24),cal);assert.deepStrictEqual(cal.ttl(moment.duration(2,\"days\")),cal);assert.deepStrictEqual(cal.ttl(null),cal)",
                  "err": {},
                  "uuid": "9b6310bc-84b3-46d5-aae4-5c2fbac3f83a",
                  "parentUUID": "d6cf2d96-54ee-4050-8ea8-a26fc119a085",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.ttl(),null);cal.ttl(86400);assert.strictEqual(cal.ttl(),86400)",
                  "err": {},
                  "uuid": "5f3d138a-3def-425a-b011-dcab7c287f77",
                  "parentUUID": "d6cf2d96-54ee-4050-8ea8-a26fc119a085",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().ttl(86400);assert.strictEqual(cal.ttl(),86400)",
                  "err": {},
                  "uuid": "6bf6a022-31a6-4edd-9d3e-7c26843c3414",
                  "parentUUID": "d6cf2d96-54ee-4050-8ea8-a26fc119a085",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b6310bc-84b3-46d5-aae4-5c2fbac3f83a",
                "5f3d138a-3def-425a-b011-dcab7c287f77",
                "6bf6a022-31a6-4edd-9d3e-7c26843c3414"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9adaf69c-00d5-43f7-ac94-94a632b19112",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.source(\"http://example.com/my/original_source.ical\"))",
                  "err": {},
                  "uuid": "fa6b2bb6-893f-45ec-9613-251364913ca7",
                  "parentUUID": "9adaf69c-00d5-43f7-ac94-94a632b19112",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.source(),null);cal.source(\"http://example.com/my/original_source.ical\");assert.strictEqual(cal.source(),\"http://example.com/my/original_source.ical\");cal.url(null);assert.strictEqual(cal.url(),null)",
                  "err": {},
                  "uuid": "02bf4c9b-1d5a-408f-b866-d8473ab812f7",
                  "parentUUID": "9adaf69c-00d5-43f7-ac94-94a632b19112",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa6b2bb6-893f-45ec-9613-251364913ca7",
                "02bf4c9b-1d5a-408f-b866-d8473ab812f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f3521795-cd6c-413d-9e1c-62cde26c6951",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.url(\"https://example.com/calendar.ical\"))",
                  "err": {},
                  "uuid": "5b9ea02d-b58d-420b-8941-f78cec0fde8f",
                  "parentUUID": "f3521795-cd6c-413d-9e1c-62cde26c6951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.url(),null);cal.url(\"https://example.com/calendar.ical\");assert.strictEqual(cal.url(),\"https://example.com/calendar.ical\");cal.url(null);assert.strictEqual(cal.url(),null)",
                  "err": {},
                  "uuid": "5af7a1c8-2e61-43c7-bf29-c2900dfe9b2e",
                  "parentUUID": "f3521795-cd6c-413d-9e1c-62cde26c6951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().url(\"https://example.com/calendar.ical\");cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.ok(cal.url(),\"https://example.com/calendar.ical\")",
                  "err": {},
                  "uuid": "a3a9f213-6b4c-4c7d-b174-7cb6f01930c7",
                  "parentUUID": "f3521795-cd6c-413d-9e1c-62cde26c6951",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b9ea02d-b58d-420b-8941-f78cec0fde8f",
                "5af7a1c8-2e61-43c7-bf29-c2900dfe9b2e",
                "a3a9f213-6b4c-4c7d-b174-7cb6f01930c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3af57191-c067-43c7-8e05-044a952ab842",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.scale(\"gregorian\"))",
                  "err": {},
                  "uuid": "97050e31-991d-48f5-8418-3c466a2498dd",
                  "parentUUID": "3af57191-c067-43c7-8e05-044a952ab842",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.scale(),null);cal.scale(\"GREGORIAN\");assert.strictEqual(cal.scale(),\"GREGORIAN\");cal.scale(null);assert.strictEqual(cal.scale(),null)",
                  "err": {},
                  "uuid": "f29d2aa7-12dc-4a64-b0eb-518e0c6bfa9c",
                  "parentUUID": "3af57191-c067-43c7-8e05-044a952ab842",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().scale(\"gregorian\");cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.ok(cal.scale(),\"GREGORIAN\")",
                  "err": {},
                  "uuid": "89be8a82-0f73-4d1b-8374-7f9ea45a4bab",
                  "parentUUID": "3af57191-c067-43c7-8e05-044a952ab842",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97050e31-991d-48f5-8418-3c466a2498dd",
                "f29d2aa7-12dc-4a64-b0eb-518e0c6bfa9c",
                "89be8a82-0f73-4d1b-8374-7f9ea45a4bab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "027ddba6-1f40-47b2-af91-6e4907550ff6",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.ok(cal.createEvent({start:new Date})instanceof ICalEvent)",
                  "err": {},
                  "uuid": "5a0456dd-8e3d-47cc-ad31-ad8159f794f7",
                  "parentUUID": "027ddba6-1f40-47b2-af91-6e4907550ff6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const event=cal.createEvent({start:new Date,summary:\"Patch-Day\"});assert.strictEqual(event.summary(),\"Patch-Day\")",
                  "err": {},
                  "uuid": "ab97f70c-cbe4-4543-b277-c4f506d77777",
                  "parentUUID": "027ddba6-1f40-47b2-af91-6e4907550ff6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.doesNotThrow(function(){new ICalCalendar().createEvent({start:new Date,summary:\"Patch-Day\"})},Error)",
                  "err": {},
                  "uuid": "756330b8-0ead-464e-af1f-10a4ee6e98ea",
                  "parentUUID": "027ddba6-1f40-47b2-af91-6e4907550ff6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a0456dd-8e3d-47cc-ad31-ad8159f794f7",
                "ab97f70c-cbe4-4543-b277-c4f506d77777",
                "756330b8-0ead-464e-af1f-10a4ee6e98ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "87723bf4-868c-4ebf-b949-11afb5abe921",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.events().length,0);const event=cal.createEvent({start:new Date});assert.strictEqual(cal.events().length,1);assert.deepStrictEqual(cal.events()[0],event)",
                  "err": {},
                  "uuid": "1ccd0982-ee00-4fe6-a2fb-f1e4652bce44",
                  "parentUUID": "87723bf4-868c-4ebf-b949-11afb5abe921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.length(),0);const cal2=cal.events([{start:new Date,summary:\"Event A\"},{start:new Date,summary:\"Event B\"}]);assert.strictEqual(cal.length(),2);assert.deepStrictEqual(cal2,cal)",
                  "err": {},
                  "uuid": "c0111fa5-ac55-4c4e-8e17-5fdbed9f0914",
                  "parentUUID": "87723bf4-868c-4ebf-b949-11afb5abe921",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ccd0982-ee00-4fe6-a2fb-f1e4652bce44",
                "c0111fa5-ac55-4c4e-8e17-5fdbed9f0914"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "042d6aef-5355-4270-b639-580fa6588078",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.createEvent({start:new Date});assert.strictEqual(cal.events().length,1);assert.deepStrictEqual(cal.clear(),cal);assert.strictEqual(cal.events().length,0)",
                  "err": {},
                  "uuid": "1aea46d0-6d00-42c0-9a15-bf11c4f2beeb",
                  "parentUUID": "042d6aef-5355-4270-b639-580fa6588078",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1aea46d0-6d00-42c0-9a15-bf11c4f2beeb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f87a86a9-5caa-4c61-9a52-33336c6aafcd",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "d0e1d4a4-d946-40d5-9d69-e2cb3aaafff5",
                  "parentUUID": "f87a86a9-5caa-4c61-9a52-33336c6aafcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x(\"X-FOO\",\"bar\"));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x(\"X-LOREM\",\"ipsum\"));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x(\"LOREM\",\"ipsum\")});assert.throws(()=>{cal.x(\"X-LOREM\",1337)});assert.throws(()=>{cal.x(5,\"ipsum\")})",
                  "err": {},
                  "uuid": "6e11be84-c52f-453f-bc2e-76270d6f87a5",
                  "parentUUID": "f87a86a9-5caa-4c61-9a52-33336c6aafcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x([{key:\"X-FOO\",value:\"bar\"}]));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x([{key:\"X-LOREM\",value:\"ipsum\"}]));assert.deepEqual(cal.x(),[{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x([{key:\"LOREM\",value:\"ipsum\"}])});assert.throws(()=>{cal.x([{key:\"X-LOREM\",value:1337}])});assert.throws(()=>{cal.x([{key:5,value:\"ipsum\"}])})",
                  "err": {},
                  "uuid": "b44d928d-3894-4dcf-bfc2-caf2547c803b",
                  "parentUUID": "f87a86a9-5caa-4c61-9a52-33336c6aafcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x({\"X-FOO\":\"bar\"}));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x({\"X-LOREM\":\"ipsum\"}));assert.deepEqual(cal.x(),[{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x({LOREM:\"ipsum\"})});assert.throws(()=>{cal.x({\"X-LOREM\":1337})});assert.throws(()=>{cal.x({5:\"ipsum\"})})",
                  "err": {},
                  "uuid": "b7f5c1b2-4db9-4f81-89e9-d2155484c46e",
                  "parentUUID": "f87a86a9-5caa-4c61-9a52-33336c6aafcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepEqual(cal.x(),[]);cal.x(\"X-FOO\",\"BAR\");assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"BAR\"}]);cal.x({});assert.deepEqual(cal.x().length,0)",
                  "err": {},
                  "uuid": "cb14ec73-edea-4037-9205-c4dc630a0b19",
                  "parentUUID": "f87a86a9-5caa-4c61-9a52-33336c6aafcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().x(\"X-FOO\",\"BAR\");cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.ok(cal.toString().includes(\"X-FOO\"))",
                  "err": {},
                  "uuid": "3642c294-30a4-4c25-a8ff-2322fcc2a2f8",
                  "parentUUID": "f87a86a9-5caa-4c61-9a52-33336c6aafcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0e1d4a4-d946-40d5-9d69-e2cb3aaafff5",
                "6e11be84-c52f-453f-bc2e-76270d6f87a5",
                "b44d928d-3894-4dcf-bfc2-caf2547c803b",
                "b7f5c1b2-4db9-4f81-89e9-d2155484c46e",
                "cb14ec73-edea-4037-9205-c4dc630a0b19",
                "3642c294-30a4-4c25-a8ff-2322fcc2a2f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2772801d-b64b-43d5-955e-3bbf6b018a20",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const prodId=cal.toJSON().prodId;assert.strictEqual(typeof prodId,\"string\");assert.ok(prodId.length>0);assert.strictEqual(cal.toJSON().events?.length,0)",
                  "err": {},
                  "uuid": "a14a713b-c4b3-42b5-838d-d997e31182b3",
                  "parentUUID": "2772801d-b64b-43d5-955e-3bbf6b018a20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.createEvent({end:new Date(new Date().getTime()+1e3*60*60),start:new Date,summary:\"HTTP Calendar Event\",x:[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}]});const prodId=cal.toJSON().prodId;assert.strictEqual(typeof prodId,\"string\");assert.ok(prodId.length>0);const events=cal.toJSON().events;assert.strictEqual(events?.length,1);assert.deepEqual(events[0].x,[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}])",
                  "err": {},
                  "uuid": "5fdcc9d2-ee43-4f94-a370-c6a9a05c09f1",
                  "parentUUID": "2772801d-b64b-43d5-955e-3bbf6b018a20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalCalendar;new ICalCalendar(a.toJSON())",
                  "err": {},
                  "uuid": "c41d7e1b-d695-4413-91c9-ac36e828a500",
                  "parentUUID": "2772801d-b64b-43d5-955e-3bbf6b018a20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a14a713b-c4b3-42b5-838d-d997e31182b3",
                "5fdcc9d2-ee43-4f94-a370-c6a9a05c09f1",
                "c41d7e1b-d695-4413-91c9-ac36e828a500"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4de710d6-5cc7-48e6-9e68-3ceb90614905",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.length(),0);cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.strictEqual(cal.length(),1)",
                  "err": {},
                  "uuid": "b9c62f34-2510-4a17-8feb-a43714849a22",
                  "parentUUID": "4de710d6-5cc7-48e6-9e68-3ceb90614905",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9c62f34-2510-4a17-8feb-a43714849a22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "743ee411-7783-4785-bf37-c91e61ef203a",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.url(\"https://sebbo.net/foo\");assert.ok(cal.toString().indexOf(\"URL:https://sebbo.net/foo\")>-1)",
                  "err": {},
                  "uuid": "38994574-79fd-419a-98c8-abf752a9f416",
                  "parentUUID": "743ee411-7783-4785-bf37-c91e61ef203a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.method(ICalCalendarMethod.REFRESH);assert.ok(cal.toString().indexOf(\"METHOD:REFRESH\")>-1)",
                  "err": {},
                  "uuid": "ad4de402-0b86-4d14-bc59-12de57d8cac6",
                  "parentUUID": "743ee411-7783-4785-bf37-c91e61ef203a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.name(\"TEST\");assert.ok(cal.toString().indexOf(\"NAME:TEST\")>-1);assert.ok(cal.toString().indexOf(\"X-WR-CALNAME:TEST\")>-1)",
                  "err": {},
                  "uuid": "d69ce820-7e4c-4233-8487-8030270bd652",
                  "parentUUID": "743ee411-7783-4785-bf37-c91e61ef203a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.description(\"TEST\");assert.ok(cal.toString().indexOf(\"X-WR-CALDESC:TEST\")>-1)",
                  "err": {},
                  "uuid": "d4ecf0bd-582b-4990-8822-eef92f234521",
                  "parentUUID": "743ee411-7783-4785-bf37-c91e61ef203a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone(\"TEST\");assert.ok(cal.toString().indexOf(\"TIMEZONE-ID:TEST\")>-1);assert.ok(cal.toString().indexOf(\"X-WR-TIMEZONE:TEST\")>-1)",
                  "err": {},
                  "uuid": "d0bc3817-6745-46c7-98e6-828407a0df63",
                  "parentUUID": "743ee411-7783-4785-bf37-c91e61ef203a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.source(\"http://foo.bar.example.com/ical.cal\");assert.ok(cal.toString().includes(\"http://foo.bar.example.com/ical.cal\"))",
                  "err": {},
                  "uuid": "89adf581-e093-418b-a3a8-421b2ed62541",
                  "parentUUID": "743ee411-7783-4785-bf37-c91e61ef203a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({generator:getVtimezoneComponent,name:\"Europe/Berlin\"});cal.createEvent({start:new Date,timezone:\"Europe/London\"});assert.ok(cal.toString().includes(\"BEGIN:VTIMEZONE\\r\\n\"),\"BEGIN:VTIMEZONE\");assert.ok(cal.toString().includes(\"TZID:Europe/Berlin\\r\\n\"),\"TZID:Europe/Berlin\");assert.ok(cal.toString().includes(\"TZID:Europe/London\\r\\n\"),\"TZID:Europe/London\")",
                  "err": {},
                  "uuid": "83a625cf-ce36-4877-80ce-51c8f1de3a9f",
                  "parentUUID": "743ee411-7783-4785-bf37-c91e61ef203a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({generator:getVtimezoneComponent,name:\"FOO\"});assert.ok(!cal.toString().includes(\"TZID:Foo\\r\\n\"))",
                  "err": {},
                  "uuid": "d14a0efb-59ff-46d2-bb85-35bef74dc058",
                  "parentUUID": "743ee411-7783-4785-bf37-c91e61ef203a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({generator:getVtimezoneComponent,name:\"/Europe/Berlin\"});assert.ok(!cal.toString().includes(\"TZID:/Europe/Berlin\\r\\n\"))",
                  "err": {},
                  "uuid": "d23e17e5-fa67-4648-b166-c6852e867d02",
                  "parentUUID": "743ee411-7783-4785-bf37-c91e61ef203a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.ttl(moment.duration(3,\"days\"));assert.ok(cal.toString().indexOf(\"REFRESH-INTERVAL;VALUE=DURATION:P3D\")>-1);assert.ok(cal.toString().indexOf(\"X-PUBLISHED-TTL:P3D\")>-1)",
                  "err": {},
                  "uuid": "b3d93b6c-cba1-43ab-acaf-9b8b591527b2",
                  "parentUUID": "743ee411-7783-4785-bf37-c91e61ef203a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38994574-79fd-419a-98c8-abf752a9f416",
                "ad4de402-0b86-4d14-bc59-12de57d8cac6",
                "d69ce820-7e4c-4233-8487-8030270bd652",
                "d4ecf0bd-582b-4990-8822-eef92f234521",
                "d0bc3817-6745-46c7-98e6-828407a0df63",
                "89adf581-e093-418b-a3a8-421b2ed62541",
                "83a625cf-ce36-4877-80ce-51c8f1de3a9f",
                "d14a0efb-59ff-46d2-bb85-35bef74dc058",
                "d23e17e5-fa67-4648-b166-c6852e867d02",
                "b3d93b6c-cba1-43ab-acaf-9b8b591527b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d3b0ea77-a7f0-4e8d-b13d-3b29acb1b9f8",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({created:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",lastModified:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Simple Event\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_01.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "9678e751-71cf-4b6e-a0c9-df586c030f9a",
              "parentUUID": "d3b0ea77-a7f0-4e8d-b13d-3b29acb1b9f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({description:{html:\"<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>\",plain:\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop\"},end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",location:\"localhost\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Sample Event\",transparency:ICalEventTransparency.OPAQUE});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_02.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "228b99e0-a1dd-4eaf-8760-fa3a3d5042d5",
              "parentUUID": "d3b0ea77-a7f0-4e8d-b13d-3b29acb1b9f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.ADD,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({allDay:true,attachments:[\"https://files.sebbo.net/calendar/attachments/foo\"],categories:[{name:\"WORK\"}],end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"123\",location:{address:\"Kurf\\xFCrstendamm 26, 10719 Berlin, Deutschland\",geo:{lat:52.50363,lon:13.32865},radius:141.1751386318387,title:\"Apple Store Kurf\\xFCrstendamm\"},organizer:\"Sebastian Pekarek <mail@sebbo.net>\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),status:ICalEventStatus.CONFIRMED,summary:\"Sample Event\",url:\"http://sebbo.net/\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_03.ics\",\"utf8\"),\"toString\");assert.strictEqual(ical(cal.toJSON()).toString(),string,\"toJSON / toString()\")",
              "err": {},
              "uuid": "6a2d10f7-ced8-4202-bb7c-8a69d843ec3a",
              "parentUUID": "d3b0ea77-a7f0-4e8d-b13d-3b29acb1b9f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.timezone({generator:getVtimezoneComponent,name:null});cal.events([{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"1\",repeating:{exclude:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),freq:ICalEventRepeatingFreq.MONTHLY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating by month\"},{end:new Date(\"Fr Oct 06 2013 23:15:00\"),id:\"2\",repeating:{count:2,freq:ICalEventRepeatingFreq.DAILY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30\"),summary:\"repeating by day, twice\",timezone:\"Europe/Berlin\"},{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"3\",repeating:{freq:ICalEventRepeatingFreq.WEEKLY,interval:3,until:new Date(\"We Jan 01 2014 00:00:00 UTC\")},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating by 3 weeks, until 2014\"}]);assert.strictEqual(cal.toString(),await fs.readFile(resultDir+\"/generate_04.ics\",\"utf8\"),\"first check\");cal.timezone(null);assert.strictEqual(ical(cal.toJSON()).toString(),cal.toString(),\"second check\")",
              "err": {},
              "uuid": "08278762-4aa3-4850-a145-488d74349215",
              "parentUUID": "d3b0ea77-a7f0-4e8d-b13d-3b29acb1b9f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),floating:true,id:\"1\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"floating\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_05.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "5c95807f-16bc-4b70-9bd1-2d330346c2be",
              "parentUUID": "d3b0ea77-a7f0-4e8d-b13d-3b29acb1b9f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.PUBLISH,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({alarms:[{repeat:{interval:60,times:2},trigger:60*10,type:ICalAlarmType.display},{description:\"I'm a reminder :)\",trigger:60*60,type:ICalAlarmType.display}],allDay:true,attendees:[{delegatesTo:{email:\"john@example.com\",name:\"John\",status:ICalAttendeeStatus.ACCEPTED},email:\"matt@example.com\",name:'Smith, Matt; (\"Sales\")'}],id:\"123\",organizer:\"Sebastian Pekarek <mail@sebbo.net>\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),status:ICalEventStatus.CONFIRMED,summary:\"Sample Event\",url:\"http://sebbo.net/\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_06.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "d2a00dd8-d068-4e1d-9b07-32f941b00149",
              "parentUUID": "d3b0ea77-a7f0-4e8d-b13d-3b29acb1b9f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.events([{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"1\",repeating:{byMonth:[1,4,7,10],freq:ICalEventRepeatingFreq.MONTHLY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating by month\"},{id:\"2\",repeating:{byDay:[ICalWeekday.MO,ICalWeekday.WE,ICalWeekday.FR],count:2,freq:ICalEventRepeatingFreq.DAILY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating on Mo/We/Fr, twice\"},{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"3\",repeating:{byMonthDay:[1,15],freq:ICalEventRepeatingFreq.DAILY,interval:1},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating on 1st and 15th\"}]);const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_07.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "a4b8ded9-b88d-4035-8d6b-297aef18a634",
              "parentUUID": "d3b0ea77-a7f0-4e8d-b13d-3b29acb1b9f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({attendees:[{email:\"mail@example.com\",role:ICalAttendeeRole.REQ,rsvp:true,status:ICalAttendeeStatus.NEEDSACTION,type:ICalAttendeeType.INDIVIDUAL}],created:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",lastModified:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Simple Event\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_08.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "b25ef2dc-464e-4557-863e-37fa90828bb4",
              "parentUUID": "d3b0ea77-a7f0-4e8d-b13d-3b29acb1b9f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.REQUEST,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({attendees:[{email:\"mail@example.com\",role:ICalAttendeeRole.REQ,rsvp:true,status:ICalAttendeeStatus.NEEDSACTION,type:ICalAttendeeType.INDIVIDUAL}],end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",organizer:{email:\"mail@sebbo.net\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\"},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Sample Event\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_09.ics\",\"utf8\"),\"toString\");assert.strictEqual(ical(cal.toJSON()).toString(),string,\"toJSON / toString()\")",
              "err": {},
              "uuid": "b3091d2f-e1e2-4085-a8ee-2d87be294b9a",
              "parentUUID": "d3b0ea77-a7f0-4e8d-b13d-3b29acb1b9f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9678e751-71cf-4b6e-a0c9-df586c030f9a",
            "228b99e0-a1dd-4eaf-8760-fa3a3d5042d5",
            "6a2d10f7-ced8-4202-bb7c-8a69d843ec3a",
            "08278762-4aa3-4850-a145-488d74349215",
            "5c95807f-16bc-4b70-9bd1-2d330346c2be",
            "d2a00dd8-d068-4e1d-9b07-32f941b00149",
            "a4b8ded9-b88d-4035-8d6b-297aef18a634",
            "b25ef2dc-464e-4557-863e-37fa90828bb4",
            "b3091d2f-e1e2-4085-a8ee-2d87be294b9a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "711b0747-8455-4de7-bb2e-cc3eabdb7af9",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c830bb61-3ec9-44e6-b1e8-f3f704e06755",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalCategory({name:\"FOO\",unknown:true});assert.strictEqual(a.name(),\"FOO\")",
                  "err": {},
                  "uuid": "5de0318d-2f3a-4e2a-8714-b8288b161ac4",
                  "parentUUID": "c830bb61-3ec9-44e6-b1e8-f3f704e06755",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category constructor() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalCategory({})},/`name`/)",
                  "err": {},
                  "uuid": "0acaeec3-2bc5-4e26-bce3-602b8f2139cf",
                  "parentUUID": "c830bb61-3ec9-44e6-b1e8-f3f704e06755",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5de0318d-2f3a-4e2a-8714-b8288b161ac4",
                "0acaeec3-2bc5-4e26-bce3-602b8f2139cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "23eac60b-b4e9-42c8-98b5-f6c12cd2dcb8",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"foo\"});assert.deepStrictEqual(c,c.name(\"FOO\"))",
                  "err": {},
                  "uuid": "0b08bb36-0b71-4641-b6d6-dee47395716a",
                  "parentUUID": "23eac60b-b4e9-42c8-98b5-f6c12cd2dcb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"foo\"});assert.strictEqual(c.name(),\"foo\");c.name(\"HELLO-WORLD\");assert.strictEqual(c.name(),\"HELLO-WORLD\")",
                  "err": {},
                  "uuid": "dc9d6c28-2eaf-414f-bc3f-67a475852436",
                  "parentUUID": "23eac60b-b4e9-42c8-98b5-f6c12cd2dcb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"BANANA\"});assert.ok(c.toString().includes(\"BANANA\"))",
                  "err": {},
                  "uuid": "8cd243e0-3f66-4cc3-86b4-7bbdb3da40f1",
                  "parentUUID": "23eac60b-b4e9-42c8-98b5-f6c12cd2dcb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0b08bb36-0b71-4641-b6d6-dee47395716a",
                "dc9d6c28-2eaf-414f-bc3f-67a475852436",
                "8cd243e0-3f66-4cc3-86b4-7bbdb3da40f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81af5466-7152-42e0-9b9b-206f03b39c04",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"FOOBAR\"});assert.deepStrictEqual(c.toJSON(),{name:\"FOOBAR\"})",
                  "err": {},
                  "uuid": "d9d40606-6728-4ea7-a707-dcf05ad87639",
                  "parentUUID": "81af5466-7152-42e0-9b9b-206f03b39c04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9d40606-6728-4ea7-a707-dcf05ad87639"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "068940fd-b79a-4572-80cd-9dfcc8d13feb",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9937fe3c-9517-4f8e-b97d-b40d01e854d1",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={alarms:[],allDay:true,attachments:[\"https://files.sebbo.net/calendar/attachments/foo\"],attendees:[],busystatus:ICalEventBusyStatus.BUSY,categories:[],class:null,created:new Date().toJSON(),description:null,end:new Date().toJSON(),floating:false,id:\"FOO\",lastModified:new Date().toJSON(),location:null,organizer:null,priority:5,recurrenceId:new Date().toJSON(),repeating:null,sequence:1,stamp:new Date().toJSON(),start:new Date().toJSON(),status:null,summary:\"Hello.\",timezone:\"Europe/Berlin\",transparency:ICalEventTransparency.TRANSPARENT,url:\"https://github.com/sebbo2002/ical-generator\",x:[]};const event=new ICalEvent(data,new ICalCalendar);assert.deepStrictEqual(event.toJSON(),data)",
                  "err": {},
                  "uuid": "01e78f27-1bc1-4b4f-bd5e-32635ce04225",
                  "parentUUID": "9937fe3c-9517-4f8e-b97d-b40d01e854d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({summary:\"Testevent\"},null)},/`calendar`/)",
                  "err": {},
                  "uuid": "1e586005-4a4f-4ff5-81b8-e391af717414",
                  "parentUUID": "9937fe3c-9517-4f8e-b97d-b40d01e854d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "01e78f27-1bc1-4b4f-bd5e-32635ce04225",
                "1e586005-4a4f-4ff5-81b8-e391af717414"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ecdf8f4d-98f0-4851-880a-a65dd0f03e77",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.id(1048))",
                  "err": {},
                  "uuid": "b0e9ec38-ff6b-4b2f-bd3f-537607cd7787",
                  "parentUUID": "ecdf8f4d-98f0-4851-880a-a65dd0f03e77",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).id(512);assert.strictEqual(event.id(),\"512\");event.id(\"xyz\");assert.strictEqual(event.id(),\"xyz\")",
                  "err": {},
                  "uuid": "f4e63dcf-4bcc-4931-9161-c12739e4716d",
                  "parentUUID": "ecdf8f4d-98f0-4851-880a-a65dd0f03e77",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0e9ec38-ff6b-4b2f-bd3f-537607cd7787",
                "f4e63dcf-4bcc-4931-9161-c12739e4716d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "93637990-c741-4654-a000-a7b5c3afd401",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.uid(1048))",
                  "err": {},
                  "uuid": "70184400-1b10-473a-9d54-187bba6e8a1a",
                  "parentUUID": "93637990-c741-4654-a000-a7b5c3afd401",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).uid(512);assert.strictEqual(event.uid(),\"512\");event.id(\"xyz\");assert.strictEqual(event.uid(),\"xyz\")",
                  "err": {},
                  "uuid": "40aeb800-43a3-4c02-b87a-bc5387a587b3",
                  "parentUUID": "93637990-c741-4654-a000-a7b5c3afd401",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70184400-1b10-473a-9d54-187bba6e8a1a",
                "40aeb800-43a3-4c02-b87a-bc5387a587b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6b13a4cc-db94-446e-870e-aa7efa3f4640",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.sequence(1))",
                  "err": {},
                  "uuid": "1973f066-148e-405e-96cc-1cbf8c5906d5",
                  "parentUUID": "6b13a4cc-db94-446e-870e-aa7efa3f4640",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).sequence(1048);assert.strictEqual(event.sequence(),1048)",
                  "err": {},
                  "uuid": "fcec591b-4963-45e3-9b06-decc5d52f9f8",
                  "parentUUID": "6b13a4cc-db94-446e-870e-aa7efa3f4640",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.sequence(\"hello\")},/`sequence`/)",
                  "err": {},
                  "uuid": "5abfaebd-7eb9-4b36-b223-c5b5549aee37",
                  "parentUUID": "6b13a4cc-db94-446e-870e-aa7efa3f4640",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).sequence(12);assert.strictEqual(event.sequence(),12);event.sequence(0);assert.strictEqual(event.sequence(),0)",
                  "err": {},
                  "uuid": "681553c4-c303-49a0-ac53-47cb2cd9b2be",
                  "parentUUID": "6b13a4cc-db94-446e-870e-aa7efa3f4640",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1973f066-148e-405e-96cc-1cbf8c5906d5",
                "fcec591b-4963-45e3-9b06-decc5d52f9f8",
                "5abfaebd-7eb9-4b36-b223-c5b5549aee37",
                "681553c4-c303-49a0-ac53-47cb2cd9b2be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5f34eefc-0060-47cf-98b2-9390e3d91615",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:new Date},new ICalCalendar);event.start(now);assert.strictEqual(event.start(),now)",
                  "err": {},
                  "uuid": "46b4ec15-981c-4ab3-85b9-131659268f3a",
                  "parentUUID": "5f34eefc-0060-47cf-98b2-9390e3d91615",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.start(date));assert.deepStrictEqual(event.start(),date)",
                  "err": {},
                  "uuid": "5ff129cc-92bf-48ed-b50d-b9589f6dd4cf",
                  "parentUUID": "5f34eefc-0060-47cf-98b2-9390e3d91615",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.start(date));assert.deepStrictEqual(event.start(),date)",
                  "err": {},
                  "uuid": "500e9527-2595-44f6-afb7-1d8905157033",
                  "parentUUID": "5f34eefc-0060-47cf-98b2-9390e3d91615",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.start(3)},/`start`/,\"Number\");assert.throws(function(){event.start(null)},/`start`/,\"null\");assert.throws(function(){event.start(NaN)},/`start`/,\"NaN\");assert.throws(function(){event.start(new Date(\"hallo\"))},/`start`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "78a6e09e-2f2b-4160-92e3-44fea8503f3c",
                  "parentUUID": "5f34eefc-0060-47cf-98b2-9390e3d91615",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=moment().add(5,\"minutes\");const end=moment();const event=new ICalEvent({start:new Date},new ICalCalendar).end(end).start(start);assert.deepStrictEqual(event.start(),end);assert.deepStrictEqual(event.end(),start)",
                  "err": {},
                  "uuid": "a47cf757-382c-4821-8492-963addad2370",
                  "parentUUID": "5f34eefc-0060-47cf-98b2-9390e3d91615",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.start(moment()));assert.deepStrictEqual(event,event.start(new Date))",
                  "err": {},
                  "uuid": "48a078c7-9962-489a-899a-96789e87cc7e",
                  "parentUUID": "5f34eefc-0060-47cf-98b2-9390e3d91615",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46b4ec15-981c-4ab3-85b9-131659268f3a",
                "5ff129cc-92bf-48ed-b50d-b9589f6dd4cf",
                "500e9527-2595-44f6-afb7-1d8905157033",
                "78a6e09e-2f2b-4160-92e3-44fea8503f3c",
                "a47cf757-382c-4821-8492-963addad2370",
                "48a078c7-9962-489a-899a-96789e87cc7e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "68dd4d00-c5b7-4d0c-a866-72f83a2f90e6",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:moment().subtract({minute:1})},new ICalCalendar);event.end(now);assert.deepStrictEqual(event.end(),now)",
                  "err": {},
                  "uuid": "d2d65dd0-c16d-4807-ba20-014454182f2f",
                  "parentUUID": "68dd4d00-c5b7-4d0c-a866-72f83a2f90e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.end(date));assert.deepStrictEqual(event.end(),date)",
                  "err": {},
                  "uuid": "7424afa0-22ca-4e80-8583-38b517ddc3a4",
                  "parentUUID": "68dd4d00-c5b7-4d0c-a866-72f83a2f90e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.end(date));assert.deepStrictEqual(event.end(),date)",
                  "err": {},
                  "uuid": "4bf290f4-97a4-452d-8784-7a1d9ce4c3dd",
                  "parentUUID": "68dd4d00-c5b7-4d0c-a866-72f83a2f90e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.end(3)},/`end`/,\"Number\");assert.throws(function(){event.end(NaN)},/`end`/,\"NaN\");assert.throws(function(){event.end(new Date(\"hallo\"))},/`end`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "aac49123-1118-4884-bc0b-ca1d4be34b72",
                  "parentUUID": "68dd4d00-c5b7-4d0c-a866-72f83a2f90e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=moment().add(5,\"minutes\");const end=moment();const event=new ICalEvent({start:new Date},new ICalCalendar).start(start).end(end);assert.deepStrictEqual(event.start(),end);assert.deepStrictEqual(event.end(),start)",
                  "err": {},
                  "uuid": "5bd1fd6d-4029-4e2b-b1a3-58a6e45d89dc",
                  "parentUUID": "68dd4d00-c5b7-4d0c-a866-72f83a2f90e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.end(moment()));assert.deepStrictEqual(event,event.end(new Date))",
                  "err": {},
                  "uuid": "7b3fea45-6135-470c-b74c-36810cfbbf90",
                  "parentUUID": "68dd4d00-c5b7-4d0c-a866-72f83a2f90e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2d65dd0-c16d-4807-ba20-014454182f2f",
                "7424afa0-22ca-4e80-8583-38b517ddc3a4",
                "4bf290f4-97a4-452d-8784-7a1d9ce4c3dd",
                "aac49123-1118-4884-bc0b-ca1d4be34b72",
                "5bd1fd6d-4029-4e2b-b1a3-58a6e45d89dc",
                "7b3fea45-6135-470c-b74c-36810cfbbf90"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "04b35bbd-fa01-466b-b095-bd5bda734802",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:new Date},new ICalCalendar);event.recurrenceId(now);assert.deepStrictEqual(event.recurrenceId(),now)",
                  "err": {},
                  "uuid": "6af976a8-eca2-4d87-90ef-c410f8517150",
                  "parentUUID": "04b35bbd-fa01-466b-b095-bd5bda734802",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.recurrenceId(date));assert.deepStrictEqual(event.recurrenceId(),date)",
                  "err": {},
                  "uuid": "6cadaf44-ab66-47a0-baf3-b33acb6596a9",
                  "parentUUID": "04b35bbd-fa01-466b-b095-bd5bda734802",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.recurrenceId(date));assert.deepStrictEqual(event.recurrenceId(),date)",
                  "err": {},
                  "uuid": "1b08b287-c719-48d9-a0a5-ed4667a71512",
                  "parentUUID": "04b35bbd-fa01-466b-b095-bd5bda734802",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.recurrenceId(3)},/`recurrenceId`/,\"Number\");assert.throws(function(){event.recurrenceId(NaN)},/`recurrenceId`/,\"NaN\");assert.throws(function(){event.recurrenceId(new Date(\"hallo\"))},/`recurrenceId`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "3f510cf2-b2d6-4dd8-b2ee-84593a7cd71d",
                  "parentUUID": "04b35bbd-fa01-466b-b095-bd5bda734802",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.recurrenceId(moment()));assert.deepStrictEqual(event,event.recurrenceId(new Date))",
                  "err": {},
                  "uuid": "f75e921b-2396-45ba-8d32-c1077833ad93",
                  "parentUUID": "04b35bbd-fa01-466b-b095-bd5bda734802",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6af976a8-eca2-4d87-90ef-c410f8517150",
                "6cadaf44-ab66-47a0-baf3-b33acb6596a9",
                "1b08b287-c719-48d9-a0a5-ed4667a71512",
                "3f510cf2-b2d6-4dd8-b2ee-84593a7cd71d",
                "f75e921b-2396-45ba-8d32-c1077833ad93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40330017-a036-4e4b-8363-92c60bb4ba80",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar).timezone(\"Europe/Berlin\");assert.strictEqual(e.timezone(),\"Europe/Berlin\")",
                  "err": {},
                  "uuid": "61f19751-9621-41f7-b5b6-00a2f7f71e31",
                  "parentUUID": "40330017-a036-4e4b-8363-92c60bb4ba80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const e=new ICalEvent({start:moment(),summary:\"Example Event\"},cal);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),null);cal.timezone(\"Europe/London\");assert.strictEqual(cal.timezone(),\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/London\");e.timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/Berlin\");cal.timezone(null);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),\"Europe/Berlin\");e.timezone(null);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "3500dbf4-983b-4ad0-80a0-b816213d6ae9",
                  "parentUUID": "40330017-a036-4e4b-8363-92c60bb4ba80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.timezone(\"Europe/Berlin\"))",
                  "err": {},
                  "uuid": "f8a16fab-c8fc-4fb1-b88a-ecafd6f2a12b",
                  "parentUUID": "40330017-a036-4e4b-8363-92c60bb4ba80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({end:new Date(new Date().getTime()+36e5),start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/London\")",
                  "err": {},
                  "uuid": "c02461a0-bc5c-4eb8-8e5e-1c733354a6a2",
                  "parentUUID": "40330017-a036-4e4b-8363-92c60bb4ba80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.floating(true);e.timezone(\"Europe/London\");assert.strictEqual(e.floating(),false)",
                  "err": {},
                  "uuid": "18570d1b-576d-4094-86be-9241677780ad",
                  "parentUUID": "40330017-a036-4e4b-8363-92c60bb4ba80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.floating(true);e.timezone(null);assert.strictEqual(e.floating(),true)",
                  "err": {},
                  "uuid": "9ad2e5f2-e262-43c4-ad58-844676f58a4a",
                  "parentUUID": "40330017-a036-4e4b-8363-92c60bb4ba80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\",timezone:\"Europe/Berlin\"},new ICalCalendar);assert.strictEqual(e.timezone(),\"Europe/Berlin\");e.timezone(\"UTC\");assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "80405eec-0c81-4005-9c46-1e585e5e79bf",
                  "parentUUID": "40330017-a036-4e4b-8363-92c60bb4ba80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61f19751-9621-41f7-b5b6-00a2f7f71e31",
                "3500dbf4-983b-4ad0-80a0-b816213d6ae9",
                "f8a16fab-c8fc-4fb1-b88a-ecafd6f2a12b",
                "c02461a0-bc5c-4eb8-8e5e-1c733354a6a2",
                "18570d1b-576d-4094-86be-9241677780ad",
                "9ad2e5f2-e262-43c4-ad58-844676f58a4a",
                "80405eec-0c81-4005-9c46-1e585e5e79bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36009d7a-6a08-4f9f-b64b-219baa8b4f42",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment().add(1,\"day\");const e=new ICalEvent({start:new Date},new ICalCalendar).stamp(now);assert.deepStrictEqual(e.stamp(),now)",
                  "err": {},
                  "uuid": "37bbe9e8-5f6b-48c5-8a25-bb5585e73c09",
                  "parentUUID": "36009d7a-6a08-4f9f-b64b-219baa8b4f42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.stamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "a865aafa-2341-4604-aa98-743cc05fe378",
                  "parentUUID": "36009d7a-6a08-4f9f-b64b-219baa8b4f42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.stamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "98172d00-0c3e-49a7-b171-2f915f504584",
                  "parentUUID": "36009d7a-6a08-4f9f-b64b-219baa8b4f42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.stamp(3)},/`stamp`/,\"Number\");assert.throws(function(){event.stamp(null)},/`stamp`/,\"null\");assert.throws(function(){event.stamp(NaN)},/`stamp`/,\"NaN\");assert.throws(function(){event.stamp(new Date(\"hallo\"))},/`stamp`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "ae5d489c-5c89-4910-a899-190d6ec4384b",
                  "parentUUID": "36009d7a-6a08-4f9f-b64b-219baa8b4f42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.stamp(new Date))",
                  "err": {},
                  "uuid": "0dee1f08-ff52-4c41-839c-1411e1aa1aba",
                  "parentUUID": "36009d7a-6a08-4f9f-b64b-219baa8b4f42",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37bbe9e8-5f6b-48c5-8a25-bb5585e73c09",
                "a865aafa-2341-4604-aa98-743cc05fe378",
                "98172d00-0c3e-49a7-b171-2f915f504584",
                "ae5d489c-5c89-4910-a899-190d6ec4384b",
                "0dee1f08-ff52-4c41-839c-1411e1aa1aba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b32641cb-f774-40ae-8903-e4e1615edd90",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment().add(1,\"day\");const e=new ICalEvent({start:new Date},new ICalCalendar).timestamp(now);assert.deepStrictEqual(e.timestamp(),now)",
                  "err": {},
                  "uuid": "0d5fac0d-8484-47f3-9121-d63a77f5b82b",
                  "parentUUID": "b32641cb-f774-40ae-8903-e4e1615edd90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.timestamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "adcd9b94-0298-4ee2-b011-6c6aa50c27f8",
                  "parentUUID": "b32641cb-f774-40ae-8903-e4e1615edd90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.timestamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "d4c66163-e7ed-4a7f-ac0d-f784f134dd44",
                  "parentUUID": "b32641cb-f774-40ae-8903-e4e1615edd90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.timestamp(3)},/`stamp`/,\"Number\");assert.throws(function(){event.timestamp(null)},/`stamp`/,\"null\");assert.throws(function(){event.timestamp(NaN)},/`stamp`/,\"NaN\");assert.throws(function(){event.timestamp(new Date(\"hallo\"))},/`stamp`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "bf024edb-362b-4612-a4e7-34f5382e336f",
                  "parentUUID": "b32641cb-f774-40ae-8903-e4e1615edd90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.timestamp(new Date))",
                  "err": {},
                  "uuid": "ee896d9c-9d07-4aec-a7e5-cacf98da5d0c",
                  "parentUUID": "b32641cb-f774-40ae-8903-e4e1615edd90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d5fac0d-8484-47f3-9121-d63a77f5b82b",
                "adcd9b94-0298-4ee2-b011-6c6aa50c27f8",
                "d4c66163-e7ed-4a7f-ac0d-f784f134dd44",
                "bf024edb-362b-4612-a4e7-34f5382e336f",
                "ee896d9c-9d07-4aec-a7e5-cacf98da5d0c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "46f2b7f3-2495-4ee7-a953-21f7d27b7e57",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.allDay(true);assert.strictEqual(e.allDay(),true)",
                  "err": {},
                  "uuid": "6d9cb235-eebe-422b-863c-41a8784dbf19",
                  "parentUUID": "46f2b7f3-2495-4ee7-a953-21f7d27b7e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.allDay(true))",
                  "err": {},
                  "uuid": "8cabfa1a-795e-4735-8925-783c99be6d21",
                  "parentUUID": "46f2b7f3-2495-4ee7-a953-21f7d27b7e57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.allDay(true);assert.strictEqual(event.allDay(),true)",
                  "err": {},
                  "uuid": "c5dd8ded-9afd-48df-ac0d-9e6c16ae32b5",
                  "parentUUID": "46f2b7f3-2495-4ee7-a953-21f7d27b7e57",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d9cb235-eebe-422b-863c-41a8784dbf19",
                "8cabfa1a-795e-4735-8925-783c99be6d21",
                "c5dd8ded-9afd-48df-ac0d-9e6c16ae32b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4489e23e-ffaa-44a3-ad2d-f988d0989951",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar).floating(true);assert.strictEqual(e.floating(),true)",
                  "err": {},
                  "uuid": "35ff48f8-74a8-4f9b-a777-54938e075874",
                  "parentUUID": "4489e23e-ffaa-44a3-ad2d-f988d0989951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.floating(false));assert.deepStrictEqual(e,e.floating(true))",
                  "err": {},
                  "uuid": "bb3c3413-9a4e-4c86-8858-a260a60f41d3",
                  "parentUUID": "4489e23e-ffaa-44a3-ad2d-f988d0989951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.floating(true);assert.strictEqual(event.floating(),true)",
                  "err": {},
                  "uuid": "3a33c2a4-19b3-40ae-832f-516d9b9598f3",
                  "parentUUID": "4489e23e-ffaa-44a3-ad2d-f988d0989951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");e.floating(true);assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "6286a625-3960-43bf-b83f-c2d75f14f4fa",
                  "parentUUID": "4489e23e-ffaa-44a3-ad2d-f988d0989951",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");e.floating(false);assert.strictEqual(e.timezone(),\"Europe/London\")",
                  "err": {},
                  "uuid": "a5da7734-cd9b-409c-82c1-0188a29f9f04",
                  "parentUUID": "4489e23e-ffaa-44a3-ad2d-f988d0989951",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35ff48f8-74a8-4f9b-a777-54938e075874",
                "bb3c3413-9a4e-4c86-8858-a260a60f41d3",
                "3a33c2a4-19b3-40ae-832f-516d9b9598f3",
                "6286a625-3960-43bf-b83f-c2d75f14f4fa",
                "a5da7734-cd9b-409c-82c1-0188a29f9f04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options={count:5,exclude:[moment()],freq:ICalEventRepeatingFreq.MONTHLY,interval:2,until:moment()};const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e.repeating(),null);e.repeating(options);assert.deepStrictEqual(e.repeating(),options);e.repeating(null);assert.deepStrictEqual(e.repeating(),null)",
                  "err": {},
                  "uuid": "25ec6dfc-5e24-4c24-af1a-b57ead157c80",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.repeating(null));assert.deepStrictEqual(e.repeating(),null)",
                  "err": {},
                  "uuid": "f4fb106c-2aea-44ea-8279-d895060a4fbc",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.repeating(null),\"repeating(null)\");assert.deepStrictEqual(e,e.repeating({freq:ICalEventRepeatingFreq.MONTHLY}),\"repeating({freq: 'MONTHLY'})\")",
                  "err": {},
                  "uuid": "fa6073bd-b67d-4f88-ab16-2436eb42296e",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: DAILY, HOURLY, MINUTELY, MONTHLY, SECONDLY, WEEKLY, YEARLY/)",
                  "err": {},
                  "uuid": "70656a87-5eff-4db6-9529-b8ff0018414a",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:\"hello\"},start:moment(),summary:\"test\"},new ICalCalendar)},/must be one of the following/)",
                  "err": {},
                  "uuid": "fd77c86d-7618-4c26-8d90-06bdb3a3d019",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.freq,\"MONTHLY\")",
                  "err": {},
                  "uuid": "a5478a19-3d86-44fb-a5f8-06dc9de1f519",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{count:Infinity,freq:ICalEventRepeatingFreq.DAILY},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.count` must be a finite number!/);assert.throws(function(){new ICalEvent({repeating:{count:\"abc\",freq:ICalEventRepeatingFreq.DAILY},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.count` must be a finite number!/)",
                  "err": {},
                  "uuid": "9819fea9-8de1-4c1e-9557-2ab7b1416efb",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({count:5,freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.count,5)",
                  "err": {},
                  "uuid": "076f9754-1c9d-47bd-99ed-917195b284df",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:Infinity},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.interval` must be a finite number!/);assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:\"abc\"},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.interval` must be a finite number!/)",
                  "err": {},
                  "uuid": "6708fa71-9504-4fe3-9231-dc41bce17c38",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,interval:5});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.interval,5)",
                  "err": {},
                  "uuid": "9c1f6326-3001-45fb-b099-01cc20493227",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,until:null},start:moment(),summary:\"test\"},new ICalCalendar)},/Error: `repeating\\.until` has to be a valid date!/)",
                  "err": {},
                  "uuid": "95159740-111f-4eae-b7f3-e4849c8ce936",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "bde60a0f-95c3-4d8b-bd47-6f1953809a99",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "472292b3-2d70-48f7-ac0e-8b651bedef5a",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\");event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "06ad5a3e-f822-4133-97c7-ef318c2df673",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:3})},/`repeating.until`/,\"Number\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:null})},/`repeating.until`/,\"null\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:NaN})},/`repeating.until`/,\"NaN\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:new Date(\"foo\")})},/`repeating.until`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "51b6ac0d-010c-45a8-b914-75d2a4d25a94",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{byDay:\"FOO\",freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/);assert.throws(function(){new ICalEvent({repeating:{byDay:[\"SU\",\"BAR\",\"th\"],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/);assert.throws(function(){new ICalEvent({repeating:{byDay:[\"SU\",Infinity,\"th\"],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/)",
                  "err": {},
                  "uuid": "58e0ad62-9696-4ab4-a6fe-faa8b7bfd16b",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byDay:[ICalWeekday.SU,ICalWeekday.WE,ICalWeekday.TH],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byDay,[\"SU\",\"WE\",\"TH\"])",
                  "err": {},
                  "uuid": "94cda586-7e0d-4483-95e3-2e9610470a9a",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{byMonth:\"FOO\",freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonth` contains invalid value `FOO`/);assert.throws(function(){new ICalEvent({repeating:{byMonth:[1,14,7],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonth` contains invalid value `14`/)",
                  "err": {},
                  "uuid": "96ba4e39-397a-4884-88ad-f76e825cd4a7",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byMonth:[1,12,7],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byMonth,[1,12,7])",
                  "err": {},
                  "uuid": "35ea352a-a7eb-4854-ade1-32cb43f1eda8",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:\"FOO\",freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `FOO`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:[1,32,-15],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `32`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:[-1,-32,15],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `-32`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:[1,0,15],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `0`/)",
                  "err": {},
                  "uuid": "1821e559-87bc-4ff2-9d32-5bd5ad012ed4",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byMonthDay:[1,15],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byMonthDay,[1,15])",
                  "err": {},
                  "uuid": "62cdd736-0fbe-4933-a06e-4caca3590faa",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[367],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `367`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[-367],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `-367`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[0],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `0`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[\"FOO\"],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `FOO`/)",
                  "err": {},
                  "uuid": "36272589-d514-43bb-8732-c42f3313964a",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{bySetPos:6,freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/)",
                  "err": {},
                  "uuid": "d941f494-af60-4403-80df-bc47eaf121f9",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byDay:[ICalWeekday.SU],bySetPos:[2],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.byDay?.length,1);assert.strictEqual(result.bySetPos?.length,1)",
                  "err": {},
                  "uuid": "5237bfb1-9419-4b1f-b1db-445474955ccb",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],exclude:new Date(\"FOO\"),freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/has to be a valid date/)",
                  "err": {},
                  "uuid": "7b4a2dd1-1b0e-40c7-a3c8-dac068353060",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],exclude:[moment(),new Date(\"BAR\"),\"FOO\"],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/has to be a valid date/)",
                  "err": {},
                  "uuid": "b2cf1e92-2932-4ee6-8e0c-8cf0eddedb09",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],exclude:42,freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.exclude\\[0\\]` has to be a valid date!/)",
                  "err": {},
                  "uuid": "28e63b7e-62bf-49c7-96a5-2be492860bd1",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\");e.repeating({exclude:[date.toJSON(),date.toDate(),date],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.ok(Array.isArray(result.exclude));assert.strictEqual(result.exclude.length,3);assert.deepStrictEqual(result.exclude[0],date.toJSON(),\"String\");assert.deepStrictEqual(result.exclude[1],date.toDate(),\"Date\");assert.deepStrictEqual(result.exclude[2],date,\"Moment\")",
                  "err": {},
                  "uuid": "f28fad99-cab5-425f-afc0-cbe9ca37db5b",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,startOfWeek:\"FOO\"},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/)",
                  "err": {},
                  "uuid": "16ffe5e2-1975-43d1-a8ab-822456e25ac3",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,startOfWeek:ICalWeekday.SU});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.startOfWeek,\"SU\")",
                  "err": {},
                  "uuid": "861bfff4-681e-470f-acd3-47daf8c9e7e8",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=new Date(Date.UTC(2012,1,1,10,30));const e=new ICalEvent({start},new ICalCalendar);const rule=new rrule.RRule({byweekday:[rrule.RRule.MO,rrule.RRule.FR],dtstart:start,freq:rrule.RRule.WEEKLY,interval:5,until:new Date(Date.UTC(2012,12,31))});e.repeating(rule);const result=e.repeating();assert.ok(isRRule(result));assert.deepStrictEqual(result,rule);console.log(e.toString());assert.ok(e.toString().includes(\"RRULE:BYDAY=MO,FR;FREQ=WEEKLY;INTERVAL=5;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "16302a62-0fc0-4346-818f-a0ddc88f0d83",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const rule=\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\";e.repeating(rule);const result=e.repeating();assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "af0bf4c0-dc2a-47bf-98b9-96348a65d8d9",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add RRULE: prefix for single line string if not already there",
                  "fullTitle": "ical-generator Event repeating() should add RRULE: prefix for single line string if not already there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const rule=\"FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\";e.repeating(rule);const result=e.repeating();assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "9d2fb284-3178-4d4d-875c-cd1c252e3acc",
                  "parentUUID": "2e14f31b-aa12-4254-a3d3-fd9a5e145bf4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25ec6dfc-5e24-4c24-af1a-b57ead157c80",
                "f4fb106c-2aea-44ea-8279-d895060a4fbc",
                "fa6073bd-b67d-4f88-ab16-2436eb42296e",
                "70656a87-5eff-4db6-9529-b8ff0018414a",
                "fd77c86d-7618-4c26-8d90-06bdb3a3d019",
                "a5478a19-3d86-44fb-a5f8-06dc9de1f519",
                "9819fea9-8de1-4c1e-9557-2ab7b1416efb",
                "076f9754-1c9d-47bd-99ed-917195b284df",
                "6708fa71-9504-4fe3-9231-dc41bce17c38",
                "9c1f6326-3001-45fb-b099-01cc20493227",
                "95159740-111f-4eae-b7f3-e4849c8ce936",
                "bde60a0f-95c3-4d8b-bd47-6f1953809a99",
                "472292b3-2d70-48f7-ac0e-8b651bedef5a",
                "06ad5a3e-f822-4133-97c7-ef318c2df673",
                "51b6ac0d-010c-45a8-b914-75d2a4d25a94",
                "58e0ad62-9696-4ab4-a6fe-faa8b7bfd16b",
                "94cda586-7e0d-4483-95e3-2e9610470a9a",
                "96ba4e39-397a-4884-88ad-f76e825cd4a7",
                "35ea352a-a7eb-4854-ade1-32cb43f1eda8",
                "1821e559-87bc-4ff2-9d32-5bd5ad012ed4",
                "62cdd736-0fbe-4933-a06e-4caca3590faa",
                "36272589-d514-43bb-8732-c42f3313964a",
                "d941f494-af60-4403-80df-bc47eaf121f9",
                "5237bfb1-9419-4b1f-b1db-445474955ccb",
                "7b4a2dd1-1b0e-40c7-a3c8-dac068353060",
                "b2cf1e92-2932-4ee6-8e0c-8cf0eddedb09",
                "28e63b7e-62bf-49c7-96a5-2be492860bd1",
                "f28fad99-cab5-425f-afc0-cbe9ca37db5b",
                "16ffe5e2-1975-43d1-a8ab-822456e25ac3",
                "861bfff4-681e-470f-acd3-47daf8c9e7e8",
                "16302a62-0fc0-4346-818f-a0ddc88f0d83",
                "af0bf4c0-dc2a-47bf-98b9-96348a65d8d9",
                "9d2fb284-3178-4d4d-875c-cd1c252e3acc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f088d763-cf85-4f71-9955-6edc93b72322",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.summary(),\"\");e.summary(\"Testevent\");assert.strictEqual(e.summary(),\"Testevent\")",
                  "err": {},
                  "uuid": "ec6542e1-2719-4d46-9d78-8ac42f34e0f5",
                  "parentUUID": "f088d763-cf85-4f71-9955-6edc93b72322",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.summary(\"\"));assert.deepStrictEqual(e,e.summary(\"Testevent\"))",
                  "err": {},
                  "uuid": "76f12d61-063d-4c18-867b-91501e1adfe9",
                  "parentUUID": "f088d763-cf85-4f71-9955-6edc93b72322",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.summary(\"Example Event II\");assert.strictEqual(event.summary(),\"Example Event II\");event.summary(\"\");assert.strictEqual(event.summary(),\"\")",
                  "err": {},
                  "uuid": "0b7907c5-b696-4f46-b3d8-f5222a085e30",
                  "parentUUID": "f088d763-cf85-4f71-9955-6edc93b72322",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec6542e1-2719-4d46-9d78-8ac42f34e0f5",
                "76f12d61-063d-4c18-867b-91501e1adfe9",
                "0b7907c5-b696-4f46-b3d8-f5222a085e30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc941e2a-1669-40fa-827c-06df0a522c75",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.location(),null);e.location(\"Test Location\");assert.deepStrictEqual(e.location(),{title:\"Test Location\"});e.location(null);assert.strictEqual(e.location(),null)",
                  "err": {},
                  "uuid": "59d0ed0e-f8b5-4a60-8cea-3138f36c6391",
                  "parentUUID": "cc941e2a-1669-40fa-827c-06df0a522c75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.location(),null);e.location({geo:{lat:44.5,lon:-3.4},title:\"Foo\"});const location=e.location();assert.ok(location);assert.ok(\"title\"in location);assert.deepStrictEqual(location?.title,\"Foo\");assert.deepStrictEqual(location?.geo,{lat:44.5,lon:-3.4});e.location(null);assert.strictEqual(e.location(),null)",
                  "err": {},
                  "uuid": "0987c292-64a3-4c61-aead-747fb7116bbb",
                  "parentUUID": "cc941e2a-1669-40fa-827c-06df0a522c75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.location(null));assert.deepStrictEqual(e,e.location(\"Test Location\"))",
                  "err": {},
                  "uuid": "9f55a28a-7f02-424d-a04f-bf1c609df1f1",
                  "parentUUID": "cc941e2a-1669-40fa-827c-06df0a522c75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.location(\"Europa-Park\");const location=event.location();assert.ok(location);assert.ok(\"title\"in location);assert.strictEqual(location?.title,\"Europa-Park\")",
                  "err": {},
                  "uuid": "2a90783c-a5f3-4574-8d5d-7a85f49f948f",
                  "parentUUID": "cc941e2a-1669-40fa-827c-06df0a522c75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);assert.throws(()=>event.location({geo:3}),/`location` isn't formatted correctly/i);assert.throws(()=>event.location({}),/`location` isn't formatted correctly/i)",
                  "err": {},
                  "uuid": "2ecc2a8a-6be6-41c9-94fa-aa55290ac929",
                  "parentUUID": "cc941e2a-1669-40fa-827c-06df0a522c75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59d0ed0e-f8b5-4a60-8cea-3138f36c6391",
                "0987c292-64a3-4c61-aead-747fb7116bbb",
                "9f55a28a-7f02-424d-a04f-bf1c609df1f1",
                "2a90783c-a5f3-4574-8d5d-7a85f49f948f",
                "2ecc2a8a-6be6-41c9-94fa-aa55290ac929"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d93b680-39a4-4d7e-9023-a6daa2ff9f9a",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.description(),null);e.description(\"I don't need a description. I'm far to awesome for descriptions\\u2026\");assert.deepStrictEqual(e.description(),{plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\"});e.description({html:\"I don't need a description.<br />I'm far to awesome for descriptions\\u2026\",plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\"});assert.deepStrictEqual(e.description(),{html:\"I don't need a description.<br />I'm far to awesome for descriptions\\u2026\",plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\"});e.description(null);assert.strictEqual(e.description(),null)",
                  "err": {},
                  "uuid": "b25a5c50-91ee-4966-8f47-841760ea0bf9",
                  "parentUUID": "3d93b680-39a4-4d7e-9023-a6daa2ff9f9a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.description(null));assert.deepStrictEqual(e,e.description(\"I don't need a description. I'm far to awesome for descriptions\\u2026\"))",
                  "err": {},
                  "uuid": "d6d8b41a-454d-4f86-993e-44cf2f6c368b",
                  "parentUUID": "3d93b680-39a4-4d7e-9023-a6daa2ff9f9a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.description(\"Well. But other people need descriptions\\u2026 :/\");assert.deepStrictEqual(event.description(),{plain:\"Well. But other people need descriptions\\u2026 :/\"});event.description({html:\"<marquee>I'm the best HTML tag in this universe!</marquee>\",plain:\"I am uncool text.\"});assert.ok(event.toString().includes(\"<marquee>I'm the best HTML tag in this universe!</marquee>\"))",
                  "err": {},
                  "uuid": "4cf334b0-becc-4c3b-b018-89aa8c6df9ea",
                  "parentUUID": "3d93b680-39a4-4d7e-9023-a6daa2ff9f9a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b25a5c50-91ee-4966-8f47-841760ea0bf9",
                "d6d8b41a-454d-4f86-993e-44cf2f6c368b",
                "4cf334b0-becc-4c3b-b018-89aa8c6df9ea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cf075e17-2aa9-49c2-8499-59993478339c",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.organizer(),null);e.organizer(null);assert.strictEqual(e.organizer(),null);e.organizer({email:\"mail@example.com\",name:\"Sebastian Pekarek\"});assert.strictEqual(\"Sebastian Pekarek\",e.organizer()?.name);assert.strictEqual(\"mail@example.com\",e.organizer()?.email);e.organizer({email:\"mail@example.com\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\"});assert.strictEqual(\"Sebastian Pekarek\",e.organizer()?.name);assert.strictEqual(\"mail@example.com\",e.organizer()?.email);assert.strictEqual(\"mail2@example2.com\",e.organizer()?.mailto)",
                  "err": {},
                  "uuid": "dbd236e3-bfee-4112-aec0-d31dee07ae73",
                  "parentUUID": "cf075e17-2aa9-49c2-8499-59993478339c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.organizer(null));assert.deepStrictEqual(e,e.organizer(\"Sebastian Pekarek <mail@example.com>\"))",
                  "err": {},
                  "uuid": "be5f79f0-6dfc-49d0-b1cf-d15d98271fc3",
                  "parentUUID": "cf075e17-2aa9-49c2-8499-59993478339c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({email:\"mail@example.com\",name:\"Sebastian Pekarek\"});assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",mailto:void 0,name:\"Sebastian Pekarek\",sentBy:void 0});event.organizer({email:\"mail@example.com\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\"});assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\",sentBy:void 0})",
                  "err": {},
                  "uuid": "f3a7416c-e815-481c-aca4-362c8149a21d",
                  "parentUUID": "cf075e17-2aa9-49c2-8499-59993478339c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({email:\"mail@example.com\",name:\"Sebastian Pekarek\",sentBy:\"bot@example.com\"});assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",mailto:void 0,name:\"Sebastian Pekarek\",sentBy:\"bot@example.com\"})",
                  "err": {},
                  "uuid": "4a7f746b-373e-4960-9bc9-b241e1961823",
                  "parentUUID": "cf075e17-2aa9-49c2-8499-59993478339c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer(\"Sebastian Pekarek <mail@example.com>\");assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",name:\"Sebastian Pekarek\"})",
                  "err": {},
                  "uuid": "7a9359e4-d223-4ffe-a9e2-f99b65223361",
                  "parentUUID": "cf075e17-2aa9-49c2-8499-59993478339c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer(\"foo bar\")},/`organizer`/)",
                  "err": {},
                  "uuid": "5417f428-53dd-4510-9784-f2ee6504ed91",
                  "parentUUID": "cf075e17-2aa9-49c2-8499-59993478339c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer({email:\"foo\"})},/`organizer\\.name`/)",
                  "err": {},
                  "uuid": "3850add6-c085-4213-b0ad-7221eadadca8",
                  "parentUUID": "cf075e17-2aa9-49c2-8499-59993478339c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer(Infinity)},/`organizer`/);assert.throws(function(){e.organizer(NaN)},/`organizer`/)",
                  "err": {},
                  "uuid": "8849a944-291e-434d-99b6-e053588bf9d6",
                  "parentUUID": "cf075e17-2aa9-49c2-8499-59993478339c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({name:\"Sebastian Pekarek\"});assert.deepStrictEqual(event.organizer(),{email:void 0,mailto:void 0,name:\"Sebastian Pekarek\",sentBy:void 0})",
                  "err": {},
                  "uuid": "95585a8e-e8bf-4cdd-947d-7c575cc342bb",
                  "parentUUID": "cf075e17-2aa9-49c2-8499-59993478339c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include a : (PR #610)",
                  "fullTitle": "ical-generator Event organizer() should include a : (PR #610)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({organizer:{name:\"Some Guy\"},start:moment(),summary:\"Example Event\"},new ICalCalendar);assert.ok(event.toString().includes('ORGANIZER;CN=\"Some Guy\":'))",
                  "err": {},
                  "uuid": "b2ea3a70-a5e6-4275-a1ee-3d8d6b4262a5",
                  "parentUUID": "cf075e17-2aa9-49c2-8499-59993478339c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbd236e3-bfee-4112-aec0-d31dee07ae73",
                "be5f79f0-6dfc-49d0-b1cf-d15d98271fc3",
                "f3a7416c-e815-481c-aca4-362c8149a21d",
                "4a7f746b-373e-4960-9bc9-b241e1961823",
                "7a9359e4-d223-4ffe-a9e2-f99b65223361",
                "5417f428-53dd-4510-9784-f2ee6504ed91",
                "3850add6-c085-4213-b0ad-7221eadadca8",
                "8849a944-291e-434d-99b6-e053588bf9d6",
                "95585a8e-e8bf-4cdd-947d-7c575cc342bb",
                "b2ea3a70-a5e6-4275-a1ee-3d8d6b4262a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "78c3c9e6-c50e-4bee-a40c-ee99636ad97a",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({email:\"mail@example.com\"},event);assert.strictEqual(event.createAttendee(attendee),attendee,\"createAttendee returns attendee\");assert.deepStrictEqual(event.attendees()[0],attendee,\"attendee pushed\")",
                  "err": {},
                  "uuid": "f597be8f-e2a0-4df8-ba6f-a19ff0c87361",
                  "parentUUID": "78c3c9e6-c50e-4bee-a40c-ee99636ad97a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createAttendee({email:\"mail@example.com\"})instanceof ICalAttendee);assert.strictEqual(event.attendees.length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "dc08ed4a-cb2c-440a-b11d-cd022ffd4ebb",
                  "parentUUID": "78c3c9e6-c50e-4bee-a40c-ee99636ad97a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=event.createAttendee(\"Zac <zac@example.com>\");assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(event.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "a011d381-2e27-4daf-8e6d-1fbcd894fb0f",
                  "parentUUID": "78c3c9e6-c50e-4bee-a40c-ee99636ad97a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.createAttendee(\"foo bar\")},/isn't formated correctly/)",
                  "err": {},
                  "uuid": "ccae5895-a868-4332-a4bd-22bb346a874a",
                  "parentUUID": "78c3c9e6-c50e-4bee-a40c-ee99636ad97a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=event.createAttendee({email:\"zac@example.com\",name:\"Zac\"});assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(event.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "2d7f40b2-16f6-4246-b181-6227bcdcecb8",
                  "parentUUID": "78c3c9e6-c50e-4bee-a40c-ee99636ad97a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f597be8f-e2a0-4df8-ba6f-a19ff0c87361",
                "dc08ed4a-cb2c-440a-b11d-cd022ffd4ebb",
                "a011d381-2e27-4daf-8e6d-1fbcd894fb0f",
                "ccae5895-a868-4332-a4bd-22bb346a874a",
                "2d7f40b2-16f6-4246-b181-6227bcdcecb8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37879288-8ece-428b-b456-82fd2085f188",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.attendees().length,0);const attendee=event.createAttendee({email:\"mail@example.com\"});assert.strictEqual(event.attendees().length,1);assert.deepStrictEqual(event.attendees()[0],attendee)",
                  "err": {},
                  "uuid": "8e87c7d4-f8b4-4edf-9270-17ec8bb2f237",
                  "parentUUID": "37879288-8ece-428b-b456-82fd2085f188",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.attendees([{email:\"a@example.com\",name:\"Person A\"},{email:\"b@example.com\",name:\"Person B\"}]);assert.strictEqual(event.attendees().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "3fd815f0-9598-4fda-baec-e29337112ab1",
                  "parentUUID": "37879288-8ece-428b-b456-82fd2085f188",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e87c7d4-f8b4-4edf-9270-17ec8bb2f237",
                "3fd815f0-9598-4fda-baec-e29337112ab1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a5fd714c-bf69-4099-ab39-9c0fb304810a",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createAlarm({trigger:60*10,type:ICalAlarmType.display})instanceof ICalAlarm)",
                  "err": {},
                  "uuid": "7e56a945-6181-46f5-91c5-bec2a8ef2549",
                  "parentUUID": "a5fd714c-bf69-4099-ab39-9c0fb304810a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const alarm=event.createAlarm({trigger:60*10,type:ICalAlarmType.audio});assert.strictEqual(alarm.type(),\"audio\")",
                  "err": {},
                  "uuid": "60232695-b448-4f77-9efa-9145be90c1e0",
                  "parentUUID": "a5fd714c-bf69-4099-ab39-9c0fb304810a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e56a945-6181-46f5-91c5-bec2a8ef2549",
                "60232695-b448-4f77-9efa-9145be90c1e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5f410b47-5f1f-4df1-9c40-3b8319183ec6",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.alarms().length,0);const alarm=event.createAlarm({trigger:600,type:ICalAlarmType.display});assert.strictEqual(event.alarms().length,1);assert.deepStrictEqual(event.alarms()[0],alarm)",
                  "err": {},
                  "uuid": "79cc3a54-00e8-43e0-806b-f09fc8fd1cd5",
                  "parentUUID": "5f410b47-5f1f-4df1-9c40-3b8319183ec6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.alarms([{trigger:60,type:ICalAlarmType.audio},{trigger:600,type:ICalAlarmType.display}]);assert.strictEqual(event.alarms().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "cb80e5a2-ab65-4089-ba2c-da5ce3c00d69",
                  "parentUUID": "5f410b47-5f1f-4df1-9c40-3b8319183ec6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79cc3a54-00e8-43e0-806b-f09fc8fd1cd5",
                "cb80e5a2-ab65-4089-ba2c-da5ce3c00d69"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1f795fde-250d-4f4a-977d-b6680c33884e",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createCategory({name:\"Test\"})instanceof ICalCategory)",
                  "err": {},
                  "uuid": "8cb9ce46-4edc-4dcb-a5c7-fcb792431e16",
                  "parentUUID": "1f795fde-250d-4f4a-977d-b6680c33884e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const category=event.createCategory({name:\"foo\"});assert.strictEqual(category.name(),\"foo\")",
                  "err": {},
                  "uuid": "8ddcde78-057e-4f69-ae07-3fe079f35bb0",
                  "parentUUID": "1f795fde-250d-4f4a-977d-b6680c33884e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cb9ce46-4edc-4dcb-a5c7-fcb792431e16",
                "8ddcde78-057e-4f69-ae07-3fe079f35bb0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa2887e3-3cfe-4bbd-9694-c14d6513de13",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.categories().length,0);const category=event.createCategory({name:\"Test\"});assert.strictEqual(event.categories().length,1);assert.deepStrictEqual(event.categories()[0],category)",
                  "err": {},
                  "uuid": "f0a37986-9ee1-4000-b4b4-dfb500953fdc",
                  "parentUUID": "aa2887e3-3cfe-4bbd-9694-c14d6513de13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.categories([{name:\"foo\"},{name:\"bar\"}]);assert.strictEqual(event.categories().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "ee8cb187-1075-44cc-a06c-2d1fe42b43f5",
                  "parentUUID": "aa2887e3-3cfe-4bbd-9694-c14d6513de13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0a37986-9ee1-4000-b4b4-dfb500953fdc",
                "ee8cb187-1075-44cc-a06c-2d1fe42b43f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77a2a67b-8629-4d13-b113-9a2eb3ae137e",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.status(),null);event.status(ICalEventStatus.CONFIRMED);assert.strictEqual(event.status(),\"CONFIRMED\");event.status(null);assert.strictEqual(event.status(),null)",
                  "err": {},
                  "uuid": "8b650bd3-5c11-4538-b7c7-0fcf550005f1",
                  "parentUUID": "77a2a67b-8629-4d13-b113-9a2eb3ae137e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.status(null));assert.deepStrictEqual(e,e.status(ICalEventStatus.CONFIRMED))",
                  "err": {},
                  "uuid": "87a5c695-051a-40b6-9bcc-44650cc57367",
                  "parentUUID": "77a2a67b-8629-4d13-b113-9a2eb3ae137e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.status(ICalEventStatus.CONFIRMED);e.status(null);assert.strictEqual(e.status(),null)",
                  "err": {},
                  "uuid": "adae5260-49fb-4cf1-8938-679f29cfba50",
                  "parentUUID": "77a2a67b-8629-4d13-b113-9a2eb3ae137e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.status(ICalEventStatus.CONFIRMED);assert.strictEqual(e.status(),\"CONFIRMED\");assert.strictEqual(e.status(),ICalEventStatus.CONFIRMED)",
                  "err": {},
                  "uuid": "0f34089a-8985-4445-a4b2-5e89cb45d66d",
                  "parentUUID": "77a2a67b-8629-4d13-b113-9a2eb3ae137e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.status(\"COOKING\")},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/);assert.throws(function(){e.status(Infinity)},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/);assert.throws(function(){e.status(NaN)},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/);assert.throws(function(){e.status(-1)},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/)",
                  "err": {},
                  "uuid": "8a424342-490e-4cb9-b644-16e8192dfaa8",
                  "parentUUID": "77a2a67b-8629-4d13-b113-9a2eb3ae137e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b650bd3-5c11-4538-b7c7-0fcf550005f1",
                "87a5c695-051a-40b6-9bcc-44650cc57367",
                "adae5260-49fb-4cf1-8938-679f29cfba50",
                "0f34089a-8985-4445-a4b2-5e89cb45d66d",
                "8a424342-490e-4cb9-b644-16e8192dfaa8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6376ed54-756a-4e3a-a7c2-8be135a214cc",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.busystatus(),null);event.busystatus(ICalEventBusyStatus.BUSY);assert.strictEqual(event.busystatus(),\"BUSY\");event.busystatus(null);assert.strictEqual(event.busystatus(),null)",
                  "err": {},
                  "uuid": "29dcf88f-472c-46f6-b450-5ae540e43220",
                  "parentUUID": "6376ed54-756a-4e3a-a7c2-8be135a214cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.busystatus(null));assert.deepStrictEqual(e,e.busystatus(ICalEventBusyStatus.BUSY))",
                  "err": {},
                  "uuid": "bb583c2f-c8d2-433d-a670-adbd4a9a5351",
                  "parentUUID": "6376ed54-756a-4e3a-a7c2-8be135a214cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.busystatus(ICalEventBusyStatus.BUSY);e.busystatus(null);assert.strictEqual(e.busystatus(),null)",
                  "err": {},
                  "uuid": "b8688c22-c9a0-4f16-86ba-070a197833ae",
                  "parentUUID": "6376ed54-756a-4e3a-a7c2-8be135a214cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.busystatus(ICalEventBusyStatus.BUSY);assert.strictEqual(e.busystatus(),\"BUSY\")",
                  "err": {},
                  "uuid": "d30fdf3f-5753-45f0-b857-a73dc27a9a8c",
                  "parentUUID": "6376ed54-756a-4e3a-a7c2-8be135a214cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.busystatus(\"COOKING\")},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/);assert.throws(function(){e.busystatus(Infinity)},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/);assert.throws(function(){e.busystatus(NaN)},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/);assert.throws(function(){e.busystatus(-1)},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/)",
                  "err": {},
                  "uuid": "dbfabc11-8a28-482b-b92b-a23cc5d79ae7",
                  "parentUUID": "6376ed54-756a-4e3a-a7c2-8be135a214cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29dcf88f-472c-46f6-b450-5ae540e43220",
                "bb583c2f-c8d2-433d-a670-adbd4a9a5351",
                "b8688c22-c9a0-4f16-86ba-070a197833ae",
                "d30fdf3f-5753-45f0-b857-a73dc27a9a8c",
                "dbfabc11-8a28-482b-b92b-a23cc5d79ae7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "45de67b2-b71f-4a76-baf0-093451443a9e",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.priority(),null);e.priority(5);assert.strictEqual(e.priority(),5)",
                  "err": {},
                  "uuid": "7c04da04-58eb-44a8-a439-73b6da6d167f",
                  "parentUUID": "45de67b2-b71f-4a76-baf0-093451443a9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.priority(null));assert.deepStrictEqual(e,e.priority(5))",
                  "err": {},
                  "uuid": "0d406266-07b1-4c8b-a79b-0ecf17534b13",
                  "parentUUID": "45de67b2-b71f-4a76-baf0-093451443a9e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.priority(5);assert.strictEqual(event.priority(),5);assert.ok(event.toString().includes(\"PRIORITY:5\"))",
                  "err": {},
                  "uuid": "5d7c05ad-28d5-4ce4-ab2b-0e8db24fc13b",
                  "parentUUID": "45de67b2-b71f-4a76-baf0-093451443a9e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c04da04-58eb-44a8-a439-73b6da6d167f",
                "0d406266-07b1-4c8b-a79b-0ecf17534b13",
                "5d7c05ad-28d5-4ce4-ab2b-0e8db24fc13b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a59a370f-3bf4-4be8-b63b-7a45409070de",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.url(),null);e.url(\"http://sebbo.net/\");assert.strictEqual(e.url(),\"http://sebbo.net/\")",
                  "err": {},
                  "uuid": "a448af24-fcdd-4df1-8d61-669994c49ec8",
                  "parentUUID": "a59a370f-3bf4-4be8-b63b-7a45409070de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.url(null));assert.deepStrictEqual(e,e.url(\"http://sebbo.net/\"))",
                  "err": {},
                  "uuid": "a3095d8e-2e2d-4722-9838-64db386cc657",
                  "parentUUID": "a59a370f-3bf4-4be8-b63b-7a45409070de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.url(\"http://github.com/sebbo2002/ical-generator\");assert.strictEqual(event.url(),\"http://github.com/sebbo2002/ical-generator\")",
                  "err": {},
                  "uuid": "8d8f47ea-964b-45c0-bcc5-9e498d27c125",
                  "parentUUID": "a59a370f-3bf4-4be8-b63b-7a45409070de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a448af24-fcdd-4df1-8d61-669994c49ec8",
                "a3095d8e-2e2d-4722-9838-64db386cc657",
                "8d8f47ea-964b-45c0-bcc5-9e498d27c125"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13dce23d-eed5-4038-88bb-d95d69b323e8",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event.createAttachment(\"https://files.sebbo.net/calendar/attachments/foo\"),event)",
                  "err": {},
                  "uuid": "f67dcba2-b117-4d34-bcad-2a1abb39f997",
                  "parentUUID": "13dce23d-eed5-4038-88bb-d95d69b323e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f67dcba2-b117-4d34-bcad-2a1abb39f997"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e3d1053-1c53-4623-bcfd-165c3993db22",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.attachments().length,0);event.createAttachment(\"https://files.sebbo.net/calendar/attachments/foo\");assert.strictEqual(event.attachments().length,1);assert.deepStrictEqual(typeof event.attachments()[0],\"string\")",
                  "err": {},
                  "uuid": "540cfec1-07d6-4aa9-8757-dcb8e17ff7af",
                  "parentUUID": "2e3d1053-1c53-4623-bcfd-165c3993db22",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.attachments([\"https://files.sebbo.net/calendar/attachments/foo\",\"https://files.sebbo.net/calendar/attachments/bar\"]);assert.strictEqual(event.attachments().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "9d89b202-815c-4c7d-b6d6-b0610c8daddb",
                  "parentUUID": "2e3d1053-1c53-4623-bcfd-165c3993db22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "540cfec1-07d6-4aa9-8757-dcb8e17ff7af",
                "9d89b202-815c-4c7d-b6d6-b0610c8daddb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "01722435-00b3-4673-8322-e455bd95ceac",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.created(new Date))",
                  "err": {},
                  "uuid": "3a188ac3-5337-4d9d-bfc6-58f8d09495b3",
                  "parentUUID": "01722435-00b3-4673-8322-e455bd95ceac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(moment());assert.ok(moment.isMoment(e.created()))",
                  "err": {},
                  "uuid": "3b41a946-4692-4359-aa87-867a50e4e77b",
                  "parentUUID": "01722435-00b3-4673-8322-e455bd95ceac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(new Date);assert.ok(e.created()instanceof Date)",
                  "err": {},
                  "uuid": "2f3f5219-17d7-4789-8760-50f091e30387",
                  "parentUUID": "01722435-00b3-4673-8322-e455bd95ceac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(moment().toJSON());assert.strictEqual(typeof e.created(),\"string\")",
                  "err": {},
                  "uuid": "82a93016-3ca2-4613-9f0e-b02334f13233",
                  "parentUUID": "01722435-00b3-4673-8322-e455bd95ceac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(new Date);assert.ok(e.created()instanceof Date)",
                  "err": {},
                  "uuid": "80ea7393-5bf9-4401-873c-d5f626569ecf",
                  "parentUUID": "01722435-00b3-4673-8322-e455bd95ceac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=new Date;const e=new ICalEvent({start:new Date},new ICalCalendar).created(now);assert.deepStrictEqual(e.created()?.valueOf(),now.getTime())",
                  "err": {},
                  "uuid": "31aa9cc1-f32f-4a59-bbc4-85aa47b96fef",
                  "parentUUID": "01722435-00b3-4673-8322-e455bd95ceac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.created(\"hallo\")},/`created`/)",
                  "err": {},
                  "uuid": "96e629be-fca3-4e31-8e90-661b7077fc18",
                  "parentUUID": "01722435-00b3-4673-8322-e455bd95ceac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a188ac3-5337-4d9d-bfc6-58f8d09495b3",
                "3b41a946-4692-4359-aa87-867a50e4e77b",
                "2f3f5219-17d7-4789-8760-50f091e30387",
                "82a93016-3ca2-4613-9f0e-b02334f13233",
                "80ea7393-5bf9-4401-873c-d5f626569ecf",
                "31aa9cc1-f32f-4a59-bbc4-85aa47b96fef",
                "96e629be-fca3-4e31-8e90-661b7077fc18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad9fd562-2410-4ed1-b270-8aa138c502ee",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.lastModified(new Date))",
                  "err": {},
                  "uuid": "a4b31549-c6d6-4bb0-8037-719b94da31ee",
                  "parentUUID": "ad9fd562-2410-4ed1-b270-8aa138c502ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(moment());assert.ok(moment.isMoment(e.lastModified()))",
                  "err": {},
                  "uuid": "d1a47641-3953-4d75-b885-cd9edef38eaa",
                  "parentUUID": "ad9fd562-2410-4ed1-b270-8aa138c502ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(new Date);assert.ok(e.lastModified()instanceof Date)",
                  "err": {},
                  "uuid": "380d395c-15e8-4c0e-8d6d-df481a5c740c",
                  "parentUUID": "ad9fd562-2410-4ed1-b270-8aa138c502ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().toJSON();e.lastModified(date);assert.strictEqual(e.lastModified(),date)",
                  "err": {},
                  "uuid": "b9bd0a59-182b-4d1a-9e82-92a9f11203cc",
                  "parentUUID": "ad9fd562-2410-4ed1-b270-8aa138c502ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(new Date);assert.ok(e.lastModified()instanceof Date)",
                  "err": {},
                  "uuid": "71bb1f36-af4e-4b88-a619-9805dc2cfdf1",
                  "parentUUID": "ad9fd562-2410-4ed1-b270-8aa138c502ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=new Date;const e=new ICalEvent({start:new Date},new ICalCalendar).lastModified(now);assert.deepStrictEqual(e.lastModified()?.valueOf(),now.getTime())",
                  "err": {},
                  "uuid": "0d7beafa-af02-4058-b3d7-b70d419c22a7",
                  "parentUUID": "ad9fd562-2410-4ed1-b270-8aa138c502ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.lastModified(\"hallo\")},/`lastModified`/)",
                  "err": {},
                  "uuid": "ca726b91-f574-4e32-9bc0-114f80485fc4",
                  "parentUUID": "ad9fd562-2410-4ed1-b270-8aa138c502ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4b31549-c6d6-4bb0-8037-719b94da31ee",
                "d1a47641-3953-4d75-b885-cd9edef38eaa",
                "380d395c-15e8-4c0e-8d6d-df481a5c740c",
                "b9bd0a59-182b-4d1a-9e82-92a9f11203cc",
                "71bb1f36-af4e-4b88-a619-9805dc2cfdf1",
                "0d7beafa-af02-4058-b3d7-b70d419c22a7",
                "ca726b91-f574-4e32-9bc0-114f80485fc4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22ab8d0f-5500-4a6f-a240-55e33fba5cf2",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.class(),null);event.class(ICalEventClass.PRIVATE);assert.strictEqual(event.class(),\"PRIVATE\");event.class(null);assert.strictEqual(event.class(),null)",
                  "err": {},
                  "uuid": "3c5a3445-24c2-4719-9aac-f390201efb4e",
                  "parentUUID": "22ab8d0f-5500-4a6f-a240-55e33fba5cf2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.class(null));assert.deepStrictEqual(e,e.class(ICalEventClass.PRIVATE))",
                  "err": {},
                  "uuid": "c4083d67-f6a1-4e9d-b4ee-39ee2790877e",
                  "parentUUID": "22ab8d0f-5500-4a6f-a240-55e33fba5cf2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.class(ICalEventClass.PRIVATE);e.class(null);assert.strictEqual(e.class(),null)",
                  "err": {},
                  "uuid": "a90649af-429e-4cd7-b4fd-089e7a8605c8",
                  "parentUUID": "22ab8d0f-5500-4a6f-a240-55e33fba5cf2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.class(ICalEventClass.PRIVATE);assert.strictEqual(e.class(),\"PRIVATE\");assert.strictEqual(e.class(),ICalEventClass.PRIVATE)",
                  "err": {},
                  "uuid": "e784d12b-2b7f-4225-b368-22f8dc47774a",
                  "parentUUID": "22ab8d0f-5500-4a6f-a240-55e33fba5cf2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.class(\"COOKING\")},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/);assert.throws(function(){e.class(Infinity)},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/);assert.throws(function(){e.class(NaN)},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/);assert.throws(function(){e.class(-1)},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/)",
                  "err": {},
                  "uuid": "8edb00a7-26e5-46f5-ab8b-f6566b989aaf",
                  "parentUUID": "22ab8d0f-5500-4a6f-a240-55e33fba5cf2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c5a3445-24c2-4719-9aac-f390201efb4e",
                "c4083d67-f6a1-4e9d-b4ee-39ee2790877e",
                "a90649af-429e-4cd7-b4fd-089e7a8605c8",
                "e784d12b-2b7f-4225-b368-22f8dc47774a",
                "8edb00a7-26e5-46f5-ab8b-f6566b989aaf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95c77ce9-3076-4ff7-8edb-b58b16db53a1",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "6305f101-caf8-4cd8-8f27-f4ca950ed5b1",
                  "parentUUID": "95c77ce9-3076-4ff7-8edb-b58b16db53a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6305f101-caf8-4cd8-8f27-f4ca950ed5b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6917899e-e6f6-4882-bd86-3e9068df8b9b",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=moment().add(1,\"month\");const event=new ICalEvent({start:new Date},new ICalCalendar).summary(\"foo\").start(date);assert.strictEqual(event.toJSON().summary,\"foo\",\"summary is okay\");assert.deepStrictEqual(event.toJSON().start,date.toJSON(),\"start is okay\");assert.strictEqual(typeof event.toJSON().start,\"string\",\"start is string\")",
                  "err": {},
                  "uuid": "72a26633-7c32-47f2-a286-85cc3c77fba0",
                  "parentUUID": "6917899e-e6f6-4882-bd86-3e9068df8b9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;const rule=new rrule.RRule({byweekday:[rrule.RRule.MO,rrule.RRule.FR],dtstart:date,freq:rrule.RRule.WEEKLY,interval:5,until:new Date(Date.UTC(2012,12,31))});const event=new ICalEvent({start:new Date},new ICalCalendar).summary(\"foo\").start(date).repeating(rule);const json=event.toJSON();const before=event.toString();assert.ok(typeof json.repeating===\"string\");const event2=new ICalEvent(event.toJSON(),new ICalCalendar);const after=event2.toString();assert.strictEqual(after,before)",
                  "err": {},
                  "uuid": "8dbaeaf2-18d0-4b6a-b75b-3806d6a8e8bf",
                  "parentUUID": "6917899e-e6f6-4882-bd86-3e9068df8b9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalEvent({start:new Date},new ICalCalendar);new ICalEvent(a.toJSON(),new ICalCalendar)",
                  "err": {},
                  "uuid": "42003af0-cc89-4327-bda3-3ee8c1bae7ad",
                  "parentUUID": "6917899e-e6f6-4882-bd86-3e9068df8b9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72a26633-7c32-47f2-a286-85cc3c77fba0",
                "8dbaeaf2-18d0-4b6a-b75b-3806d6a8e8bf",
                "42003af0-cc89-4327-bda3-3ee8c1bae7ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd0032ed-c9ac-4c9a-a1cc-420e0cf528f8",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.transparency(),null);event.transparency(ICalEventTransparency.OPAQUE);assert.strictEqual(event.transparency(),\"OPAQUE\");event.transparency(null);assert.strictEqual(event.transparency(),null)",
                  "err": {},
                  "uuid": "550fefe1-94cc-48a8-a74f-226123c0681e",
                  "parentUUID": "fd0032ed-c9ac-4c9a-a1cc-420e0cf528f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.transparency(null));assert.deepStrictEqual(e,e.transparency(ICalEventTransparency.TRANSPARENT))",
                  "err": {},
                  "uuid": "b26e6b47-7630-43e1-82b9-346a1dcccd58",
                  "parentUUID": "fd0032ed-c9ac-4c9a-a1cc-420e0cf528f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.transparency(ICalEventTransparency.OPAQUE);e.transparency(null);assert.strictEqual(e.transparency(),null)",
                  "err": {},
                  "uuid": "11e87d2c-9f51-4bfc-974c-5b9c6c6ed706",
                  "parentUUID": "fd0032ed-c9ac-4c9a-a1cc-420e0cf528f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.transparency(ICalEventTransparency.OPAQUE);assert.strictEqual(e.transparency(),\"OPAQUE\")",
                  "err": {},
                  "uuid": "9e76828b-4fa5-49f6-8606-37d6516e25ac",
                  "parentUUID": "fd0032ed-c9ac-4c9a-a1cc-420e0cf528f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.transparency(\"COOKING\")},/Input must be one of the following: OPAQUE, TRANSPARENT/);assert.throws(function(){e.transparency(Infinity)},/Input must be one of the following: OPAQUE, TRANSPARENT/);assert.throws(function(){e.transparency(-1)},/Input must be one of the following: OPAQUE, TRANSPARENT/)",
                  "err": {},
                  "uuid": "9aa684dc-cf43-40d4-8bb6-6b43497e1a42",
                  "parentUUID": "fd0032ed-c9ac-4c9a-a1cc-420e0cf528f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "550fefe1-94cc-48a8-a74f-226123c0681e",
                "b26e6b47-7630-43e1-82b9-346a1dcccd58",
                "11e87d2c-9f51-4bfc-974c-5b9c6c6ed706",
                "9e76828b-4fa5-49f6-8606-37d6516e25ac",
                "9aa684dc-cf43-40d4-8bb6-6b43497e1a42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de98b078-e134-48de-80d4-0cd64363a988",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Hel\\\\\\\\lo\\nW;orl,d\"},new ICalCalendar);assert.ok(e.toString().indexOf(\"Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d\")>-1)",
                  "err": {},
                  "uuid": "46cd4565-e59b-46a9-8dc9-9e0782be84f4",
                  "parentUUID": "de98b078-e134-48de-80d4-0cd64363a988",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const event=new ICalEvent({id:42,start:moment(),summary:\":)\"},cal);assert.ok(event.toString().indexOf(\"UID:42\\r\")>-1)",
                  "err": {},
                  "uuid": "b14931e2-e87a-4def-962c-bb5bfbf43f5d",
                  "parentUUID": "de98b078-e134-48de-80d4-0cd64363a988",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;let event=new ICalEvent({end:moment(),repeating:{freq:ICalEventRepeatingFreq.WEEKLY},start:moment()},cal);assert.ok(!event.toString().includes(\"WKST\"),\"without WKST\");event=new ICalEvent({end:moment(),repeating:{freq:ICalEventRepeatingFreq.WEEKLY,startOfWeek:ICalWeekday.SU},start:moment()},cal);assert.ok(event.toString().includes(\"WKST\"),\"with WKST\")",
                  "err": {},
                  "uuid": "338f61cb-9125-41db-a0b0-0fbbcc558ef4",
                  "parentUUID": "de98b078-e134-48de-80d4-0cd64363a988",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render allday events for luxon dates with timezone correct",
                  "fullTitle": "ical-generator Event toString() should render allday events for luxon dates with timezone correct",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const luxonStartDate=DateTime.fromISO(\"2024-03-17T00:00:00.000+01:00\",{setZone:true});const luxonEndDate=DateTime.fromISO(\"2024-03-18T00:00:00.000+01:00\",{setZone:true});const event=new ICalEvent({allDay:true,end:luxonEndDate,start:luxonStartDate},cal);const actual=event.toString();assert.match(actual,new RegExp(\"X-MICROSOFT-CDO-ALLDAYEVENT:TRUE\\r\\n\"),\"with Microsoft CDO alldayevent set\");assert.match(actual,new RegExp(\"X-MICROSOFT-MSNCALENDAR-ALLDAYEVENT:TRUE\\r\\n\"),\"with Microsoft MSNCalendar alldayevent flag set\");assert.match(actual,new RegExp(`DTSTART;VALUE=DATE:${luxonStartDate.toFormat(\"yyyyLLdd\")}\\r\n`),\"for DTSTART\");assert.match(actual,new RegExp(`DTEND;VALUE=DATE:${luxonEndDate.toFormat(\"yyyyLLdd\")}\\r\n`),\"for DTEND\")",
                  "err": {},
                  "uuid": "89cdd1a0-579b-48e0-a632-36c79495d81b",
                  "parentUUID": "de98b078-e134-48de-80d4-0cd64363a988",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46cd4565-e59b-46a9-8dc9-9e0782be84f4",
                "b14931e2-e87a-4def-962c-bb5bfbf43f5d",
                "338f61cb-9125-41db-a0b0-0fbbcc558ef4",
                "89cdd1a0-579b-48e0-a632-36c79495d81b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "627ec0cd-4ecc-4a8a-ba03-a95c3d8ff893",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "35e40a25-a05b-4ce8-81d7-2f61f811c56b",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(typeof ical,\"function\")",
                  "err": {},
                  "uuid": "a16400bf-2114-437c-a1f9-1edeabd59362",
                  "parentUUID": "35e40a25-a05b-4ce8-81d7-2f61f811c56b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ical()instanceof ICalCalendar)",
                  "err": {},
                  "uuid": "ffe674e8-a785-46d6-bec3-edf44cbba037",
                  "parentUUID": "35e40a25-a05b-4ce8-81d7-2f61f811c56b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a16400bf-2114-437c-a1f9-1edeabd59362",
                "ffe674e8-a785-46d6-bec3-edf44cbba037"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dcf25cb8-3fa3-4ca5-9f6c-f5d92993d368",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarm)",
                  "err": {},
                  "uuid": "96756198-fbd8-4cca-aa91-fe6cdaafc570",
                  "parentUUID": "dcf25cb8-3fa3-4ca5-9f6c-f5d92993d368",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarmType)",
                  "err": {},
                  "uuid": "7a269da1-5f52-48ea-9226-c0c9c27384b9",
                  "parentUUID": "dcf25cb8-3fa3-4ca5-9f6c-f5d92993d368",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96756198-fbd8-4cca-aa91-fe6cdaafc570",
                "7a269da1-5f52-48ea-9226-c0c9c27384b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f320d47-3cd5-4356-a436-9347e6a922e5",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendee)",
                  "err": {},
                  "uuid": "4b00f310-e066-4f2d-810b-90879fb66bc0",
                  "parentUUID": "4f320d47-3cd5-4356-a436-9347e6a922e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeType)",
                  "err": {},
                  "uuid": "3550c0a1-1d17-4f74-8fae-c12ae9139f02",
                  "parentUUID": "4f320d47-3cd5-4356-a436-9347e6a922e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeRole)",
                  "err": {},
                  "uuid": "3f6760bd-1bf4-49f7-a362-335f5fffb9c7",
                  "parentUUID": "4f320d47-3cd5-4356-a436-9347e6a922e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeStatus)",
                  "err": {},
                  "uuid": "eed2f639-2b55-4157-aeab-389279bd6bc7",
                  "parentUUID": "4f320d47-3cd5-4356-a436-9347e6a922e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b00f310-e066-4f2d-810b-90879fb66bc0",
                "3550c0a1-1d17-4f74-8fae-c12ae9139f02",
                "3f6760bd-1bf4-49f7-a362-335f5fffb9c7",
                "eed2f639-2b55-4157-aeab-389279bd6bc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3714092e-9d36-47e1-8001-c5b14e07c991",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendar)",
                  "err": {},
                  "uuid": "a15ae754-289e-469e-8fa7-821739844c6f",
                  "parentUUID": "3714092e-9d36-47e1-8001-c5b14e07c991",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendarMethod)",
                  "err": {},
                  "uuid": "867e9b77-ffc0-4ad4-9439-ae4d1696d255",
                  "parentUUID": "3714092e-9d36-47e1-8001-c5b14e07c991",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a15ae754-289e-469e-8fa7-821739844c6f",
                "867e9b77-ffc0-4ad4-9439-ae4d1696d255"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c861367-02d6-4ca1-a1d3-c311bb596043",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCategory)",
                  "err": {},
                  "uuid": "f5b002fd-cf0a-47f5-af19-bf6fd60461ab",
                  "parentUUID": "0c861367-02d6-4ca1-a1d3-c311bb596043",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f5b002fd-cf0a-47f5-af19-bf6fd60461ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "481b1499-a58a-4b65-8ac9-5d0bab6634ed",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEvent)",
                  "err": {},
                  "uuid": "d0d0eb86-a91f-44cd-abb1-e95443a01792",
                  "parentUUID": "481b1499-a58a-4b65-8ac9-5d0bab6634ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventStatus)",
                  "err": {},
                  "uuid": "8b5bce7c-872d-4eb2-be18-ffc1d91ddb15",
                  "parentUUID": "481b1499-a58a-4b65-8ac9-5d0bab6634ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventBusyStatus)",
                  "err": {},
                  "uuid": "3190eb5b-842b-411c-aaab-18c9a3bc88e3",
                  "parentUUID": "481b1499-a58a-4b65-8ac9-5d0bab6634ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventTransparency)",
                  "err": {},
                  "uuid": "f50ca3d9-c86d-4704-b7de-9971c4756b6e",
                  "parentUUID": "481b1499-a58a-4b65-8ac9-5d0bab6634ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0d0eb86-a91f-44cd-abb1-e95443a01792",
                "8b5bce7c-872d-4eb2-be18-ffc1d91ddb15",
                "3190eb5b-842b-411c-aaab-18c9a3bc88e3",
                "f50ca3d9-c86d-4704-b7de-9971c4756b6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5a9f87d-87a4-4d84-9594-dffac8561be3",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventRepeatingFreq)",
                  "err": {},
                  "uuid": "0f606ce9-abbe-42a5-af7b-009af6c0d97f",
                  "parentUUID": "d5a9f87d-87a4-4d84-9594-dffac8561be3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalWeekday)",
                  "err": {},
                  "uuid": "07f95ac8-a589-407e-ad7c-6b945b594316",
                  "parentUUID": "d5a9f87d-87a4-4d84-9594-dffac8561be3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f606ce9-abbe-42a5-af7b-009af6c0d97f",
                "07f95ac8-a589-407e-ad7c-6b945b594316"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ecc7fab0-c77b-470c-bf69-1dd0da883b7f",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDate===\"function\")",
                  "err": {},
                  "uuid": "12a9654e-6b1c-49cb-8316-ee6cce5a7cfb",
                  "parentUUID": "ecc7fab0-c77b-470c-bf69-1dd0da883b7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDateTZ===\"function\")",
                  "err": {},
                  "uuid": "db86afb2-0c6a-44fd-885e-5ea13482c6ae",
                  "parentUUID": "ecc7fab0-c77b-470c-bf69-1dd0da883b7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof escape===\"function\")",
                  "err": {},
                  "uuid": "23c486a8-8748-416c-9545-7bbde154248a",
                  "parentUUID": "ecc7fab0-c77b-470c-bf69-1dd0da883b7f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof foldLines===\"function\")",
                  "err": {},
                  "uuid": "904eb9b2-f214-4bf7-b22e-04f18a51950d",
                  "parentUUID": "ecc7fab0-c77b-470c-bf69-1dd0da883b7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12a9654e-6b1c-49cb-8316-ee6cce5a7cfb",
                "db86afb2-0c6a-44fd-885e-5ea13482c6ae",
                "23c486a8-8748-416c-9545-7bbde154248a",
                "904eb9b2-f214-4bf7-b22e-04f18a51950d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8ef72f17-df32-4c03-8d1c-6b5f3fa6f915",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cd29cdb8-2695-48bd-9f57-bc480f8d48b0",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,start:moment(\"2016-04-30T22:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Europe/Berlin\"});const str=calendar.toString();assert.ok(str.indexOf(\"DTSTART;VALUE=DATE:20160501\")>-1)",
                  "err": {},
                  "uuid": "706cbe9f-c123-4dec-ad10-69c8a0bc7217",
                  "parentUUID": "cd29cdb8-2695-48bd-9f57-bc480f8d48b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,start:moment(\"2016-05-01T03:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Brazil/East\"});const str=calendar.toString();assert.ok(str.indexOf(\"DTSTART;VALUE=DATE:20160501\")>-1)",
                  "err": {},
                  "uuid": "94765004-8536-44b3-8b5a-8072caebae59",
                  "parentUUID": "cd29cdb8-2695-48bd-9f57-bc480f8d48b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "706cbe9f-c123-4dec-ad10-69c8a0bc7217",
                "94765004-8536-44b3-8b5a-8072caebae59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bf46b289-80f6-433c-a461-ebbdd04d50fc",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,end:moment(\"2016-05-01T00:00:00.000Z\"),repeating:{byDay:[ICalWeekday.SU],bySetPos:3,count:3,freq:ICalEventRepeatingFreq.MONTHLY,interval:1},start:moment(\"2016-04-30T22:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\"});const str=calendar.toString();assert.ok(str.indexOf(\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3\")>-1)",
                  "err": {},
                  "uuid": "8fd558a0-a832-4ddb-a5c6-1a90a7533e47",
                  "parentUUID": "bf46b289-80f6-433c-a461-ebbdd04d50fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking all elements of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking all elements of the byDay array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,end:moment(\"2016-05-01T00:00:00.000Z\"),repeating:{byDay:[ICalWeekday.MO,ICalWeekday.FR],bySetPos:3,count:3,freq:ICalEventRepeatingFreq.MONTHLY,interval:1},start:moment(\"2016-04-30T22:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\"});const str=calendar.toString();assert.ok(str.indexOf(\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO,FR;BYSETPOS=3\")>-1)",
                  "err": {},
                  "uuid": "d11d4ac5-dd30-4fa9-82c7-843854c4c512",
                  "parentUUID": "bf46b289-80f6-433c-a461-ebbdd04d50fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8fd558a0-a832-4ddb-a5c6-1a90a7533e47",
                "d11d4ac5-dd30-4fa9-82c7-843854c4c512"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f3ba1c32-c789-41cc-a190-cba9b91cee0c",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{end:moment(1553219772e3),recurrenceId:moment(1553219772e3),start:moment(1553219772e3),timezone:\"America/La_Paz\"}],timezone:\"America/Buenos_Aires\"});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "00ce9b55-7491-4882-bc9e-a169d327f00a",
                  "parentUUID": "f3ba1c32-c789-41cc-a190-cba9b91cee0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{end:moment(1553219772e3),recurrenceId:moment(1553219772e3),start:moment(1553219772e3),timezone:\"America/La_Paz\"}],timezone:\"America/Buenos_Aires\"});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "5e7333bc-c107-42e2-8eda-c3c1c8cca611",
                  "parentUUID": "f3ba1c32-c789-41cc-a190-cba9b91cee0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{end:moment(1553219772e3),recurrenceId:moment(1553219772e3),start:moment(1553219772e3),timezone:\"America/La_Paz\"}],timezone:\"America/Buenos_Aires\"});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "2eb3610b-7cfc-4178-bbc7-bad5888ca815",
                  "parentUUID": "f3ba1c32-c789-41cc-a190-cba9b91cee0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00ce9b55-7491-4882-bc9e-a169d327f00a",
                "5e7333bc-c107-42e2-8eda-c3c1c8cca611",
                "2eb3610b-7cfc-4178-bbc7-bad5888ca815"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8abffb1d-b169-4929-887a-f4da33381a5f",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{repeating:{count:12,exclude:moment(\"2020-12-13T00:00:00+01:00\"),freq:ICalEventRepeatingFreq.MONTHLY},start:moment(\"2020-08-13T00:00:00+01:00\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Europe/Berlin\"});const str=calendar.toString();assert.ok(str.indexOf(\"EXDATE;TZID=Europe/Berlin:20201213T000000\")>-1)",
                  "err": {},
                  "uuid": "967e7f8c-9b15-452d-85ec-7631213e3512",
                  "parentUUID": "8abffb1d-b169-4929-887a-f4da33381a5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{repeating:{count:12,exclude:moment(\"2020-12-13T00:00:00-05:00\"),freq:ICalEventRepeatingFreq.MONTHLY},start:moment(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"America/New_York\"});const str=calendar.toString();assert.ok(str.indexOf(\"EXDATE;TZID=America/New_York:20201213T000000\")>-1)",
                  "err": {},
                  "uuid": "6c6fb632-237f-43c2-9c34-233b903c7f72",
                  "parentUUID": "8abffb1d-b169-4929-887a-f4da33381a5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "967e7f8c-9b15-452d-85ec-7631213e3512",
                "6c6fb632-237f-43c2-9c34-233b903c7f72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "55f383ab-fedb-4177-8321-1aeaedebcecf",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",location:{geo:{lat:34.05223,lon:-118.24368},radius:400,title:\"Los Angeles, California, United States\"},stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"SUMMARY:Example Event\",\"LOCATION:Los Angeles\\\\, California\\\\, United States\",\"X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel\",\" es\\\\, California\\\\, United States:geo:34.05223,-118.24368\",\"GEO:34.05223;-118.24368\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "c9b033aa-98ab-4803-9138-48d0f508a6df",
                  "parentUUID": "55f383ab-fedb-4177-8321-1aeaedebcecf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9b033aa-98ab-4803-9138-48d0f508a6df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ed9ab9f-e6cc-43b4-9ee9-be5bf56ba7c0",
              "title": "Issue #377",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not escape quotes in summary",
                  "fullTitle": "Issues Issue #377 should not escape quotes in summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:'My \"quoted\" string'}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",'SUMMARY:My \"quoted\" string',\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "e08c4549-8349-4aa8-8f7a-46aad18cbb95",
                  "parentUUID": "1ed9ab9f-e6cc-43b4-9ee9-be5bf56ba7c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e08c4549-8349-4aa8-8f7a-46aad18cbb95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "06b6c845-1c7a-4585-9426-65bb9849134c",
              "title": "Issue #442",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate floating repeat until value if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat until value if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "b3fc3350-34c1-4b12-9f73-fa252579f71d",
                  "parentUUID": "06b6c845-1c7a-4585-9426-65bb9849134c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate floating repeat exclusion dates if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat exclusion dates if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "27df705e-43b8-436e-b2bc-0007fc0396af",
                  "parentUUID": "06b6c845-1c7a-4585-9426-65bb9849134c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "b3fc3350-34c1-4b12-9f73-fa252579f71d",
                "27df705e-43b8-436e-b2bc-0007fc0396af"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03557351-dbbe-4586-9f3e-88f0de4ce5ef",
              "title": "Issue #459",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.repeating should work with `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work with `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",repeating:\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",\"SUMMARY:Example Event\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "df09cb28-f75a-46b9-b933-173f64583073",
                  "parentUUID": "03557351-dbbe-4586-9f3e-88f0de4ce5ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "event.repeating should work without `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work without `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",repeating:\"FREQ=MONTHLY;COUNT=3;INTERVAL=1\",stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",\"SUMMARY:Example Event\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "8b2c685c-5baf-46d8-a0c2-74f4cff7c24f",
                  "parentUUID": "03557351-dbbe-4586-9f3e-88f0de4ce5ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df09cb28-f75a-46b9-b933-173f64583073",
                "8b2c685c-5baf-46d8-a0c2-74f4cff7c24f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "900b5206-e050-4553-a2f5-011612053054",
              "title": "Issue #569 / 570",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.location should work with `geo` only",
                  "fullTitle": "Issues Issue #569 / 570 event.location should work with `geo` only",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=ical().createEvent({end:new Date(\"2020-06-15T01:00:00Z\"),id:\"12345\",stamp:new Date(\"2020-06-15T00:00:00Z\"),start:new Date(\"2020-06-15T00:00:00Z\"),summary:\"Hello\"});event.location({geo:{lat:52.51147570081018,lon:13.342200696373846}});assert.strictEqual(event.toString(),[\"BEGIN:VEVENT\",\"UID:12345\",\"SEQUENCE:0\",\"DTSTAMP:20200615T000000Z\",\"DTSTART:20200615T000000Z\",\"DTEND:20200615T010000Z\",\"SUMMARY:Hello\",\"GEO:52.51147570081018;13.342200696373846\",\"END:VEVENT\",\"\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "3e376f6b-dd15-4e35-a30e-c0c2910a2d3d",
                  "parentUUID": "900b5206-e050-4553-a2f5-011612053054",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e376f6b-dd15-4e35-a30e-c0c2910a2d3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c0f5ae0-73ae-4a35-ac68-f6427551be61",
              "title": "Issue #581",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.start and event.end should be swappable",
                  "fullTitle": "Issues Issue #581 event.start and event.end should be swappable",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical();const event=calendar.createEvent({end:\"2024-02-29T17:20:00.000Z\",start:\"2024-02-29T17:00:00.000Z\",summary:\"Test Event\"});event.start(\"2024-02-29T19:00:00.000Z\");event.end(\"2024-02-29T19:20:00.000Z\");const start=event.start();assert.ok(typeof start===\"string\");assert.strictEqual(start,\"2024-02-29T19:00:00.000Z\");const end=event.end();assert.ok(typeof end===\"string\");assert.strictEqual(end,\"2024-02-29T19:20:00.000Z\")",
                  "err": {},
                  "uuid": "cab150ac-e0cf-4f7a-8164-f8623ea905cc",
                  "parentUUID": "2c0f5ae0-73ae-4a35-ac68-f6427551be61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cab150ac-e0cf-4f7a-8164-f8623ea905cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52514280-7355-464b-9ef6-f3a8c9317718",
              "title": "Issue #618",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should also produce an error",
                  "fullTitle": "Issues Issue #618 should also produce an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(()=>{const calendar=ical();calendar.createEvent({location:{address:null,geo:{lat:null,lon:null},title:\"Empty Venue\"},start:new Date,summary:\"Test Event\"})},/`location` isn't formatted correctly/)",
                  "err": {},
                  "uuid": "fda430f9-3bf5-4f1c-a075-190123436a8f",
                  "parentUUID": "52514280-7355-464b-9ef6-f3a8c9317718",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fda430f9-3bf5-4f1c-a075-190123436a8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6b78c6c4-e9d2-4e25-915e-7e5f622a8e11",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a6b1a905-950f-470f-a5f8-2452dda403d2",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "d050d1e3-079f-4628-9050-33139472cbc9",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "ffa6102e-a533-48f0-9dd4-8b6a2d448be5",
                      "parentUUID": "d050d1e3-079f-4628-9050-33139472cbc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "eca5cf3c-fa39-4765-9cfc-3548d6938016",
                      "parentUUID": "d050d1e3-079f-4628-9050-33139472cbc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",true,false),\"20180705\")",
                      "err": {},
                      "uuid": "2c58bdf9-a203-47d5-934c-efd857ccded0",
                      "parentUUID": "d050d1e3-079f-4628-9050-33139472cbc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",true,true),\"20180705\")",
                      "err": {},
                      "uuid": "e132a4da-38be-41f2-a4a4-b093cf463ac3",
                      "parentUUID": "d050d1e3-079f-4628-9050-33139472cbc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "acbec4e2-6695-48d6-abc5-7f67ce7bf918",
                      "parentUUID": "d050d1e3-079f-4628-9050-33139472cbc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "521e9a6f-68ad-4d71-8625-dd008815bc94",
                      "parentUUID": "d050d1e3-079f-4628-9050-33139472cbc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",true,false),\"20180705\")",
                      "err": {},
                      "uuid": "25f83987-b992-458a-8352-31c7dda5f919",
                      "parentUUID": "d050d1e3-079f-4628-9050-33139472cbc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",true,true),\"20180705\")",
                      "err": {},
                      "uuid": "cc0fe3b8-7b54-41a9-b22f-42182373a205",
                      "parentUUID": "d050d1e3-079f-4628-9050-33139472cbc9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with / prefixed global timezones",
                      "fullTitle": "ICalTools formatDate() Date / String should work with / prefixed global timezones",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"/Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "e597a313-14a2-4d10-bd1e-6fb8c96118b3",
                      "parentUUID": "d050d1e3-079f-4628-9050-33139472cbc9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ffa6102e-a533-48f0-9dd4-8b6a2d448be5",
                    "eca5cf3c-fa39-4765-9cfc-3548d6938016",
                    "2c58bdf9-a203-47d5-934c-efd857ccded0",
                    "e132a4da-38be-41f2-a4a4-b093cf463ac3",
                    "acbec4e2-6695-48d6-abc5-7f67ce7bf918",
                    "521e9a6f-68ad-4d71-8625-dd008815bc94",
                    "25f83987-b992-458a-8352-31c7dda5f919",
                    "cc0fe3b8-7b54-41a9-b22f-42182373a205",
                    "e597a313-14a2-4d10-bd1e-6fb8c96118b3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "ed1ac39b-a5ad-4175-93d0-fbf26d7dfb06",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,moment(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "60f5bd0f-447a-425d-b695-d4404a6cbd28",
                      "parentUUID": "ed1ac39b-a5ad-4175-93d0-fbf26d7dfb06",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",moment(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "daf2c867-448b-4fdd-8fcc-6c7a9b8babc9",
                      "parentUUID": "ed1ac39b-a5ad-4175-93d0-fbf26d7dfb06",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,moment(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "b44b98cc-3eb2-4e34-ac66-58356990b16c",
                      "parentUUID": "ed1ac39b-a5ad-4175-93d0-fbf26d7dfb06",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "60f5bd0f-447a-425d-b695-d4404a6cbd28",
                    "daf2c867-448b-4fdd-8fcc-6c7a9b8babc9",
                    "b44b98cc-3eb2-4e34-ac66-58356990b16c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0db653d2-4231-46e6-80ab-8518d2a165a6",
                  "title": "moment-timezone.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,momentTz(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "246b7f70-dee3-4a41-bcaf-eb8a37344884",
                      "parentUUID": "0db653d2-4231-46e6-80ab-8518d2a165a6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",momentTz(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "93b4ff2a-4c4d-4c72-b4f8-8598da3a6c1d",
                      "parentUUID": "0db653d2-4231-46e6-80ab-8518d2a165a6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,momentTz(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "4fcc8ef4-c560-4641-93e6-84d38924822d",
                      "parentUUID": "0db653d2-4231-46e6-80ab-8518d2a165a6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "246b7f70-dee3-4a41-bcaf-eb8a37344884",
                    "93b4ff2a-4c4d-4c72-b4f8-8598da3a6c1d",
                    "4fcc8ef4-c560-4641-93e6-84d38924822d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0e864dbd-1b82-4953-b7f7-b05a562981b4",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "e0ef83dc-1f92-4f8c-958a-8d2c294092ae",
                      "parentUUID": "0e864dbd-1b82-4953-b7f7-b05a562981b4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",DateTime.fromISO(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "790ecbcd-93db-4ca7-aff0-8213ab5e701b",
                      "parentUUID": "0e864dbd-1b82-4953-b7f7-b05a562981b4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "600530b0-bbbf-4c22-9755-88df12fa0e94",
                      "parentUUID": "0e864dbd-1b82-4953-b7f7-b05a562981b4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "1634fca6-c500-4a78-9ffa-36a908319b39",
                      "parentUUID": "0e864dbd-1b82-4953-b7f7-b05a562981b4",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag, non floating, and date with timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag, non floating, and date with timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2024-03-17T00:00:00.000+01:00\",{setZone:true}),true),\"20240317\")",
                      "err": {},
                      "uuid": "56e2b53b-9e5b-494d-be5f-e0fed2ac7227",
                      "parentUUID": "0e864dbd-1b82-4953-b7f7-b05a562981b4",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e0ef83dc-1f92-4f8c-958a-8d2c294092ae",
                    "790ecbcd-93db-4ca7-aff0-8213ab5e701b",
                    "600530b0-bbbf-4c22-9755-88df12fa0e94",
                    "1634fca6-c500-4a78-9ffa-36a908319b39",
                    "56e2b53b-9e5b-494d-be5f-e0fed2ac7227"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "1b80c90f-b90a-4da6-b37f-546972fb8e74",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "bcb79fde-e2d4-40bb-8efb-e57033453215",
                      "parentUUID": "1b80c90f-b90a-4da6-b37f-546972fb8e74",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",dayjs(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "6f09515b-5769-4e5a-b370-8743f949afd1",
                      "parentUUID": "1b80c90f-b90a-4da6-b37f-546972fb8e74",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "f7008163-9805-451e-aa02-a264b0a2fef6",
                      "parentUUID": "1b80c90f-b90a-4da6-b37f-546972fb8e74",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "f0dbf03a-9123-40f1-b51c-5e2a6f1b1739",
                      "parentUUID": "1b80c90f-b90a-4da6-b37f-546972fb8e74",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bcb79fde-e2d4-40bb-8efb-e57033453215",
                    "6f09515b-5769-4e5a-b370-8743f949afd1",
                    "f7008163-9805-451e-aa02-a264b0a2fef6",
                    "f0dbf03a-9123-40f1-b51c-5e2a6f1b1739"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e16cd44-efb4-47b1-9e65-1821f1e42bb6",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed={timezone:\"Europe/Berlin\"};assert.strictEqual(formatDateTZ(\"Europe/Berlin\",\"DSTART\",moment(\"2018-07-02T15:48:05.000Z\"),ed),\"DSTART;TZID=Europe/Berlin:20180702T174805\")",
                  "err": {},
                  "uuid": "f9d404d3-46c4-4fb4-9905-a4ad9ed6a97a",
                  "parentUUID": "0e16cd44-efb4-47b1-9e65-1821f1e42bb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null,\"DSTART\",\"2018-07-02T15:48:05.000Z\",{}),\"DSTART:20180702T154805Z\")",
                  "err": {},
                  "uuid": "bf120e58-485f-45d7-bd28-5382e5d10047",
                  "parentUUID": "0e16cd44-efb4-47b1-9e65-1821f1e42bb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null,\"DSTART\",\"2018-07-02T15:48:05.000Z\"),\"DSTART:20180702T154805Z\")",
                  "err": {},
                  "uuid": "0b7125a9-6787-44f0-a5de-b7f467dcdd41",
                  "parentUUID": "0e16cd44-efb4-47b1-9e65-1821f1e42bb6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9d404d3-46c4-4fb4-9905-a4ad9ed6a97a",
                "bf120e58-485f-45d7-bd28-5382e5d10047",
                "0b7125a9-6787-44f0-a5de-b7f467dcdd41"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33aa73a5-f81a-4a3f-8445-9a034bdf66c9",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\\\ipsum\",false),\"Lorem \\\\\\\\ipsum\")",
                  "err": {},
                  "uuid": "1918ba9d-7bda-4972-8d26-af4a529673d6",
                  "parentUUID": "33aa73a5-f81a-4a3f-8445-9a034bdf66c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem ;ipsum\",false),\"Lorem \\\\;ipsum\")",
                  "err": {},
                  "uuid": "289f7f6e-b986-4f93-b199-dfd4e7b48a66",
                  "parentUUID": "33aa73a5-f81a-4a3f-8445-9a034bdf66c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem, ipsum\",false),\"Lorem\\\\, ipsum\")",
                  "err": {},
                  "uuid": "82a87249-3eb7-4617-bbd4-3590a5488089",
                  "parentUUID": "33aa73a5-f81a-4a3f-8445-9a034bdf66c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\ripsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "1d7730c5-2e39-42b4-a372-0217bc637002",
                  "parentUUID": "33aa73a5-f81a-4a3f-8445-9a034bdf66c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\nipsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "5c7ebec3-cab0-4a3d-ab90-c9e8f966f73b",
                  "parentUUID": "33aa73a5-f81a-4a3f-8445-9a034bdf66c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\r\\nipsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "06ca4dbd-49d0-4d95-9cb7-515666621ebf",
                  "parentUUID": "33aa73a5-f81a-4a3f-8445-9a034bdf66c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \" in text when inQuotes = true",
                  "fullTitle": "ICalTools escape() should escape \" in text when inQuotes = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum',true),'Lorem \\\\\"ipsum')",
                  "err": {},
                  "uuid": "18e3ce77-1e67-4343-adf2-eb24230d94dd",
                  "parentUUID": "33aa73a5-f81a-4a3f-8445-9a034bdf66c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not escape \" in text when inQuotes = false",
                  "fullTitle": "ICalTools escape() should not escape \" in text when inQuotes = false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum',false),'Lorem \"ipsum')",
                  "err": {},
                  "uuid": "ff0685e4-7f73-4415-a9be-72ed2bea10e4",
                  "parentUUID": "33aa73a5-f81a-4a3f-8445-9a034bdf66c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1918ba9d-7bda-4972-8d26-af4a529673d6",
                "289f7f6e-b986-4f93-b199-dfd4e7b48a66",
                "82a87249-3eb7-4617-bbd4-3590a5488089",
                "1d7730c5-2e39-42b4-a372-0217bc637002",
                "5c7ebec3-cab0-4a3d-ab90-c9e8f966f73b",
                "06ca4dbd-49d0-4d95-9cb7-515666621ebf",
                "18e3ce77-1e67-4343-adf2-eb24230d94dd",
                "ff0685e4-7f73-4415-a9be-72ed2bea10e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c70efb9d-3dc9-416d-83ee-1c5389b0e56c",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines(\"12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981\"),\"12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981\")",
                  "err": {},
                  "uuid": "2d880df3-fce6-4054-8b3c-b87ad7f90df3",
                  "parentUUID": "c70efb9d-3dc9-416d-83ee-1c5389b0e56c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines(\"\\u{1F44B}\\u{1F3FC}12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981\"),\"\\u{1F44B}\\u{1F3FC}12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981\")",
                  "err": {},
                  "uuid": "79f9ea6d-8235-41b7-9a92-048c21397aa5",
                  "parentUUID": "c70efb9d-3dc9-416d-83ee-1c5389b0e56c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d880df3-fce6-4054-8b3c-b87ad7f90df3",
                "79f9ea6d-8235-41b7-9a92-048c21397aa5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "518734ae-5284-4b2d-ba9d-2b8c09746565",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "72378c7f-3fb8-425f-b32c-e11a5d4214e9",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=new Date;assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "33ab3d1a-361d-440c-97af-b4b27007552c",
                      "parentUUID": "72378c7f-3fb8-425f-b32c-e11a5d4214e9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=new Date(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "2f30830f-f12c-4b13-b91b-4e06362baa7f",
                      "parentUUID": "72378c7f-3fb8-425f-b32c-e11a5d4214e9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "33ab3d1a-361d-440c-97af-b4b27007552c",
                    "2f30830f-f12c-4b13-b91b-4e06362baa7f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "452c15cf-f29c-41db-8f73-409195973017",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=\"2021-03-28T13:15:23.587Z\";assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "f6683773-3222-460d-8c0c-db3ab05f566f",
                      "parentUUID": "452c15cf-f29c-41db-8f73-409195973017",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=\"foo\";assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "73c4e607-9983-41f2-9db9-f73014ef28e5",
                      "parentUUID": "452c15cf-f29c-41db-8f73-409195973017",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f6683773-3222-460d-8c0c-db3ab05f566f",
                    "73c4e607-9983-41f2-9db9-f73014ef28e5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0c308924-0f10-4de4-884f-173f68abedf2",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=DateTime.now();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "c7b9c5e2-036b-4436-9f2e-12193dfdb68f",
                      "parentUUID": "0c308924-0f10-4de4-884f-173f68abedf2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=DateTime.fromISO(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "d9076ea8-fe58-4c8e-9cc4-574d7ae86e9a",
                      "parentUUID": "0c308924-0f10-4de4-884f-173f68abedf2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c7b9c5e2-036b-4436-9f2e-12193dfdb68f",
                    "d9076ea8-fe58-4c8e-9cc4-574d7ae86e9a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "88087ced-6a71-4b98-969d-8cde717e3b89",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=moment();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "3ab9a678-6039-445d-926e-fb5e260078ca",
                      "parentUUID": "88087ced-6a71-4b98-969d-8cde717e3b89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=moment(\"foo\",\"MM/DD/YYYY\",true);assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "6dbeed96-a68e-4220-8dfd-b46597418427",
                      "parentUUID": "88087ced-6a71-4b98-969d-8cde717e3b89",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3ab9a678-6039-445d-926e-fb5e260078ca",
                    "6dbeed96-a68e-4220-8dfd-b46597418427"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "55749d47-d543-4ae2-8e20-895617b7b7d1",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=dayjs();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "78e143fe-bebb-4008-ad91-b864a01b1deb",
                      "parentUUID": "55749d47-d543-4ae2-8e20-895617b7b7d1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=dayjs(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "71e0af30-7b9c-4f90-8ab3-368e1df4c9a9",
                      "parentUUID": "55749d47-d543-4ae2-8e20-895617b7b7d1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "78e143fe-bebb-4008-ad91-b864a01b1deb",
                    "71e0af30-7b9c-4f90-8ab3-368e1df4c9a9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d0c0f270-ded0-43db-b663-8637789cb9c6",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(date.toJSON()),date)",
                  "err": {},
                  "uuid": "4c780845-6e29-4151-90fe-81f129259f92",
                  "parentUUID": "d0c0f270-ded0-43db-b663-8637789cb9c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(date),date)",
                  "err": {},
                  "uuid": "ab787e68-b0f8-42bd-8d26-b4d6888b4548",
                  "parentUUID": "d0c0f270-ded0-43db-b663-8637789cb9c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(moment(date)),date)",
                  "err": {},
                  "uuid": "8ce00a73-a890-4318-a9ad-70bb50088f2f",
                  "parentUUID": "d0c0f270-ded0-43db-b663-8637789cb9c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment-timezone object",
                  "fullTitle": "ICalTools toDate() should work with moment-timezone object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(momentTz(date)),date)",
                  "err": {},
                  "uuid": "3a0a63c5-06c9-432b-9f85-ae38b8f4b749",
                  "parentUUID": "d0c0f270-ded0-43db-b663-8637789cb9c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(dayjs(date)),date)",
                  "err": {},
                  "uuid": "142aa4d1-5f77-4e0e-9ada-d37a443a9a64",
                  "parentUUID": "d0c0f270-ded0-43db-b663-8637789cb9c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(DateTime.fromJSDate(date)),date)",
                  "err": {},
                  "uuid": "f309c8bd-2d84-4d9a-9d2b-8babcb141958",
                  "parentUUID": "d0c0f270-ded0-43db-b663-8637789cb9c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c780845-6e29-4151-90fe-81f129259f92",
                "ab787e68-b0f8-42bd-8d26-b4d6888b4548",
                "8ce00a73-a890-4318-a9ad-70bb50088f2f",
                "3a0a63c5-06c9-432b-9f85-ae38b8f4b749",
                "142aa4d1-5f77-4e0e-9ada-d37a443a9a64",
                "f309c8bd-2d84-4d9a-9d2b-8babcb141958"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9ae154fe-abfd-490e-aa5f-2795c0a93f7f",
              "title": "toDurationString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ICalTools toDurationString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(toDurationString(0),\"PT0S\");assert.strictEqual(toDurationString(1),\"PT1S\");assert.strictEqual(toDurationString(60),\"PT1M\");assert.strictEqual(toDurationString(3600),\"PT1H\");assert.strictEqual(toDurationString(86400),\"P1D\");assert.strictEqual(toDurationString(-3600),\"-PT1H\")",
                  "err": {},
                  "uuid": "ef9a759b-6c5b-4378-9dae-43b28ac4f41b",
                  "parentUUID": "9ae154fe-abfd-490e-aa5f-2795c0a93f7f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef9a759b-6c5b-4378-9dae-43b28ac4f41b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3e858131-8ff3-4e4e-b76f-420afb26ff18",
          "title": "ical-generator Types",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/types.ts",
          "file": "/test/types.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stubs should be compatible with third party libraries",
              "fullTitle": "ical-generator Types stubs should be compatible with third party libraries",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(dayJsTest,\"day.js stub should be compatible\");assert.ok(luxonTest,\"luxon stub should be compatible\");assert.ok(momentTest,\"moment stub should be compatible\");assert.ok(momentTimezoneTest,\"moment-timezone stub should be compatible\");assert.ok(rruleTest,\"rrule stub should be compatible\")",
              "err": {},
              "uuid": "463e0566-290d-47fd-ae65-991b8daeae7c",
              "parentUUID": "3e858131-8ff3-4e4e-b76f-420afb26ff18",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calendar data should be compatible with calendar json data",
              "fullTitle": "ical-generator Types calendar data should be compatible with calendar json data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(attendeeJson,\"attendee json data should be compatible\");assert.ok(calendarJson,\"calendar json data should be compatible\");assert.ok(categoryJson,\"category json data should be compatible\");assert.ok(eventJson,\"event json data should be compatible\")",
              "err": {},
              "uuid": "d376cde4-3df9-4ced-bb15-b7e7482d19b5",
              "parentUUID": "3e858131-8ff3-4e4e-b76f-420afb26ff18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "463e0566-290d-47fd-ae65-991b8daeae7c",
            "d376cde4-3df9-4ced-bb15-b7e7482d19b5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}