{
  "stats": {
    "suites": 124,
    "tests": 428,
    "passes": 426,
    "pending": 2,
    "failures": 0,
    "start": "2024-01-06T12:21:28.123Z",
    "end": "2024-01-06T12:21:28.276Z",
    "duration": 153,
    "testsRegistered": 428,
    "passPercent": 100,
    "pendingPercent": 0.46728971962616817,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e2192f08-b265-4b12-aa25-5eb77c50b294",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4a731cca-0fc8-44a4-9c7b-de1aac65cdd4",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a2ad6da9-2453-401b-a529-7e28bd6fa343",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalAlarm({ type: ICalAlarmType.display }, null);\n}, /`event`/);",
                  "err": {},
                  "uuid": "be49e272-e35a-4607-99b0-e5feb7a8e90c",
                  "parentUUID": "a2ad6da9-2453-401b-a529-7e28bd6fa343",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    // @ts-ignore\n    unknown: true,\n    type: ICalAlarmType.display\n}, new ICalEvent({\n    start: new Date()\n}, new ICalCalendar()));\nassert.strictEqual(a.type(), 'display');",
                  "err": {},
                  "uuid": "f19592b5-afca-4c7c-8ec8-5a5db47e3f20",
                  "parentUUID": "a2ad6da9-2453-401b-a529-7e28bd6fa343",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be49e272-e35a-4607-99b0-e5feb7a8e90c",
                "f19592b5-afca-4c7c-8ec8-5a5db47e3f20"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cbeeb527-f7e7-4652-b72f-001868a0f468",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({\n    start: new Date()\n}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.type(ICalAlarmType.display));",
                  "err": {},
                  "uuid": "99d2b0fe-9f38-47ee-821a-a85610464a81",
                  "parentUUID": "cbeeb527-f7e7-4652-b72f-001868a0f468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({\n    start: new Date()\n}, new ICalCalendar()));\nassert.strictEqual(a.type(), 'display');\na.type(ICalAlarmType.audio);\nassert.strictEqual(a.type(), 'audio');",
                  "err": {},
                  "uuid": "f1c83e48-7cde-447c-9e54-63811dbdf6f2",
                  "parentUUID": "cbeeb527-f7e7-4652-b72f-001868a0f468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({\n    start: new Date()\n}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.type('BANANA');\n}, /`type`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.type(null);\n}, /`type`/);",
                  "err": {},
                  "uuid": "08f77500-938f-459c-bec5-552a27fcb94d",
                  "parentUUID": "cbeeb527-f7e7-4652-b72f-001868a0f468",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('ACTION:DISPLAY') > -1);",
                  "err": {},
                  "uuid": "33140761-8cf4-4cf9-80a8-195eae41b90e",
                  "parentUUID": "cbeeb527-f7e7-4652-b72f-001868a0f468",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99d2b0fe-9f38-47ee-821a-a85610464a81",
                "f1c83e48-7cde-447c-9e54-63811dbdf6f2",
                "08f77500-938f-459c-bec5-552a27fcb94d",
                "33140761-8cf4-4cf9-80a8-195eae41b90e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "776762e1-623e-48e4-8160-7159e871834b",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.trigger(60 * 10));",
                  "err": {},
                  "uuid": "47028025-5255-462c-94a7-7414535ffa11",
                  "parentUUID": "776762e1-623e-48e4-8160-7159e871834b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nconst now = new Date();\nassert.strictEqual(a.trigger(), 600);\nassert.strictEqual(a.triggerAfter(), -600);\na.trigger(300);\nassert.strictEqual(a.trigger(), 300);\nassert.strictEqual(a.triggerAfter(), -300);\n// Date\na.trigger(now);\nconst dateResult = a.trigger();\nassert.deepStrictEqual(dateResult, now);",
                  "err": {},
                  "uuid": "6e7183df-f1af-4be6-af67-4d7cd6d111aa",
                  "parentUUID": "776762e1-623e-48e4-8160-7159e871834b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    a.trigger(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.trigger('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.trigger(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "f1d01af4-bf9e-45e5-8ed5-7e74eba3eb74",
                  "parentUUID": "776762e1-623e-48e4-8160-7159e871834b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.trigger(new Date());\nassert.ok(a.trigger() instanceof Date);",
                  "err": {},
                  "uuid": "4389d4eb-94fc-459b-9757-c959a88a8b94",
                  "parentUUID": "776762e1-623e-48e4-8160-7159e871834b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.trigger(moment());\nassert.ok(moment.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "2825a169-4f31-4e0a-9cb8-f2fd8729b5bc",
                  "parentUUID": "776762e1-623e-48e4-8160-7159e871834b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.trigger(2 * 60);\nassert.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "b999117a-7c35-453d-95cc-783b45cdbfab",
                  "parentUUID": "776762e1-623e-48e4-8160-7159e871834b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('2015-02-01T13:38:45.000Z');\nconst a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().includes('TRIGGER:-PT10M'));\na.trigger(trigger);\nassert.ok(a.toString().includes('TRIGGER;VALUE=DATE-TIME:20150201T133845Z'));",
                  "err": {},
                  "uuid": "23bab2d4-7056-42d5-8f2d-53c0142d5ef9",
                  "parentUUID": "776762e1-623e-48e4-8160-7159e871834b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47028025-5255-462c-94a7-7414535ffa11",
                "6e7183df-f1af-4be6-af67-4d7cd6d111aa",
                "f1d01af4-bf9e-45e5-8ed5-7e74eba3eb74",
                "4389d4eb-94fc-459b-9757-c959a88a8b94",
                "2825a169-4f31-4e0a-9cb8-f2fd8729b5bc",
                "b999117a-7c35-453d-95cc-783b45cdbfab",
                "23bab2d4-7056-42d5-8f2d-53c0142d5ef9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5b161d87-c8d0-4e7d-86d9-bb8e62b71b73",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.triggerAfter(60 * 10));",
                  "err": {},
                  "uuid": "7a92305b-64df-4216-85c9-a97a07e74662",
                  "parentUUID": "5b161d87-c8d0-4e7d-86d9-bb8e62b71b73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar())).triggerAfter(300);\nassert.strictEqual(a.triggerAfter(), 300);\nassert.strictEqual(a.trigger(), -300);",
                  "err": {},
                  "uuid": "6697dbad-2858-4c32-8d61-dd83450792aa",
                  "parentUUID": "5b161d87-c8d0-4e7d-86d9-bb8e62b71b73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.triggerAfter(120);\nassert.strictEqual(a.trigger(), -120);",
                  "err": {},
                  "uuid": "2ce83ed6-b7b6-44b6-88d3-09b0841fee27",
                  "parentUUID": "5b161d87-c8d0-4e7d-86d9-bb8e62b71b73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    a.triggerAfter(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerAfter('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerAfter(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "0fcbf2f1-3cce-4e8e-a61c-991af6c31713",
                  "parentUUID": "5b161d87-c8d0-4e7d-86d9-bb8e62b71b73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('20150201T133845Z');\nconst a = new ICalAlarm({ triggerAfter: 600 }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER;RELATED=END:PT10M') > -1);\na.triggerAfter(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "663dc71a-8bf0-480d-94d9-eedf4e21afee",
                  "parentUUID": "5b161d87-c8d0-4e7d-86d9-bb8e62b71b73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a92305b-64df-4216-85c9-a97a07e74662",
                "6697dbad-2858-4c32-8d61-dd83450792aa",
                "2ce83ed6-b7b6-44b6-88d3-09b0841fee27",
                "0fcbf2f1-3cce-4e8e-a61c-991af6c31713",
                "663dc71a-8bf0-480d-94d9-eedf4e21afee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f38d7a2b-3c54-4808-9deb-dd27807cf8ec",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.triggerBefore(60 * 10));",
                  "err": {},
                  "uuid": "7cd75c85-8191-4b4f-93da-6b1c791a92d3",
                  "parentUUID": "f38d7a2b-3c54-4808-9deb-dd27807cf8ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nconst now = new Date();\nassert.strictEqual(a.triggerBefore(), 600);\na.trigger(300);\nassert.strictEqual(a.triggerBefore(), 300);\n// Date\na.trigger(now);\nconst dateResult = a.triggerBefore();\nassert.deepStrictEqual(dateResult, now);",
                  "err": {},
                  "uuid": "73e869fb-3ee6-4503-8bde-5b3600d73768",
                  "parentUUID": "f38d7a2b-3c54-4808-9deb-dd27807cf8ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    a.triggerBefore(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerBefore('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerBefore(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "3af1f769-557b-46c0-a36b-f687cf0f921a",
                  "parentUUID": "f38d7a2b-3c54-4808-9deb-dd27807cf8ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nconst now = new Date();\na.triggerBefore(now);\nassert.deepStrictEqual(a.trigger(), now);",
                  "err": {},
                  "uuid": "ea1f1923-43c6-4633-bc63-3c84c89bff2d",
                  "parentUUID": "f38d7a2b-3c54-4808-9deb-dd27807cf8ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ triggerBefore: moment() }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(moment.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "4f254c69-1311-46b2-b0e9-82f81719853c",
                  "parentUUID": "f38d7a2b-3c54-4808-9deb-dd27807cf8ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.triggerBefore(2 * 60);\nassert.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "e8710853-ef88-4fce-893b-6cce875fbed5",
                  "parentUUID": "f38d7a2b-3c54-4808-9deb-dd27807cf8ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('2015-02-01T13:38:45.000Z');\nconst a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.triggerBefore(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "aab63d3d-c398-4557-aa4b-e374716795af",
                  "parentUUID": "f38d7a2b-3c54-4808-9deb-dd27807cf8ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7cd75c85-8191-4b4f-93da-6b1c791a92d3",
                "73e869fb-3ee6-4503-8bde-5b3600d73768",
                "3af1f769-557b-46c0-a36b-f687cf0f921a",
                "ea1f1923-43c6-4633-bc63-3c84c89bff2d",
                "4f254c69-1311-46b2-b0e9-82f81719853c",
                "e8710853-ef88-4fce-893b-6cce875fbed5",
                "aab63d3d-c398-4557-aa4b-e374716795af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "16f0ce58-1cf7-4a84-8ac7-4be0d54f6da2",
              "title": "relatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm relatesTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.relatesTo(null));\nassert.deepStrictEqual(a, a.relatesTo(ICalAlarmRelatesTo.end));",
                  "err": {},
                  "uuid": "b95c0879-bc32-4076-ba4d-8f763aec2d67",
                  "parentUUID": "16f0ce58-1cf7-4a84-8ac7-4be0d54f6da2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm relatesTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.relatesTo(ICalAlarmRelatesTo.end);\nassert.strictEqual(a.relatesTo(), ICalAlarmRelatesTo.end);\na.relatesTo(null);\nassert.strictEqual(a.relatesTo(), null);",
                  "err": {},
                  "uuid": "d3f91ed1-4226-48f4-8a88-a3f958826261",
                  "parentUUID": "16f0ce58-1cf7-4a84-8ac7-4be0d54f6da2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw if value is not `null`, \"START\" or \"END\"",
                  "fullTitle": "ical-generator Alarm relatesTo() should throw if value is not `null`, \"START\" or \"END\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo('hi');\n}, /`relatesTo`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo(true);\n}, /`relatesTo`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo(Infinity);\n}, /`relatesTo`/);",
                  "err": {},
                  "uuid": "e829a125-0763-4a27-9844-27b64bb3f82b",
                  "parentUUID": "16f0ce58-1cf7-4a84-8ac7-4be0d54f6da2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change RELATED",
                  "fullTitle": "ical-generator Alarm relatesTo() should change RELATED",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('RELATED=START') === -1);\na.relatesTo(ICalAlarmRelatesTo.start);\nassert.ok(a.toString().indexOf('RELATED=START') > -1);\na.relatesTo(ICalAlarmRelatesTo.end);\nassert.ok(a.toString().indexOf('RELATED=END') > -1);",
                  "err": {},
                  "uuid": "5705f07a-1d8c-4aac-85e6-ff0d5f6e1a52",
                  "parentUUID": "16f0ce58-1cf7-4a84-8ac7-4be0d54f6da2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b95c0879-bc32-4076-ba4d-8f763aec2d67",
                "d3f91ed1-4226-48f4-8a88-a3f958826261",
                "e829a125-0763-4a27-9844-27b64bb3f82b",
                "5705f07a-1d8c-4aac-85e6-ff0d5f6e1a52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b67105f-b4ac-432e-b063-d23a96efdd82",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.repeat({\n    times: 4,\n    interval: 60\n}));",
                  "err": {},
                  "uuid": "f026cd16-13c7-49e4-ad44-44ead1c2953d",
                  "parentUUID": "2b67105f-b4ac-432e-b063-d23a96efdd82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.repeat(), null);\na.repeat({ times: 4, interval: 60 });\nassert.deepStrictEqual(a.repeat(), { times: 4, interval: 60 });",
                  "err": {},
                  "uuid": "4aa1dc6f-5733-4fb6-8203-3df8ed77eab8",
                  "parentUUID": "2b67105f-b4ac-432e-b063-d23a96efdd82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    a.repeat({\n        times: Infinity,\n        interval: 60\n    });\n}, /`repeat.times`/);\nassert.throws(function () {\n    a.repeat({\n        // @ts-ignore\n        times: 'hi',\n        interval: 60\n    });\n}, /`repeat.times`/);\nassert.throws(function () {\n    a.repeat({\n        // @ts-ignore\n        times: true,\n        interval: 60\n    });\n}, /`repeat.times`/);\nassert.throws(function () {\n    a.repeat({\n        times: 4,\n        interval: Infinity\n    });\n}, /`repeat.interval`/);\nassert.throws(function () {\n    a.repeat({\n        times: 4,\n        // @ts-ignore\n        interval: 'hi'\n    });\n}, /`repeat.interval`/);\nassert.throws(function () {\n    a.repeat({\n        times: 4,\n        // @ts-ignore\n        interval: true\n    });\n}, /`repeat.interval`/);",
                  "err": {},
                  "uuid": "a031bda7-cb38-46fa-b8b2-81dd628e4123",
                  "parentUUID": "2b67105f-b4ac-432e-b063-d23a96efdd82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    trigger: 300,\n    repeat: {\n        times: 42,\n        interval: 90\n    }\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().includes('REPEAT:42'));\nassert.ok(a.toString().includes('DURATION:PT1M30S'));\na.repeat(null);\nassert.ok(!a.toString().includes('REPEAT:42'));\nassert.ok(!a.toString().includes('DURATION:PT1M30S'));",
                  "err": {},
                  "uuid": "73589be8-a238-4f15-8343-38be38db1207",
                  "parentUUID": "2b67105f-b4ac-432e-b063-d23a96efdd82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalAlarm({\n        trigger: 300,\n        repeat: {\n            times: 4,\n            // @ts-ignore\n            interval: null\n        }\n    }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\n}, /`repeat.interval`/);",
                  "err": {},
                  "uuid": "dbf711ba-258a-4625-a6b6-a4ad2c0f290a",
                  "parentUUID": "2b67105f-b4ac-432e-b063-d23a96efdd82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalAlarm({\n        trigger: 300,\n        repeat: {\n            // @ts-ignore\n            times: null,\n            interval: 60\n        }\n    }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\n}, /`repeat.times`/);",
                  "err": {},
                  "uuid": "97f45ddc-5035-45e8-ac10-bf8b3d3facae",
                  "parentUUID": "2b67105f-b4ac-432e-b063-d23a96efdd82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is of wrong type",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is of wrong type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalAlarm({\n        trigger: 300,\n        // @ts-ignore\n        repeat: true\n    }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\n}, /`repeat` is not correct, must be an object!/);",
                  "err": {},
                  "uuid": "6d8930fc-01f1-4923-8b72-7687ccde139f",
                  "parentUUID": "2b67105f-b4ac-432e-b063-d23a96efdd82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f026cd16-13c7-49e4-ad44-44ead1c2953d",
                "4aa1dc6f-5733-4fb6-8203-3df8ed77eab8",
                "a031bda7-cb38-46fa-b8b2-81dd628e4123",
                "73589be8-a238-4f15-8343-38be38db1207",
                "dbf711ba-258a-4625-a6b6-a4ad2c0f290a",
                "97f45ddc-5035-45e8-ac10-bf8b3d3facae",
                "6d8930fc-01f1-4923-8b72-7687ccde139f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8a3e4f7e-58d7-4df7-8c96-0d26bb9a8cd8",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.attach(null));\nassert.deepStrictEqual(a, a.attach('https://sebbo.net/beep.aud'));",
                  "err": {},
                  "uuid": "bd4e661d-a88e-440f-b73d-e2841a17dee3",
                  "parentUUID": "8a3e4f7e-58d7-4df7-8c96-0d26bb9a8cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t = { uri: 'https://example.com/alarm.aud', mime: 'audio/basic' };\nconst a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.attach(), null);\na.attach(t);\nassert.deepStrictEqual(a.attach(), t);\na.attach('https://www.example.com/beep.aud');\nassert.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach({\n    uri: 'https://www.example.com/beep.aud'\n});\nassert.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach(null);\nassert.strictEqual(a.attach(), null);",
                  "err": {},
                  "uuid": "e3561945-d516-4ecb-af2f-b6100f0ff236",
                  "parentUUID": "8a3e4f7e-58d7-4df7-8c96-0d26bb9a8cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.attach({ mime: 'audio/basic' });\n}, /`attach.uri`/);",
                  "err": {},
                  "uuid": "8a9de54c-dda4-4683-a66d-a705d87d4b78",
                  "parentUUID": "8a3e4f7e-58d7-4df7-8c96-0d26bb9a8cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.attach(Infinity);\n}, /`attachment`/);",
                  "err": {},
                  "uuid": "ce9544a2-cda3-4a94-a0c6-9d42b2d09398",
                  "parentUUID": "8a3e4f7e-58d7-4df7-8c96-0d26bb9a8cd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ type: ICalAlarmType.audio }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:Basso') > -1);\na.attach('https://example.com/beep.aud');\nassert.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud') > -1);\na.attach({\n    uri: 'https://example.com/beep.aud',\n    mime: 'audio/basic'\n});\nassert.ok(a.toString().indexOf('\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud') > -1);",
                  "err": {},
                  "uuid": "1342adaa-6da8-4c85-9bea-ba22168b5178",
                  "parentUUID": "8a3e4f7e-58d7-4df7-8c96-0d26bb9a8cd8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd4e661d-a88e-440f-b73d-e2841a17dee3",
                "e3561945-d516-4ecb-af2f-b6100f0ff236",
                "8a9de54c-dda4-4683-a66d-a705d87d4b78",
                "ce9544a2-cda3-4a94-a0c6-9d42b2d09398",
                "1342adaa-6da8-4c85-9bea-ba22168b5178"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad746837-2b90-4991-afe7-07a437eada1a",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.description(null));\nassert.deepStrictEqual(a, a.description('Hey Ho!'));",
                  "err": {},
                  "uuid": "d695c40a-fe36-4110-8464-0eadbe620e33",
                  "parentUUID": "ad746837-2b90-4991-afe7-07a437eada1a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a.description(), null);\na.description('blablabla');\nassert.deepStrictEqual(a.description(), 'blablabla');\na.description(null);\nassert.deepStrictEqual(a.description(), null);",
                  "err": {},
                  "uuid": "9878c278-dd25-417a-9a9f-893ab6da6979",
                  "parentUUID": "ad746837-2b90-4991-afe7-07a437eada1a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    description: 'Huibuh!'\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Huibuh') > -1);",
                  "err": {},
                  "uuid": "9627e609-aea0-44ad-b2f6-510c8504e698",
                  "parentUUID": "ad746837-2b90-4991-afe7-07a437eada1a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ description: 'Example Event' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Example Event') > -1);",
                  "err": {},
                  "uuid": "1e28198f-a095-4585-9ca4-247983b01110",
                  "parentUUID": "ad746837-2b90-4991-afe7-07a437eada1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d695c40a-fe36-4110-8464-0eadbe620e33",
                "9878c278-dd25-417a-9a9f-893ab6da6979",
                "9627e609-aea0-44ad-b2f6-510c8504e698",
                "1e28198f-a095-4585-9ca4-247983b01110"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c455a2d8-c886-43c4-9ff5-7c14519f812e",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "a6010e3f-fdc6-4426-b9a5-fdccecedc1ae",
                  "parentUUID": "c455a2d8-c886-43c4-9ff5-7c14519f812e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6010e3f-fdc6-4426-b9a5-fdccecedc1ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7cd6def4-8ff7-4d8e-b87d-aa9c8be0fd1b",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.type(ICalAlarmType.display);\na.trigger(120);\nassert.deepStrictEqual(a.toJSON(), {\n    attach: null,\n    description: null,\n    relatesTo: null,\n    interval: null,\n    repeat: null,\n    trigger: 120,\n    type: 'display',\n    x: []\n});",
                  "err": {},
                  "uuid": "56c52083-0674-43d3-963d-b15cce1beb1a",
                  "parentUUID": "7cd6def4-8ff7-4d8e-b87d-aa9c8be0fd1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nnew ICalAlarm(a.toJSON(), new ICalEvent({ start: new Date() }, new ICalCalendar()));",
                  "err": {},
                  "uuid": "2c99ad1e-dd84-4b4b-8047-b3ae7011cc2a",
                  "parentUUID": "7cd6def4-8ff7-4d8e-b87d-aa9c8be0fd1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56c52083-0674-43d3-963d-b15cce1beb1a",
                "2c99ad1e-dd84-4b4b-8047-b3ae7011cc2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "075db354-0155-4df7-9563-f53cf1f1cabb",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "60e00359-5554-4bdd-a224-b24d41b7d6b3",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    name: 'John Doe',\n    email: 'john@example.org',\n    mailto: 'john+calendar@example.org',\n    sentBy: null,\n    status: ICalAttendeeStatus.ACCEPTED,\n    role: ICalAttendeeRole.REQ,\n    rsvp: false,\n    type: ICalAttendeeType.INDIVIDUAL,\n    delegatedTo: null,\n    delegatedFrom: null,\n    x: []\n};\nconst event = new ICalAttendee(data, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "d8b47660-42e5-4b79-a465-35ae08105f43",
                  "parentUUID": "60e00359-5554-4bdd-a224-b24d41b7d6b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalAttendee({ email: 'foo@bar.com' });\n}, /`event`/);",
                  "err": {},
                  "uuid": "4e2407a4-c5f3-4441-b167-2c6b7c05a0a7",
                  "parentUUID": "60e00359-5554-4bdd-a224-b24d41b7d6b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee constructor() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalAttendee(\n    // @ts-ignore\n    { name: 'Testuser' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\n}, /`email`/);",
                  "err": {},
                  "uuid": "7413eb17-09d3-472a-a134-a724a42e0f3f",
                  "parentUUID": "60e00359-5554-4bdd-a224-b24d41b7d6b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8b47660-42e5-4b79-a465-35ae08105f43",
                "4e2407a4-c5f3-4441-b167-2c6b7c05a0a7",
                "7413eb17-09d3-472a-a134-a724a42e0f3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8cc1056f-7b84-48b8-ba3d-b9d61f61cedb",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.name(), null);\na.name('Sebastian');\nassert.strictEqual(a.name(), 'Sebastian');",
                  "err": {},
                  "uuid": "ae7596cf-1e46-4f99-9302-eb6bb2bbd8c8",
                  "parentUUID": "8cc1056f-7b84-48b8-ba3d-b9d61f61cedb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.name(null));\nassert.deepStrictEqual(a, a.name('Sebastian'));",
                  "err": {},
                  "uuid": "0a665465-0ed6-4423-8d5b-de32870c34af",
                  "parentUUID": "8cc1056f-7b84-48b8-ba3d-b9d61f61cedb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.name('Sebastian');\nassert.strictEqual(a.name(), 'Sebastian');\na.name(null);\nassert.strictEqual(a.name(), null);",
                  "err": {},
                  "uuid": "386f8c11-7ccf-445e-860a-856d82af1157",
                  "parentUUID": "8cc1056f-7b84-48b8-ba3d-b9d61f61cedb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae7596cf-1e46-4f99-9302-eb6bb2bbd8c8",
                "0a665465-0ed6-4423-8d5b-de32870c34af",
                "386f8c11-7ccf-445e-860a-856d82af1157"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "16050215-0873-404d-b0b8-780dd74adc99",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar())).email('foo@example.com');\nassert.strictEqual(a.email(), 'foo@example.com');",
                  "err": {},
                  "uuid": "5ce6b317-c140-43ff-adc6-3f7e58a5eb67",
                  "parentUUID": "16050215-0873-404d-b0b8-780dd74adc99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.email('foo@example.com'));",
                  "err": {},
                  "uuid": "fb6cdd5f-f1e1-427f-afdc-d918b1e86961",
                  "parentUUID": "16050215-0873-404d-b0b8-780dd74adc99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('mail@example.com') > -1);",
                  "err": {},
                  "uuid": "645fec9f-30ae-4a59-b336-e4e0cc8e9fa5",
                  "parentUUID": "16050215-0873-404d-b0b8-780dd74adc99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ce6b317-c140-43ff-adc6-3f7e58a5eb67",
                "fb6cdd5f-f1e1-427f-afdc-d918b1e86961",
                "645fec9f-30ae-4a59-b336-e4e0cc8e9fa5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99c06bc5-ced6-476a-9008-058df1c98ec6",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.mailto(), null);\na.mailto('foo@example.com');\nassert.strictEqual(a.mailto(), 'foo@example.com');",
                  "err": {},
                  "uuid": "f203589d-4568-4fae-b1bc-24c3c2f4304a",
                  "parentUUID": "99c06bc5-ced6-476a-9008-058df1c98ec6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.mailto(null));\nassert.deepStrictEqual(a, a.mailto('foo@example.com'));",
                  "err": {},
                  "uuid": "08e06d9a-1ea0-426d-aac9-69e92d7cefec",
                  "parentUUID": "99c06bc5-ced6-476a-9008-058df1c98ec6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.mailto('mail2@example2.com');\nassert.ok(a.toString().indexOf('EMAIL=mail@example.com') > -1 &&\n    a.toString().indexOf('MAILTO:mail2@example2.com') > -1);",
                  "err": {},
                  "uuid": "3ad09998-a685-4385-9352-c65faf7ac834",
                  "parentUUID": "99c06bc5-ced6-476a-9008-058df1c98ec6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f203589d-4568-4fae-b1bc-24c3c2f4304a",
                "08e06d9a-1ea0-426d-aac9-69e92d7cefec",
                "3ad09998-a685-4385-9352-c65faf7ac834"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3ae951d3-27a4-4def-9b7f-40b9e6ca18c9",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar())).sentBy('foo@example.com');\nassert.strictEqual(a.sentBy(), 'foo@example.com');",
                  "err": {},
                  "uuid": "6bb17854-beca-4a9d-af32-77cbc1bb1832",
                  "parentUUID": "3ae951d3-27a4-4def-9b7f-40b9e6ca18c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.sentBy('foo@example.com'));",
                  "err": {},
                  "uuid": "20fc3697-fbad-431f-89c5-090a42d7e0cc",
                  "parentUUID": "3ae951d3-27a4-4def-9b7f-40b9e6ca18c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com', sentBy: 'bar@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().includes('bar@example.com'));",
                  "err": {},
                  "uuid": "571ef150-77f4-4cb6-a462-bc644083b000",
                  "parentUUID": "3ae951d3-27a4-4def-9b7f-40b9e6ca18c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6bb17854-beca-4a9d-af32-77cbc1bb1832",
                "20fc3697-fbad-431f-89c5-090a42d7e0cc",
                "571ef150-77f4-4cb6-a462-bc644083b000"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e4cf72e-7d3a-46e2-88b7-2fb0c8233948",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.role(ICalAttendeeRole.REQ));",
                  "err": {},
                  "uuid": "884e43d0-8d94-4122-973e-5a0f2237078c",
                  "parentUUID": "2e4cf72e-7d3a-46e2-88b7-2fb0c8233948",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar())).role(ICalAttendeeRole.REQ);\nassert.strictEqual(a.role(), 'REQ-PARTICIPANT');",
                  "err": {},
                  "uuid": "59310818-43dd-4a4b-b70c-34a50b5a7262",
                  "parentUUID": "2e4cf72e-7d3a-46e2-88b7-2fb0c8233948",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.role('');\n}, /Input must be one of the following: CHAIR, REQ-PARTICIPANT, OPT-PARTICIPANT, NON-PARTICIPANT/);",
                  "err": {},
                  "uuid": "3b4d791f-03e8-4e78-b64d-9bc3055645f1",
                  "parentUUID": "2e4cf72e-7d3a-46e2-88b7-2fb0c8233948",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.role('COOKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "db4ef1fc-e546-4844-8650-fc86507c833e",
                  "parentUUID": "2e4cf72e-7d3a-46e2-88b7-2fb0c8233948",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', role: ICalAttendeeRole.NON }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('NON-PARTICIPANT') > -1);",
                  "err": {},
                  "uuid": "0678c702-01c3-4806-815d-3a908b503f09",
                  "parentUUID": "2e4cf72e-7d3a-46e2-88b7-2fb0c8233948",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "884e43d0-8d94-4122-973e-5a0f2237078c",
                "59310818-43dd-4a4b-b70c-34a50b5a7262",
                "3b4d791f-03e8-4e78-b64d-9bc3055645f1",
                "db4ef1fc-e546-4844-8650-fc86507c833e",
                "0678c702-01c3-4806-815d-3a908b503f09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f1496ce0-ae45-4002-bfac-dec3e7ab502a",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.rsvp(null));\nassert.deepStrictEqual(a, a.rsvp(true));",
                  "err": {},
                  "uuid": "0ec3c7cb-652a-4a1a-a1c9-3fbd6af7d4c6",
                  "parentUUID": "f1496ce0-ae45-4002-bfac-dec3e7ab502a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.rsvp(true);\nassert.strictEqual(a.rsvp(), true);\na.rsvp(false);\nassert.strictEqual(a.rsvp(), false);",
                  "err": {},
                  "uuid": "2790270c-b13d-4c10-98a6-8e0c87b789e1",
                  "parentUUID": "f1496ce0-ae45-4002-bfac-dec3e7ab502a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.rsvp(), null);\na.rsvp(false);\nassert.strictEqual(a.rsvp(), false);\na.rsvp(null);\nassert.strictEqual(a.rsvp(), null);",
                  "err": {},
                  "uuid": "3dd57185-2d94-456c-8788-1f01a4555d10",
                  "parentUUID": "f1496ce0-ae45-4002-bfac-dec3e7ab502a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', rsvp: true }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf(';RSVP=TRUE') > -1);",
                  "err": {},
                  "uuid": "5d3facfc-d428-49c0-b09c-4fae783b76b4",
                  "parentUUID": "f1496ce0-ae45-4002-bfac-dec3e7ab502a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ec3c7cb-652a-4a1a-a1c9-3fbd6af7d4c6",
                "2790270c-b13d-4c10-98a6-8e0c87b789e1",
                "3dd57185-2d94-456c-8788-1f01a4555d10",
                "5d3facfc-d428-49c0-b09c-4fae783b76b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b37ad185-b70b-4fd5-8ad7-00d1fac55364",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.status(null));\nassert.deepStrictEqual(a, a.status(ICalAttendeeStatus.ACCEPTED));",
                  "err": {},
                  "uuid": "e8686437-8270-4fb4-a18e-f9ba29a72baa",
                  "parentUUID": "b37ad185-b70b-4fd5-8ad7-00d1fac55364",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.status(), null);\na.status(ICalAttendeeStatus.ACCEPTED);\nassert.strictEqual(a.status(), 'ACCEPTED');\na.status(null);\nassert.strictEqual(a.status(), null);",
                  "err": {},
                  "uuid": "c5639500-245d-43d9-af8a-3cf70ae05a0a",
                  "parentUUID": "b37ad185-b70b-4fd5-8ad7-00d1fac55364",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.status('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "c8f7a99e-486d-45b2-9f60-5563c2f62da0",
                  "parentUUID": "b37ad185-b70b-4fd5-8ad7-00d1fac55364",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', status: ICalAttendeeStatus.DECLINED }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('DECLINED') > -1);",
                  "err": {},
                  "uuid": "fa5aec00-8b05-4824-a7bd-a6eaebadbe64",
                  "parentUUID": "b37ad185-b70b-4fd5-8ad7-00d1fac55364",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', status: ICalAttendeeStatus.NEEDSACTION }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('NEEDS-ACTION') > -1);",
                  "err": {},
                  "uuid": "10274c7a-ddc3-4f72-9926-cc4a09bda24a",
                  "parentUUID": "b37ad185-b70b-4fd5-8ad7-00d1fac55364",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8686437-8270-4fb4-a18e-f9ba29a72baa",
                "c5639500-245d-43d9-af8a-3cf70ae05a0a",
                "c8f7a99e-486d-45b2-9f60-5563c2f62da0",
                "fa5aec00-8b05-4824-a7bd-a6eaebadbe64",
                "10274c7a-ddc3-4f72-9926-cc4a09bda24a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e4a8905-499a-4998-9490-463822d6b415",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a.type(null), a);\nassert.deepStrictEqual(a.type(ICalAttendeeType.INDIVIDUAL), a);",
                  "err": {},
                  "uuid": "c25e6b24-ae40-4277-bd93-4f3ead0403d9",
                  "parentUUID": "8e4a8905-499a-4998-9490-463822d6b415",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.type(), null);\na.type(ICalAttendeeType.ROOM);\nassert.strictEqual(a.type(), 'ROOM');\na.type(null);\nassert.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "d49fabfc-473a-4879-9207-52b76ebcd54a",
                  "parentUUID": "8e4a8905-499a-4998-9490-463822d6b415",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.type('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "2c9622ca-0ef0-423d-8881-52ac8767e4f5",
                  "parentUUID": "8e4a8905-499a-4998-9490-463822d6b415",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mailing-list@example.com',\n    type: ICalAttendeeType.GROUP\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('GROUP') > -1);",
                  "err": {},
                  "uuid": "e4f2f355-56d7-4257-a8fd-58e3a0235d9e",
                  "parentUUID": "8e4a8905-499a-4998-9490-463822d6b415",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c25e6b24-ae40-4277-bd93-4f3ead0403d9",
                "d49fabfc-473a-4879-9207-52b76ebcd54a",
                "2c9622ca-0ef0-423d-8881-52ac8767e4f5",
                "e4f2f355-56d7-4257-a8fd-58e3a0235d9e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "06471e21-ee2d-477f-ba75-c86ef2e74325",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.delegatedTo(null));\nassert.deepStrictEqual(a, a.delegatedTo('foo@example.com'));",
                  "err": {},
                  "uuid": "24b1f1a4-dba4-4356-84c5-f45a4c385484",
                  "parentUUID": "06471e21-ee2d-477f-ba75-c86ef2e74325",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.delegatedTo(), null);\na.delegatedTo('foo@example.com');\nconst result = a.delegatedTo();\nassert.ok(result);\nassert.strictEqual(result.email(), 'foo@example.com');\na.delegatedTo(null);\nassert.strictEqual(a.delegatedTo(), null);",
                  "err": {},
                  "uuid": "e55dd944-31a2-4d9b-9e07-516ecd12be79",
                  "parentUUID": "06471e21-ee2d-477f-ba75-c86ef2e74325",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    delegatedTo: 'foo@example.com'\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('foo@example') > -1);",
                  "err": {},
                  "uuid": "294ab6f1-d790-4438-b909-d04385d9ac11",
                  "parentUUID": "06471e21-ee2d-477f-ba75-c86ef2e74325",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "24b1f1a4-dba4-4356-84c5-f45a4c385484",
                "e55dd944-31a2-4d9b-9e07-516ecd12be79",
                "294ab6f1-d790-4438-b909-d04385d9ac11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e40e131b-f750-4648-8088-b259bffa46f9",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.delegatedFrom(null));\nassert.deepStrictEqual(a, a.delegatedFrom('foo@example.com'));",
                  "err": {},
                  "uuid": "5a9d4f79-ceae-4040-9652-bba8e502804b",
                  "parentUUID": "e40e131b-f750-4648-8088-b259bffa46f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.delegatedFrom(), null);\na.delegatedFrom('foo@example.com');\nlet result = a.delegatedFrom();\nassert.ok(result);\nassert.strictEqual(result.email(), 'foo@example.com');\na.delegatedFrom({\n    name: 'Max Mustermann',\n    email: 'max.mustermann@example.com'\n});\nresult = a.delegatedFrom();\nassert.ok(result);\nassert.strictEqual(result.name(), 'Max Mustermann');\nassert.strictEqual(result.email(), 'max.mustermann@example.com');\na.delegatedFrom(null);\nassert.strictEqual(a.delegatedFrom(), null);",
                  "err": {},
                  "uuid": "74d2343d-b878-4ac6-989d-a18472cfab1f",
                  "parentUUID": "e40e131b-f750-4648-8088-b259bffa46f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    delegatedFrom: 'foo@example.com'\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('foo@example.com') > -1);",
                  "err": {},
                  "uuid": "704ba57c-c048-4a55-8014-01033fc953aa",
                  "parentUUID": "e40e131b-f750-4648-8088-b259bffa46f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a9d4f79-ceae-4040-9652-bba8e502804b",
                "74d2343d-b878-4ac6-989d-a18472cfab1f",
                "704ba57c-c048-4a55-8014-01033fc953aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8dbc6f66-10d7-4eb9-98b4-541901d7eb47",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.delegatesTo({ email: 'mail@example.com' }) instanceof ICalAttendee);",
                  "err": {},
                  "uuid": "fb6ae218-e36a-46f7-b97e-a116b15dc648",
                  "parentUUID": "8dbc6f66-10d7-4eb9-98b4-541901d7eb47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst attendee = new ICalAttendee({\n    name: 'Muh',\n    email: 'muh@example.com'\n}, event);\nassert.deepStrictEqual(new ICalAttendee({ email: 'foo@example.com' }, event).delegatesTo(attendee), attendee);",
                  "err": {},
                  "uuid": "da956943-781d-4a61-850b-6b9643c161f2",
                  "parentUUID": "8dbc6f66-10d7-4eb9-98b4-541901d7eb47",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee = new ICalAttendee({ name: 'Zac', email: 'zac@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar())).delegatesTo({ name: 'Cody', email: 'cody@example.com' });\nassert.strictEqual(attendee.name(), 'Cody');",
                  "err": {},
                  "uuid": "f6a9cef6-ceb8-4a8e-938a-a8f7df52bf40",
                  "parentUUID": "8dbc6f66-10d7-4eb9-98b4-541901d7eb47",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb6ae218-e36a-46f7-b97e-a116b15dc648",
                "da956943-781d-4a61-850b-6b9643c161f2",
                "f6a9cef6-ceb8-4a8e-938a-a8f7df52bf40"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d287dd7-a776-46ce-b542-a32355b974b8",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.delegatesFrom({\n    email: 'bar@example.com'\n}) instanceof ICalAttendee);",
                  "err": {},
                  "uuid": "fec99d76-2f8c-4c2b-81b4-842c36eb2611",
                  "parentUUID": "8d287dd7-a776-46ce-b542-a32355b974b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst attendee = new ICalAttendee({\n    name: 'Muh',\n    email: 'muh@example.com'\n}, event);\nassert.deepStrictEqual(new ICalAttendee({ email: 'bar@example.com' }, event).delegatesFrom(attendee), attendee);",
                  "err": {},
                  "uuid": "76b79c96-2d2c-4ee6-99a3-980221cbd516",
                  "parentUUID": "8d287dd7-a776-46ce-b542-a32355b974b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ name: 'Zac', email: 'zac@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar())).delegatesFrom({ name: 'Cody', email: 'cody@example.com' });\nassert.strictEqual(a.name(), 'Cody');\nconst b = new ICalAttendee({\n    name: 'Zac',\n    email: 'zac@example.com',\n    delegatesFrom: { name: 'Cody', email: 'cody@example.com' }\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(b.name(), 'Zac');",
                  "err": {},
                  "uuid": "f518659b-2fa3-4431-8a70-5b5797099dc9",
                  "parentUUID": "8d287dd7-a776-46ce-b542-a32355b974b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fec99d76-2f8c-4c2b-81b4-842c36eb2611",
                "76b79c96-2d2c-4ee6-99a3-980221cbd516",
                "f518659b-2fa3-4431-8a70-5b5797099dc9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0954b3e0-2fa0-47ba-baa6-6379e2822cd4",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.org' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.x('X-NUM-GUESTS', '5'));\nassert.ok(a.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org'));",
                  "err": {},
                  "uuid": "d5e4158c-2b4c-4913-9387-ec5c91eda0b4",
                  "parentUUID": "0954b3e0-2fa0-47ba-baa6-6379e2822cd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5e4158c-2b4c-4913-9387-ec5c91eda0b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f4af5e30-7dc6-459c-b6c4-b4004e4c6166",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ name: 'Max Mustermann', email: 'max@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.delegatesTo('Moritz <moritz@example.com>');\nassert.deepStrictEqual(a.toJSON(), {\n    delegatedFrom: null,\n    delegatedTo: 'moritz@example.com',\n    email: 'max@example.com',\n    mailto: null,\n    sentBy: null,\n    name: 'Max Mustermann',\n    role: 'REQ-PARTICIPANT',\n    rsvp: null,\n    status: 'DELEGATED',\n    type: null,\n    x: []\n});",
                  "err": {},
                  "uuid": "2ab92bb2-b284-4117-be40-088efec8ade0",
                  "parentUUID": "f4af5e30-7dc6-459c-b6c4-b4004e4c6166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nnew ICalAttendee(a.toJSON(), new ICalEvent({ start: new Date() }, new ICalCalendar()));",
                  "err": {},
                  "uuid": "67c2dce2-ef2e-4725-a6d8-11bb6218985f",
                  "parentUUID": "f4af5e30-7dc6-459c-b6c4-b4004e4c6166",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ab92bb2-b284-4117-be40-088efec8ade0",
                "67c2dce2-ef2e-4725-a6d8-11bb6218985f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9cb0cf62-7cbb-414e-b8d9-863a9197dd28",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "34274a93-13b7-496e-99af-543e3c3d3320",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    prodId: '//sebbo.net//ical-generator//EN',\n    method: ICalCalendarMethod.PUBLISH,\n    name: 'Test Calendar',\n    description: 'Hi, I am the description.',\n    timezone: null,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    source: 'http://example.com/my/original_source.ical',\n    scale: null,\n    ttl: null,\n    events: [],\n    x: []\n};\nconst cal = new ICalCalendar(data);\nassert.deepStrictEqual(cal.toJSON(), data);",
                  "err": {},
                  "uuid": "b98d8535-6771-4bdf-a07a-a3ae425ea885",
                  "parentUUID": "34274a93-13b7-496e-99af-543e3c3d3320",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b98d8535-6771-4bdf-a07a-a3ae425ea885"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3682141-469e-4b9b-8670-f063bd388b01",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.prodId('//loremipsum.de//ical-tests//EN');\nassert.strictEqual(cal.prodId(), '//loremipsum.de//ical-tests//EN');",
                  "err": {},
                  "uuid": "85b05fa1-9da2-4d52-a481-63a66405da42",
                  "parentUUID": "b3682141-469e-4b9b-8670-f063bd388b01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.prodId('//loremipsum.de//ical-tests//EN'));",
                  "err": {},
                  "uuid": "02d18fef-6530-45ca-a904-62034881e447",
                  "parentUUID": "b3682141-469e-4b9b-8670-f063bd388b01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId(256);\n}, /`prodid`/);",
                  "err": {},
                  "uuid": "4923cb19-a906-4c39-b62c-69ffc0171cdd",
                  "parentUUID": "b3682141-469e-4b9b-8670-f063bd388b01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        product: 'ical-tests'\n    });\n}, /`prodid\\.company`/);",
                  "err": {},
                  "uuid": "a4cdffe7-f907-46d4-a59b-5d24595dbf5f",
                  "parentUUID": "b3682141-469e-4b9b-8670-f063bd388b01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        company: 'sebbo.net'\n    });\n}, /`prodid\\.product`/);",
                  "err": {},
                  "uuid": "99860e93-c98e-4604-abc5-1ddbfb07eb1e",
                  "parentUUID": "b3682141-469e-4b9b-8670-f063bd388b01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests'\n});\nassert.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//EN');",
                  "err": {},
                  "uuid": "e9fe6e8b-6c0c-4a6a-9627-8cd21b276fc8",
                  "parentUUID": "b3682141-469e-4b9b-8670-f063bd388b01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests',\n    language: 'DE'\n});\nassert.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//DE');",
                  "err": {},
                  "uuid": "4e4de825-f103-43b7-ab43-78bd5520e40e",
                  "parentUUID": "b3682141-469e-4b9b-8670-f063bd388b01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85b05fa1-9da2-4d52-a481-63a66405da42",
                "02d18fef-6530-45ca-a904-62034881e447",
                "4923cb19-a906-4c39-b62c-69ffc0171cdd",
                "a4cdffe7-f907-46d4-a59b-5d24595dbf5f",
                "99860e93-c98e-4604-abc5-1ddbfb07eb1e",
                "e9fe6e8b-6c0c-4a6a-9627-8cd21b276fc8",
                "4e4de825-f103-43b7-ab43-78bd5520e40e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7b8dc2f-f8d2-4612-b2d3-4c7e1fed51be",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.deepStrictEqual(c, c.method(null), 'method(null)');\nassert.deepStrictEqual(c, c.method(ICalCalendarMethod.PUBLISH), 'method(enum)');",
                  "err": {},
                  "uuid": "ca5054c4-c850-49aa-b91e-33aeca5c426f",
                  "parentUUID": "a7b8dc2f-f8d2-4612-b2d3-4c7e1fed51be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.strictEqual(c.method(), null);\nc.method(null);\nassert.strictEqual(c.method(), null);\nc.method(ICalCalendarMethod.PUBLISH);\nassert.strictEqual(c.method(), 'PUBLISH');\nc.method(null);\nassert.strictEqual(c.method(), null);",
                  "err": {},
                  "uuid": "4e260687-b46e-4be1-b6f1-7582bf0e5f0f",
                  "parentUUID": "a7b8dc2f-f8d2-4612-b2d3-4c7e1fed51be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    c.method('KICK ASS');\n}, /Input must be one of the following: PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER/);",
                  "err": {},
                  "uuid": "7cd2f646-08de-4c49-b14d-d45284484463",
                  "parentUUID": "a7b8dc2f-f8d2-4612-b2d3-4c7e1fed51be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar({ method: ICalCalendarMethod.PUBLISH });\nassert.strictEqual(c.method(), 'PUBLISH');\nc.method(ICalCalendarMethod.ADD);\nassert.strictEqual(c.method(), 'ADD');",
                  "err": {},
                  "uuid": "15d9f986-4828-4a9e-9eda-07f03b3708c3",
                  "parentUUID": "a7b8dc2f-f8d2-4612-b2d3-4c7e1fed51be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca5054c4-c850-49aa-b91e-33aeca5c426f",
                "4e260687-b46e-4be1-b6f1-7582bf0e5f0f",
                "7cd2f646-08de-4c49-b14d-d45284484463",
                "15d9f986-4828-4a9e-9eda-07f03b3708c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c91e9ad6-9a87-40a9-9dea-935693909a74",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.name(null));\nassert.deepStrictEqual(cal, cal.name('Testevents'));",
                  "err": {},
                  "uuid": "9f22ab3d-b37d-4978-ad55-945108abfc52",
                  "parentUUID": "c91e9ad6-9a87-40a9-9dea-935693909a74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.name(), null);\ncal.name('Testevents');\nassert.strictEqual(cal.name(), 'Testevents');\ncal.name(null);\nassert.strictEqual(cal.name(), null);",
                  "err": {},
                  "uuid": "9c1499a8-e377-4298-bc40-733f10989c9c",
                  "parentUUID": "c91e9ad6-9a87-40a9-9dea-935693909a74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().name('Testevents');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert.strictEqual(cal.name(), 'Testevents');",
                  "err": {},
                  "uuid": "f97e8040-9dc3-471f-aa6f-d6d438e2e890",
                  "parentUUID": "c91e9ad6-9a87-40a9-9dea-935693909a74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f22ab3d-b37d-4978-ad55-945108abfc52",
                "9c1499a8-e377-4298-bc40-733f10989c9c",
                "f97e8040-9dc3-471f-aa6f-d6d438e2e890"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb85c98b-01d1-4e1f-9454-f8088028b434",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.description(null));\nassert.deepStrictEqual(cal, cal.description('Testbeschreibung'));",
                  "err": {},
                  "uuid": "3dc52a66-749d-4d6e-8125-a203bb0adc46",
                  "parentUUID": "cb85c98b-01d1-4e1f-9454-f8088028b434",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.description(), null);\ncal.description('Testbeschreibung');\nassert.strictEqual(cal.description(), 'Testbeschreibung');\ncal.description(null);\nassert.strictEqual(cal.description(), null);",
                  "err": {},
                  "uuid": "9e7392b7-59fb-4ac5-ab84-a340ca3cbe09",
                  "parentUUID": "cb85c98b-01d1-4e1f-9454-f8088028b434",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().description('Testbeschreibung');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert.ok(cal.description(), 'Testbeschreibung');",
                  "err": {},
                  "uuid": "dd3b8c56-0f47-420a-adbd-83bd78e636c2",
                  "parentUUID": "cb85c98b-01d1-4e1f-9454-f8088028b434",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3dc52a66-749d-4d6e-8125-a203bb0adc46",
                "9e7392b7-59fb-4ac5-ab84-a340ca3cbe09",
                "dd3b8c56-0f47-420a-adbd-83bd78e636c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bed592be-e023-4606-8122-d973d097e829",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.timezone('Europe/Berlin'));\nassert.deepStrictEqual(cal, cal.timezone(null));\nassert.deepStrictEqual(cal, cal.timezone({\n    name: 'Europe/Berlin',\n    generator: getVtimezoneComponent\n}));",
                  "err": {},
                  "uuid": "f54c360e-3064-47f6-9ff6-75e1535ab6e0",
                  "parentUUID": "bed592be-e023-4606-8122-d973d097e829",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert.strictEqual(cal.timezone(), null);\ncal.timezone({ name: 'Europe/Berlin' });\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "cbafcacf-5e44-44c0-a337-41c6064d7da1",
                  "parentUUID": "bed592be-e023-4606-8122-d973d097e829",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone('UTC');\nassert.strictEqual(cal.timezone(), null);",
                  "err": {},
                  "uuid": "20f0650a-aed0-43a6-945e-0e7494d63790",
                  "parentUUID": "bed592be-e023-4606-8122-d973d097e829",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f54c360e-3064-47f6-9ff6-75e1535ab6e0",
                "cbafcacf-5e44-44c0-a337-41c6064d7da1",
                "20f0650a-aed0-43a6-945e-0e7494d63790"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a3ea0b7-76eb-4f36-86a4-2e361c642fd2",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal.ttl(60 * 60 * 24), cal);\nassert.deepStrictEqual(cal.ttl(moment.duration(2, 'days')), cal);\nassert.deepStrictEqual(cal.ttl(null), cal);",
                  "err": {},
                  "uuid": "de7bbd97-f692-4f9c-a7e4-4e69f6b6b01f",
                  "parentUUID": "9a3ea0b7-76eb-4f36-86a4-2e361c642fd2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.ttl(), null);\ncal.ttl(86400);\nassert.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "2eb6ce68-81fc-4e4d-bf5f-b4d1531b881c",
                  "parentUUID": "9a3ea0b7-76eb-4f36-86a4-2e361c642fd2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().ttl(86400);\nassert.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "46fa4ebd-35f5-4e19-9820-40f0e6983bc9",
                  "parentUUID": "9a3ea0b7-76eb-4f36-86a4-2e361c642fd2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de7bbd97-f692-4f9c-a7e4-4e69f6b6b01f",
                "2eb6ce68-81fc-4e4d-bf5f-b4d1531b881c",
                "46fa4ebd-35f5-4e19-9820-40f0e6983bc9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9f7ce9bb-2077-45e0-8c44-4ec49f4b7783",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.source('http://example.com/my/original_source.ical'));",
                  "err": {},
                  "uuid": "b0f10358-dcf7-4deb-860e-a1b477f410cb",
                  "parentUUID": "9f7ce9bb-2077-45e0-8c44-4ec49f4b7783",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.source(), null);\ncal.source('http://example.com/my/original_source.ical');\nassert.strictEqual(cal.source(), 'http://example.com/my/original_source.ical');\ncal.url(null);\nassert.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "1071158a-3c0c-4ca4-89ee-a52c29db7c52",
                  "parentUUID": "9f7ce9bb-2077-45e0-8c44-4ec49f4b7783",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0f10358-dcf7-4deb-860e-a1b477f410cb",
                "1071158a-3c0c-4ca4-89ee-a52c29db7c52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4f7e99c-aa24-4007-ad46-decff12b0b36",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.url('https://example.com/calendar.ical'));",
                  "err": {},
                  "uuid": "852e29e1-44cc-4548-800e-b296b9bf4456",
                  "parentUUID": "c4f7e99c-aa24-4007-ad46-decff12b0b36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.url(), null);\ncal.url('https://example.com/calendar.ical');\nassert.strictEqual(cal.url(), 'https://example.com/calendar.ical');\ncal.url(null);\nassert.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "2ec6325b-23c7-40ec-8e19-5275e20861b8",
                  "parentUUID": "c4f7e99c-aa24-4007-ad46-decff12b0b36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().url('https://example.com/calendar.ical');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.url(), 'https://example.com/calendar.ical');",
                  "err": {},
                  "uuid": "0e0f7178-fd04-43e7-ba2a-2e627745b972",
                  "parentUUID": "c4f7e99c-aa24-4007-ad46-decff12b0b36",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "852e29e1-44cc-4548-800e-b296b9bf4456",
                "2ec6325b-23c7-40ec-8e19-5275e20861b8",
                "0e0f7178-fd04-43e7-ba2a-2e627745b972"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d9ede81b-0aa0-4e2e-aa55-476ba7736750",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.scale('gregorian'));",
                  "err": {},
                  "uuid": "e1de8cd7-33ce-4628-bddb-ceb4e061bc65",
                  "parentUUID": "d9ede81b-0aa0-4e2e-aa55-476ba7736750",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.scale(), null);\ncal.scale('GREGORIAN');\nassert.strictEqual(cal.scale(), 'GREGORIAN');\ncal.scale(null);\nassert.strictEqual(cal.scale(), null);",
                  "err": {},
                  "uuid": "3a4897b7-a455-4ea2-86ab-21ee3563dde7",
                  "parentUUID": "d9ede81b-0aa0-4e2e-aa55-476ba7736750",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().scale('gregorian');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.scale(), 'GREGORIAN');",
                  "err": {},
                  "uuid": "98ab299a-3a20-4d29-8207-e68b2e7c9fd7",
                  "parentUUID": "d9ede81b-0aa0-4e2e-aa55-476ba7736750",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1de8cd7-33ce-4628-bddb-ceb4e061bc65",
                "3a4897b7-a455-4ea2-86ab-21ee3563dde7",
                "98ab299a-3a20-4d29-8207-e68b2e7c9fd7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd5bb42a-88f2-4862-8a46-a5568c74f6bb",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.ok(cal.createEvent({ start: new Date() }) instanceof ICalEvent);",
                  "err": {},
                  "uuid": "51e76a83-c622-4887-a3a5-9d21850273ba",
                  "parentUUID": "cd5bb42a-88f2-4862-8a46-a5568c74f6bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst event = cal.createEvent({\n    start: new Date(),\n    summary: 'Patch-Day'\n});\nassert.strictEqual(event.summary(), 'Patch-Day');",
                  "err": {},
                  "uuid": "c730ffb0-d625-4406-bbe7-e684eaf3eb92",
                  "parentUUID": "cd5bb42a-88f2-4862-8a46-a5568c74f6bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.doesNotThrow(function () {\n    new ICalCalendar().createEvent({\n        start: new Date(),\n        summary: 'Patch-Day'\n    });\n}, Error);",
                  "err": {},
                  "uuid": "d37e7a73-5277-4ed8-b73c-cdea8bc7da33",
                  "parentUUID": "cd5bb42a-88f2-4862-8a46-a5568c74f6bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51e76a83-c622-4887-a3a5-9d21850273ba",
                "c730ffb0-d625-4406-bbe7-e684eaf3eb92",
                "d37e7a73-5277-4ed8-b73c-cdea8bc7da33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e5845a84-efde-46bd-a7cd-09bdb0f0f26a",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.events().length, 0);\nconst event = cal.createEvent({ start: new Date() });\nassert.strictEqual(cal.events().length, 1);\nassert.deepStrictEqual(cal.events()[0], event);",
                  "err": {},
                  "uuid": "14a72536-97ba-4c1d-b4f9-128f89f3def3",
                  "parentUUID": "e5845a84-efde-46bd-a7cd-09bdb0f0f26a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.length(), 0);\nconst cal2 = cal.events([\n    { start: new Date(), summary: 'Event A' },\n    { start: new Date(), summary: 'Event B' }\n]);\nassert.strictEqual(cal.length(), 2);\nassert.deepStrictEqual(cal2, cal);",
                  "err": {},
                  "uuid": "3b59dad2-ccc1-46e8-8452-09791ae9b2fa",
                  "parentUUID": "e5845a84-efde-46bd-a7cd-09bdb0f0f26a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14a72536-97ba-4c1d-b4f9-128f89f3def3",
                "3b59dad2-ccc1-46e8-8452-09791ae9b2fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36fa67d4-9762-4d1d-8a10-79f6b3141e2d",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.createEvent({ start: new Date() });\nassert.strictEqual(cal.events().length, 1);\nassert.deepStrictEqual(cal.clear(), cal);\nassert.strictEqual(cal.events().length, 0);",
                  "err": {},
                  "uuid": "98524579-72d3-4c64-b459-133b7b8125e2",
                  "parentUUID": "36fa67d4-9762-4d1d-8a10-79f6b3141e2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98524579-72d3-4c64-b459-133b7b8125e2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a6591a1-01e9-4481-a118-9ca5a854be46",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "7d8d263e-5c44-44bd-af5b-1266864d98b0",
                  "parentUUID": "0a6591a1-01e9-4481-a118-9ca5a854be46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));\nassert.deepEqual(cal.x(), [{\n        key: 'X-FOO',\n        value: 'bar'\n    }]);\nassert.deepStrictEqual(cal, cal.x('X-LOREM', 'ipsum'));\nassert.deepEqual(cal.x(), [\n    { key: 'X-FOO', value: 'bar' },\n    { key: 'X-LOREM', value: 'ipsum' }\n]);\nassert.throws(() => {\n    cal.x('LOREM', 'ipsum');\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x('X-LOREM', 1337);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x(5, 'ipsum');\n});",
                  "err": {},
                  "uuid": "341eb4bf-b0cc-4dab-ab79-9edd74faf4d6",
                  "parentUUID": "0a6591a1-01e9-4481-a118-9ca5a854be46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x([{ key: 'X-FOO', value: 'bar' }]));\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert.deepStrictEqual(cal, cal.x([{ key: 'X-LOREM', value: 'ipsum' }]));\nassert.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert.throws(() => {\n    cal.x([{ key: 'LOREM', value: 'ipsum' }]);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 'X-LOREM', value: 1337 }]);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 5, value: 'ipsum' }]);\n});",
                  "err": {},
                  "uuid": "1591cec2-c690-48bc-88ff-239c79988524",
                  "parentUUID": "0a6591a1-01e9-4481-a118-9ca5a854be46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x({ 'X-FOO': 'bar' }));\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert.deepStrictEqual(cal, cal.x({ 'X-LOREM': 'ipsum' }));\nassert.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert.throws(() => {\n    cal.x({ 'LOREM': 'ipsum' });\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x({ 'X-LOREM': 1337 });\n});\nassert.throws(() => {\n    cal.x({ 5: 'ipsum' });\n});",
                  "err": {},
                  "uuid": "0dfc0883-4c75-4e03-8688-1399d22f8644",
                  "parentUUID": "0a6591a1-01e9-4481-a118-9ca5a854be46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepEqual(cal.x(), []);\ncal.x('X-FOO', 'BAR');\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'BAR' }]);\ncal.x({});\nassert.deepEqual(cal.x().length, 0);",
                  "err": {},
                  "uuid": "908ca6fd-d771-4df9-b20e-30d2a49d2ad3",
                  "parentUUID": "0a6591a1-01e9-4481-a118-9ca5a854be46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().x('X-FOO', 'BAR');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.toString().includes('X-FOO'));",
                  "err": {},
                  "uuid": "cde27409-d66c-4a1e-bf1a-951275551beb",
                  "parentUUID": "0a6591a1-01e9-4481-a118-9ca5a854be46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d8d263e-5c44-44bd-af5b-1266864d98b0",
                "341eb4bf-b0cc-4dab-ab79-9edd74faf4d6",
                "1591cec2-c690-48bc-88ff-239c79988524",
                "0dfc0883-4c75-4e03-8688-1399d22f8644",
                "908ca6fd-d771-4df9-b20e-30d2a49d2ad3",
                "cde27409-d66c-4a1e-bf1a-951275551beb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e48473a2-9649-4344-baa9-15afd29a4286",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst cal = new ICalCalendar();\nconst prodId = cal.toJSON().prodId;\nassert.strictEqual(typeof prodId, 'string');\nassert.ok(prodId.length > 0);\nassert.strictEqual((_a = cal.toJSON().events) === null || _a === void 0 ? void 0 : _a.length, 0);",
                  "err": {},
                  "uuid": "43fbd613-182a-4670-991d-2a61cc9cc58b",
                  "parentUUID": "e48473a2-9649-4344-baa9-15afd29a4286",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n    summary: 'HTTP Calendar Event',\n    x: [\n        { key: 'X-FOO', value: 'bar' },\n        { key: 'X-LOREM', value: 'ipsum' }\n    ]\n});\nconst prodId = cal.toJSON().prodId;\nassert.strictEqual(typeof prodId, 'string');\nassert.ok(prodId.length > 0);\nconst events = cal.toJSON().events;\nassert.strictEqual(events === null || events === void 0 ? void 0 : events.length, 1);\nassert.deepEqual(events[0].x, [\n    { 'key': 'X-FOO', 'value': 'bar' },\n    { 'key': 'X-LOREM', 'value': 'ipsum' }\n]);",
                  "err": {},
                  "uuid": "55f23e5b-553b-46ba-8788-0586650bbee7",
                  "parentUUID": "e48473a2-9649-4344-baa9-15afd29a4286",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalCalendar();\nnew ICalCalendar(a.toJSON());",
                  "err": {},
                  "uuid": "0d2b8afd-e4fb-4e7e-850a-394a8b69c55e",
                  "parentUUID": "e48473a2-9649-4344-baa9-15afd29a4286",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43fbd613-182a-4670-991d-2a61cc9cc58b",
                "55f23e5b-553b-46ba-8788-0586650bbee7",
                "0d2b8afd-e4fb-4e7e-850a-394a8b69c55e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5e2f207-8a15-4f08-ba74-6498eb58f259",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.length(), 0);\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.strictEqual(cal.length(), 1);",
                  "err": {},
                  "uuid": "7756ef00-8234-43f3-90de-75558391f03a",
                  "parentUUID": "d5e2f207-8a15-4f08-ba74-6498eb58f259",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7756ef00-8234-43f3-90de-75558391f03a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1945d5d9-eb20-48cb-b9b9-5b344f07457e",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.url('https://sebbo.net/foo');\nassert.ok(cal.toString().indexOf('URL:https://sebbo.net/foo') > -1);",
                  "err": {},
                  "uuid": "05109174-673f-455f-be84-ce66deb1a01d",
                  "parentUUID": "1945d5d9-eb20-48cb-b9b9-5b344f07457e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.method(ICalCalendarMethod.REFRESH);\nassert.ok(cal.toString().indexOf('METHOD:REFRESH') > -1);",
                  "err": {},
                  "uuid": "c5789592-5239-4eb9-b853-402222b0a2de",
                  "parentUUID": "1945d5d9-eb20-48cb-b9b9-5b344f07457e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.name('TEST');\nassert.ok(cal.toString().indexOf('NAME:TEST') > -1);\nassert.ok(cal.toString().indexOf('X-WR-CALNAME:TEST') > -1);",
                  "err": {},
                  "uuid": "6b689450-bfc8-44ef-a322-ab9ab5499d58",
                  "parentUUID": "1945d5d9-eb20-48cb-b9b9-5b344f07457e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.description('TEST');\nassert.ok(cal.toString().indexOf('X-WR-CALDESC:TEST') > -1);",
                  "err": {},
                  "uuid": "56048796-5c91-498c-a426-d0b9005fcff7",
                  "parentUUID": "1945d5d9-eb20-48cb-b9b9-5b344f07457e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone('TEST');\nassert.ok(cal.toString().indexOf('TIMEZONE-ID:TEST') > -1);\nassert.ok(cal.toString().indexOf('X-WR-TIMEZONE:TEST') > -1);",
                  "err": {},
                  "uuid": "89295f20-7c99-4b2a-80d7-514ce1b24aa3",
                  "parentUUID": "1945d5d9-eb20-48cb-b9b9-5b344f07457e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.source('http://foo.bar.example.com/ical.cal');\nassert.ok(cal.toString().includes('http://foo.bar.example.com/ical.cal'));",
                  "err": {},
                  "uuid": "91b82f75-b4bf-43e3-b6a1-76f62c6e89df",
                  "parentUUID": "1945d5d9-eb20-48cb-b9b9-5b344f07457e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: 'Europe/Berlin', generator: getVtimezoneComponent });\ncal.createEvent({\n    start: new Date(),\n    timezone: 'Europe/London'\n});\nassert.ok(cal.toString().includes('BEGIN:VTIMEZONE\\r\\n'), 'BEGIN:VTIMEZONE');\nassert.ok(cal.toString().includes('TZID:Europe/Berlin\\r\\n'), 'TZID:Europe/Berlin');\nassert.ok(cal.toString().includes('TZID:Europe/London\\r\\n'), 'TZID:Europe/London');",
                  "err": {},
                  "uuid": "4dc8fe9b-5d60-4bcc-bf3a-e0b87081b723",
                  "parentUUID": "1945d5d9-eb20-48cb-b9b9-5b344f07457e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: 'FOO', generator: getVtimezoneComponent });\nassert.ok(!cal.toString().includes('TZID:Foo\\r\\n'));",
                  "err": {},
                  "uuid": "a839fac9-91df-4d70-97a8-21b98e3f13eb",
                  "parentUUID": "1945d5d9-eb20-48cb-b9b9-5b344f07457e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: '/Europe/Berlin', generator: getVtimezoneComponent });\nassert.ok(!cal.toString().includes('TZID:/Europe/Berlin\\r\\n'));",
                  "err": {},
                  "uuid": "26c1940a-9419-4218-b2aa-20037c66b4eb",
                  "parentUUID": "1945d5d9-eb20-48cb-b9b9-5b344f07457e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.ttl(moment.duration(3, 'days'));\nassert.ok(cal.toString().indexOf('REFRESH-INTERVAL;VALUE=DURATION:P3D') > -1);\nassert.ok(cal.toString().indexOf('X-PUBLISHED-TTL:P3D') > -1);",
                  "err": {},
                  "uuid": "3070ceeb-84de-4066-842e-450c99aee110",
                  "parentUUID": "1945d5d9-eb20-48cb-b9b9-5b344f07457e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05109174-673f-455f-be84-ce66deb1a01d",
                "c5789592-5239-4eb9-b853-402222b0a2de",
                "6b689450-bfc8-44ef-a322-ab9ab5499d58",
                "56048796-5c91-498c-a426-d0b9005fcff7",
                "89295f20-7c99-4b2a-80d7-514ce1b24aa3",
                "91b82f75-b4bf-43e3-b6a1-76f62c6e89df",
                "4dc8fe9b-5d60-4bcc-bf3a-e0b87081b723",
                "a839fac9-91df-4d70-97a8-21b98e3f13eb",
                "26c1940a-9419-4218-b2aa-20037c66b4eb",
                "3070ceeb-84de-4066-842e-450c99aee110"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e712eb39-51c6-4968-a746-1f46248a2179",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event'\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_01.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "11da6e59-786b-4b70-ba8f-9b068be6d6ca",
              "parentUUID": "e712eb39-51c6-4968-a746-1f46248a2179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: 'localhost',\n        transparency: ICalEventTransparency.OPAQUE,\n        description: {\n            plain: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop',\n            html: '<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>'\n        }\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_02.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "4dcec1a9-c0c8-49c1-b823-bd13b5843c6c",
              "parentUUID": "e712eb39-51c6-4968-a746-1f46248a2179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({\n        method: ICalCalendarMethod.ADD,\n        prodId: '//sebbo.net//ical-generator.tests//EN'\n    });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: {\n            title: 'Apple Store Kurfürstendamm',\n            address: 'Kurfürstendamm 26, 10719 Berlin, Deutschland',\n            radius: 141.1751386318387,\n            geo: { lat: 52.503630, lon: 13.328650 }\n        },\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        status: ICalEventStatus.CONFIRMED,\n        categories: [{ name: 'WORK' }],\n        url: 'http://sebbo.net/',\n        attachments: [\n            'https://files.sebbo.net/calendar/attachments/foo'\n        ]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_03.ics', 'utf8'), 'toString');\n    assert.strictEqual(ical(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "7d665090-fb83-446b-b7c3-99833cb57f92",
              "parentUUID": "e712eb39-51c6-4968-a746-1f46248a2179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.timezone({ name: null, generator: getVtimezoneComponent });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                exclude: new Date('Fr Oct 06 2013 23:15:00 UTC')\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30'),\n            end: new Date('Fr Oct 06 2013 23:15:00'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            timezone: 'Europe/Berlin',\n            summary: 'repeating by day, twice',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                count: 2\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by 3 weeks, until 2014',\n            repeating: {\n                freq: ICalEventRepeatingFreq.WEEKLY,\n                interval: 3,\n                until: new Date('We Jan 01 2014 00:00:00 UTC')\n            }\n        }\n    ]);\n    assert.strictEqual(cal.toString(), yield fs.readFile(resultDir + '/generate_04.ics', 'utf8'), 'first check');\n    // Wount be same, as reference to VTimezone generator is not exported\n    // assert.strictEqual(ical(cal.toJSON()).toString(), string);\n    cal.timezone(null);\n    assert.strictEqual(ical(cal.toJSON()).toString(), cal.toString(), 'second check');\n});",
              "err": {},
              "uuid": "200a20d3-013f-47fd-a0b3-98b7609ff4c7",
              "parentUUID": "e712eb39-51c6-4968-a746-1f46248a2179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '1',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'floating',\n        floating: true\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_05.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "b0f540b9-975f-4426-b6bf-60279a7a5946",
              "parentUUID": "e712eb39-51c6-4968-a746-1f46248a2179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN', method: ICalCalendarMethod.PUBLISH });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        attendees: [\n            {\n                name: 'Smith, Matt; (\"Sales\")',\n                email: 'matt@example.com',\n                delegatesTo: {\n                    name: 'John',\n                    email: 'john@example.com',\n                    status: ICalAttendeeStatus.ACCEPTED\n                }\n            }\n        ],\n        alarms: [\n            {\n                type: ICalAlarmType.display,\n                trigger: 60 * 10,\n                repeat: {\n                    times: 2,\n                    interval: 60\n                }\n            },\n            {\n                type: ICalAlarmType.display,\n                trigger: 60 * 60,\n                description: 'I\\'m a reminder :)'\n            }\n        ],\n        status: ICalEventStatus.CONFIRMED,\n        url: 'http://sebbo.net/'\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_06.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "f43ae51b-ec42-43f3-96ea-2314bc8dcf95",
              "parentUUID": "e712eb39-51c6-4968-a746-1f46248a2179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                byMonth: [1, 4, 7, 10]\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on Mo/We/Fr, twice',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                count: 2,\n                byDay: [ICalWeekday.MO, ICalWeekday.WE, ICalWeekday.FR]\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on 1st and 15th',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                interval: 1,\n                byMonthDay: [1, 15]\n            }\n        }\n    ]);\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_07.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "f017bc54-bf61-4217-a315-217b611474f0",
              "parentUUID": "e712eb39-51c6-4968-a746-1f46248a2179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event',\n        attendees: [{\n                type: ICalAttendeeType.INDIVIDUAL,\n                role: ICalAttendeeRole.REQ,\n                status: ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_08.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "861b9dce-d8b2-4cbb-9123-1e6dd2372849",
              "parentUUID": "e712eb39-51c6-4968-a746-1f46248a2179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ method: ICalCalendarMethod.REQUEST, prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: {\n            name: 'Sebastian Pekarek',\n            email: 'mail@sebbo.net',\n            mailto: 'mail2@example2.com'\n        },\n        attendees: [{\n                type: ICalAttendeeType.INDIVIDUAL,\n                role: ICalAttendeeRole.REQ,\n                status: ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_09.ics', 'utf8'), 'toString');\n    assert.strictEqual(ical(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "683066b5-05df-448c-8c9d-aaee156abc87",
              "parentUUID": "e712eb39-51c6-4968-a746-1f46248a2179",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "11da6e59-786b-4b70-ba8f-9b068be6d6ca",
            "4dcec1a9-c0c8-49c1-b823-bd13b5843c6c",
            "7d665090-fb83-446b-b7c3-99833cb57f92",
            "200a20d3-013f-47fd-a0b3-98b7609ff4c7",
            "b0f540b9-975f-4426-b6bf-60279a7a5946",
            "f43ae51b-ec42-43f3-96ea-2314bc8dcf95",
            "f017bc54-bf61-4217-a315-217b611474f0",
            "861b9dce-d8b2-4cbb-9123-1e6dd2372849",
            "683066b5-05df-448c-8c9d-aaee156abc87"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "567ac95e-de9d-4e05-a608-dda62d9db6f7",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a3e35954-26a9-4238-8f46-23da291d7ced",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalCategory({\n    // @ts-ignore\n    unknown: true,\n    name: 'FOO'\n});\nassert.strictEqual(a.name(), 'FOO');",
                  "err": {},
                  "uuid": "80e702c4-1416-446e-b2db-1b70eb642b2c",
                  "parentUUID": "a3e35954-26a9-4238-8f46-23da291d7ced",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category constructor() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalCategory({});\n}, /`name`/);",
                  "err": {},
                  "uuid": "3ca14d03-8a9c-466c-ae3c-87ef6a3976a7",
                  "parentUUID": "a3e35954-26a9-4238-8f46-23da291d7ced",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80e702c4-1416-446e-b2db-1b70eb642b2c",
                "3ca14d03-8a9c-466c-ae3c-87ef6a3976a7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2dfa15bb-7e87-4c24-b52f-ee8b02630c6e",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'foo' });\nassert.deepStrictEqual(c, c.name('FOO'));",
                  "err": {},
                  "uuid": "d95e032b-5295-47e6-9b03-499df8521791",
                  "parentUUID": "2dfa15bb-7e87-4c24-b52f-ee8b02630c6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'foo' });\nassert.strictEqual(c.name(), 'foo');\nc.name('HELLO-WORLD');\nassert.strictEqual(c.name(), 'HELLO-WORLD');",
                  "err": {},
                  "uuid": "21a74131-9da8-4f4b-98fa-3eb2130894bf",
                  "parentUUID": "2dfa15bb-7e87-4c24-b52f-ee8b02630c6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'BANANA' });\nassert.ok(c.toString().includes('BANANA'));",
                  "err": {},
                  "uuid": "83544d41-b313-4dfe-b441-61791a9ead7c",
                  "parentUUID": "2dfa15bb-7e87-4c24-b52f-ee8b02630c6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d95e032b-5295-47e6-9b03-499df8521791",
                "21a74131-9da8-4f4b-98fa-3eb2130894bf",
                "83544d41-b313-4dfe-b441-61791a9ead7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a69e680a-4a3d-4595-aa61-1ec4b725bbad",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'FOOBAR' });\nassert.deepStrictEqual(c.toJSON(), { name: 'FOOBAR' });",
                  "err": {},
                  "uuid": "4c8cf259-40fe-4629-a123-8f6d7d821314",
                  "parentUUID": "a69e680a-4a3d-4595-aa61-1ec4b725bbad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c8cf259-40fe-4629-a123-8f6d7d821314"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f3cc1d41-2090-4215-9d3c-2ecb7c66781c",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "587efbf2-895d-44bd-a62c-17feb82d8452",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    id: 'FOO',\n    sequence: 1,\n    start: new Date().toJSON(),\n    end: new Date().toJSON(),\n    recurrenceId: new Date().toJSON(),\n    timezone: 'Europe/Berlin',\n    stamp: new Date().toJSON(),\n    allDay: true,\n    floating: false,\n    repeating: null,\n    summary: 'Hello.',\n    location: null,\n    description: null,\n    organizer: null,\n    attendees: [],\n    alarms: [],\n    categories: [],\n    status: null,\n    busystatus: ICalEventBusyStatus.BUSY,\n    priority: 5,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    attachments: [\n        'https://files.sebbo.net/calendar/attachments/foo'\n    ],\n    transparency: ICalEventTransparency.TRANSPARENT,\n    created: new Date().toJSON(),\n    lastModified: new Date().toJSON(),\n    class: null,\n    x: []\n};\nconst event = new ICalEvent(data, new ICalCalendar());\nassert.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "3986e068-3f34-489d-951e-869387886cd8",
                  "parentUUID": "587efbf2-895d-44bd-a62c-17feb82d8452",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalEvent({ summary: 'Testevent' }, null);\n}, /`calendar`/);",
                  "err": {},
                  "uuid": "53549f49-229e-4c54-9fba-75517146acc8",
                  "parentUUID": "587efbf2-895d-44bd-a62c-17feb82d8452",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3986e068-3f34-489d-951e-869387886cd8",
                "53549f49-229e-4c54-9fba-75517146acc8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7edbcc27-38d6-4c23-9a8b-bf7f6f8c3d4a",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.id(1048));",
                  "err": {},
                  "uuid": "9134a897-cf45-41d0-8533-3dce3b164285",
                  "parentUUID": "7edbcc27-38d6-4c23-9a8b-bf7f6f8c3d4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar()).id(512);\nassert.strictEqual(event.id(), '512');\nevent.id('xyz');\nassert.strictEqual(event.id(), 'xyz');",
                  "err": {},
                  "uuid": "4615f2e8-01f1-41a6-b2a6-d8a19496cd27",
                  "parentUUID": "7edbcc27-38d6-4c23-9a8b-bf7f6f8c3d4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9134a897-cf45-41d0-8533-3dce3b164285",
                "4615f2e8-01f1-41a6-b2a6-d8a19496cd27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f87a1915-7f71-4374-b1be-c870c95215aa",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.uid(1048));",
                  "err": {},
                  "uuid": "49092701-086e-4ea7-b88a-01efb07e1a98",
                  "parentUUID": "f87a1915-7f71-4374-b1be-c870c95215aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar()).uid(512);\nassert.strictEqual(event.uid(), '512');\nevent.id('xyz');\nassert.strictEqual(event.uid(), 'xyz');",
                  "err": {},
                  "uuid": "2350d341-cbdb-4666-9533-63ed0a5de58f",
                  "parentUUID": "f87a1915-7f71-4374-b1be-c870c95215aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49092701-086e-4ea7-b88a-01efb07e1a98",
                "2350d341-cbdb-4666-9533-63ed0a5de58f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "25a4d52e-c955-4041-9027-1b3553b826d6",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.sequence(1));",
                  "err": {},
                  "uuid": "d2a29c38-ea0e-4fbc-8f15-89a901569d37",
                  "parentUUID": "25a4d52e-c955-4041-9027-1b3553b826d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar()).sequence(1048);\nassert.strictEqual(event.sequence(), 1048);",
                  "err": {},
                  "uuid": "42a9312f-22be-4f00-8b08-56514a78e334",
                  "parentUUID": "25a4d52e-c955-4041-9027-1b3553b826d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.sequence('hello');\n}, /`sequence`/);",
                  "err": {},
                  "uuid": "c1b98ef6-c8d3-422e-86bf-fa04788bec20",
                  "parentUUID": "25a4d52e-c955-4041-9027-1b3553b826d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar()).sequence(12);\nassert.strictEqual(event.sequence(), 12);\nevent.sequence(0);\nassert.strictEqual(event.sequence(), 0);",
                  "err": {},
                  "uuid": "a9b2296b-fb6b-41aa-bf4b-59cc278ce2f5",
                  "parentUUID": "25a4d52e-c955-4041-9027-1b3553b826d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2a29c38-ea0e-4fbc-8f15-89a901569d37",
                "42a9312f-22be-4f00-8b08-56514a78e334",
                "c1b98ef6-c8d3-422e-86bf-fa04788bec20",
                "a9b2296b-fb6b-41aa-bf4b-59cc278ce2f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fad8d28a-4006-4229-b9c8-8044ce562e97",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nevent.start(now);\nassert.strictEqual(event.start(), now);",
                  "err": {},
                  "uuid": "ccf21220-713a-475c-bf03-d0422d9ee4ef",
                  "parentUUID": "fad8d28a-4006-4229-b9c8-8044ce562e97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.start(date));\nassert.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "f2ddd4cf-d690-45b1-98ef-be168ef8e9c3",
                  "parentUUID": "fad8d28a-4006-4229-b9c8-8044ce562e97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.start(date));\nassert.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "1a47ccf2-b899-4309-8985-d489a2a960ce",
                  "parentUUID": "fad8d28a-4006-4229-b9c8-8044ce562e97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.start(3);\n}, /`start`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.start(null);\n}, /`start`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.start(NaN);\n}, /`start`/, 'NaN');\nassert.throws(function () {\n    event.start(new Date('hallo'));\n}, /`start`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "82daddda-2ae7-42b2-9649-93a8061f1536",
                  "parentUUID": "fad8d28a-4006-4229-b9c8-8044ce562e97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment().add(5, 'minutes');\nconst end = moment();\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .end(end)\n    .start(start);\nassert.deepStrictEqual(event.start(), end);\nassert.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "46bdd345-ab08-4114-81e7-1c2e7b31f1a4",
                  "parentUUID": "fad8d28a-4006-4229-b9c8-8044ce562e97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.start(moment()));\nassert.deepStrictEqual(event, event.start(new Date()));",
                  "err": {},
                  "uuid": "7f81973f-d9df-4f06-ba94-33ab61fef6d3",
                  "parentUUID": "fad8d28a-4006-4229-b9c8-8044ce562e97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ccf21220-713a-475c-bf03-d0422d9ee4ef",
                "f2ddd4cf-d690-45b1-98ef-be168ef8e9c3",
                "1a47ccf2-b899-4309-8985-d489a2a960ce",
                "82daddda-2ae7-42b2-9649-93a8061f1536",
                "46bdd345-ab08-4114-81e7-1c2e7b31f1a4",
                "7f81973f-d9df-4f06-ba94-33ab61fef6d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "711e283f-6a91-44c2-88bd-04cf1192735c",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({ start: moment().subtract({ minute: 1 }) }, new ICalCalendar());\nevent.end(now);\nassert.deepStrictEqual(event.end(), now);",
                  "err": {},
                  "uuid": "3dcdb912-1d73-4502-b65b-0e8b798baed2",
                  "parentUUID": "711e283f-6a91-44c2-88bd-04cf1192735c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.end(date));\nassert.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "ef857839-16bb-4589-ae9b-7fe5cfb1154e",
                  "parentUUID": "711e283f-6a91-44c2-88bd-04cf1192735c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.end(date));\nassert.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "25e0b842-e58e-40b2-95c9-aea56af9b106",
                  "parentUUID": "711e283f-6a91-44c2-88bd-04cf1192735c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.end(3);\n}, /`end`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.end(NaN);\n}, /`end`/, 'NaN');\nassert.throws(function () {\n    event.end(new Date('hallo'));\n}, /`end`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "3467b5ec-ec1b-4a0d-a315-5139fdba57ba",
                  "parentUUID": "711e283f-6a91-44c2-88bd-04cf1192735c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment().add(5, 'minutes');\nconst end = moment();\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .start(start)\n    .end(end);\nassert.deepStrictEqual(event.start(), end);\nassert.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "4afdeab6-8dce-4768-ba97-dc794970ba32",
                  "parentUUID": "711e283f-6a91-44c2-88bd-04cf1192735c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.end(moment()));\nassert.deepStrictEqual(event, event.end(new Date()));",
                  "err": {},
                  "uuid": "35334697-68dd-4e3b-96d7-2894395b3b8c",
                  "parentUUID": "711e283f-6a91-44c2-88bd-04cf1192735c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3dcdb912-1d73-4502-b65b-0e8b798baed2",
                "ef857839-16bb-4589-ae9b-7fe5cfb1154e",
                "25e0b842-e58e-40b2-95c9-aea56af9b106",
                "3467b5ec-ec1b-4a0d-a315-5139fdba57ba",
                "4afdeab6-8dce-4768-ba97-dc794970ba32",
                "35334697-68dd-4e3b-96d7-2894395b3b8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30846065-f46f-49fd-961a-a9babea3462e",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nevent.recurrenceId(now);\nassert.deepStrictEqual(event.recurrenceId(), now);",
                  "err": {},
                  "uuid": "897e6bca-3b4f-470e-a8a4-85f284b6acaa",
                  "parentUUID": "30846065-f46f-49fd-961a-a9babea3462e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.recurrenceId(date));\nassert.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "52d384a6-6499-42df-b950-f6376ebcf84e",
                  "parentUUID": "30846065-f46f-49fd-961a-a9babea3462e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.recurrenceId(date));\nassert.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "c99ba24e-cc1e-412b-8d3f-fed6028a5b01",
                  "parentUUID": "30846065-f46f-49fd-961a-a9babea3462e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(3);\n}, /`recurrenceId`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(NaN);\n}, /`recurrenceId`/, 'NaN');\nassert.throws(function () {\n    event.recurrenceId(new Date('hallo'));\n}, /`recurrenceId`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "d8cfb433-3d32-4301-bbb6-4a388bc7a2ea",
                  "parentUUID": "30846065-f46f-49fd-961a-a9babea3462e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.recurrenceId(moment()));\nassert.deepStrictEqual(event, event.recurrenceId(new Date()));",
                  "err": {},
                  "uuid": "3920fae7-c7a9-40a5-8fa3-a0293edb51f4",
                  "parentUUID": "30846065-f46f-49fd-961a-a9babea3462e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "897e6bca-3b4f-470e-a8a4-85f284b6acaa",
                "52d384a6-6499-42df-b950-f6376ebcf84e",
                "c99ba24e-cc1e-412b-8d3f-fed6028a5b01",
                "d8cfb433-3d32-4301-bbb6-4a388bc7a2ea",
                "3920fae7-c7a9-40a5-8fa3-a0293edb51f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a01ec63e-fd80-456d-959d-804721810229",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .timezone('Europe/Berlin');\nassert.strictEqual(e.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "6c1fed25-1d4a-471b-8f56-5d33a4b2a3df",
                  "parentUUID": "a01ec63e-fd80-456d-959d-804721810229",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, cal);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), null);\ncal.timezone('Europe/London');\nassert.strictEqual(cal.timezone(), 'Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/London');\ne.timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone(null);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "3e129c75-7e1f-4251-8491-4abe7aeef38b",
                  "parentUUID": "a01ec63e-fd80-456d-959d-804721810229",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.timezone('Europe/Berlin'));",
                  "err": {},
                  "uuid": "c3314d47-9779-47aa-8424-301949ded81c",
                  "parentUUID": "a01ec63e-fd80-456d-959d-804721810229",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "e9be3580-6b5c-488e-9deb-9d808161f527",
                  "parentUUID": "a01ec63e-fd80-456d-959d-804721810229",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.floating(true);\ne.timezone('Europe/London');\nassert.strictEqual(e.floating(), false);",
                  "err": {},
                  "uuid": "d1358f7a-a98c-4ec6-b8af-5f8ffff58813",
                  "parentUUID": "a01ec63e-fd80-456d-959d-804721810229",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.floating(true);\ne.timezone(null);\nassert.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "c8499e9b-dcee-4f69-873d-dbeca28a9a7e",
                  "parentUUID": "a01ec63e-fd80-456d-959d-804721810229",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    timezone: 'Europe/Berlin',\n    summary: 'Example Event'\n}, new ICalCalendar());\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone('UTC');\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "dc0f50cb-8c1e-4b54-9783-9ea6356a05e5",
                  "parentUUID": "a01ec63e-fd80-456d-959d-804721810229",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c1fed25-1d4a-471b-8f56-5d33a4b2a3df",
                "3e129c75-7e1f-4251-8491-4abe7aeef38b",
                "c3314d47-9779-47aa-8424-301949ded81c",
                "e9be3580-6b5c-488e-9deb-9d808161f527",
                "d1358f7a-a98c-4ec6-b8af-5f8ffff58813",
                "c8499e9b-dcee-4f69-873d-dbeca28a9a7e",
                "dc0f50cb-8c1e-4b54-9783-9ea6356a05e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3cb5544e-1a25-4ce0-a590-50eea6f44e19",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment().add(1, 'day');\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar()).stamp(now);\nassert.deepStrictEqual(e.stamp(), now);",
                  "err": {},
                  "uuid": "e30815b4-d349-435b-a313-53ec398d4830",
                  "parentUUID": "3cb5544e-1a25-4ce0-a590-50eea6f44e19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.stamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "3a824548-3bc6-464f-994a-6aaf59a05e35",
                  "parentUUID": "3cb5544e-1a25-4ce0-a590-50eea6f44e19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.stamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "54e2f260-3e1b-4483-993d-4fc197251fe2",
                  "parentUUID": "3cb5544e-1a25-4ce0-a590-50eea6f44e19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(3);\n}, /`stamp`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(null);\n}, /`stamp`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(NaN);\n}, /`stamp`/, 'NaN');\nassert.throws(function () {\n    event.stamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "d6933130-54f3-4522-95c5-02a97fa45d8f",
                  "parentUUID": "3cb5544e-1a25-4ce0-a590-50eea6f44e19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.stamp(new Date()));",
                  "err": {},
                  "uuid": "1ae2c222-f883-41ec-b208-cdd21a1e20ac",
                  "parentUUID": "3cb5544e-1a25-4ce0-a590-50eea6f44e19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e30815b4-d349-435b-a313-53ec398d4830",
                "3a824548-3bc6-464f-994a-6aaf59a05e35",
                "54e2f260-3e1b-4483-993d-4fc197251fe2",
                "d6933130-54f3-4522-95c5-02a97fa45d8f",
                "1ae2c222-f883-41ec-b208-cdd21a1e20ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "842fdae5-e68e-4cb9-b749-ece77ca23aa9",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment().add(1, 'day');\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar()).timestamp(now);\nassert.deepStrictEqual(e.timestamp(), now);",
                  "err": {},
                  "uuid": "2ecb4a6f-e777-475a-b165-793f1d00ff8c",
                  "parentUUID": "842fdae5-e68e-4cb9-b749-ece77ca23aa9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.timestamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "92e0df56-18a6-43d5-b153-95ce3f1aff18",
                  "parentUUID": "842fdae5-e68e-4cb9-b749-ece77ca23aa9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.timestamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "66b7b4f8-9ea4-4ce7-a90b-57034f75d8f2",
                  "parentUUID": "842fdae5-e68e-4cb9-b749-ece77ca23aa9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(3);\n}, /`stamp`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(null);\n}, /`stamp`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(NaN);\n}, /`stamp`/, 'NaN');\nassert.throws(function () {\n    event.timestamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "d08ea30c-88f7-49d8-b088-8dc51127ac69",
                  "parentUUID": "842fdae5-e68e-4cb9-b749-ece77ca23aa9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.timestamp(new Date()));",
                  "err": {},
                  "uuid": "19fcb3d2-49a9-4a00-813a-4638345cfedc",
                  "parentUUID": "842fdae5-e68e-4cb9-b749-ece77ca23aa9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ecb4a6f-e777-475a-b165-793f1d00ff8c",
                "92e0df56-18a6-43d5-b153-95ce3f1aff18",
                "66b7b4f8-9ea4-4ce7-a90b-57034f75d8f2",
                "d08ea30c-88f7-49d8-b088-8dc51127ac69",
                "19fcb3d2-49a9-4a00-813a-4638345cfedc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "87283df9-1731-4617-a872-3b8db134c8bd",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.allDay(true);\nassert.strictEqual(e.allDay(), true);",
                  "err": {},
                  "uuid": "89c7914a-29dc-4556-8835-0fb3c35ede03",
                  "parentUUID": "87283df9-1731-4617-a872-3b8db134c8bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.allDay(true));",
                  "err": {},
                  "uuid": "61a5ceb2-1f05-4d56-91fa-a0f598f39496",
                  "parentUUID": "87283df9-1731-4617-a872-3b8db134c8bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.allDay(true);\nassert.strictEqual(event.allDay(), true);",
                  "err": {},
                  "uuid": "8b23ef92-8676-4deb-a6f8-be5c199ceb60",
                  "parentUUID": "87283df9-1731-4617-a872-3b8db134c8bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89c7914a-29dc-4556-8835-0fb3c35ede03",
                "61a5ceb2-1f05-4d56-91fa-a0f598f39496",
                "8b23ef92-8676-4deb-a6f8-be5c199ceb60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "131bcabb-05e4-4102-81c4-77ab2e687eda",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar()).floating(true);\nassert.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "9d91349e-0d36-4276-8c3c-077fe50318c7",
                  "parentUUID": "131bcabb-05e4-4102-81c4-77ab2e687eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.floating(false));\nassert.deepStrictEqual(e, e.floating(true));",
                  "err": {},
                  "uuid": "54296ace-3e6e-4d42-b6f1-6ac2f4e218af",
                  "parentUUID": "131bcabb-05e4-4102-81c4-77ab2e687eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.floating(true);\nassert.strictEqual(event.floating(), true);",
                  "err": {},
                  "uuid": "79360488-11da-4cd9-9d1f-b0bca29d81ca",
                  "parentUUID": "131bcabb-05e4-4102-81c4-77ab2e687eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\ne.floating(true);\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "31bfa670-34bf-4b81-9e30-dedd543b0ba7",
                  "parentUUID": "131bcabb-05e4-4102-81c4-77ab2e687eda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\ne.floating(false);\nassert.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "0c5b6d59-5e76-4fce-85e8-c00e786b116e",
                  "parentUUID": "131bcabb-05e4-4102-81c4-77ab2e687eda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d91349e-0d36-4276-8c3c-077fe50318c7",
                "54296ace-3e6e-4d42-b6f1-6ac2f4e218af",
                "79360488-11da-4cd9-9d1f-b0bca29d81ca",
                "31bfa670-34bf-4b81-9e30-dedd543b0ba7",
                "0c5b6d59-5e76-4fce-85e8-c00e786b116e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = {\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    count: 5,\n    interval: 2,\n    until: moment(),\n    exclude: [moment()]\n};\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e.repeating(), null);\ne.repeating(options);\nassert.strictEqual(JSON.stringify(e.repeating(), null, '  '), JSON.stringify(options, null, '  '));\ne.repeating(null);\nassert.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "3a44cd9c-0059-4e7a-9553-156c8fcc0296",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.repeating(null));\nassert.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "780bbe72-234e-4052-9c98-219dd9263c3c",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.repeating(null), 'repeating(null)');\nassert.deepStrictEqual(e, e.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY\n}), 'repeating({freq: \\'MONTHLY\\'})');",
                  "err": {},
                  "uuid": "c2842783-4820-46ad-b368-24a0a3763a1c",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        // @ts-ignore\n        repeating: {}\n    }, new ICalCalendar());\n}, /Input must be one of the following: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY/);",
                  "err": {},
                  "uuid": "65da6319-acbd-4829-ae75-ab3788d64fc2",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            // @ts-ignore\n            freq: 'hello'\n        }\n    }, new ICalCalendar());\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "35d8b37a-c1c7-4fd2-81f8-b2eb31008f60",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY });\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.strictEqual(result.freq, 'MONTHLY');",
                  "err": {},
                  "uuid": "28d73c30-e74b-4453-81bb-da5dcbda6051",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            count: Infinity\n        }\n    }, new ICalCalendar());\n}, /`repeating.count` must be a finite number!/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            count: 'abc'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.count` must be a finite number!/);",
                  "err": {},
                  "uuid": "55daa795-40ea-483a-8ca0-8ecf0606c7e7",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, count: 5 });\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.strictEqual(result.count, 5);",
                  "err": {},
                  "uuid": "b783ace4-21bb-4580-a96e-6ed85658804e",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: Infinity\n        }\n    }, new ICalCalendar());\n}, /`repeating.interval` must be a finite number!/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            interval: 'abc'\n        }\n    }, new ICalCalendar());\n}, /`repeating.interval` must be a finite number!/);",
                  "err": {},
                  "uuid": "3f2a5ffb-5b96-4719-bf42-592fe2e29a68",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, interval: 5 });\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.strictEqual(result.interval, 5);",
                  "err": {},
                  "uuid": "7f1b3772-841f-422c-b799-706e5fa53d8e",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            until: null\n        }\n    }, new ICalCalendar());\n}, /Error: `repeating\\.until` has to be a valid date!/);",
                  "err": {},
                  "uuid": "11499869-f8ec-4862-8935-5677550602fd",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "449ad2c5-1cc1-4977-9611-3b506f445754",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "ec7f4052-37ee-429b-a47f-cbdb4b3e90f3",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week');\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "45fcf4e0-7dc6-4a7f-be92-654b969b764c",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: 3 });\n}, /`repeating.until`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: null });\n}, /`repeating.until`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: NaN });\n}, /`repeating.until`/, 'NaN');\nassert.throws(function () {\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: new Date('foo') });\n}, /`repeating.until`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "eeb42006-c4a8-42a0-a9b4-06180d381002",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', 'BAR', 'th']\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', Infinity, 'th']\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "5681b70c-f8d3-48e7-ab18-1349ca3e01a6",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    byDay: [ICalWeekday.SU, ICalWeekday.WE, ICalWeekday.TH]\n});\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.byDay, ['SU', 'WE', 'TH']);",
                  "err": {},
                  "uuid": "5ff94b22-1d91-421d-9227-dba12626360f",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonth: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonth` contains invalid value `FOO`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonth: [1, 14, 7]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonth` contains invalid value `14`/);",
                  "err": {},
                  "uuid": "ea4dd000-4dd0-44d1-a4d2-2e545bc76da6",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, byMonth: [1, 12, 7] });\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.byMonth, [1, 12, 7]);",
                  "err": {},
                  "uuid": "e1cea45c-3044-4e7a-8dda-1ad50dc5ef76",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonthDay: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `FOO`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 32, -15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `32`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [-1, -32, 15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `-32`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 0, 15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `0`/);",
                  "err": {},
                  "uuid": "d85c9ae7-3334-4b6f-a3ba-ed621d4b716a",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, byMonthDay: [1, 15] });\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.byMonthDay, [1, 15]);",
                  "err": {},
                  "uuid": "07df3e25-0d52-4298-bb38-157fb22b4664",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [367]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `367`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [-367]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `-367`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [0]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `0`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            // @ts-ignore\n            bySetPos: ['FOO']\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `FOO`/);",
                  "err": {},
                  "uuid": "781a6d4c-f801-4cf7-821a-cdea7bbdb47d",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            bySetPos: 6\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/);",
                  "err": {},
                  "uuid": "11412bfa-78cb-4c23-befe-39c085f185f2",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    byDay: [ICalWeekday.SU],\n    bySetPos: [2]\n});\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.strictEqual((_a = result.byDay) === null || _a === void 0 ? void 0 : _a.length, 1);\n// @ts-ignore\nassert.strictEqual((_b = result.bySetPos) === null || _b === void 0 ? void 0 : _b.length, 1);",
                  "err": {},
                  "uuid": "e8938c32-4889-4842-8987-00e05ff1b3cd",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            exclude: new Date('FOO')\n        }\n    }, new ICalCalendar());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "8f234604-1c68-42be-b5c4-7e88d38200c0",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            exclude: [moment(), new Date('BAR'), 'FOO']\n        }\n    }, new ICalCalendar());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "9326214d-fc9e-4fde-a0d2-3931f559e95c",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            // @ts-ignore\n            exclude: 42\n        }\n    }, new ICalCalendar());\n}, /`repeating.exclude\\[0\\]` has to be a valid date!/);",
                  "err": {},
                  "uuid": "304e7ab7-c404-40e8-b584-9706efb05dcf",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week');\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    exclude: [\n        date.toJSON(),\n        date.toDate(),\n        date\n    ]\n});\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.ok(Array.isArray(result.exclude));\n// @ts-ignore\nassert.strictEqual(result.exclude.length, 3);\n// @ts-ignore\nassert.deepStrictEqual(result.exclude[0], date.toJSON(), 'String');\n// @ts-ignore\nassert.deepStrictEqual(result.exclude[1], date.toDate(), 'Date');\n// @ts-ignore\nassert.deepStrictEqual(result.exclude[2], date, 'Moment');",
                  "err": {},
                  "uuid": "931292b1-68a2-474d-b884-97b9c037d8ac",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            startOfWeek: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "5ff84eac-a56d-4ff1-8bf8-5814aee97ef6",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    startOfWeek: ICalWeekday.SU\n});\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.startOfWeek, 'SU');",
                  "err": {},
                  "uuid": "bcf2e5e7-63f4-4fb2-80af-e2eb4d6f7ea4",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = new Date(Date.UTC(2012, 1, 1, 10, 30));\nconst e = new ICalEvent({ start }, new ICalCalendar());\nconst rule = new rrule.RRule({\n    freq: rrule.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule.RRule.MO, rrule.RRule.FR],\n    dtstart: start,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\ne.repeating(rule);\nconst result = e.repeating();\nassert.ok(isRRule(result));\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "773c49b3-ba7c-4c2a-a280-16f7b2c6ee3d",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst rule = 'RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "2f946fe6-d908-4ad2-9b85-6f4cdd022028",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add RRULE: prefix for single line string if not already there",
                  "fullTitle": "ical-generator Event repeating() should add RRULE: prefix for single line string if not already there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst rule = 'FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "5d99f377-8271-4227-ae5e-59b0cda2898a",
                  "parentUUID": "5ebd1d0d-17dd-403b-9d14-b1dbb053512a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a44cd9c-0059-4e7a-9553-156c8fcc0296",
                "780bbe72-234e-4052-9c98-219dd9263c3c",
                "c2842783-4820-46ad-b368-24a0a3763a1c",
                "65da6319-acbd-4829-ae75-ab3788d64fc2",
                "35d8b37a-c1c7-4fd2-81f8-b2eb31008f60",
                "28d73c30-e74b-4453-81bb-da5dcbda6051",
                "55daa795-40ea-483a-8ca0-8ecf0606c7e7",
                "b783ace4-21bb-4580-a96e-6ed85658804e",
                "3f2a5ffb-5b96-4719-bf42-592fe2e29a68",
                "7f1b3772-841f-422c-b799-706e5fa53d8e",
                "11499869-f8ec-4862-8935-5677550602fd",
                "449ad2c5-1cc1-4977-9611-3b506f445754",
                "ec7f4052-37ee-429b-a47f-cbdb4b3e90f3",
                "45fcf4e0-7dc6-4a7f-be92-654b969b764c",
                "eeb42006-c4a8-42a0-a9b4-06180d381002",
                "5681b70c-f8d3-48e7-ab18-1349ca3e01a6",
                "5ff94b22-1d91-421d-9227-dba12626360f",
                "ea4dd000-4dd0-44d1-a4d2-2e545bc76da6",
                "e1cea45c-3044-4e7a-8dda-1ad50dc5ef76",
                "d85c9ae7-3334-4b6f-a3ba-ed621d4b716a",
                "07df3e25-0d52-4298-bb38-157fb22b4664",
                "781a6d4c-f801-4cf7-821a-cdea7bbdb47d",
                "11412bfa-78cb-4c23-befe-39c085f185f2",
                "e8938c32-4889-4842-8987-00e05ff1b3cd",
                "8f234604-1c68-42be-b5c4-7e88d38200c0",
                "9326214d-fc9e-4fde-a0d2-3931f559e95c",
                "304e7ab7-c404-40e8-b584-9706efb05dcf",
                "931292b1-68a2-474d-b884-97b9c037d8ac",
                "5ff84eac-a56d-4ff1-8bf8-5814aee97ef6",
                "bcf2e5e7-63f4-4fb2-80af-e2eb4d6f7ea4",
                "773c49b3-ba7c-4c2a-a280-16f7b2c6ee3d",
                "2f946fe6-d908-4ad2-9b85-6f4cdd022028",
                "5d99f377-8271-4227-ae5e-59b0cda2898a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2ed38333-74d3-4c57-8744-5624ae0577fe",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.summary(), '');\ne.summary('Testevent');\nassert.strictEqual(e.summary(), 'Testevent');",
                  "err": {},
                  "uuid": "62eead01-b88a-4500-9c76-ac2a80035105",
                  "parentUUID": "2ed38333-74d3-4c57-8744-5624ae0577fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.summary(''));\nassert.deepStrictEqual(e, e.summary('Testevent'));",
                  "err": {},
                  "uuid": "8a85eaa7-55e3-4725-8ec8-a1f22fdcb0ad",
                  "parentUUID": "2ed38333-74d3-4c57-8744-5624ae0577fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.summary('Example Event II');\nassert.strictEqual(event.summary(), 'Example Event II');\nevent.summary('');\nassert.strictEqual(event.summary(), '');",
                  "err": {},
                  "uuid": "9b60710e-0028-48be-ac58-092d899f6814",
                  "parentUUID": "2ed38333-74d3-4c57-8744-5624ae0577fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62eead01-b88a-4500-9c76-ac2a80035105",
                "8a85eaa7-55e3-4725-8ec8-a1f22fdcb0ad",
                "9b60710e-0028-48be-ac58-092d899f6814"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c113c33-3d0b-45a0-b08a-e79424f95d96",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.location(), null);\ne.location('Test Location');\nassert.deepStrictEqual(e.location(), { title: 'Test Location' });\ne.location(null);\nassert.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "a435e164-30f7-44e1-9563-968033a64157",
                  "parentUUID": "7c113c33-3d0b-45a0-b08a-e79424f95d96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.location(), null);\ne.location({\n    title: 'Foo',\n    geo: { lat: 44.5, lon: -3.4 }\n});\nassert.deepStrictEqual((_a = e.location()) === null || _a === void 0 ? void 0 : _a.title, 'Foo');\nassert.deepStrictEqual((_b = e.location()) === null || _b === void 0 ? void 0 : _b.geo, { lat: 44.5, lon: -3.4 });\ne.location(null);\nassert.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "4097913e-14f2-43f9-bc03-c0fcc2b64008",
                  "parentUUID": "7c113c33-3d0b-45a0-b08a-e79424f95d96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.location(null));\nassert.deepStrictEqual(e, e.location('Test Location'));",
                  "err": {},
                  "uuid": "5963990b-d6d3-4c4c-8a0e-04f7fde9c16a",
                  "parentUUID": "7c113c33-3d0b-45a0-b08a-e79424f95d96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.location('Europa-Park');\nassert.strictEqual((_a = event.location()) === null || _a === void 0 ? void 0 : _a.title, 'Europa-Park');",
                  "err": {},
                  "uuid": "f91e547c-6aba-4c57-80c9-53f2f2af8fd2",
                  "parentUUID": "7c113c33-3d0b-45a0-b08a-e79424f95d96",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\n// @ts-ignore\nassert.throws(() => event.location({ geo: 3 }), /`location` isn't formatted correctly/i);\n// @ts-ignore\nassert.throws(() => event.location({}), /`location` isn't formatted correctly/i);",
                  "err": {},
                  "uuid": "08637c9c-6d12-4b4b-a53d-340fd7ae0312",
                  "parentUUID": "7c113c33-3d0b-45a0-b08a-e79424f95d96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a435e164-30f7-44e1-9563-968033a64157",
                "4097913e-14f2-43f9-bc03-c0fcc2b64008",
                "5963990b-d6d3-4c4c-8a0e-04f7fde9c16a",
                "f91e547c-6aba-4c57-80c9-53f2f2af8fd2",
                "08637c9c-6d12-4b4b-a53d-340fd7ae0312"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b3f7c9d-8b19-4b68-8703-f1601d82fe1d",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.description(), null);\ne.description('I don\\'t need a description. I\\'m far to awesome for descriptions…');\nassert.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…'\n});\ne.description({\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\nassert.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\ne.description(null);\nassert.strictEqual(e.description(), null);",
                  "err": {},
                  "uuid": "78764f57-9d80-4bc4-aa8e-33bda9bbe940",
                  "parentUUID": "9b3f7c9d-8b19-4b68-8703-f1601d82fe1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.description(null));\nassert.deepStrictEqual(e, e.description('I don\\'t need a description. I\\'m far to awesome for descriptions…'));",
                  "err": {},
                  "uuid": "f34e5d2e-bc14-47ec-9184-8a6b3c706408",
                  "parentUUID": "9b3f7c9d-8b19-4b68-8703-f1601d82fe1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.description('Well. But other people need descriptions… :/');\nassert.deepStrictEqual(event.description(), {\n    plain: 'Well. But other people need descriptions… :/'\n});\nevent.description({\n    plain: 'I am uncool text.',\n    html: '<marquee>I\\'m the best HTML tag in this universe!</marquee>'\n});\nassert.ok(event.toString().includes('<marquee>I\\'m the best HTML tag in this universe!</marquee>'));",
                  "err": {},
                  "uuid": "9e5f49df-bcfd-4ae0-90ba-db720876574b",
                  "parentUUID": "9b3f7c9d-8b19-4b68-8703-f1601d82fe1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78764f57-9d80-4bc4-aa8e-33bda9bbe940",
                "f34e5d2e-bc14-47ec-9184-8a6b3c706408",
                "9e5f49df-bcfd-4ae0-90ba-db720876574b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "efcd510b-6bee-41e0-a683-b3913b468d41",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b, _c, _d, _e;\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.organizer(), null);\ne.organizer(null);\nassert.strictEqual(e.organizer(), null);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert.strictEqual('Sebastian Pekarek', (_a = e.organizer()) === null || _a === void 0 ? void 0 : _a.name);\nassert.strictEqual('mail@example.com', (_b = e.organizer()) === null || _b === void 0 ? void 0 : _b.email);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert.strictEqual('Sebastian Pekarek', (_c = e.organizer()) === null || _c === void 0 ? void 0 : _c.name);\nassert.strictEqual('mail@example.com', (_d = e.organizer()) === null || _d === void 0 ? void 0 : _d.email);\nassert.strictEqual('mail2@example2.com', (_e = e.organizer()) === null || _e === void 0 ? void 0 : _e.mailto);",
                  "err": {},
                  "uuid": "98ce4ac8-09c5-4cda-a139-caa42fbe2224",
                  "parentUUID": "efcd510b-6bee-41e0-a683-b3913b468d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.organizer(null));\nassert.deepStrictEqual(e, e.organizer('Sebastian Pekarek <mail@example.com>'));",
                  "err": {},
                  "uuid": "14ba8908-8b2f-44b0-bdfe-23308527d039",
                  "parentUUID": "efcd510b-6bee-41e0-a683-b3913b468d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: undefined\n});\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: 'mail2@example2.com',\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "12bf4e32-532e-400c-94b7-4b7af000beb3",
                  "parentUUID": "efcd510b-6bee-41e0-a683-b3913b468d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', sentBy: 'bot@example.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: 'bot@example.com'\n});",
                  "err": {},
                  "uuid": "d8d9c8ed-f5df-4617-a005-48344d4777a4",
                  "parentUUID": "efcd510b-6bee-41e0-a683-b3913b468d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer('Sebastian Pekarek <mail@example.com>');\nassert.deepStrictEqual(event.organizer(), { name: 'Sebastian Pekarek', email: 'mail@example.com' });",
                  "err": {},
                  "uuid": "0d9105e6-c2fd-428c-b0eb-4de40211cb7f",
                  "parentUUID": "efcd510b-6bee-41e0-a683-b3913b468d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    e.organizer('foo bar');\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "8a240633-ee96-488a-bee1-6e6408542d73",
                  "parentUUID": "efcd510b-6bee-41e0-a683-b3913b468d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer({ email: 'foo' });\n}, /`organizer\\.name`/);",
                  "err": {},
                  "uuid": "07bcf441-b395-4e75-b082-cd9b2e181a41",
                  "parentUUID": "efcd510b-6bee-41e0-a683-b3913b468d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer(Infinity);\n}, /`organizer`/);\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer(NaN);\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "98d649e7-ffe2-4458-bfc7-58c323faa2ef",
                  "parentUUID": "efcd510b-6bee-41e0-a683-b3913b468d41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: undefined,\n    mailto: undefined,\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "7a1b7aa5-3cef-4401-bb15-aafe47855af8",
                  "parentUUID": "efcd510b-6bee-41e0-a683-b3913b468d41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98ce4ac8-09c5-4cda-a139-caa42fbe2224",
                "14ba8908-8b2f-44b0-bdfe-23308527d039",
                "12bf4e32-532e-400c-94b7-4b7af000beb3",
                "d8d9c8ed-f5df-4617-a005-48344d4777a4",
                "0d9105e6-c2fd-428c-b0eb-4de40211cb7f",
                "8a240633-ee96-488a-bee1-6e6408542d73",
                "07bcf441-b395-4e75-b082-cd9b2e181a41",
                "98d649e7-ffe2-4458-bfc7-58c323faa2ef",
                "7a1b7aa5-3cef-4401-bb15-aafe47855af8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b6f2b0f-1c11-48a7-9166-4583daff7170",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst attendee = new ICalAttendee({ email: 'mail@example.com' }, event);\nassert.strictEqual(event.createAttendee(attendee), attendee, 'createAttendee returns attendee');\nassert.deepStrictEqual(event.attendees()[0], attendee, 'attendee pushed');",
                  "err": {},
                  "uuid": "da09beea-e1ec-48e4-9ea3-98aa01eaa377",
                  "parentUUID": "4b6f2b0f-1c11-48a7-9166-4583daff7170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.ok(event.createAttendee({ email: 'mail@example.com' }) instanceof ICalAttendee);\nassert.strictEqual(event.attendees.length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "2c962e55-6dcb-49fa-a05f-ecdb91bb6654",
                  "parentUUID": "4b6f2b0f-1c11-48a7-9166-4583daff7170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst attendee = event.createAttendee('Zac <zac@example.com>');\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "9588ba22-bbe2-49a1-85c4-466ccebaebbc",
                  "parentUUID": "4b6f2b0f-1c11-48a7-9166-4583daff7170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    e.createAttendee('foo bar');\n}, /isn't formated correctly/);",
                  "err": {},
                  "uuid": "0b156a5b-6368-43fd-9712-44177d63203c",
                  "parentUUID": "4b6f2b0f-1c11-48a7-9166-4583daff7170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst attendee = event.createAttendee({ name: 'Zac', email: 'zac@example.com' });\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "23e263a9-ce1f-46ef-b868-f285efc82207",
                  "parentUUID": "4b6f2b0f-1c11-48a7-9166-4583daff7170",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da09beea-e1ec-48e4-9ea3-98aa01eaa377",
                "2c962e55-6dcb-49fa-a05f-ecdb91bb6654",
                "9588ba22-bbe2-49a1-85c4-466ccebaebbc",
                "0b156a5b-6368-43fd-9712-44177d63203c",
                "23e263a9-ce1f-46ef-b868-f285efc82207"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1f145c52-f9f8-4dcb-a843-5e6aa0f5fbe4",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.attendees().length, 0);\nconst attendee = event.createAttendee({ email: 'mail@example.com' });\nassert.strictEqual(event.attendees().length, 1);\nassert.deepStrictEqual(event.attendees()[0], attendee);",
                  "err": {},
                  "uuid": "75f1bb13-dcb5-4e42-b384-a9ba835a9f52",
                  "parentUUID": "1f145c52-f9f8-4dcb-a843-5e6aa0f5fbe4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst foo = event.attendees([\n    { name: 'Person A', email: 'a@example.com' },\n    { name: 'Person B', email: 'b@example.com' }\n]);\nassert.strictEqual(event.attendees().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "52844a24-38b3-49cf-aa83-6b3b38ceaf42",
                  "parentUUID": "1f145c52-f9f8-4dcb-a843-5e6aa0f5fbe4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75f1bb13-dcb5-4e42-b384-a9ba835a9f52",
                "52844a24-38b3-49cf-aa83-6b3b38ceaf42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3724e5a0-ad9c-405c-8f09-c792fbf83a52",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.ok(event.createAlarm({\n    type: ICalAlarmType.display,\n    trigger: 60 * 10\n}) instanceof ICalAlarm);",
                  "err": {},
                  "uuid": "6366861e-4c2d-4b2c-84e0-cdc26fdc56cc",
                  "parentUUID": "3724e5a0-ad9c-405c-8f09-c792fbf83a52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst alarm = event.createAlarm({\n    type: ICalAlarmType.audio,\n    trigger: 60 * 10\n});\nassert.strictEqual(alarm.type(), 'audio');",
                  "err": {},
                  "uuid": "0fbcedde-e2db-4519-947a-013fa7653ce7",
                  "parentUUID": "3724e5a0-ad9c-405c-8f09-c792fbf83a52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6366861e-4c2d-4b2c-84e0-cdc26fdc56cc",
                "0fbcedde-e2db-4519-947a-013fa7653ce7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b084b01-f2dc-44aa-887a-ec431fab2d5d",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.alarms().length, 0);\nconst alarm = event.createAlarm({\n    type: ICalAlarmType.display,\n    trigger: 600\n});\nassert.strictEqual(event.alarms().length, 1);\nassert.deepStrictEqual(event.alarms()[0], alarm);",
                  "err": {},
                  "uuid": "b7fccb64-d67b-4f29-a248-e1946c876915",
                  "parentUUID": "8b084b01-f2dc-44aa-887a-ec431fab2d5d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst foo = event.alarms([\n    { type: ICalAlarmType.audio, trigger: 60 },\n    { type: ICalAlarmType.display, trigger: 600 }\n]);\nassert.strictEqual(event.alarms().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "a4208dd7-eb87-408b-85ea-67c21f0a7f88",
                  "parentUUID": "8b084b01-f2dc-44aa-887a-ec431fab2d5d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7fccb64-d67b-4f29-a248-e1946c876915",
                "a4208dd7-eb87-408b-85ea-67c21f0a7f88"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b593e70-9af0-4a95-8eb3-0a25b4c0ee3c",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.ok(event.createCategory({ name: 'Test' }) instanceof ICalCategory);",
                  "err": {},
                  "uuid": "1dac1d3c-1e64-4618-8c22-7821026c0cc4",
                  "parentUUID": "8b593e70-9af0-4a95-8eb3-0a25b4c0ee3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst category = event.createCategory({ name: 'foo' });\nassert.strictEqual(category.name(), 'foo');",
                  "err": {},
                  "uuid": "30eb21f3-2a91-4e0f-86f4-2ace5dd72b2f",
                  "parentUUID": "8b593e70-9af0-4a95-8eb3-0a25b4c0ee3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1dac1d3c-1e64-4618-8c22-7821026c0cc4",
                "30eb21f3-2a91-4e0f-86f4-2ace5dd72b2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "62f74697-bd9d-414f-a6ab-4e4aede269ec",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.categories().length, 0);\nconst category = event.createCategory({ name: 'Test' });\nassert.strictEqual(event.categories().length, 1);\nassert.deepStrictEqual(event.categories()[0], category);",
                  "err": {},
                  "uuid": "d36ea4b6-5dc1-4335-8ff3-bb222467a7b6",
                  "parentUUID": "62f74697-bd9d-414f-a6ab-4e4aede269ec",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst foo = event.categories([\n    { name: 'foo' },\n    { name: 'bar' }\n]);\nassert.strictEqual(event.categories().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "208895ee-4043-419a-b755-9e92c26240cf",
                  "parentUUID": "62f74697-bd9d-414f-a6ab-4e4aede269ec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d36ea4b6-5dc1-4335-8ff3-bb222467a7b6",
                "208895ee-4043-419a-b755-9e92c26240cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "513bcecd-18ac-4088-b688-ade5ff16948e",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.status(), null);\nevent.status(ICalEventStatus.CONFIRMED);\nassert.strictEqual(event.status(), 'CONFIRMED');\nevent.status(null);\nassert.strictEqual(event.status(), null);",
                  "err": {},
                  "uuid": "8cb636f8-f240-4d5b-b0d8-09d2bc9b975e",
                  "parentUUID": "513bcecd-18ac-4088-b688-ade5ff16948e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.status(null));\nassert.deepStrictEqual(e, e.status(ICalEventStatus.CONFIRMED));",
                  "err": {},
                  "uuid": "dd24ab61-289f-4f24-8b58-f8a4330f7ab0",
                  "parentUUID": "513bcecd-18ac-4088-b688-ade5ff16948e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.status(ICalEventStatus.CONFIRMED);\ne.status(null);\nassert.strictEqual(e.status(), null);",
                  "err": {},
                  "uuid": "e80e41a7-bde0-47eb-a294-4bd616bc3e02",
                  "parentUUID": "513bcecd-18ac-4088-b688-ade5ff16948e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.status(ICalEventStatus.CONFIRMED);\nassert.strictEqual(e.status(), 'CONFIRMED');\nassert.strictEqual(e.status(), ICalEventStatus.CONFIRMED);",
                  "err": {},
                  "uuid": "8f6c8a62-95cb-4dc9-b345-f3ba7fcb3a60",
                  "parentUUID": "513bcecd-18ac-4088-b688-ade5ff16948e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.status('COOKING');\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(Infinity);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(NaN);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(-1);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);",
                  "err": {},
                  "uuid": "16decf9d-8719-438e-8396-8753aa8082b7",
                  "parentUUID": "513bcecd-18ac-4088-b688-ade5ff16948e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cb636f8-f240-4d5b-b0d8-09d2bc9b975e",
                "dd24ab61-289f-4f24-8b58-f8a4330f7ab0",
                "e80e41a7-bde0-47eb-a294-4bd616bc3e02",
                "8f6c8a62-95cb-4dc9-b345-f3ba7fcb3a60",
                "16decf9d-8719-438e-8396-8753aa8082b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e4648b55-1244-453d-a2ee-1f4cebe8326c",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.busystatus(), null);\nevent.busystatus(ICalEventBusyStatus.BUSY);\nassert.strictEqual(event.busystatus(), 'BUSY');\nevent.busystatus(null);\nassert.strictEqual(event.busystatus(), null);",
                  "err": {},
                  "uuid": "ff039e44-4a14-4e00-bf4a-dd6a73ab961a",
                  "parentUUID": "e4648b55-1244-453d-a2ee-1f4cebe8326c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.busystatus(null));\nassert.deepStrictEqual(e, e.busystatus(ICalEventBusyStatus.BUSY));",
                  "err": {},
                  "uuid": "c598695b-c599-4093-8a82-73d2ebc7beea",
                  "parentUUID": "e4648b55-1244-453d-a2ee-1f4cebe8326c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.busystatus(ICalEventBusyStatus.BUSY);\ne.busystatus(null);\nassert.strictEqual(e.busystatus(), null);",
                  "err": {},
                  "uuid": "467a44d0-4aba-4a71-8832-f2a392d1ecb9",
                  "parentUUID": "e4648b55-1244-453d-a2ee-1f4cebe8326c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.busystatus(ICalEventBusyStatus.BUSY);\nassert.strictEqual(e.busystatus(), 'BUSY');",
                  "err": {},
                  "uuid": "cb806008-f81a-4ba1-9c29-e486d5ca085f",
                  "parentUUID": "e4648b55-1244-453d-a2ee-1f4cebe8326c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus('COOKING');\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(Infinity);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(NaN);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(-1);\n}, /FREE, TENTATIVE, BUSY, OOF/);",
                  "err": {},
                  "uuid": "fee7a448-745c-47b4-8111-9a937a3a28fc",
                  "parentUUID": "e4648b55-1244-453d-a2ee-1f4cebe8326c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff039e44-4a14-4e00-bf4a-dd6a73ab961a",
                "c598695b-c599-4093-8a82-73d2ebc7beea",
                "467a44d0-4aba-4a71-8832-f2a392d1ecb9",
                "cb806008-f81a-4ba1-9c29-e486d5ca085f",
                "fee7a448-745c-47b4-8111-9a937a3a28fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4156e39b-110f-402f-a74f-3149600ede9c",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.priority(), null);\ne.priority(5);\nassert.strictEqual(e.priority(), 5);",
                  "err": {},
                  "uuid": "464892a8-3562-46f2-a25a-da4e7acd7fd1",
                  "parentUUID": "4156e39b-110f-402f-a74f-3149600ede9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.priority(null));\nassert.deepStrictEqual(e, e.priority(5));",
                  "err": {},
                  "uuid": "56c3f135-5e3f-4225-8a10-a2c313876acc",
                  "parentUUID": "4156e39b-110f-402f-a74f-3149600ede9c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.priority(5);\nassert.strictEqual(event.priority(), 5);\nassert.ok(event.toString().includes('PRIORITY:5'));",
                  "err": {},
                  "uuid": "592f7cdc-2e7e-4559-b243-a4971e082c63",
                  "parentUUID": "4156e39b-110f-402f-a74f-3149600ede9c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "464892a8-3562-46f2-a25a-da4e7acd7fd1",
                "56c3f135-5e3f-4225-8a10-a2c313876acc",
                "592f7cdc-2e7e-4559-b243-a4971e082c63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "552e7298-6533-46ce-9817-c1df45741c21",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.url(), null);\ne.url('http://sebbo.net/');\nassert.strictEqual(e.url(), 'http://sebbo.net/');",
                  "err": {},
                  "uuid": "a9502530-cdbd-45ba-bdb3-db52f416d1e9",
                  "parentUUID": "552e7298-6533-46ce-9817-c1df45741c21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.url(null));\nassert.deepStrictEqual(e, e.url('http://sebbo.net/'));",
                  "err": {},
                  "uuid": "fce03e68-0049-4444-a757-a8f4028e2ba9",
                  "parentUUID": "552e7298-6533-46ce-9817-c1df45741c21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.url('http://github.com/sebbo2002/ical-generator');\nassert.strictEqual(event.url(), 'http://github.com/sebbo2002/ical-generator');",
                  "err": {},
                  "uuid": "a8566edf-5f71-48b2-884f-9966b78e7712",
                  "parentUUID": "552e7298-6533-46ce-9817-c1df45741c21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9502530-cdbd-45ba-bdb3-db52f416d1e9",
                "fce03e68-0049-4444-a757-a8f4028e2ba9",
                "a8566edf-5f71-48b2-884f-9966b78e7712"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b663294b-69be-47eb-9b70-d3bd005080a8",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event.createAttachment('https://files.sebbo.net/calendar/attachments/foo'), event);",
                  "err": {},
                  "uuid": "a4813f2e-2da7-4143-8636-8a0b52e4e4bb",
                  "parentUUID": "b663294b-69be-47eb-9b70-d3bd005080a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4813f2e-2da7-4143-8636-8a0b52e4e4bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d39c2643-12d8-494c-8943-d2a5e51943b5",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.attachments().length, 0);\nevent.createAttachment('https://files.sebbo.net/calendar/attachments/foo');\nassert.strictEqual(event.attachments().length, 1);\nassert.deepStrictEqual(typeof event.attachments()[0], 'string');",
                  "err": {},
                  "uuid": "083144d5-d0b8-4bf1-ad59-e136f6cdd1f7",
                  "parentUUID": "d39c2643-12d8-494c-8943-d2a5e51943b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst foo = event.attachments([\n    'https://files.sebbo.net/calendar/attachments/foo',\n    'https://files.sebbo.net/calendar/attachments/bar'\n]);\nassert.strictEqual(event.attachments().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "81ea5b64-b2c1-4328-a75a-49c84f60d815",
                  "parentUUID": "d39c2643-12d8-494c-8943-d2a5e51943b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "083144d5-d0b8-4bf1-ad59-e136f6cdd1f7",
                "81ea5b64-b2c1-4328-a75a-49c84f60d815"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9db0e302-004e-4513-b80c-91c2cea85316",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.created(new Date()));",
                  "err": {},
                  "uuid": "137ea6bd-58da-4348-87a1-d12597c12bb7",
                  "parentUUID": "9db0e302-004e-4513-b80c-91c2cea85316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.created(moment());\nassert.ok(moment.isMoment(e.created()));",
                  "err": {},
                  "uuid": "90d983a5-b0c5-4fa0-b9e2-50c5a80c05c3",
                  "parentUUID": "9db0e302-004e-4513-b80c-91c2cea85316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.created(new Date());\nassert.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "7e056952-6bfc-41e6-bd74-402380cae0ba",
                  "parentUUID": "9db0e302-004e-4513-b80c-91c2cea85316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.created(moment().toJSON());\nassert.strictEqual(typeof e.created(), 'string');",
                  "err": {},
                  "uuid": "3c6734a2-c50e-4b53-9f5a-08cc951c90ed",
                  "parentUUID": "9db0e302-004e-4513-b80c-91c2cea85316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.created(new Date());\nassert.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "f7f31bc1-1e51-4c15-9e37-cdcd591af792",
                  "parentUUID": "9db0e302-004e-4513-b80c-91c2cea85316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .created(now);\nassert.deepStrictEqual((_a = e.created()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "fcf04be3-49d8-4f2c-8274-fc488b48075e",
                  "parentUUID": "9db0e302-004e-4513-b80c-91c2cea85316",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    e.created('hallo'); // this will produce a \"Deprecation warning\", sorry 😇\n}, /`created`/);",
                  "err": {},
                  "uuid": "560e8ec9-0f5b-4ec8-9a56-38180309f661",
                  "parentUUID": "9db0e302-004e-4513-b80c-91c2cea85316",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "137ea6bd-58da-4348-87a1-d12597c12bb7",
                "90d983a5-b0c5-4fa0-b9e2-50c5a80c05c3",
                "7e056952-6bfc-41e6-bd74-402380cae0ba",
                "3c6734a2-c50e-4b53-9f5a-08cc951c90ed",
                "f7f31bc1-1e51-4c15-9e37-cdcd591af792",
                "fcf04be3-49d8-4f2c-8274-fc488b48075e",
                "560e8ec9-0f5b-4ec8-9a56-38180309f661"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0eaac0ff-e304-4624-a51e-2f80c3fb34db",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.lastModified(new Date()));",
                  "err": {},
                  "uuid": "c65b8fca-d8af-40de-8a15-3020db5b5200",
                  "parentUUID": "0eaac0ff-e304-4624-a51e-2f80c3fb34db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.lastModified(moment());\nassert.ok(moment.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "2b3e3e10-5e10-4657-8c2b-a705037a8b5f",
                  "parentUUID": "0eaac0ff-e304-4624-a51e-2f80c3fb34db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.lastModified(new Date());\nassert.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "12ea0471-b625-4789-bcd2-44a8763073d5",
                  "parentUUID": "0eaac0ff-e304-4624-a51e-2f80c3fb34db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().toJSON();\ne.lastModified(date);\nassert.strictEqual(e.lastModified(), date);",
                  "err": {},
                  "uuid": "81d2d5b3-6e33-4e46-ab97-b018de0dba2e",
                  "parentUUID": "0eaac0ff-e304-4624-a51e-2f80c3fb34db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.lastModified(new Date());\nassert.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "458a636d-9167-467d-8a2a-1d577777c768",
                  "parentUUID": "0eaac0ff-e304-4624-a51e-2f80c3fb34db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .lastModified(now);\nassert.deepStrictEqual((_a = e.lastModified()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "278810a2-ece7-44a7-bafd-8922b6dedbd0",
                  "parentUUID": "0eaac0ff-e304-4624-a51e-2f80c3fb34db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    e.lastModified('hallo');\n}, /`lastModified`/);",
                  "err": {},
                  "uuid": "75edaedc-b4c7-4c4a-8b7c-613db54fa38f",
                  "parentUUID": "0eaac0ff-e304-4624-a51e-2f80c3fb34db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c65b8fca-d8af-40de-8a15-3020db5b5200",
                "2b3e3e10-5e10-4657-8c2b-a705037a8b5f",
                "12ea0471-b625-4789-bcd2-44a8763073d5",
                "81d2d5b3-6e33-4e46-ab97-b018de0dba2e",
                "458a636d-9167-467d-8a2a-1d577777c768",
                "278810a2-ece7-44a7-bafd-8922b6dedbd0",
                "75edaedc-b4c7-4c4a-8b7c-613db54fa38f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ca921cb-9cf2-4c07-92f4-85f35398f7d5",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.class(), null);\nevent.class(ICalEventClass.PRIVATE);\nassert.strictEqual(event.class(), 'PRIVATE');\nevent.class(null);\nassert.strictEqual(event.class(), null);",
                  "err": {},
                  "uuid": "138be355-1973-434a-97cb-aa4a896a49dd",
                  "parentUUID": "6ca921cb-9cf2-4c07-92f4-85f35398f7d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.class(null));\nassert.deepStrictEqual(e, e.class(ICalEventClass.PRIVATE));",
                  "err": {},
                  "uuid": "dbb47af5-2fa6-495c-afcc-999bf567f061",
                  "parentUUID": "6ca921cb-9cf2-4c07-92f4-85f35398f7d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.class(ICalEventClass.PRIVATE);\ne.class(null);\nassert.strictEqual(e.class(), null);",
                  "err": {},
                  "uuid": "43409365-5140-4db4-9976-e5f8853cc1b3",
                  "parentUUID": "6ca921cb-9cf2-4c07-92f4-85f35398f7d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.class(ICalEventClass.PRIVATE);\nassert.strictEqual(e.class(), 'PRIVATE');\nassert.strictEqual(e.class(), ICalEventClass.PRIVATE);",
                  "err": {},
                  "uuid": "5e1cdbab-19dc-4499-8759-61c3c521f0dd",
                  "parentUUID": "6ca921cb-9cf2-4c07-92f4-85f35398f7d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.class('COOKING');\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(Infinity);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(NaN);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(-1);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);",
                  "err": {},
                  "uuid": "d6be65dc-cb02-4caa-ad04-1ba6661804f6",
                  "parentUUID": "6ca921cb-9cf2-4c07-92f4-85f35398f7d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "138be355-1973-434a-97cb-aa4a896a49dd",
                "dbb47af5-2fa6-495c-afcc-999bf567f061",
                "43409365-5140-4db4-9976-e5f8853cc1b3",
                "5e1cdbab-19dc-4499-8759-61c3c521f0dd",
                "d6be65dc-cb02-4caa-ad04-1ba6661804f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0b302687-32b1-4738-8720-21407b601d03",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "9e7c4120-51df-4f0a-b79e-bcac33d1a80b",
                  "parentUUID": "0b302687-32b1-4738-8720-21407b601d03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e7c4120-51df-4f0a-b79e-bcac33d1a80b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6426572c-3f5a-4dbe-b83e-49cdb8240b26",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = moment().add(1, 'month');\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .summary('foo')\n    .start(date);\nassert.strictEqual(event.toJSON().summary, 'foo', 'summary is okay');\nassert.deepStrictEqual(event.toJSON().start, date.toJSON(), 'start is okay');\nassert.strictEqual(typeof event.toJSON().start, 'string', 'start is string');",
                  "err": {},
                  "uuid": "ec3acaa7-ddc1-431e-869d-5b7bcb48b9c4",
                  "parentUUID": "6426572c-3f5a-4dbe-b83e-49cdb8240b26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nconst rule = new rrule.RRule({\n    freq: rrule.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule.RRule.MO, rrule.RRule.FR],\n    dtstart: date,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .summary('foo')\n    .start(date)\n    .repeating(rule);\nconst json = event.toJSON();\nconst before = event.toString();\nassert.ok(typeof json.repeating === 'string');\nconst event2 = new ICalEvent(event.toJSON(), new ICalCalendar());\nconst after = event2.toString();\nassert.strictEqual(after, before);",
                  "err": {},
                  "uuid": "56eacccf-33a9-4af9-a8ef-8babad1ea14d",
                  "parentUUID": "6426572c-3f5a-4dbe-b83e-49cdb8240b26",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalEvent({ start: new Date() }, new ICalCalendar());\nnew ICalEvent(a.toJSON(), new ICalCalendar());",
                  "err": {},
                  "uuid": "34bddbd2-5d48-468d-9be7-ac06ef693acb",
                  "parentUUID": "6426572c-3f5a-4dbe-b83e-49cdb8240b26",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec3acaa7-ddc1-431e-869d-5b7bcb48b9c4",
                "56eacccf-33a9-4af9-a8ef-8babad1ea14d",
                "34bddbd2-5d48-468d-9be7-ac06ef693acb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e9aec17d-726c-47aa-b02a-102312d355c9",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.transparency(), null);\nevent.transparency(ICalEventTransparency.OPAQUE);\nassert.strictEqual(event.transparency(), 'OPAQUE');\nevent.transparency(null);\nassert.strictEqual(event.transparency(), null);",
                  "err": {},
                  "uuid": "618f6342-2296-4663-817e-c930b5b14a71",
                  "parentUUID": "e9aec17d-726c-47aa-b02a-102312d355c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.transparency(null));\nassert.deepStrictEqual(e, e.transparency(ICalEventTransparency.TRANSPARENT));",
                  "err": {},
                  "uuid": "3e5c310e-0744-422a-8855-0de87062299f",
                  "parentUUID": "e9aec17d-726c-47aa-b02a-102312d355c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.transparency(ICalEventTransparency.OPAQUE);\ne.transparency(null);\nassert.strictEqual(e.transparency(), null);",
                  "err": {},
                  "uuid": "0f9de10f-d066-4231-8cb0-eeb03c46b537",
                  "parentUUID": "e9aec17d-726c-47aa-b02a-102312d355c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.transparency(ICalEventTransparency.OPAQUE);\nassert.strictEqual(e.transparency(), 'OPAQUE');",
                  "err": {},
                  "uuid": "3b498c74-512a-488c-b0f7-b57b475e322e",
                  "parentUUID": "e9aec17d-726c-47aa-b02a-102312d355c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency('COOKING');\n}, /TRANSPARENT, OPAQUE/);\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency(Infinity);\n}, /TRANSPARENT, OPAQUE/);\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency(-1);\n}, /TRANSPARENT, OPAQUE/);",
                  "err": {},
                  "uuid": "a66a0b44-fee3-4ef3-9e68-80fce83711d1",
                  "parentUUID": "e9aec17d-726c-47aa-b02a-102312d355c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "618f6342-2296-4663-817e-c930b5b14a71",
                "3e5c310e-0744-422a-8855-0de87062299f",
                "0f9de10f-d066-4231-8cb0-eeb03c46b537",
                "3b498c74-512a-488c-b0f7-b57b475e322e",
                "a66a0b44-fee3-4ef3-9e68-80fce83711d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f60d787-dcb6-43cb-ab52-23578f196433",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Hel\\\\\\\\lo\\nW;orl,d'\n}, new ICalCalendar());\nassert.ok(e.toString().indexOf('Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d') > -1);",
                  "err": {},
                  "uuid": "40fac582-05de-4f84-9524-abff91445760",
                  "parentUUID": "3f60d787-dcb6-43cb-ab52-23578f196433",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst event = new ICalEvent({\n    id: 42,\n    start: moment(),\n    summary: ':)'\n}, cal);\nassert.ok(event.toString().indexOf('UID:42\\r') > -1);",
                  "err": {},
                  "uuid": "42264902-2cd8-4627-bacb-9a893bd2fbf0",
                  "parentUUID": "3f60d787-dcb6-43cb-ab52-23578f196433",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nlet event = new ICalEvent({\n    start: moment(),\n    end: moment(),\n    repeating: {\n        freq: ICalEventRepeatingFreq.WEEKLY\n    }\n}, cal);\nassert.ok(!event.toString().includes('WKST'), 'without WKST');\nevent = new ICalEvent({\n    start: moment(),\n    end: moment(),\n    repeating: {\n        freq: ICalEventRepeatingFreq.WEEKLY,\n        startOfWeek: ICalWeekday.SU\n    }\n}, cal);\nassert.ok(event.toString().includes('WKST'), 'with WKST');",
                  "err": {},
                  "uuid": "19435430-8618-47bb-bc98-f1b284fc71eb",
                  "parentUUID": "3f60d787-dcb6-43cb-ab52-23578f196433",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40fac582-05de-4f84-9524-abff91445760",
                "42264902-2cd8-4627-bacb-9a893bd2fbf0",
                "19435430-8618-47bb-bc98-f1b284fc71eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "15612422-3841-4b90-9ffc-064ddaa59794",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "46baf1fd-ea49-4276-a14b-e9ec0656bebb",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(typeof ical, 'function');",
                  "err": {},
                  "uuid": "eb32ec0b-7150-4d20-97b1-9450ee38266f",
                  "parentUUID": "46baf1fd-ea49-4276-a14b-e9ec0656bebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ical() instanceof ICalCalendar);",
                  "err": {},
                  "uuid": "9daec2b6-819d-4191-a717-29f7be499f0d",
                  "parentUUID": "46baf1fd-ea49-4276-a14b-e9ec0656bebb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb32ec0b-7150-4d20-97b1-9450ee38266f",
                "9daec2b6-819d-4191-a717-29f7be499f0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "91e9f8b0-7d51-4442-8612-a81a986e8ae9",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarm);",
                  "err": {},
                  "uuid": "32d0a364-f39f-4c3e-a0c7-228a219efb98",
                  "parentUUID": "91e9f8b0-7d51-4442-8612-a81a986e8ae9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarmType);",
                  "err": {},
                  "uuid": "b0ccb3b7-6e91-4388-a2f9-eff06f08491b",
                  "parentUUID": "91e9f8b0-7d51-4442-8612-a81a986e8ae9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32d0a364-f39f-4c3e-a0c7-228a219efb98",
                "b0ccb3b7-6e91-4388-a2f9-eff06f08491b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eb2ca65b-1154-4a29-8e26-0d86687b9855",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendee);",
                  "err": {},
                  "uuid": "017251c4-4c3e-4d8b-9f6f-497dc1ad991e",
                  "parentUUID": "eb2ca65b-1154-4a29-8e26-0d86687b9855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeType);",
                  "err": {},
                  "uuid": "2cacdbd8-f948-46b5-aad9-d3fb7cc37667",
                  "parentUUID": "eb2ca65b-1154-4a29-8e26-0d86687b9855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeRole);",
                  "err": {},
                  "uuid": "d4e46e1c-1b41-4f71-8d30-47237061e581",
                  "parentUUID": "eb2ca65b-1154-4a29-8e26-0d86687b9855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeStatus);",
                  "err": {},
                  "uuid": "850bb789-44a2-4947-af58-fa7e00853935",
                  "parentUUID": "eb2ca65b-1154-4a29-8e26-0d86687b9855",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "017251c4-4c3e-4d8b-9f6f-497dc1ad991e",
                "2cacdbd8-f948-46b5-aad9-d3fb7cc37667",
                "d4e46e1c-1b41-4f71-8d30-47237061e581",
                "850bb789-44a2-4947-af58-fa7e00853935"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a735fee0-3a15-497a-8d11-fd2df9500513",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendar);",
                  "err": {},
                  "uuid": "bbe31120-e82f-492b-8774-9026b908ed29",
                  "parentUUID": "a735fee0-3a15-497a-8d11-fd2df9500513",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendarMethod);",
                  "err": {},
                  "uuid": "377d8d0c-39b9-4b4b-8a1a-2ade7099bff5",
                  "parentUUID": "a735fee0-3a15-497a-8d11-fd2df9500513",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bbe31120-e82f-492b-8774-9026b908ed29",
                "377d8d0c-39b9-4b4b-8a1a-2ade7099bff5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2547af29-c51b-4f84-9079-d45b2e396ee7",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCategory);",
                  "err": {},
                  "uuid": "ca820400-5857-4972-8077-1d38c98d5660",
                  "parentUUID": "2547af29-c51b-4f84-9079-d45b2e396ee7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca820400-5857-4972-8077-1d38c98d5660"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3c5202b9-2964-467d-a5f6-08aec135835e",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEvent);",
                  "err": {},
                  "uuid": "f4c1f2ff-82e9-4ee2-8012-1cc8eeab6045",
                  "parentUUID": "3c5202b9-2964-467d-a5f6-08aec135835e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventStatus);",
                  "err": {},
                  "uuid": "8aae9009-4f38-494a-a51a-e4cb2f682957",
                  "parentUUID": "3c5202b9-2964-467d-a5f6-08aec135835e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventBusyStatus);",
                  "err": {},
                  "uuid": "61529a0a-d486-46bc-8cb2-983a6ebfcb01",
                  "parentUUID": "3c5202b9-2964-467d-a5f6-08aec135835e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventTransparency);",
                  "err": {},
                  "uuid": "3bbf09b4-6d51-4a94-a2d6-e4f8dd47c995",
                  "parentUUID": "3c5202b9-2964-467d-a5f6-08aec135835e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4c1f2ff-82e9-4ee2-8012-1cc8eeab6045",
                "8aae9009-4f38-494a-a51a-e4cb2f682957",
                "61529a0a-d486-46bc-8cb2-983a6ebfcb01",
                "3bbf09b4-6d51-4a94-a2d6-e4f8dd47c995"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f10b18a0-2a7c-430c-9028-d8ccb03752f6",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventRepeatingFreq);",
                  "err": {},
                  "uuid": "50b05246-1d26-4846-b264-a4508834fb7e",
                  "parentUUID": "f10b18a0-2a7c-430c-9028-d8ccb03752f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalWeekday);",
                  "err": {},
                  "uuid": "b5062047-1e26-4c0b-bfe9-65534f52fff9",
                  "parentUUID": "f10b18a0-2a7c-430c-9028-d8ccb03752f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50b05246-1d26-4846-b264-a4508834fb7e",
                "b5062047-1e26-4c0b-bfe9-65534f52fff9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "939f4156-aa14-41ed-bb88-4a5f4b476d17",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDate === 'function');",
                  "err": {},
                  "uuid": "2aa9027c-94fa-4657-b006-2fe03ff59a45",
                  "parentUUID": "939f4156-aa14-41ed-bb88-4a5f4b476d17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDateTZ === 'function');",
                  "err": {},
                  "uuid": "3fd0319a-6420-4dc6-a657-e2376ef603f6",
                  "parentUUID": "939f4156-aa14-41ed-bb88-4a5f4b476d17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof escape === 'function');",
                  "err": {},
                  "uuid": "7e1dd6cc-af2d-4567-bf7a-f80303eceff9",
                  "parentUUID": "939f4156-aa14-41ed-bb88-4a5f4b476d17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof foldLines === 'function');",
                  "err": {},
                  "uuid": "356372bb-288b-4ccd-aea2-7824f79262e9",
                  "parentUUID": "939f4156-aa14-41ed-bb88-4a5f4b476d17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2aa9027c-94fa-4657-b006-2fe03ff59a45",
                "3fd0319a-6420-4dc6-a657-e2376ef603f6",
                "7e1dd6cc-af2d-4567-bf7a-f80303eceff9",
                "356372bb-288b-4ccd-aea2-7824f79262e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2b1ef7e7-b494-4bd1-89aa-13b37c2489de",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "10451938-6f18-496b-8ab9-5bf4c85dd98a",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "ac686833-27bb-4ddf-83df-57c9e73068f8",
                  "parentUUID": "10451938-6f18-496b-8ab9-5bf4c85dd98a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Brazil/East',\n    events: [{\n            start: moment('2016-05-01T03:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "51851044-a4f9-4b7b-b830-031734cf6993",
                  "parentUUID": "10451938-6f18-496b-8ab9-5bf4c85dd98a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac686833-27bb-4ddf-83df-57c9e73068f8",
                "51851044-a4f9-4b7b-b830-031734cf6993"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ef338ef5-0069-4c57-9fe1-6e24abb6978f",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            end: moment('2016-05-01T00:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [ICalWeekday.SU],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "ac4fa8dd-e1c0-4b4c-a0d8-e575f5ccb059",
                  "parentUUID": "ef338ef5-0069-4c57-9fe1-6e24abb6978f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking all elements of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking all elements of the byDay array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            end: moment('2016-05-01T00:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [ICalWeekday.MO, ICalWeekday.FR],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO,FR;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "b7d21c76-3393-40c9-a775-9419fe4ffbb4",
                  "parentUUID": "ef338ef5-0069-4c57-9fe1-6e24abb6978f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac4fa8dd-e1c0-4b4c-a0d8-e575f5ccb059",
                "b7d21c76-3393-40c9-a775-9419fe4ffbb4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f2b52104-1353-46ca-b9ff-213dde0b5282",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "576ae4e2-94c4-4945-b6fe-b6d055d7f216",
                  "parentUUID": "f2b52104-1353-46ca-b9ff-213dde0b5282",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "9227c663-69a0-4f29-9511-e43183f4588b",
                  "parentUUID": "f2b52104-1353-46ca-b9ff-213dde0b5282",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "0fc177e6-eb5a-4b0e-8d1b-b09593a00eb3",
                  "parentUUID": "f2b52104-1353-46ca-b9ff-213dde0b5282",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "576ae4e2-94c4-4945-b6fe-b6d055d7f216",
                "9227c663-69a0-4f29-9511-e43183f4588b",
                "0fc177e6-eb5a-4b0e-8d1b-b09593a00eb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d24ac4e-4ca3-421f-9afc-3a680bf40699",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment('2020-08-13T00:00:00+01:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment('2020-12-13T00:00:00+01:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('EXDATE;TZID=Europe/Berlin:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "7bdf96cb-6dfe-41fe-9050-bd754566b241",
                  "parentUUID": "4d24ac4e-4ca3-421f-9afc-3a680bf40699",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'America/New_York',\n    events: [{\n            start: moment('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment('2020-12-13T00:00:00-05:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('EXDATE;TZID=America/New_York:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "c5a779fe-f6cf-4609-bc9e-aec59f39066d",
                  "parentUUID": "4d24ac4e-4ca3-421f-9afc-3a680bf40699",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bdf96cb-6dfe-41fe-9050-bd754566b241",
                "c5a779fe-f6cf-4609-bc9e-aec59f39066d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74d8cdc8-d031-44ab-ba25-467bb73e2a91",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            location: {\n                title: 'Los Angeles, California, United States',\n                geo: {\n                    lon: -118.24368,\n                    lat: 34.05223,\n                },\n                radius: 400\n            }\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:Example Event',\n    'LOCATION:Los Angeles\\\\, California\\\\, United States',\n    'X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel',\n    ' es\\\\, California\\\\, United States:geo:34.05223,-118.24368',\n    'GEO:34.05223;-118.24368',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "b4f1cba4-723c-43a3-9caf-0b8d0b0892e1",
                  "parentUUID": "74d8cdc8-d031-44ab-ba25-467bb73e2a91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4f1cba4-723c-43a3-9caf-0b8d0b0892e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd366003-b792-4487-a8b8-600c969ad8b9",
              "title": "Issue #377",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not escape quotes in summary",
                  "fullTitle": "Issues Issue #377 should not escape quotes in summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [\n        {\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'My \"quoted\" string'\n        }\n    ]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:My \"quoted\" string',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "06e765ad-3dfa-41c4-b668-a7bab1c3ae00",
                  "parentUUID": "fd366003-b792-4487-a8b8-600c969ad8b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06e765ad-3dfa-41c4-b668-a7bab1c3ae00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c00a9c5b-a294-4e20-bd5d-b8268cab0ff3",
              "title": "Issue #442",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate floating repeat until value if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat until value if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "4c93f0fd-4738-47b5-bbe8-3ffbb75d804a",
                  "parentUUID": "c00a9c5b-a294-4e20-bd5d-b8268cab0ff3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate floating repeat exclusion dates if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat exclusion dates if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "7f35a7f1-c9a6-4e5a-b6d1-ed3cc987e96e",
                  "parentUUID": "c00a9c5b-a294-4e20-bd5d-b8268cab0ff3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "4c93f0fd-4738-47b5-bbe8-3ffbb75d804a",
                "7f35a7f1-c9a6-4e5a-b6d1-ed3cc987e96e"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d0431e86-576d-48f2-8c5f-de5725eea929",
              "title": "Issue #459",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.repeating should work with `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work with `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: 'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1'\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1',\n    'SUMMARY:Example Event',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "e852d10d-20e2-4eaf-8d4d-bc1d1eaa7fab",
                  "parentUUID": "d0431e86-576d-48f2-8c5f-de5725eea929",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "event.repeating should work without `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work without `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: 'FREQ=MONTHLY;COUNT=3;INTERVAL=1'\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1',\n    'SUMMARY:Example Event',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "5aa93e30-b508-4157-a746-22dee862f99d",
                  "parentUUID": "d0431e86-576d-48f2-8c5f-de5725eea929",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e852d10d-20e2-4eaf-8d4d-bc1d1eaa7fab",
                "5aa93e30-b508-4157-a746-22dee862f99d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ca0eda2a-5dfc-4e87-ac05-659a6e5e52f0",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "03dbffb6-0fde-4303-a585-b37939a9e06a",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "246b9419-c536-4183-80d3-000b39c36761",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "6a8ef818-919f-49d7-b17d-2d9161fbfe3a",
                      "parentUUID": "246b9419-c536-4183-80d3-000b39c36761",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "54fb1ab3-8649-44f6-bdce-47ae0ddd6112",
                      "parentUUID": "246b9419-c536-4183-80d3-000b39c36761",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', true, false), '20180705');",
                      "err": {},
                      "uuid": "e0a0b8ca-3e46-4330-b6b4-8112395e9a86",
                      "parentUUID": "246b9419-c536-4183-80d3-000b39c36761",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', true, true), '20180705');",
                      "err": {},
                      "uuid": "94839d31-70e2-4dd1-8bab-761e84c92566",
                      "parentUUID": "246b9419-c536-4183-80d3-000b39c36761",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, false), '20180705T182400');",
                      "err": {},
                      "uuid": "3feea5bf-e2db-42f9-97ea-69e219266299",
                      "parentUUID": "246b9419-c536-4183-80d3-000b39c36761",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "24fd2dbe-36b6-4aaf-8862-e0358339eaba",
                      "parentUUID": "246b9419-c536-4183-80d3-000b39c36761",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, false), '20180705');",
                      "err": {},
                      "uuid": "a605f6a0-40a4-4571-8f1c-2b3fa06657e5",
                      "parentUUID": "246b9419-c536-4183-80d3-000b39c36761",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, true), '20180705');",
                      "err": {},
                      "uuid": "ee31b34e-abcb-42d8-b758-734b1026c523",
                      "parentUUID": "246b9419-c536-4183-80d3-000b39c36761",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6a8ef818-919f-49d7-b17d-2d9161fbfe3a",
                    "54fb1ab3-8649-44f6-bdce-47ae0ddd6112",
                    "e0a0b8ca-3e46-4330-b6b4-8112395e9a86",
                    "94839d31-70e2-4dd1-8bab-761e84c92566",
                    "3feea5bf-e2db-42f9-97ea-69e219266299",
                    "24fd2dbe-36b6-4aaf-8862-e0358339eaba",
                    "a605f6a0-40a4-4571-8f1c-2b3fa06657e5",
                    "ee31b34e-abcb-42d8-b758-734b1026c523"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "7eeaf64e-4055-45fc-88b7-63e502144dd3",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, moment('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "997f6ddb-83ab-4109-8afe-7ce444b469ab",
                      "parentUUID": "7eeaf64e-4055-45fc-88b7-63e502144dd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', moment('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "076174ae-8593-46a5-9ec2-dcde7107291f",
                      "parentUUID": "7eeaf64e-4055-45fc-88b7-63e502144dd3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, moment('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "6a631ee5-2911-451f-92fb-004417934069",
                      "parentUUID": "7eeaf64e-4055-45fc-88b7-63e502144dd3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "997f6ddb-83ab-4109-8afe-7ce444b469ab",
                    "076174ae-8593-46a5-9ec2-dcde7107291f",
                    "6a631ee5-2911-451f-92fb-004417934069"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "dad5c8eb-a201-4363-acdd-9612856150f0",
                  "title": "moment-timezone.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, momentTz('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "08cb11c2-bc0e-4c51-a10a-991065536b69",
                      "parentUUID": "dad5c8eb-a201-4363-acdd-9612856150f0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', momentTz('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "bd46c5b2-885f-4235-8c50-739d8643110c",
                      "parentUUID": "dad5c8eb-a201-4363-acdd-9612856150f0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, momentTz('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "a7bb1bda-0fef-4676-a4b4-4ef7caa88ffa",
                      "parentUUID": "dad5c8eb-a201-4363-acdd-9612856150f0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "08cb11c2-bc0e-4c51-a10a-991065536b69",
                    "bd46c5b2-885f-4235-8c50-739d8643110c",
                    "a7bb1bda-0fef-4676-a4b4-4ef7caa88ffa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fecdaf51-07f9-47c7-81e1-3f4fbd170559",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "e4bfa421-73ba-4696-8da4-ac12352aa539",
                      "parentUUID": "fecdaf51-07f9-47c7-81e1-3f4fbd170559",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "7b224424-a731-4471-9ca6-368c9b219c91",
                      "parentUUID": "fecdaf51-07f9-47c7-81e1-3f4fbd170559",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "81b0ca4b-efb4-4b7d-8b9e-01af75ffcc91",
                      "parentUUID": "fecdaf51-07f9-47c7-81e1-3f4fbd170559",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "a527090a-ffad-4538-b036-8075c24d4b8e",
                      "parentUUID": "fecdaf51-07f9-47c7-81e1-3f4fbd170559",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e4bfa421-73ba-4696-8da4-ac12352aa539",
                    "7b224424-a731-4471-9ca6-368c9b219c91",
                    "81b0ca4b-efb4-4b7d-8b9e-01af75ffcc91",
                    "a527090a-ffad-4538-b036-8075c24d4b8e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f97bc0d4-8bd8-499a-a26f-41a99e85e3bb",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "5adc7ea1-a1c3-4aa3-b313-b37078a2955f",
                      "parentUUID": "f97bc0d4-8bd8-499a-a26f-41a99e85e3bb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', dayjs('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "a061750c-d76f-48da-b455-48ea7fcca34f",
                      "parentUUID": "f97bc0d4-8bd8-499a-a26f-41a99e85e3bb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "a238bbcd-9b5a-42e4-bdab-f4d7a35b5487",
                      "parentUUID": "f97bc0d4-8bd8-499a-a26f-41a99e85e3bb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "d0b03059-67be-432b-a3af-4a95b818a922",
                      "parentUUID": "f97bc0d4-8bd8-499a-a26f-41a99e85e3bb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5adc7ea1-a1c3-4aa3-b313-b37078a2955f",
                    "a061750c-d76f-48da-b455-48ea7fcca34f",
                    "a238bbcd-9b5a-42e4-bdab-f4d7a35b5487",
                    "d0b03059-67be-432b-a3af-4a95b818a922"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7f5a03a6-b046-400e-a497-aba35540b74f",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed = { timezone: 'Europe/Berlin' };\nassert.strictEqual(formatDateTZ('Europe/Berlin', 'DSTART', moment('2018-07-02T15:48:05.000Z'), ed), 'DSTART;TZID=Europe/Berlin:20180702T174805');",
                  "err": {},
                  "uuid": "b2502433-cb1a-4eb0-9042-fbe9f5787bae",
                  "parentUUID": "7f5a03a6-b046-400e-a497-aba35540b74f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z', {}), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "45d13a50-4602-4705-8960-ce62fd505bc2",
                  "parentUUID": "7f5a03a6-b046-400e-a497-aba35540b74f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z'), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "276bbe6a-cbb0-4344-bc55-b9598365fbe5",
                  "parentUUID": "7f5a03a6-b046-400e-a497-aba35540b74f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2502433-cb1a-4eb0-9042-fbe9f5787bae",
                "45d13a50-4602-4705-8960-ce62fd505bc2",
                "276bbe6a-cbb0-4344-bc55-b9598365fbe5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4c377aa2-597b-4829-a2f3-d8e5e8fc09bf",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\\\ipsum', false), 'Lorem \\\\\\\\ipsum');",
                  "err": {},
                  "uuid": "d75fd76b-978d-42bf-82d4-72e8189b5cbd",
                  "parentUUID": "4c377aa2-597b-4829-a2f3-d8e5e8fc09bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem ;ipsum', false), 'Lorem \\\\;ipsum');",
                  "err": {},
                  "uuid": "0fa3aa85-60aa-4a26-a5a9-2176e27c2112",
                  "parentUUID": "4c377aa2-597b-4829-a2f3-d8e5e8fc09bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem, ipsum', false), 'Lorem\\\\, ipsum');",
                  "err": {},
                  "uuid": "1f00ba59-f54f-4d39-a970-9db26b5f452f",
                  "parentUUID": "4c377aa2-597b-4829-a2f3-d8e5e8fc09bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\ripsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "87a84633-e279-4e0d-aed1-83497666c55e",
                  "parentUUID": "4c377aa2-597b-4829-a2f3-d8e5e8fc09bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "059f41c1-23ed-4e8d-aa5b-52297c4e6784",
                  "parentUUID": "4c377aa2-597b-4829-a2f3-d8e5e8fc09bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\r\\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "fbf6e1d8-d341-4fd6-b14a-24ad76dde7dc",
                  "parentUUID": "4c377aa2-597b-4829-a2f3-d8e5e8fc09bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \" in text when inQuotes = true",
                  "fullTitle": "ICalTools escape() should escape \" in text when inQuotes = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum', true), 'Lorem \\\\\"ipsum');",
                  "err": {},
                  "uuid": "6f8322aa-0d83-4398-9b3e-075df22ce15a",
                  "parentUUID": "4c377aa2-597b-4829-a2f3-d8e5e8fc09bf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not escape \" in text when inQuotes = false",
                  "fullTitle": "ICalTools escape() should not escape \" in text when inQuotes = false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum', false), 'Lorem \"ipsum');",
                  "err": {},
                  "uuid": "0345fd07-299c-48b4-a355-182ba3c34eff",
                  "parentUUID": "4c377aa2-597b-4829-a2f3-d8e5e8fc09bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d75fd76b-978d-42bf-82d4-72e8189b5cbd",
                "0fa3aa85-60aa-4a26-a5a9-2176e27c2112",
                "1f00ba59-f54f-4d39-a970-9db26b5f452f",
                "87a84633-e279-4e0d-aed1-83497666c55e",
                "059f41c1-23ed-4e8d-aa5b-52297c4e6784",
                "fbf6e1d8-d341-4fd6-b14a-24ad76dde7dc",
                "6f8322aa-0d83-4398-9b3e-075df22ce15a",
                "0345fd07-299c-48b4-a355-182ba3c34eff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33493a26-bb07-4ddc-8c6a-031b39389773",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines('12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981'), '12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "2d74d7cb-7e85-4fe3-bc85-95565f705e77",
                  "parentUUID": "33493a26-bb07-4ddc-8c6a-031b39389773",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines('👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981'), '👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "814bca28-12dc-4345-9bad-b92bc1ae77ee",
                  "parentUUID": "33493a26-bb07-4ddc-8c6a-031b39389773",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d74d7cb-7e85-4fe3-bc85-95565f705e77",
                "814bca28-12dc-4345-9bad-b92bc1ae77ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "42b73f39-3202-4842-b880-80c52c16696a",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a4a974d6-0867-4242-a0c4-9b1b25b4bd9c",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "297c987f-aeaf-4be6-9860-058409bed42e",
                      "parentUUID": "a4a974d6-0867-4242-a0c4-9b1b25b4bd9c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "1aef0b1a-a18f-44dc-9425-03bd3f8040d6",
                      "parentUUID": "a4a974d6-0867-4242-a0c4-9b1b25b4bd9c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "297c987f-aeaf-4be6-9860-058409bed42e",
                    "1aef0b1a-a18f-44dc-9425-03bd3f8040d6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "dfbe5425-4fb1-49c4-a63d-4ce5e6fab9e7",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = '2021-03-28T13:15:23.587Z';\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "26e837f6-40ed-4273-b314-14901c314480",
                      "parentUUID": "dfbe5425-4fb1-49c4-a63d-4ce5e6fab9e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = 'foo';\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "ce844e9a-7798-4321-830a-925b03860421",
                      "parentUUID": "dfbe5425-4fb1-49c4-a63d-4ce5e6fab9e7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "26e837f6-40ed-4273-b314-14901c314480",
                    "ce844e9a-7798-4321-830a-925b03860421"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8e7ed62b-73b0-4602-ac5f-13a6ba823fff",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = DateTime.now();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "e341d5c9-32b0-4f37-9de0-f4a4e869fa20",
                      "parentUUID": "8e7ed62b-73b0-4602-ac5f-13a6ba823fff",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = DateTime.fromISO('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "ff0c26e7-e177-4920-97d7-27b17874d9ff",
                      "parentUUID": "8e7ed62b-73b0-4602-ac5f-13a6ba823fff",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e341d5c9-32b0-4f37-9de0-f4a4e869fa20",
                    "ff0c26e7-e177-4920-97d7-27b17874d9ff"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d54846e6-6886-4996-9962-8ac1295cb309",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "586cbffe-a914-4668-99cc-4160e764ca81",
                      "parentUUID": "d54846e6-6886-4996-9962-8ac1295cb309",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment('foo', 'MM/DD/YYYY', true);\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "a898e097-5211-4ae0-94c8-472cecbf6758",
                      "parentUUID": "d54846e6-6886-4996-9962-8ac1295cb309",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "586cbffe-a914-4668-99cc-4160e764ca81",
                    "a898e097-5211-4ae0-94c8-472cecbf6758"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "271b8e9e-bf8e-43da-aaa7-9a6b64b3e6f2",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "3455ef13-18fd-4f92-a445-e464ead8762a",
                      "parentUUID": "271b8e9e-bf8e-43da-aaa7-9a6b64b3e6f2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "6bcb6d6a-6113-480b-8795-6b2fd60c6fdc",
                      "parentUUID": "271b8e9e-bf8e-43da-aaa7-9a6b64b3e6f2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3455ef13-18fd-4f92-a445-e464ead8762a",
                    "6bcb6d6a-6113-480b-8795-6b2fd60c6fdc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "161afbc4-dd0a-4286-89d5-4eb20aedcd06",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(date.toJSON()), date);",
                  "err": {},
                  "uuid": "dc6d127b-5299-46b1-b7b4-41491adf5e83",
                  "parentUUID": "161afbc4-dd0a-4286-89d5-4eb20aedcd06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(date), date);",
                  "err": {},
                  "uuid": "0aa8f5f6-0808-4f63-8cea-73fb46e82e62",
                  "parentUUID": "161afbc4-dd0a-4286-89d5-4eb20aedcd06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(moment(date)), date);",
                  "err": {},
                  "uuid": "d67ca8fd-e4e0-4900-a9f5-6d8d4ff2c284",
                  "parentUUID": "161afbc4-dd0a-4286-89d5-4eb20aedcd06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment-timezone object",
                  "fullTitle": "ICalTools toDate() should work with moment-timezone object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(momentTz(date)), date);",
                  "err": {},
                  "uuid": "75ef842f-3273-4174-b926-9312f529321e",
                  "parentUUID": "161afbc4-dd0a-4286-89d5-4eb20aedcd06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(dayjs(date)), date);",
                  "err": {},
                  "uuid": "7d7d885d-2d0b-4776-8ea4-ed782717d28f",
                  "parentUUID": "161afbc4-dd0a-4286-89d5-4eb20aedcd06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(DateTime.fromJSDate(date)), date);",
                  "err": {},
                  "uuid": "9917b91e-b006-4bcb-88fd-68663691b204",
                  "parentUUID": "161afbc4-dd0a-4286-89d5-4eb20aedcd06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc6d127b-5299-46b1-b7b4-41491adf5e83",
                "0aa8f5f6-0808-4f63-8cea-73fb46e82e62",
                "d67ca8fd-e4e0-4900-a9f5-6d8d4ff2c284",
                "75ef842f-3273-4174-b926-9312f529321e",
                "7d7d885d-2d0b-4776-8ea4-ed782717d28f",
                "9917b91e-b006-4bcb-88fd-68663691b204"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "acb12a8c-c021-4613-826f-f166ff45ca10",
          "title": "ical-generator Types",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/types.ts",
          "file": "/test/types.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stubs should be compatible with third party libraries",
              "fullTitle": "ical-generator Types stubs should be compatible with third party libraries",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(dayJsTest, 'day.js stub should be compatible');\nassert.ok(luxonTest, 'luxon stub should be compatible');\nassert.ok(momentTest, 'moment stub should be compatible');\nassert.ok(momentTimezoneTest, 'moment-timezone stub should be compatible');\nassert.ok(rruleTest, 'rrule stub should be compatible');",
              "err": {},
              "uuid": "05fb06c3-93e8-4c2b-82c5-3db47e207919",
              "parentUUID": "acb12a8c-c021-4613-826f-f166ff45ca10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calendar data should be compatible with calendar json data",
              "fullTitle": "ical-generator Types calendar data should be compatible with calendar json data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(attendeeJson, 'attendee json data should be compatible');\nassert.ok(calendarJson, 'calendar json data should be compatible');\nassert.ok(categoryJson, 'category json data should be compatible');\nassert.ok(eventJson, 'event json data should be compatible');",
              "err": {},
              "uuid": "233c0c74-b52f-4c60-af62-a579b1e6c78e",
              "parentUUID": "acb12a8c-c021-4613-826f-f166ff45ca10",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05fb06c3-93e8-4c2b-82c5-3db47e207919",
            "233c0c74-b52f-4c60-af62-a579b1e6c78e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}