{
  "stats": {
    "suites": 130,
    "tests": 443,
    "passes": 441,
    "pending": 2,
    "failures": 0,
    "start": "2024-02-29T20:35:10.197Z",
    "end": "2024-02-29T20:35:10.364Z",
    "duration": 167,
    "testsRegistered": 443,
    "passPercent": 100,
    "pendingPercent": 0.4514672686230248,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5b090eaa-0fbd-4f9f-bac0-a90ec6fedf23",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "62f0ad54-8ad2-4755-acf4-b7e423385a9c",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "79dadee2-36b9-45e9-a2aa-b1528d9bc7fe",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalAlarm({ type: ICalAlarmType.display }, null);\n}, /`event`/);",
                  "err": {},
                  "uuid": "04fb8bd8-9286-40d1-bb0a-acf2b4b14821",
                  "parentUUID": "79dadee2-36b9-45e9-a2aa-b1528d9bc7fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    // @ts-ignore\n    unknown: true,\n    type: ICalAlarmType.display\n}, new ICalEvent({\n    start: new Date()\n}, new ICalCalendar()));\nassert.strictEqual(a.type(), 'display');",
                  "err": {},
                  "uuid": "b8e3cf86-9299-4020-8e9f-32fe237363e7",
                  "parentUUID": "79dadee2-36b9-45e9-a2aa-b1528d9bc7fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04fb8bd8-9286-40d1-bb0a-acf2b4b14821",
                "b8e3cf86-9299-4020-8e9f-32fe237363e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "38dbb035-ece1-44dd-b4f7-1bef3e271135",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({\n    start: new Date()\n}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.type(ICalAlarmType.display));",
                  "err": {},
                  "uuid": "74e177c9-37f4-4941-a9cb-e763d3aa7d52",
                  "parentUUID": "38dbb035-ece1-44dd-b4f7-1bef3e271135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({\n    start: new Date()\n}, new ICalCalendar()));\nassert.strictEqual(a.type(), 'display');\na.type(ICalAlarmType.audio);\nassert.strictEqual(a.type(), 'audio');",
                  "err": {},
                  "uuid": "f036f411-c95d-4c84-8a8c-df749cea22ed",
                  "parentUUID": "38dbb035-ece1-44dd-b4f7-1bef3e271135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({\n    start: new Date()\n}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.type('BANANA');\n}, /`type`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.type(null);\n}, /`type`/);",
                  "err": {},
                  "uuid": "ee0feb7c-b3c0-4573-8e31-cb8aa5e73f44",
                  "parentUUID": "38dbb035-ece1-44dd-b4f7-1bef3e271135",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('ACTION:DISPLAY') > -1);",
                  "err": {},
                  "uuid": "c87acaeb-15bb-4014-9269-a1adda0fb715",
                  "parentUUID": "38dbb035-ece1-44dd-b4f7-1bef3e271135",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "74e177c9-37f4-4941-a9cb-e763d3aa7d52",
                "f036f411-c95d-4c84-8a8c-df749cea22ed",
                "ee0feb7c-b3c0-4573-8e31-cb8aa5e73f44",
                "c87acaeb-15bb-4014-9269-a1adda0fb715"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dd1b31e1-4872-40a6-be14-132b4987c49f",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.trigger(60 * 10));",
                  "err": {},
                  "uuid": "0d905878-9a7e-4bba-8bee-71103dcb7397",
                  "parentUUID": "dd1b31e1-4872-40a6-be14-132b4987c49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nconst now = new Date();\nassert.strictEqual(a.trigger(), 600);\nassert.strictEqual(a.triggerAfter(), -600);\na.trigger(300);\nassert.strictEqual(a.trigger(), 300);\nassert.strictEqual(a.triggerAfter(), -300);\n// Date\na.trigger(now);\nconst dateResult = a.trigger();\nassert.deepStrictEqual(dateResult, now);",
                  "err": {},
                  "uuid": "264fbfcf-167e-4065-87db-d0ecc4f0dc96",
                  "parentUUID": "dd1b31e1-4872-40a6-be14-132b4987c49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    a.trigger(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.trigger('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.trigger(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "afe30384-8c70-4fc1-95b0-5ca1acfabc12",
                  "parentUUID": "dd1b31e1-4872-40a6-be14-132b4987c49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.trigger(new Date());\nassert.ok(a.trigger() instanceof Date);",
                  "err": {},
                  "uuid": "e3ff8274-03d6-4f59-9be1-dc1e44017800",
                  "parentUUID": "dd1b31e1-4872-40a6-be14-132b4987c49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.trigger(moment());\nassert.ok(moment.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "3bded7e2-c55c-4775-bd69-14599485c952",
                  "parentUUID": "dd1b31e1-4872-40a6-be14-132b4987c49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.trigger(2 * 60);\nassert.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "db47f38a-6fb5-4fe8-b5d3-c4b411a981b9",
                  "parentUUID": "dd1b31e1-4872-40a6-be14-132b4987c49f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('2015-02-01T13:38:45.000Z');\nconst a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().includes('TRIGGER:-PT10M'));\na.trigger(trigger);\nassert.ok(a.toString().includes('TRIGGER;VALUE=DATE-TIME:20150201T133845Z'));",
                  "err": {},
                  "uuid": "86692f45-0c4d-4a91-8c45-8f7641e40844",
                  "parentUUID": "dd1b31e1-4872-40a6-be14-132b4987c49f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d905878-9a7e-4bba-8bee-71103dcb7397",
                "264fbfcf-167e-4065-87db-d0ecc4f0dc96",
                "afe30384-8c70-4fc1-95b0-5ca1acfabc12",
                "e3ff8274-03d6-4f59-9be1-dc1e44017800",
                "3bded7e2-c55c-4775-bd69-14599485c952",
                "db47f38a-6fb5-4fe8-b5d3-c4b411a981b9",
                "86692f45-0c4d-4a91-8c45-8f7641e40844"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1b06f158-1fc5-4c29-b6d4-1879c71f3980",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.triggerAfter(60 * 10));",
                  "err": {},
                  "uuid": "317711b8-52f3-47e9-92df-7fe31ba578b6",
                  "parentUUID": "1b06f158-1fc5-4c29-b6d4-1879c71f3980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar())).triggerAfter(300);\nassert.strictEqual(a.triggerAfter(), 300);\nassert.strictEqual(a.trigger(), -300);",
                  "err": {},
                  "uuid": "72181ea2-a8ea-4c0b-83ce-73e7c92ae74e",
                  "parentUUID": "1b06f158-1fc5-4c29-b6d4-1879c71f3980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.triggerAfter(120);\nassert.strictEqual(a.trigger(), -120);",
                  "err": {},
                  "uuid": "2b4b4dd1-17ff-4d7f-8ab7-e30f2f3320f8",
                  "parentUUID": "1b06f158-1fc5-4c29-b6d4-1879c71f3980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    a.triggerAfter(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerAfter('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerAfter(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "81462959-0313-4caa-8aef-3bf4e75248ce",
                  "parentUUID": "1b06f158-1fc5-4c29-b6d4-1879c71f3980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('20150201T133845Z');\nconst a = new ICalAlarm({ triggerAfter: 600 }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER;RELATED=END:PT10M') > -1);\na.triggerAfter(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "fb41918a-c5ae-40ad-a259-06f3c19a23d0",
                  "parentUUID": "1b06f158-1fc5-4c29-b6d4-1879c71f3980",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "317711b8-52f3-47e9-92df-7fe31ba578b6",
                "72181ea2-a8ea-4c0b-83ce-73e7c92ae74e",
                "2b4b4dd1-17ff-4d7f-8ab7-e30f2f3320f8",
                "81462959-0313-4caa-8aef-3bf4e75248ce",
                "fb41918a-c5ae-40ad-a259-06f3c19a23d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ef882f84-7d4a-42e9-8f31-7d533c191a84",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.triggerBefore(60 * 10));",
                  "err": {},
                  "uuid": "773eeafe-e00a-4f9a-adc2-db7588795212",
                  "parentUUID": "ef882f84-7d4a-42e9-8f31-7d533c191a84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nconst now = new Date();\nassert.strictEqual(a.triggerBefore(), 600);\na.trigger(300);\nassert.strictEqual(a.triggerBefore(), 300);\n// Date\na.trigger(now);\nconst dateResult = a.triggerBefore();\nassert.deepStrictEqual(dateResult, now);",
                  "err": {},
                  "uuid": "ec14b954-3272-4b1d-a932-25944fad3862",
                  "parentUUID": "ef882f84-7d4a-42e9-8f31-7d533c191a84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    a.triggerBefore(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerBefore('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerBefore(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "fd6c3d02-c383-414a-863c-8999e79380e8",
                  "parentUUID": "ef882f84-7d4a-42e9-8f31-7d533c191a84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nconst now = new Date();\na.triggerBefore(now);\nassert.deepStrictEqual(a.trigger(), now);",
                  "err": {},
                  "uuid": "f7b19b6a-265d-4c67-9910-a24618b493bf",
                  "parentUUID": "ef882f84-7d4a-42e9-8f31-7d533c191a84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ triggerBefore: moment() }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(moment.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "0a4eb867-1e8f-4ba7-b54b-f4656fa6ef6f",
                  "parentUUID": "ef882f84-7d4a-42e9-8f31-7d533c191a84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.triggerBefore(2 * 60);\nassert.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "7889dff9-86c5-4c5b-bb8b-c71524d5c455",
                  "parentUUID": "ef882f84-7d4a-42e9-8f31-7d533c191a84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('2015-02-01T13:38:45.000Z');\nconst a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.triggerBefore(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "4d6cbc3b-761b-426a-9b9a-2a27056a2d50",
                  "parentUUID": "ef882f84-7d4a-42e9-8f31-7d533c191a84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "773eeafe-e00a-4f9a-adc2-db7588795212",
                "ec14b954-3272-4b1d-a932-25944fad3862",
                "fd6c3d02-c383-414a-863c-8999e79380e8",
                "f7b19b6a-265d-4c67-9910-a24618b493bf",
                "0a4eb867-1e8f-4ba7-b54b-f4656fa6ef6f",
                "7889dff9-86c5-4c5b-bb8b-c71524d5c455",
                "4d6cbc3b-761b-426a-9b9a-2a27056a2d50"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ffeb5eee-0e0f-4d2b-aded-2406dec70460",
              "title": "relatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm relatesTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.relatesTo(null));\nassert.deepStrictEqual(a, a.relatesTo(ICalAlarmRelatesTo.end));",
                  "err": {},
                  "uuid": "0795654b-7ccd-49ce-9855-185d8c922276",
                  "parentUUID": "ffeb5eee-0e0f-4d2b-aded-2406dec70460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm relatesTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.relatesTo(ICalAlarmRelatesTo.end);\nassert.strictEqual(a.relatesTo(), ICalAlarmRelatesTo.end);\na.relatesTo(null);\nassert.strictEqual(a.relatesTo(), null);",
                  "err": {},
                  "uuid": "2a0529ff-d775-4111-98b8-413d6e7fd17d",
                  "parentUUID": "ffeb5eee-0e0f-4d2b-aded-2406dec70460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw if value is not `null`, \"START\" or \"END\"",
                  "fullTitle": "ical-generator Alarm relatesTo() should throw if value is not `null`, \"START\" or \"END\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo('hi');\n}, /`relatesTo`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo(true);\n}, /`relatesTo`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo(Infinity);\n}, /`relatesTo`/);",
                  "err": {},
                  "uuid": "79dc23cc-f76e-4584-8c04-6b06d728d312",
                  "parentUUID": "ffeb5eee-0e0f-4d2b-aded-2406dec70460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change RELATED",
                  "fullTitle": "ical-generator Alarm relatesTo() should change RELATED",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('RELATED=START') === -1);\na.relatesTo(ICalAlarmRelatesTo.start);\nassert.ok(a.toString().indexOf('RELATED=START') > -1);\na.relatesTo(ICalAlarmRelatesTo.end);\nassert.ok(a.toString().indexOf('RELATED=END') > -1);",
                  "err": {},
                  "uuid": "820bfaac-dd22-4cfb-ad69-d053b603dcd6",
                  "parentUUID": "ffeb5eee-0e0f-4d2b-aded-2406dec70460",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0795654b-7ccd-49ce-9855-185d8c922276",
                "2a0529ff-d775-4111-98b8-413d6e7fd17d",
                "79dc23cc-f76e-4584-8c04-6b06d728d312",
                "820bfaac-dd22-4cfb-ad69-d053b603dcd6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2992cf1b-c05e-44e6-a056-2d360c03d9a8",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.repeat({\n    times: 4,\n    interval: 60\n}));",
                  "err": {},
                  "uuid": "65dafe76-25f9-4b5f-a676-4ef8af5caa7c",
                  "parentUUID": "2992cf1b-c05e-44e6-a056-2d360c03d9a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.repeat(), null);\na.repeat({ times: 4, interval: 60 });\nassert.deepStrictEqual(a.repeat(), { times: 4, interval: 60 });",
                  "err": {},
                  "uuid": "e6f5b1e4-0848-4332-b62d-79533deafc76",
                  "parentUUID": "2992cf1b-c05e-44e6-a056-2d360c03d9a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    a.repeat({\n        times: Infinity,\n        interval: 60\n    });\n}, /`repeat.times`/);\nassert.throws(function () {\n    a.repeat({\n        // @ts-ignore\n        times: 'hi',\n        interval: 60\n    });\n}, /`repeat.times`/);\nassert.throws(function () {\n    a.repeat({\n        // @ts-ignore\n        times: true,\n        interval: 60\n    });\n}, /`repeat.times`/);\nassert.throws(function () {\n    a.repeat({\n        times: 4,\n        interval: Infinity\n    });\n}, /`repeat.interval`/);\nassert.throws(function () {\n    a.repeat({\n        times: 4,\n        // @ts-ignore\n        interval: 'hi'\n    });\n}, /`repeat.interval`/);\nassert.throws(function () {\n    a.repeat({\n        times: 4,\n        // @ts-ignore\n        interval: true\n    });\n}, /`repeat.interval`/);",
                  "err": {},
                  "uuid": "5505f3df-9f94-4f52-ad7a-36e61ed086de",
                  "parentUUID": "2992cf1b-c05e-44e6-a056-2d360c03d9a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    trigger: 300,\n    repeat: {\n        times: 42,\n        interval: 90\n    }\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().includes('REPEAT:42'));\nassert.ok(a.toString().includes('DURATION:PT1M30S'));\na.repeat(null);\nassert.ok(!a.toString().includes('REPEAT:42'));\nassert.ok(!a.toString().includes('DURATION:PT1M30S'));",
                  "err": {},
                  "uuid": "c4cd6aba-82aa-441d-b235-13930a942433",
                  "parentUUID": "2992cf1b-c05e-44e6-a056-2d360c03d9a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalAlarm({\n        trigger: 300,\n        repeat: {\n            times: 4,\n            // @ts-ignore\n            interval: null\n        }\n    }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\n}, /`repeat.interval`/);",
                  "err": {},
                  "uuid": "59259a2a-15ff-41ab-a88f-781d6027f9f7",
                  "parentUUID": "2992cf1b-c05e-44e6-a056-2d360c03d9a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalAlarm({\n        trigger: 300,\n        repeat: {\n            // @ts-ignore\n            times: null,\n            interval: 60\n        }\n    }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\n}, /`repeat.times`/);",
                  "err": {},
                  "uuid": "2ffb5215-4987-43b4-a86f-7d90f99caf74",
                  "parentUUID": "2992cf1b-c05e-44e6-a056-2d360c03d9a8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is of wrong type",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is of wrong type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalAlarm({\n        trigger: 300,\n        // @ts-ignore\n        repeat: true\n    }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\n}, /`repeat` is not correct, must be an object!/);",
                  "err": {},
                  "uuid": "4653c487-76ba-4bc2-9a26-e3479de671f3",
                  "parentUUID": "2992cf1b-c05e-44e6-a056-2d360c03d9a8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65dafe76-25f9-4b5f-a676-4ef8af5caa7c",
                "e6f5b1e4-0848-4332-b62d-79533deafc76",
                "5505f3df-9f94-4f52-ad7a-36e61ed086de",
                "c4cd6aba-82aa-441d-b235-13930a942433",
                "59259a2a-15ff-41ab-a88f-781d6027f9f7",
                "2ffb5215-4987-43b4-a86f-7d90f99caf74",
                "4653c487-76ba-4bc2-9a26-e3479de671f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e3b71c8c-bba3-4a00-ab0e-685ec503678c",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.attach(null));\nassert.deepStrictEqual(a, a.attach('https://sebbo.net/beep.aud'));",
                  "err": {},
                  "uuid": "700f5141-2f84-4618-b252-34507351d2b2",
                  "parentUUID": "e3b71c8c-bba3-4a00-ab0e-685ec503678c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t = { uri: 'https://example.com/alarm.aud', mime: 'audio/basic' };\nconst a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.attach(), null);\na.attach(t);\nassert.deepStrictEqual(a.attach(), t);\na.attach('https://www.example.com/beep.aud');\nassert.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach({\n    uri: 'https://www.example.com/beep.aud'\n});\nassert.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach(null);\nassert.strictEqual(a.attach(), null);",
                  "err": {},
                  "uuid": "97a66845-4eda-432f-a6f1-258e5efadc05",
                  "parentUUID": "e3b71c8c-bba3-4a00-ab0e-685ec503678c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.attach({ mime: 'audio/basic' });\n}, /`attach.uri`/);",
                  "err": {},
                  "uuid": "241fc0f9-51ba-41df-acb6-1fec00bfa391",
                  "parentUUID": "e3b71c8c-bba3-4a00-ab0e-685ec503678c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.attach(Infinity);\n}, /`attachment`/);",
                  "err": {},
                  "uuid": "6992e7fc-7f76-4c43-9a05-47851973de16",
                  "parentUUID": "e3b71c8c-bba3-4a00-ab0e-685ec503678c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ type: ICalAlarmType.audio }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:Basso') > -1);\na.attach('https://example.com/beep.aud');\nassert.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud') > -1);\na.attach({\n    uri: 'https://example.com/beep.aud',\n    mime: 'audio/basic'\n});\nassert.ok(a.toString().indexOf('\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud') > -1);",
                  "err": {},
                  "uuid": "d0801b4a-37aa-47b7-8e62-3383771fe900",
                  "parentUUID": "e3b71c8c-bba3-4a00-ab0e-685ec503678c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "700f5141-2f84-4618-b252-34507351d2b2",
                "97a66845-4eda-432f-a6f1-258e5efadc05",
                "241fc0f9-51ba-41df-acb6-1fec00bfa391",
                "6992e7fc-7f76-4c43-9a05-47851973de16",
                "d0801b4a-37aa-47b7-8e62-3383771fe900"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2cdc63bd-98a9-4b26-b891-80efd0a74b08",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.description(null));\nassert.deepStrictEqual(a, a.description('Hey Ho!'));",
                  "err": {},
                  "uuid": "8c1a0499-5241-4311-b139-ad5851e6e343",
                  "parentUUID": "2cdc63bd-98a9-4b26-b891-80efd0a74b08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a.description(), null);\na.description('blablabla');\nassert.deepStrictEqual(a.description(), 'blablabla');\na.description(null);\nassert.deepStrictEqual(a.description(), null);",
                  "err": {},
                  "uuid": "10db301f-0b65-48a0-bdc3-a4141b02db2a",
                  "parentUUID": "2cdc63bd-98a9-4b26-b891-80efd0a74b08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    description: 'Huibuh!'\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Huibuh') > -1);",
                  "err": {},
                  "uuid": "63b08de6-c2cf-482b-b671-fc35bea8af6b",
                  "parentUUID": "2cdc63bd-98a9-4b26-b891-80efd0a74b08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ description: 'Example Event' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Example Event') > -1);",
                  "err": {},
                  "uuid": "c71a2c6d-cc3a-477c-9360-efe45cd464fa",
                  "parentUUID": "2cdc63bd-98a9-4b26-b891-80efd0a74b08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c1a0499-5241-4311-b139-ad5851e6e343",
                "10db301f-0b65-48a0-bdc3-a4141b02db2a",
                "63b08de6-c2cf-482b-b671-fc35bea8af6b",
                "c71a2c6d-cc3a-477c-9360-efe45cd464fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d0f7b91e-ca44-4076-9c26-f21b38ee0cf0",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.summary(null));\nassert.deepStrictEqual(a, a.summary('Hey Ho!'));",
                  "err": {},
                  "uuid": "80b736ad-6716-48a2-b826-32bd46f8be5f",
                  "parentUUID": "d0f7b91e-ca44-4076-9c26-f21b38ee0cf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a.summary(), null);\na.summary('blablabla');\nassert.deepStrictEqual(a.summary(), 'blablabla');\na.summary(null);\nassert.deepStrictEqual(a.summary(), null);",
                  "err": {},
                  "uuid": "497c8ea9-599e-47f5-80e4-f627b14ee273",
                  "parentUUID": "d0f7b91e-ca44-4076-9c26-f21b38ee0cf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm summary() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.email,\n    summary: 'Huibuh!'\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nSUMMARY:Huibuh') > -1);",
                  "err": {},
                  "uuid": "191c2cc3-9924-421c-9b32-4f4a16f302e1",
                  "parentUUID": "d0f7b91e-ca44-4076-9c26-f21b38ee0cf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm summary() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ type: ICalAlarmType.email }, new ICalEvent({ start: new Date(), summary: 'Example Event' }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nSUMMARY:Example Event') > -1);",
                  "err": {},
                  "uuid": "38885b00-4cdd-4b1d-9d10-74aeaced5143",
                  "parentUUID": "d0f7b91e-ca44-4076-9c26-f21b38ee0cf0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80b736ad-6716-48a2-b826-32bd46f8be5f",
                "497c8ea9-599e-47f5-80e4-f627b14ee273",
                "191c2cc3-9924-421c-9b32-4f4a16f302e1",
                "38885b00-4cdd-4b1d-9d10-74aeaced5143"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "533560a6-9264-4224-8997-56911573d82a",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Alarm createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm = new ICalEvent({ start: new Date() }, new ICalCalendar()).createAlarm({\n    type: ICalAlarmType.email\n});\nconst attendee = new ICalAttendee({ email: 'mail@example.com' }, alarm);\nassert.strictEqual(alarm.createAttendee(attendee), attendee, 'createAttendee returns attendee');\nassert.deepStrictEqual(alarm.attendees()[0], attendee, 'attendee pushed');",
                  "err": {},
                  "uuid": "2fea25b8-4da2-4f5a-9037-1d7fe61d93d6",
                  "parentUUID": "533560a6-9264-4224-8997-56911573d82a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Alarm createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm = new ICalEvent({ start: new Date() }, new ICalCalendar()).createAlarm({\n    type: ICalAlarmType.email\n});\n;\nassert.ok(alarm.createAttendee({ email: 'mail@example.com' }) instanceof ICalAttendee);\nassert.strictEqual(alarm.attendees.length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "4ff33ab1-d142-4f37-b507-4fd8b6a29309",
                  "parentUUID": "533560a6-9264-4224-8997-56911573d82a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm = new ICalEvent({ start: new Date() }, new ICalCalendar()).createAlarm({\n    type: ICalAlarmType.email\n});\n;\nconst attendee = alarm.createAttendee('Zac <zac@example.com>');\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(alarm.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "8fa884db-90a9-4be8-9ba0-10afe0f3c0ed",
                  "parentUUID": "533560a6-9264-4224-8997-56911573d82a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Alarm createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm = new ICalEvent({ start: new Date() }, new ICalCalendar()).createAlarm({\n    type: ICalAlarmType.email\n});\n;\nassert.throws(function () {\n    alarm.createAttendee('foo bar');\n}, /isn't formated correctly/);",
                  "err": {},
                  "uuid": "25fe1841-b25d-48a8-b09f-39f6391fbf9d",
                  "parentUUID": "533560a6-9264-4224-8997-56911573d82a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm = new ICalEvent({ start: new Date() }, new ICalCalendar()).createAlarm({\n    type: ICalAlarmType.email\n});\nconst attendee = alarm.createAttendee({ name: 'Zac', email: 'zac@example.com' });\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(alarm.attendees().length, 1, 'attendee pushed');\nassert.ok(alarm.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;CN=\"Zac\":MAILTO:zac@example.com'));",
                  "err": {},
                  "uuid": "5c46e0a6-23b7-428b-9872-69b1795396c5",
                  "parentUUID": "533560a6-9264-4224-8997-56911573d82a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fea25b8-4da2-4f5a-9037-1d7fe61d93d6",
                "4ff33ab1-d142-4f37-b507-4fd8b6a29309",
                "8fa884db-90a9-4be8-9ba0-10afe0f3c0ed",
                "25fe1841-b25d-48a8-b09f-39f6391fbf9d",
                "5c46e0a6-23b7-428b-9872-69b1795396c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "001ed538-f448-46f2-a369-6a5ab9f77d2d",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Alarm attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm = new ICalEvent({ start: new Date() }, new ICalCalendar()).createAlarm({\n    type: ICalAlarmType.email\n});\nassert.strictEqual(alarm.attendees().length, 0);\nconst attendee = alarm.createAttendee({ email: 'mail@example.com' });\nassert.strictEqual(alarm.attendees().length, 1);\nassert.deepStrictEqual(alarm.attendees()[0], attendee);",
                  "err": {},
                  "uuid": "a5ed74ea-5f2a-47da-ba12-5761946cf753",
                  "parentUUID": "001ed538-f448-46f2-a369-6a5ab9f77d2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Alarm attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm = new ICalEvent({ start: new Date() }, new ICalCalendar()).createAlarm({\n    type: ICalAlarmType.email\n});\nconst foo = alarm.attendees([\n    { name: 'Person A', email: 'a@example.com' },\n    { name: 'Person B', email: 'b@example.com' }\n]);\nassert.strictEqual(alarm.attendees().length, 2);\nassert.deepStrictEqual(foo, alarm);",
                  "err": {},
                  "uuid": "576835a3-6505-4301-b1ec-e2bc973a032b",
                  "parentUUID": "001ed538-f448-46f2-a369-6a5ab9f77d2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5ed74ea-5f2a-47da-ba12-5761946cf753",
                "576835a3-6505-4301-b1ec-e2bc973a032b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d5ef733-e84b-4868-b148-5bbd2fa85d9b",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "17116907-50f1-4ab3-aa0a-b4ac12e5824c",
                  "parentUUID": "6d5ef733-e84b-4868-b148-5bbd2fa85d9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17116907-50f1-4ab3-aa0a-b4ac12e5824c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "617b3973-bfa7-49ab-8e72-97fc0840bdff",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.type(ICalAlarmType.display);\na.trigger(120);\nassert.deepStrictEqual(a.toJSON(), {\n    attach: null,\n    attendees: [],\n    description: null,\n    relatesTo: null,\n    interval: null,\n    repeat: null,\n    summary: null,\n    trigger: 120,\n    type: 'display',\n    x: []\n});",
                  "err": {},
                  "uuid": "b4891140-092e-44b7-9aaa-ba23b11ee9de",
                  "parentUUID": "617b3973-bfa7-49ab-8e72-97fc0840bdff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nnew ICalAlarm(a.toJSON(), new ICalEvent({ start: new Date() }, new ICalCalendar()));",
                  "err": {},
                  "uuid": "eb3d366d-8965-4b22-abf7-7b7056c88331",
                  "parentUUID": "617b3973-bfa7-49ab-8e72-97fc0840bdff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4891140-092e-44b7-9aaa-ba23b11ee9de",
                "eb3d366d-8965-4b22-abf7-7b7056c88331"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1f191360-6a23-481e-acd4-2caa8c78f500",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a6b130fe-cb44-498c-9357-f624828f0243",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    name: 'John Doe',\n    email: 'john@example.org',\n    mailto: 'john+calendar@example.org',\n    sentBy: null,\n    status: ICalAttendeeStatus.ACCEPTED,\n    role: ICalAttendeeRole.REQ,\n    rsvp: false,\n    type: ICalAttendeeType.INDIVIDUAL,\n    delegatedTo: null,\n    delegatedFrom: null,\n    x: []\n};\nconst event = new ICalAttendee(data, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "5d3ec92b-7f80-46b7-8126-df50d9fec926",
                  "parentUUID": "a6b130fe-cb44-498c-9357-f624828f0243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalAttendee({ email: 'foo@bar.com' });\n}, /`event`/);",
                  "err": {},
                  "uuid": "8bd3b586-26d3-4d6b-8214-c9d80a68a9b7",
                  "parentUUID": "a6b130fe-cb44-498c-9357-f624828f0243",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee constructor() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalAttendee(\n    // @ts-ignore\n    { name: 'Testuser' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\n}, /`email`/);",
                  "err": {},
                  "uuid": "ec20d93b-00c3-481a-a4ea-89d57610e4d6",
                  "parentUUID": "a6b130fe-cb44-498c-9357-f624828f0243",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d3ec92b-7f80-46b7-8126-df50d9fec926",
                "8bd3b586-26d3-4d6b-8214-c9d80a68a9b7",
                "ec20d93b-00c3-481a-a4ea-89d57610e4d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae5f7f5a-18de-4d95-9d72-b8fe61704b8c",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.name(), null);\na.name('Sebastian');\nassert.strictEqual(a.name(), 'Sebastian');",
                  "err": {},
                  "uuid": "e4697b7d-c264-4c0d-a8bb-2623074459b3",
                  "parentUUID": "ae5f7f5a-18de-4d95-9d72-b8fe61704b8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.name(null));\nassert.deepStrictEqual(a, a.name('Sebastian'));",
                  "err": {},
                  "uuid": "838797a0-c2f3-4ef2-8c12-7020d79f45cf",
                  "parentUUID": "ae5f7f5a-18de-4d95-9d72-b8fe61704b8c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.name('Sebastian');\nassert.strictEqual(a.name(), 'Sebastian');\na.name(null);\nassert.strictEqual(a.name(), null);",
                  "err": {},
                  "uuid": "e8105faf-4573-41a6-af50-2b34d9b307f2",
                  "parentUUID": "ae5f7f5a-18de-4d95-9d72-b8fe61704b8c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4697b7d-c264-4c0d-a8bb-2623074459b3",
                "838797a0-c2f3-4ef2-8c12-7020d79f45cf",
                "e8105faf-4573-41a6-af50-2b34d9b307f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a515c4d7-6aed-4174-acc4-045aa31a64ab",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar())).email('foo@example.com');\nassert.strictEqual(a.email(), 'foo@example.com');",
                  "err": {},
                  "uuid": "4f203189-be69-43fc-8f5e-518fb1655f50",
                  "parentUUID": "a515c4d7-6aed-4174-acc4-045aa31a64ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.email('foo@example.com'));",
                  "err": {},
                  "uuid": "0931cf5f-2589-45b0-81f0-6241ceaff7e5",
                  "parentUUID": "a515c4d7-6aed-4174-acc4-045aa31a64ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('mail@example.com') > -1);",
                  "err": {},
                  "uuid": "47b0d1f7-1ffc-444f-b4c3-4dc19fa0cab2",
                  "parentUUID": "a515c4d7-6aed-4174-acc4-045aa31a64ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f203189-be69-43fc-8f5e-518fb1655f50",
                "0931cf5f-2589-45b0-81f0-6241ceaff7e5",
                "47b0d1f7-1ffc-444f-b4c3-4dc19fa0cab2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9217c45-11b4-4e65-b5d3-e7ef5d091f43",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.mailto(), null);\na.mailto('foo@example.com');\nassert.strictEqual(a.mailto(), 'foo@example.com');",
                  "err": {},
                  "uuid": "27007c71-ccc6-4dd3-820e-2588702dcae9",
                  "parentUUID": "a9217c45-11b4-4e65-b5d3-e7ef5d091f43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.mailto(null));\nassert.deepStrictEqual(a, a.mailto('foo@example.com'));",
                  "err": {},
                  "uuid": "bf72cf1f-30e2-487b-a4a0-c9eaded12118",
                  "parentUUID": "a9217c45-11b4-4e65-b5d3-e7ef5d091f43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.mailto('mail2@example2.com');\nassert.ok(a.toString().indexOf('EMAIL=mail@example.com') > -1 &&\n    a.toString().indexOf('MAILTO:mail2@example2.com') > -1);",
                  "err": {},
                  "uuid": "3d32b811-d2a6-447e-8622-dc368931026d",
                  "parentUUID": "a9217c45-11b4-4e65-b5d3-e7ef5d091f43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27007c71-ccc6-4dd3-820e-2588702dcae9",
                "bf72cf1f-30e2-487b-a4a0-c9eaded12118",
                "3d32b811-d2a6-447e-8622-dc368931026d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84b49a15-86a5-410f-9c30-c8d8037fac90",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar())).sentBy('foo@example.com');\nassert.strictEqual(a.sentBy(), 'foo@example.com');",
                  "err": {},
                  "uuid": "a40b7e91-c6ca-4a95-8e3c-cf1182fd219f",
                  "parentUUID": "84b49a15-86a5-410f-9c30-c8d8037fac90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.sentBy('foo@example.com'));",
                  "err": {},
                  "uuid": "eea492b6-a588-4d34-a1bd-739dd7130709",
                  "parentUUID": "84b49a15-86a5-410f-9c30-c8d8037fac90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com', sentBy: 'bar@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().includes('bar@example.com'));",
                  "err": {},
                  "uuid": "543767d8-55bd-421a-9797-f7c6704d9b91",
                  "parentUUID": "84b49a15-86a5-410f-9c30-c8d8037fac90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a40b7e91-c6ca-4a95-8e3c-cf1182fd219f",
                "eea492b6-a588-4d34-a1bd-739dd7130709",
                "543767d8-55bd-421a-9797-f7c6704d9b91"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33bd2585-d301-4496-a3b9-9a0f77f39bd8",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.role(ICalAttendeeRole.REQ));",
                  "err": {},
                  "uuid": "c3138797-0021-4f0e-b311-4b8b6f90753c",
                  "parentUUID": "33bd2585-d301-4496-a3b9-9a0f77f39bd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar())).role(ICalAttendeeRole.REQ);\nassert.strictEqual(a.role(), 'REQ-PARTICIPANT');",
                  "err": {},
                  "uuid": "67e363ba-f882-4d05-a6ff-14fc30ad4f2a",
                  "parentUUID": "33bd2585-d301-4496-a3b9-9a0f77f39bd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.role('');\n}, /Input must be one of the following: CHAIR, REQ-PARTICIPANT, OPT-PARTICIPANT, NON-PARTICIPANT/);",
                  "err": {},
                  "uuid": "c41ddf68-c95a-474f-8589-9498969a26f9",
                  "parentUUID": "33bd2585-d301-4496-a3b9-9a0f77f39bd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.role('COOKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "211e70c2-6ffc-4eee-b79a-ee2b3396f73f",
                  "parentUUID": "33bd2585-d301-4496-a3b9-9a0f77f39bd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', role: ICalAttendeeRole.NON }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('NON-PARTICIPANT') > -1);",
                  "err": {},
                  "uuid": "7170921b-8d0c-436e-b8ce-2a21cdaa7870",
                  "parentUUID": "33bd2585-d301-4496-a3b9-9a0f77f39bd8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c3138797-0021-4f0e-b311-4b8b6f90753c",
                "67e363ba-f882-4d05-a6ff-14fc30ad4f2a",
                "c41ddf68-c95a-474f-8589-9498969a26f9",
                "211e70c2-6ffc-4eee-b79a-ee2b3396f73f",
                "7170921b-8d0c-436e-b8ce-2a21cdaa7870"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6f79001-d50d-4eaa-af94-4ab47570264e",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.rsvp(null));\nassert.deepStrictEqual(a, a.rsvp(true));",
                  "err": {},
                  "uuid": "e08b2dd3-3c3d-47e4-a48a-bb14054bd701",
                  "parentUUID": "d6f79001-d50d-4eaa-af94-4ab47570264e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.rsvp(true);\nassert.strictEqual(a.rsvp(), true);\na.rsvp(false);\nassert.strictEqual(a.rsvp(), false);",
                  "err": {},
                  "uuid": "47cb0028-6af9-4bd0-8ca9-3973905380a2",
                  "parentUUID": "d6f79001-d50d-4eaa-af94-4ab47570264e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.rsvp(), null);\na.rsvp(false);\nassert.strictEqual(a.rsvp(), false);\na.rsvp(null);\nassert.strictEqual(a.rsvp(), null);",
                  "err": {},
                  "uuid": "819e26a0-dc65-4b1e-9eaa-3b3a5ca1650f",
                  "parentUUID": "d6f79001-d50d-4eaa-af94-4ab47570264e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', rsvp: true }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf(';RSVP=TRUE') > -1);",
                  "err": {},
                  "uuid": "f7c98bc5-7219-43dc-aeb2-a08293c2f451",
                  "parentUUID": "d6f79001-d50d-4eaa-af94-4ab47570264e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e08b2dd3-3c3d-47e4-a48a-bb14054bd701",
                "47cb0028-6af9-4bd0-8ca9-3973905380a2",
                "819e26a0-dc65-4b1e-9eaa-3b3a5ca1650f",
                "f7c98bc5-7219-43dc-aeb2-a08293c2f451"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc2bcb34-26ee-4098-ad49-81f0c5053f46",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.status(null));\nassert.deepStrictEqual(a, a.status(ICalAttendeeStatus.ACCEPTED));",
                  "err": {},
                  "uuid": "e650e03a-8574-4a0e-b515-de93b0ce70d2",
                  "parentUUID": "fc2bcb34-26ee-4098-ad49-81f0c5053f46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.status(), null);\na.status(ICalAttendeeStatus.ACCEPTED);\nassert.strictEqual(a.status(), 'ACCEPTED');\na.status(null);\nassert.strictEqual(a.status(), null);",
                  "err": {},
                  "uuid": "a0c00f0b-92ab-46a2-9035-922515cf4d43",
                  "parentUUID": "fc2bcb34-26ee-4098-ad49-81f0c5053f46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.status('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "5cd5ca2d-9f8c-47c4-96e9-8ae646e97532",
                  "parentUUID": "fc2bcb34-26ee-4098-ad49-81f0c5053f46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', status: ICalAttendeeStatus.DECLINED }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('DECLINED') > -1);",
                  "err": {},
                  "uuid": "6c9d73c5-8da8-47cb-8a98-ad6193a852c7",
                  "parentUUID": "fc2bcb34-26ee-4098-ad49-81f0c5053f46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', status: ICalAttendeeStatus.NEEDSACTION }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('NEEDS-ACTION') > -1);",
                  "err": {},
                  "uuid": "d6e7459c-e323-4200-ac57-a37a66c5fbf5",
                  "parentUUID": "fc2bcb34-26ee-4098-ad49-81f0c5053f46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e650e03a-8574-4a0e-b515-de93b0ce70d2",
                "a0c00f0b-92ab-46a2-9035-922515cf4d43",
                "5cd5ca2d-9f8c-47c4-96e9-8ae646e97532",
                "6c9d73c5-8da8-47cb-8a98-ad6193a852c7",
                "d6e7459c-e323-4200-ac57-a37a66c5fbf5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "be7d25c7-44c5-4649-a3e2-0bb6d9fcdc82",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a.type(null), a);\nassert.deepStrictEqual(a.type(ICalAttendeeType.INDIVIDUAL), a);",
                  "err": {},
                  "uuid": "caa174bf-4150-4416-9ec1-de09b9bd14d2",
                  "parentUUID": "be7d25c7-44c5-4649-a3e2-0bb6d9fcdc82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.type(), null);\na.type(ICalAttendeeType.ROOM);\nassert.strictEqual(a.type(), 'ROOM');\na.type(null);\nassert.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "3de6b6f1-8f56-47d0-a4bb-2e650cca4fa7",
                  "parentUUID": "be7d25c7-44c5-4649-a3e2-0bb6d9fcdc82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.type('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "62946b48-0f87-4e81-a5a5-3888655d213a",
                  "parentUUID": "be7d25c7-44c5-4649-a3e2-0bb6d9fcdc82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mailing-list@example.com',\n    type: ICalAttendeeType.GROUP\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('GROUP') > -1);",
                  "err": {},
                  "uuid": "5e56642e-9713-4b61-a2a3-96b43f02749e",
                  "parentUUID": "be7d25c7-44c5-4649-a3e2-0bb6d9fcdc82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "caa174bf-4150-4416-9ec1-de09b9bd14d2",
                "3de6b6f1-8f56-47d0-a4bb-2e650cca4fa7",
                "62946b48-0f87-4e81-a5a5-3888655d213a",
                "5e56642e-9713-4b61-a2a3-96b43f02749e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22a6e787-9511-496f-b4a3-8feed6e06726",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.delegatedTo(null));\nassert.deepStrictEqual(a, a.delegatedTo('foo@example.com'));",
                  "err": {},
                  "uuid": "69d54fac-925e-4d19-8cca-1cbaf5cd8dec",
                  "parentUUID": "22a6e787-9511-496f-b4a3-8feed6e06726",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.delegatedTo(), null);\na.delegatedTo('foo@example.com');\nconst result = a.delegatedTo();\nassert.ok(result);\nassert.strictEqual(result.email(), 'foo@example.com');\na.delegatedTo(null);\nassert.strictEqual(a.delegatedTo(), null);",
                  "err": {},
                  "uuid": "b0d069f9-17a1-4444-8f60-d9a3aef29d13",
                  "parentUUID": "22a6e787-9511-496f-b4a3-8feed6e06726",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    delegatedTo: 'foo@example.com'\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('foo@example') > -1);",
                  "err": {},
                  "uuid": "e79c096a-04fd-412a-97ad-400c3599b55d",
                  "parentUUID": "22a6e787-9511-496f-b4a3-8feed6e06726",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69d54fac-925e-4d19-8cca-1cbaf5cd8dec",
                "b0d069f9-17a1-4444-8f60-d9a3aef29d13",
                "e79c096a-04fd-412a-97ad-400c3599b55d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "01b1a776-bf3a-4665-932a-98f21f205f82",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.delegatedFrom(null));\nassert.deepStrictEqual(a, a.delegatedFrom('foo@example.com'));",
                  "err": {},
                  "uuid": "92fffa69-7628-4196-bf2c-c561320f5b80",
                  "parentUUID": "01b1a776-bf3a-4665-932a-98f21f205f82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(a.delegatedFrom(), null);\na.delegatedFrom('foo@example.com');\nlet result = a.delegatedFrom();\nassert.ok(result);\nassert.strictEqual(result.email(), 'foo@example.com');\na.delegatedFrom({\n    name: 'Max Mustermann',\n    email: 'max.mustermann@example.com'\n});\nresult = a.delegatedFrom();\nassert.ok(result);\nassert.strictEqual(result.name(), 'Max Mustermann');\nassert.strictEqual(result.email(), 'max.mustermann@example.com');\na.delegatedFrom(null);\nassert.strictEqual(a.delegatedFrom(), null);",
                  "err": {},
                  "uuid": "11038012-3579-4706-a656-a66a38122f10",
                  "parentUUID": "01b1a776-bf3a-4665-932a-98f21f205f82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    delegatedFrom: 'foo@example.com'\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.toString().indexOf('foo@example.com') > -1);",
                  "err": {},
                  "uuid": "8cfea1d0-ff40-4ac7-a445-b4e079f54a5f",
                  "parentUUID": "01b1a776-bf3a-4665-932a-98f21f205f82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92fffa69-7628-4196-bf2c-c561320f5b80",
                "11038012-3579-4706-a656-a66a38122f10",
                "8cfea1d0-ff40-4ac7-a445-b4e079f54a5f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "69be74ff-abf9-4cb9-83d2-7e48b98dea00",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.delegatesTo({ email: 'mail@example.com' }) instanceof ICalAttendee);",
                  "err": {},
                  "uuid": "7fa4456f-18db-4aff-b3d5-042ba1e6ee69",
                  "parentUUID": "69be74ff-abf9-4cb9-83d2-7e48b98dea00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst attendee = new ICalAttendee({\n    name: 'Muh',\n    email: 'muh@example.com'\n}, event);\nassert.deepStrictEqual(new ICalAttendee({ email: 'foo@example.com' }, event).delegatesTo(attendee), attendee);",
                  "err": {},
                  "uuid": "d8058368-0966-4d3a-abcc-dded6509905a",
                  "parentUUID": "69be74ff-abf9-4cb9-83d2-7e48b98dea00",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee = new ICalAttendee({ name: 'Zac', email: 'zac@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar())).delegatesTo({ name: 'Cody', email: 'cody@example.com' });\nassert.strictEqual(attendee.name(), 'Cody');",
                  "err": {},
                  "uuid": "3f8ec71c-be82-46a8-8b62-cefda66637d1",
                  "parentUUID": "69be74ff-abf9-4cb9-83d2-7e48b98dea00",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7fa4456f-18db-4aff-b3d5-042ba1e6ee69",
                "d8058368-0966-4d3a-abcc-dded6509905a",
                "3f8ec71c-be82-46a8-8b62-cefda66637d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5f617466-5073-434e-805a-724c4823311b",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.ok(a.delegatesFrom({\n    email: 'bar@example.com'\n}) instanceof ICalAttendee);",
                  "err": {},
                  "uuid": "d15668fc-5321-497e-84e9-4ee5d6674e33",
                  "parentUUID": "5f617466-5073-434e-805a-724c4823311b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst attendee = new ICalAttendee({\n    name: 'Muh',\n    email: 'muh@example.com'\n}, event);\nassert.deepStrictEqual(new ICalAttendee({ email: 'bar@example.com' }, event).delegatesFrom(attendee), attendee);",
                  "err": {},
                  "uuid": "ff7f3f1f-23f0-47ea-a383-7ac6851c8911",
                  "parentUUID": "5f617466-5073-434e-805a-724c4823311b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ name: 'Zac', email: 'zac@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar())).delegatesFrom({ name: 'Cody', email: 'cody@example.com' });\nassert.strictEqual(a.name(), 'Cody');\nconst b = new ICalAttendee({\n    name: 'Zac',\n    email: 'zac@example.com',\n    delegatesFrom: { name: 'Cody', email: 'cody@example.com' }\n}, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.strictEqual(b.name(), 'Zac');",
                  "err": {},
                  "uuid": "1b6239b6-5495-41a3-9f09-bb7db4c33ea6",
                  "parentUUID": "5f617466-5073-434e-805a-724c4823311b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d15668fc-5321-497e-84e9-4ee5d6674e33",
                "ff7f3f1f-23f0-47ea-a383-7ac6851c8911",
                "1b6239b6-5495-41a3-9f09-bb7db4c33ea6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9761959f-edcd-42ef-b3e6-3186b0587cba",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.org' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nassert.deepStrictEqual(a, a.x('X-NUM-GUESTS', '5'));\nassert.ok(a.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org'));",
                  "err": {},
                  "uuid": "03dc597a-c52f-412b-9de9-cba7f4ec3fcf",
                  "parentUUID": "9761959f-edcd-42ef-b3e6-3186b0587cba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03dc597a-c52f-412b-9de9-cba7f4ec3fcf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8dfad53d-2e15-4862-9f40-4b50945cc014",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ name: 'Max Mustermann', email: 'max@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\na.delegatesTo('Moritz <moritz@example.com>');\nassert.deepStrictEqual(a.toJSON(), {\n    delegatedFrom: null,\n    delegatedTo: 'moritz@example.com',\n    email: 'max@example.com',\n    mailto: null,\n    sentBy: null,\n    name: 'Max Mustermann',\n    role: 'REQ-PARTICIPANT',\n    rsvp: null,\n    status: 'DELEGATED',\n    type: null,\n    x: []\n});",
                  "err": {},
                  "uuid": "13880493-28b1-4d2c-8318-fc34dc45d776",
                  "parentUUID": "8dfad53d-2e15-4862-9f40-4b50945cc014",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com' }, new ICalEvent({ start: new Date() }, new ICalCalendar()));\nnew ICalAttendee(a.toJSON(), new ICalEvent({ start: new Date() }, new ICalCalendar()));",
                  "err": {},
                  "uuid": "eea5878c-ff91-487c-a866-133eee22ee3e",
                  "parentUUID": "8dfad53d-2e15-4862-9f40-4b50945cc014",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13880493-28b1-4d2c-8318-fc34dc45d776",
                "eea5878c-ff91-487c-a866-133eee22ee3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c773ad9b-8b43-4965-bfe5-e22777542a35",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "71583f31-0e0e-4c6b-8282-b6ca4c8cc1ff",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    prodId: '//sebbo.net//ical-generator//EN',\n    method: ICalCalendarMethod.PUBLISH,\n    name: 'Test Calendar',\n    description: 'Hi, I am the description.',\n    timezone: null,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    source: 'http://example.com/my/original_source.ical',\n    scale: null,\n    ttl: null,\n    events: [],\n    x: []\n};\nconst cal = new ICalCalendar(data);\nassert.deepStrictEqual(cal.toJSON(), data);",
                  "err": {},
                  "uuid": "b54fb773-e25a-4ace-ace0-61a716b706fc",
                  "parentUUID": "71583f31-0e0e-4c6b-8282-b6ca4c8cc1ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b54fb773-e25a-4ace-ace0-61a716b706fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3e2389cc-6677-4104-889d-1c5c8716d702",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.prodId('//loremipsum.de//ical-tests//EN');\nassert.strictEqual(cal.prodId(), '//loremipsum.de//ical-tests//EN');",
                  "err": {},
                  "uuid": "f0011b18-5a95-44c7-8e62-3f50c395ea8d",
                  "parentUUID": "3e2389cc-6677-4104-889d-1c5c8716d702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.prodId('//loremipsum.de//ical-tests//EN'));",
                  "err": {},
                  "uuid": "0e825f90-10df-429b-abe7-06761b5f932e",
                  "parentUUID": "3e2389cc-6677-4104-889d-1c5c8716d702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId(256);\n}, /`prodid`/);",
                  "err": {},
                  "uuid": "25fd47bb-08d5-49c7-a06f-de7906aa0aec",
                  "parentUUID": "3e2389cc-6677-4104-889d-1c5c8716d702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        product: 'ical-tests'\n    });\n}, /`prodid\\.company`/);",
                  "err": {},
                  "uuid": "c3d692ff-6566-40dc-bcb4-1578e8440ab2",
                  "parentUUID": "3e2389cc-6677-4104-889d-1c5c8716d702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        company: 'sebbo.net'\n    });\n}, /`prodid\\.product`/);",
                  "err": {},
                  "uuid": "02861f9f-980f-4d3f-885e-d0e8749b1ade",
                  "parentUUID": "3e2389cc-6677-4104-889d-1c5c8716d702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests'\n});\nassert.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//EN');",
                  "err": {},
                  "uuid": "de5a53c0-7702-4662-b1d4-514742a55b45",
                  "parentUUID": "3e2389cc-6677-4104-889d-1c5c8716d702",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests',\n    language: 'DE'\n});\nassert.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//DE');",
                  "err": {},
                  "uuid": "4fdf09ad-37a1-4cd4-999a-aa14ec652cc5",
                  "parentUUID": "3e2389cc-6677-4104-889d-1c5c8716d702",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0011b18-5a95-44c7-8e62-3f50c395ea8d",
                "0e825f90-10df-429b-abe7-06761b5f932e",
                "25fd47bb-08d5-49c7-a06f-de7906aa0aec",
                "c3d692ff-6566-40dc-bcb4-1578e8440ab2",
                "02861f9f-980f-4d3f-885e-d0e8749b1ade",
                "de5a53c0-7702-4662-b1d4-514742a55b45",
                "4fdf09ad-37a1-4cd4-999a-aa14ec652cc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "844bc365-f3d8-4029-9073-af891924be3b",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.deepStrictEqual(c, c.method(null), 'method(null)');\nassert.deepStrictEqual(c, c.method(ICalCalendarMethod.PUBLISH), 'method(enum)');",
                  "err": {},
                  "uuid": "94396ede-9238-41fb-9551-bb90bb384de6",
                  "parentUUID": "844bc365-f3d8-4029-9073-af891924be3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.strictEqual(c.method(), null);\nc.method(null);\nassert.strictEqual(c.method(), null);\nc.method(ICalCalendarMethod.PUBLISH);\nassert.strictEqual(c.method(), 'PUBLISH');\nc.method(null);\nassert.strictEqual(c.method(), null);",
                  "err": {},
                  "uuid": "22f793bd-51a1-43be-ae03-239ffb26846a",
                  "parentUUID": "844bc365-f3d8-4029-9073-af891924be3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    c.method('KICK ASS');\n}, /Input must be one of the following: PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER/);",
                  "err": {},
                  "uuid": "dc499c4d-bbc9-495f-8a95-ae842c07ba77",
                  "parentUUID": "844bc365-f3d8-4029-9073-af891924be3b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar({ method: ICalCalendarMethod.PUBLISH });\nassert.strictEqual(c.method(), 'PUBLISH');\nc.method(ICalCalendarMethod.ADD);\nassert.strictEqual(c.method(), 'ADD');",
                  "err": {},
                  "uuid": "e43d3a3f-312c-4975-a09a-0de8832cfb01",
                  "parentUUID": "844bc365-f3d8-4029-9073-af891924be3b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94396ede-9238-41fb-9551-bb90bb384de6",
                "22f793bd-51a1-43be-ae03-239ffb26846a",
                "dc499c4d-bbc9-495f-8a95-ae842c07ba77",
                "e43d3a3f-312c-4975-a09a-0de8832cfb01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c3396ec-af48-4022-9add-3b9a0070e1ab",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.name(null));\nassert.deepStrictEqual(cal, cal.name('Testevents'));",
                  "err": {},
                  "uuid": "fbbe1b75-f5b5-47dd-879f-0e3aad8a585c",
                  "parentUUID": "2c3396ec-af48-4022-9add-3b9a0070e1ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.name(), null);\ncal.name('Testevents');\nassert.strictEqual(cal.name(), 'Testevents');\ncal.name(null);\nassert.strictEqual(cal.name(), null);",
                  "err": {},
                  "uuid": "ed39a3f1-7904-46e4-840d-2240fdeb9b63",
                  "parentUUID": "2c3396ec-af48-4022-9add-3b9a0070e1ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().name('Testevents');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert.strictEqual(cal.name(), 'Testevents');",
                  "err": {},
                  "uuid": "9c29e80b-49b6-411b-a0f8-6a2fa8b1e91f",
                  "parentUUID": "2c3396ec-af48-4022-9add-3b9a0070e1ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbbe1b75-f5b5-47dd-879f-0e3aad8a585c",
                "ed39a3f1-7904-46e4-840d-2240fdeb9b63",
                "9c29e80b-49b6-411b-a0f8-6a2fa8b1e91f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e3e8e42-da5d-424f-8096-a9fc25260ea2",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.description(null));\nassert.deepStrictEqual(cal, cal.description('Testbeschreibung'));",
                  "err": {},
                  "uuid": "cce90555-54c3-47a2-842f-cfaefa8418c4",
                  "parentUUID": "7e3e8e42-da5d-424f-8096-a9fc25260ea2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.description(), null);\ncal.description('Testbeschreibung');\nassert.strictEqual(cal.description(), 'Testbeschreibung');\ncal.description(null);\nassert.strictEqual(cal.description(), null);",
                  "err": {},
                  "uuid": "27706e90-9ad1-4cfd-b79c-366c9c605ae3",
                  "parentUUID": "7e3e8e42-da5d-424f-8096-a9fc25260ea2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().description('Testbeschreibung');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert.ok(cal.description(), 'Testbeschreibung');",
                  "err": {},
                  "uuid": "86fed088-f167-42c1-8f3d-60bd30906348",
                  "parentUUID": "7e3e8e42-da5d-424f-8096-a9fc25260ea2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cce90555-54c3-47a2-842f-cfaefa8418c4",
                "27706e90-9ad1-4cfd-b79c-366c9c605ae3",
                "86fed088-f167-42c1-8f3d-60bd30906348"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "11715163-b407-4edd-a255-e7d0259a2936",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.timezone('Europe/Berlin'));\nassert.deepStrictEqual(cal, cal.timezone(null));\nassert.deepStrictEqual(cal, cal.timezone({\n    name: 'Europe/Berlin',\n    generator: getVtimezoneComponent\n}));",
                  "err": {},
                  "uuid": "5707daf7-a726-4c66-bae6-cbce2a59055b",
                  "parentUUID": "11715163-b407-4edd-a255-e7d0259a2936",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert.strictEqual(cal.timezone(), null);\ncal.timezone({ name: 'Europe/Berlin' });\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "972737fc-a671-4d1f-a7f4-1ce5343e645a",
                  "parentUUID": "11715163-b407-4edd-a255-e7d0259a2936",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone('UTC');\nassert.strictEqual(cal.timezone(), null);",
                  "err": {},
                  "uuid": "238ace55-6262-48d0-abc3-51ea8ee688be",
                  "parentUUID": "11715163-b407-4edd-a255-e7d0259a2936",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5707daf7-a726-4c66-bae6-cbce2a59055b",
                "972737fc-a671-4d1f-a7f4-1ce5343e645a",
                "238ace55-6262-48d0-abc3-51ea8ee688be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a5b20a81-e217-43d9-b712-edee5fca1f92",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal.ttl(60 * 60 * 24), cal);\nassert.deepStrictEqual(cal.ttl(moment.duration(2, 'days')), cal);\nassert.deepStrictEqual(cal.ttl(null), cal);",
                  "err": {},
                  "uuid": "941a355b-cf25-4a8a-8175-f839ab470c3e",
                  "parentUUID": "a5b20a81-e217-43d9-b712-edee5fca1f92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.ttl(), null);\ncal.ttl(86400);\nassert.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "83472f1d-d1c0-43de-94a9-6e63b2f7ad48",
                  "parentUUID": "a5b20a81-e217-43d9-b712-edee5fca1f92",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().ttl(86400);\nassert.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "dc9d960c-cac7-4225-ac0d-d04bc594beac",
                  "parentUUID": "a5b20a81-e217-43d9-b712-edee5fca1f92",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "941a355b-cf25-4a8a-8175-f839ab470c3e",
                "83472f1d-d1c0-43de-94a9-6e63b2f7ad48",
                "dc9d960c-cac7-4225-ac0d-d04bc594beac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6b43b3a0-ba17-4b8e-a85f-e2585c9508fd",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.source('http://example.com/my/original_source.ical'));",
                  "err": {},
                  "uuid": "d999a0d5-2406-4f11-b03e-a94563a10619",
                  "parentUUID": "6b43b3a0-ba17-4b8e-a85f-e2585c9508fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.source(), null);\ncal.source('http://example.com/my/original_source.ical');\nassert.strictEqual(cal.source(), 'http://example.com/my/original_source.ical');\ncal.url(null);\nassert.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "5cb3aa9b-bcf4-41c9-96ae-ed6befa0f328",
                  "parentUUID": "6b43b3a0-ba17-4b8e-a85f-e2585c9508fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d999a0d5-2406-4f11-b03e-a94563a10619",
                "5cb3aa9b-bcf4-41c9-96ae-ed6befa0f328"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c33a3e9c-1145-448f-8750-6130912e11b8",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.url('https://example.com/calendar.ical'));",
                  "err": {},
                  "uuid": "df072d01-d41b-4c43-868b-3a278dfa95d2",
                  "parentUUID": "c33a3e9c-1145-448f-8750-6130912e11b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.url(), null);\ncal.url('https://example.com/calendar.ical');\nassert.strictEqual(cal.url(), 'https://example.com/calendar.ical');\ncal.url(null);\nassert.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "b8d21aaa-f651-424f-b9df-38e80d69ba96",
                  "parentUUID": "c33a3e9c-1145-448f-8750-6130912e11b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().url('https://example.com/calendar.ical');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.url(), 'https://example.com/calendar.ical');",
                  "err": {},
                  "uuid": "aaf6af07-6ec5-4ecf-953d-f2a948e071cc",
                  "parentUUID": "c33a3e9c-1145-448f-8750-6130912e11b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df072d01-d41b-4c43-868b-3a278dfa95d2",
                "b8d21aaa-f651-424f-b9df-38e80d69ba96",
                "aaf6af07-6ec5-4ecf-953d-f2a948e071cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2a0ebeb2-871c-4c78-b850-8b6ea5889627",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.scale('gregorian'));",
                  "err": {},
                  "uuid": "1f2879fa-92cf-445f-aaef-2ede74126b89",
                  "parentUUID": "2a0ebeb2-871c-4c78-b850-8b6ea5889627",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.scale(), null);\ncal.scale('GREGORIAN');\nassert.strictEqual(cal.scale(), 'GREGORIAN');\ncal.scale(null);\nassert.strictEqual(cal.scale(), null);",
                  "err": {},
                  "uuid": "82041e47-89c8-438b-8501-35754ced39c6",
                  "parentUUID": "2a0ebeb2-871c-4c78-b850-8b6ea5889627",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().scale('gregorian');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.scale(), 'GREGORIAN');",
                  "err": {},
                  "uuid": "05e3407d-4f34-44ef-9ab3-535bfc5f05f3",
                  "parentUUID": "2a0ebeb2-871c-4c78-b850-8b6ea5889627",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f2879fa-92cf-445f-aaef-2ede74126b89",
                "82041e47-89c8-438b-8501-35754ced39c6",
                "05e3407d-4f34-44ef-9ab3-535bfc5f05f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "285efdcf-d3d2-4b9c-b2e8-96dc683894a7",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.ok(cal.createEvent({ start: new Date() }) instanceof ICalEvent);",
                  "err": {},
                  "uuid": "26cb8afd-b85d-4ce7-b9b8-9dcaf42a5761",
                  "parentUUID": "285efdcf-d3d2-4b9c-b2e8-96dc683894a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst event = cal.createEvent({\n    start: new Date(),\n    summary: 'Patch-Day'\n});\nassert.strictEqual(event.summary(), 'Patch-Day');",
                  "err": {},
                  "uuid": "2750116f-bdea-4d1e-b601-7b9886037ace",
                  "parentUUID": "285efdcf-d3d2-4b9c-b2e8-96dc683894a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.doesNotThrow(function () {\n    new ICalCalendar().createEvent({\n        start: new Date(),\n        summary: 'Patch-Day'\n    });\n}, Error);",
                  "err": {},
                  "uuid": "431fedb7-7c51-4ff7-9ab9-96c5331e5b54",
                  "parentUUID": "285efdcf-d3d2-4b9c-b2e8-96dc683894a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "26cb8afd-b85d-4ce7-b9b8-9dcaf42a5761",
                "2750116f-bdea-4d1e-b601-7b9886037ace",
                "431fedb7-7c51-4ff7-9ab9-96c5331e5b54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2b35c2e-6c33-4612-8713-c69021cfabda",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.events().length, 0);\nconst event = cal.createEvent({ start: new Date() });\nassert.strictEqual(cal.events().length, 1);\nassert.deepStrictEqual(cal.events()[0], event);",
                  "err": {},
                  "uuid": "17494145-b4a3-4a6e-b62d-caddb67ef482",
                  "parentUUID": "b2b35c2e-6c33-4612-8713-c69021cfabda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.length(), 0);\nconst cal2 = cal.events([\n    { start: new Date(), summary: 'Event A' },\n    { start: new Date(), summary: 'Event B' }\n]);\nassert.strictEqual(cal.length(), 2);\nassert.deepStrictEqual(cal2, cal);",
                  "err": {},
                  "uuid": "5123484b-4c87-4db2-b02a-cdfd0a9dcbf9",
                  "parentUUID": "b2b35c2e-6c33-4612-8713-c69021cfabda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17494145-b4a3-4a6e-b62d-caddb67ef482",
                "5123484b-4c87-4db2-b02a-cdfd0a9dcbf9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d86131f9-d821-47f2-93d0-c40e6061513b",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.createEvent({ start: new Date() });\nassert.strictEqual(cal.events().length, 1);\nassert.deepStrictEqual(cal.clear(), cal);\nassert.strictEqual(cal.events().length, 0);",
                  "err": {},
                  "uuid": "38a6224a-781b-47a1-b42d-ef82137728e1",
                  "parentUUID": "d86131f9-d821-47f2-93d0-c40e6061513b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38a6224a-781b-47a1-b42d-ef82137728e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c331b3f0-60fe-419a-b5f1-b4de057c7a95",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "da856e65-537d-441a-a581-e743d14cd6a9",
                  "parentUUID": "c331b3f0-60fe-419a-b5f1-b4de057c7a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));\nassert.deepEqual(cal.x(), [{\n        key: 'X-FOO',\n        value: 'bar'\n    }]);\nassert.deepStrictEqual(cal, cal.x('X-LOREM', 'ipsum'));\nassert.deepEqual(cal.x(), [\n    { key: 'X-FOO', value: 'bar' },\n    { key: 'X-LOREM', value: 'ipsum' }\n]);\nassert.throws(() => {\n    cal.x('LOREM', 'ipsum');\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x('X-LOREM', 1337);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x(5, 'ipsum');\n});",
                  "err": {},
                  "uuid": "16f8b07e-7aee-4a7a-9f07-f2136096d101",
                  "parentUUID": "c331b3f0-60fe-419a-b5f1-b4de057c7a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x([{ key: 'X-FOO', value: 'bar' }]));\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert.deepStrictEqual(cal, cal.x([{ key: 'X-LOREM', value: 'ipsum' }]));\nassert.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert.throws(() => {\n    cal.x([{ key: 'LOREM', value: 'ipsum' }]);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 'X-LOREM', value: 1337 }]);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 5, value: 'ipsum' }]);\n});",
                  "err": {},
                  "uuid": "fa1063d7-3a6e-4edf-af23-39b35fe03cac",
                  "parentUUID": "c331b3f0-60fe-419a-b5f1-b4de057c7a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x({ 'X-FOO': 'bar' }));\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert.deepStrictEqual(cal, cal.x({ 'X-LOREM': 'ipsum' }));\nassert.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert.throws(() => {\n    cal.x({ 'LOREM': 'ipsum' });\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x({ 'X-LOREM': 1337 });\n});\nassert.throws(() => {\n    cal.x({ 5: 'ipsum' });\n});",
                  "err": {},
                  "uuid": "09916cb0-9647-4beb-9678-57d358876359",
                  "parentUUID": "c331b3f0-60fe-419a-b5f1-b4de057c7a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepEqual(cal.x(), []);\ncal.x('X-FOO', 'BAR');\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'BAR' }]);\ncal.x({});\nassert.deepEqual(cal.x().length, 0);",
                  "err": {},
                  "uuid": "08e176bf-7d64-4d02-85f0-ad99790705c2",
                  "parentUUID": "c331b3f0-60fe-419a-b5f1-b4de057c7a95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().x('X-FOO', 'BAR');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.toString().includes('X-FOO'));",
                  "err": {},
                  "uuid": "d63fe376-128b-4005-aa13-99523cbc119e",
                  "parentUUID": "c331b3f0-60fe-419a-b5f1-b4de057c7a95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da856e65-537d-441a-a581-e743d14cd6a9",
                "16f8b07e-7aee-4a7a-9f07-f2136096d101",
                "fa1063d7-3a6e-4edf-af23-39b35fe03cac",
                "09916cb0-9647-4beb-9678-57d358876359",
                "08e176bf-7d64-4d02-85f0-ad99790705c2",
                "d63fe376-128b-4005-aa13-99523cbc119e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4c929c14-beb8-4579-9ae5-750c02048ddf",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst cal = new ICalCalendar();\nconst prodId = cal.toJSON().prodId;\nassert.strictEqual(typeof prodId, 'string');\nassert.ok(prodId.length > 0);\nassert.strictEqual((_a = cal.toJSON().events) === null || _a === void 0 ? void 0 : _a.length, 0);",
                  "err": {},
                  "uuid": "eed91dba-12a0-491e-a0b4-23f3cdf6f815",
                  "parentUUID": "4c929c14-beb8-4579-9ae5-750c02048ddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n    summary: 'HTTP Calendar Event',\n    x: [\n        { key: 'X-FOO', value: 'bar' },\n        { key: 'X-LOREM', value: 'ipsum' }\n    ]\n});\nconst prodId = cal.toJSON().prodId;\nassert.strictEqual(typeof prodId, 'string');\nassert.ok(prodId.length > 0);\nconst events = cal.toJSON().events;\nassert.strictEqual(events === null || events === void 0 ? void 0 : events.length, 1);\nassert.deepEqual(events[0].x, [\n    { 'key': 'X-FOO', 'value': 'bar' },\n    { 'key': 'X-LOREM', 'value': 'ipsum' }\n]);",
                  "err": {},
                  "uuid": "b75db25e-cde4-41f3-a817-1d00b32fe7fa",
                  "parentUUID": "4c929c14-beb8-4579-9ae5-750c02048ddf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalCalendar();\nnew ICalCalendar(a.toJSON());",
                  "err": {},
                  "uuid": "63fd9183-bb6f-4c48-8c0c-476fde7a48dc",
                  "parentUUID": "4c929c14-beb8-4579-9ae5-750c02048ddf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eed91dba-12a0-491e-a0b4-23f3cdf6f815",
                "b75db25e-cde4-41f3-a817-1d00b32fe7fa",
                "63fd9183-bb6f-4c48-8c0c-476fde7a48dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae22630b-1aa5-4df2-8fd1-4a8d8842cf44",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.length(), 0);\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.strictEqual(cal.length(), 1);",
                  "err": {},
                  "uuid": "00b8605e-3c3a-4f12-8350-2589f678cb94",
                  "parentUUID": "ae22630b-1aa5-4df2-8fd1-4a8d8842cf44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00b8605e-3c3a-4f12-8350-2589f678cb94"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bfa88650-83c0-48cd-9188-7f1f6c2d6145",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.url('https://sebbo.net/foo');\nassert.ok(cal.toString().indexOf('URL:https://sebbo.net/foo') > -1);",
                  "err": {},
                  "uuid": "7f8e1cdd-f85b-4f3f-968e-0b63124a3970",
                  "parentUUID": "bfa88650-83c0-48cd-9188-7f1f6c2d6145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.method(ICalCalendarMethod.REFRESH);\nassert.ok(cal.toString().indexOf('METHOD:REFRESH') > -1);",
                  "err": {},
                  "uuid": "08cbb942-f16e-4888-96c3-edae304b04f3",
                  "parentUUID": "bfa88650-83c0-48cd-9188-7f1f6c2d6145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.name('TEST');\nassert.ok(cal.toString().indexOf('NAME:TEST') > -1);\nassert.ok(cal.toString().indexOf('X-WR-CALNAME:TEST') > -1);",
                  "err": {},
                  "uuid": "90df7434-cc59-4ec6-9db7-386d7183437a",
                  "parentUUID": "bfa88650-83c0-48cd-9188-7f1f6c2d6145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.description('TEST');\nassert.ok(cal.toString().indexOf('X-WR-CALDESC:TEST') > -1);",
                  "err": {},
                  "uuid": "912db79a-c782-4381-b15c-86b1ac71e010",
                  "parentUUID": "bfa88650-83c0-48cd-9188-7f1f6c2d6145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone('TEST');\nassert.ok(cal.toString().indexOf('TIMEZONE-ID:TEST') > -1);\nassert.ok(cal.toString().indexOf('X-WR-TIMEZONE:TEST') > -1);",
                  "err": {},
                  "uuid": "dd33181a-54b2-42af-84bb-9cb98c6e9d12",
                  "parentUUID": "bfa88650-83c0-48cd-9188-7f1f6c2d6145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.source('http://foo.bar.example.com/ical.cal');\nassert.ok(cal.toString().includes('http://foo.bar.example.com/ical.cal'));",
                  "err": {},
                  "uuid": "11dbc004-303b-4d7d-a611-62836374433f",
                  "parentUUID": "bfa88650-83c0-48cd-9188-7f1f6c2d6145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: 'Europe/Berlin', generator: getVtimezoneComponent });\ncal.createEvent({\n    start: new Date(),\n    timezone: 'Europe/London'\n});\nassert.ok(cal.toString().includes('BEGIN:VTIMEZONE\\r\\n'), 'BEGIN:VTIMEZONE');\nassert.ok(cal.toString().includes('TZID:Europe/Berlin\\r\\n'), 'TZID:Europe/Berlin');\nassert.ok(cal.toString().includes('TZID:Europe/London\\r\\n'), 'TZID:Europe/London');",
                  "err": {},
                  "uuid": "1328e213-35df-4a64-8124-0ca05f6ee411",
                  "parentUUID": "bfa88650-83c0-48cd-9188-7f1f6c2d6145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: 'FOO', generator: getVtimezoneComponent });\nassert.ok(!cal.toString().includes('TZID:Foo\\r\\n'));",
                  "err": {},
                  "uuid": "6717df66-f33c-48df-827f-ec4191f8e951",
                  "parentUUID": "bfa88650-83c0-48cd-9188-7f1f6c2d6145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: '/Europe/Berlin', generator: getVtimezoneComponent });\nassert.ok(!cal.toString().includes('TZID:/Europe/Berlin\\r\\n'));",
                  "err": {},
                  "uuid": "5c076620-22d0-44d2-9db1-87e8855be9c5",
                  "parentUUID": "bfa88650-83c0-48cd-9188-7f1f6c2d6145",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.ttl(moment.duration(3, 'days'));\nassert.ok(cal.toString().indexOf('REFRESH-INTERVAL;VALUE=DURATION:P3D') > -1);\nassert.ok(cal.toString().indexOf('X-PUBLISHED-TTL:P3D') > -1);",
                  "err": {},
                  "uuid": "de516b3a-64d3-44d1-b40b-abe3534ebb23",
                  "parentUUID": "bfa88650-83c0-48cd-9188-7f1f6c2d6145",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f8e1cdd-f85b-4f3f-968e-0b63124a3970",
                "08cbb942-f16e-4888-96c3-edae304b04f3",
                "90df7434-cc59-4ec6-9db7-386d7183437a",
                "912db79a-c782-4381-b15c-86b1ac71e010",
                "dd33181a-54b2-42af-84bb-9cb98c6e9d12",
                "11dbc004-303b-4d7d-a611-62836374433f",
                "1328e213-35df-4a64-8124-0ca05f6ee411",
                "6717df66-f33c-48df-827f-ec4191f8e951",
                "5c076620-22d0-44d2-9db1-87e8855be9c5",
                "de516b3a-64d3-44d1-b40b-abe3534ebb23"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0514a742-812c-40a8-bf30-7e756bffc1cf",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event'\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_01.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "4f6fe474-0f3e-45d2-82a1-1ac4abea9490",
              "parentUUID": "0514a742-812c-40a8-bf30-7e756bffc1cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: 'localhost',\n        transparency: ICalEventTransparency.OPAQUE,\n        description: {\n            plain: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop',\n            html: '<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>'\n        }\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_02.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "6d629812-8eaf-4ead-9d03-ecaa79a25a94",
              "parentUUID": "0514a742-812c-40a8-bf30-7e756bffc1cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({\n        method: ICalCalendarMethod.ADD,\n        prodId: '//sebbo.net//ical-generator.tests//EN'\n    });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: {\n            title: 'Apple Store Kurfürstendamm',\n            address: 'Kurfürstendamm 26, 10719 Berlin, Deutschland',\n            radius: 141.1751386318387,\n            geo: { lat: 52.503630, lon: 13.328650 }\n        },\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        status: ICalEventStatus.CONFIRMED,\n        categories: [{ name: 'WORK' }],\n        url: 'http://sebbo.net/',\n        attachments: [\n            'https://files.sebbo.net/calendar/attachments/foo'\n        ]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_03.ics', 'utf8'), 'toString');\n    assert.strictEqual(ical(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "9c89901a-7ebc-4d8d-836b-e9a7f27fe1a7",
              "parentUUID": "0514a742-812c-40a8-bf30-7e756bffc1cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.timezone({ name: null, generator: getVtimezoneComponent });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                exclude: new Date('Fr Oct 06 2013 23:15:00 UTC')\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30'),\n            end: new Date('Fr Oct 06 2013 23:15:00'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            timezone: 'Europe/Berlin',\n            summary: 'repeating by day, twice',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                count: 2\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by 3 weeks, until 2014',\n            repeating: {\n                freq: ICalEventRepeatingFreq.WEEKLY,\n                interval: 3,\n                until: new Date('We Jan 01 2014 00:00:00 UTC')\n            }\n        }\n    ]);\n    assert.strictEqual(cal.toString(), yield fs.readFile(resultDir + '/generate_04.ics', 'utf8'), 'first check');\n    // Wount be same, as reference to VTimezone generator is not exported\n    // assert.strictEqual(ical(cal.toJSON()).toString(), string);\n    cal.timezone(null);\n    assert.strictEqual(ical(cal.toJSON()).toString(), cal.toString(), 'second check');\n});",
              "err": {},
              "uuid": "befd0422-eb90-4335-813b-a8a781983d2f",
              "parentUUID": "0514a742-812c-40a8-bf30-7e756bffc1cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '1',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'floating',\n        floating: true\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_05.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "2c2fe93b-c758-42ee-aab3-92870f2bac73",
              "parentUUID": "0514a742-812c-40a8-bf30-7e756bffc1cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN', method: ICalCalendarMethod.PUBLISH });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        attendees: [\n            {\n                name: 'Smith, Matt; (\"Sales\")',\n                email: 'matt@example.com',\n                delegatesTo: {\n                    name: 'John',\n                    email: 'john@example.com',\n                    status: ICalAttendeeStatus.ACCEPTED\n                }\n            }\n        ],\n        alarms: [\n            {\n                type: ICalAlarmType.display,\n                trigger: 60 * 10,\n                repeat: {\n                    times: 2,\n                    interval: 60\n                }\n            },\n            {\n                type: ICalAlarmType.display,\n                trigger: 60 * 60,\n                description: 'I\\'m a reminder :)'\n            }\n        ],\n        status: ICalEventStatus.CONFIRMED,\n        url: 'http://sebbo.net/'\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_06.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "285ec5a4-cf02-4eaf-81b3-dc54a68019f1",
              "parentUUID": "0514a742-812c-40a8-bf30-7e756bffc1cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                byMonth: [1, 4, 7, 10]\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on Mo/We/Fr, twice',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                count: 2,\n                byDay: [ICalWeekday.MO, ICalWeekday.WE, ICalWeekday.FR]\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on 1st and 15th',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                interval: 1,\n                byMonthDay: [1, 15]\n            }\n        }\n    ]);\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_07.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "5dee8b30-e6a0-4d02-a534-8e07be09a2e7",
              "parentUUID": "0514a742-812c-40a8-bf30-7e756bffc1cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event',\n        attendees: [{\n                type: ICalAttendeeType.INDIVIDUAL,\n                role: ICalAttendeeRole.REQ,\n                status: ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_08.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "ae97248f-7a7d-4980-b6e0-fcb4cd4bf8f8",
              "parentUUID": "0514a742-812c-40a8-bf30-7e756bffc1cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ method: ICalCalendarMethod.REQUEST, prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: {\n            name: 'Sebastian Pekarek',\n            email: 'mail@sebbo.net',\n            mailto: 'mail2@example2.com'\n        },\n        attendees: [{\n                type: ICalAttendeeType.INDIVIDUAL,\n                role: ICalAttendeeRole.REQ,\n                status: ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_09.ics', 'utf8'), 'toString');\n    assert.strictEqual(ical(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "afb29557-9ba9-4b5f-a2fb-4c168ac33556",
              "parentUUID": "0514a742-812c-40a8-bf30-7e756bffc1cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f6fe474-0f3e-45d2-82a1-1ac4abea9490",
            "6d629812-8eaf-4ead-9d03-ecaa79a25a94",
            "9c89901a-7ebc-4d8d-836b-e9a7f27fe1a7",
            "befd0422-eb90-4335-813b-a8a781983d2f",
            "2c2fe93b-c758-42ee-aab3-92870f2bac73",
            "285ec5a4-cf02-4eaf-81b3-dc54a68019f1",
            "5dee8b30-e6a0-4d02-a534-8e07be09a2e7",
            "ae97248f-7a7d-4980-b6e0-fcb4cd4bf8f8",
            "afb29557-9ba9-4b5f-a2fb-4c168ac33556"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "80e78773-e8f3-4cb0-9a62-77f82e0e5220",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a5858868-ebca-448c-a737-3e4dac52f51c",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalCategory({\n    // @ts-ignore\n    unknown: true,\n    name: 'FOO'\n});\nassert.strictEqual(a.name(), 'FOO');",
                  "err": {},
                  "uuid": "57277083-d782-4068-ab9c-c43d06729e45",
                  "parentUUID": "a5858868-ebca-448c-a737-3e4dac52f51c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category constructor() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalCategory({});\n}, /`name`/);",
                  "err": {},
                  "uuid": "d7bf94eb-1e3b-40be-8f08-fcca968782c3",
                  "parentUUID": "a5858868-ebca-448c-a737-3e4dac52f51c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57277083-d782-4068-ab9c-c43d06729e45",
                "d7bf94eb-1e3b-40be-8f08-fcca968782c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4c165813-cf86-4e2a-8b5a-9fb72a0e4687",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'foo' });\nassert.deepStrictEqual(c, c.name('FOO'));",
                  "err": {},
                  "uuid": "9ff12a4c-5017-4c63-9b33-649020ebc95e",
                  "parentUUID": "4c165813-cf86-4e2a-8b5a-9fb72a0e4687",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'foo' });\nassert.strictEqual(c.name(), 'foo');\nc.name('HELLO-WORLD');\nassert.strictEqual(c.name(), 'HELLO-WORLD');",
                  "err": {},
                  "uuid": "eb957728-fdea-4f93-b6d6-8509540200f5",
                  "parentUUID": "4c165813-cf86-4e2a-8b5a-9fb72a0e4687",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'BANANA' });\nassert.ok(c.toString().includes('BANANA'));",
                  "err": {},
                  "uuid": "d3c33a7a-2739-4de7-b57c-74ff8fae262e",
                  "parentUUID": "4c165813-cf86-4e2a-8b5a-9fb72a0e4687",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ff12a4c-5017-4c63-9b33-649020ebc95e",
                "eb957728-fdea-4f93-b6d6-8509540200f5",
                "d3c33a7a-2739-4de7-b57c-74ff8fae262e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c080b206-d4c8-48d4-8718-cbe9cf662643",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'FOOBAR' });\nassert.deepStrictEqual(c.toJSON(), { name: 'FOOBAR' });",
                  "err": {},
                  "uuid": "6bac6ecd-b871-4aed-903e-e89fcca7f6b2",
                  "parentUUID": "c080b206-d4c8-48d4-8718-cbe9cf662643",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6bac6ecd-b871-4aed-903e-e89fcca7f6b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "747a6f75-f200-42e0-b107-2e2fb01990eb",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "111e871b-a729-412a-b23a-5f7add4d097e",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    id: 'FOO',\n    sequence: 1,\n    start: new Date().toJSON(),\n    end: new Date().toJSON(),\n    recurrenceId: new Date().toJSON(),\n    timezone: 'Europe/Berlin',\n    stamp: new Date().toJSON(),\n    allDay: true,\n    floating: false,\n    repeating: null,\n    summary: 'Hello.',\n    location: null,\n    description: null,\n    organizer: null,\n    attendees: [],\n    alarms: [],\n    categories: [],\n    status: null,\n    busystatus: ICalEventBusyStatus.BUSY,\n    priority: 5,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    attachments: [\n        'https://files.sebbo.net/calendar/attachments/foo'\n    ],\n    transparency: ICalEventTransparency.TRANSPARENT,\n    created: new Date().toJSON(),\n    lastModified: new Date().toJSON(),\n    class: null,\n    x: []\n};\nconst event = new ICalEvent(data, new ICalCalendar());\nassert.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "1560887a-0b8a-4322-bbff-b39254c14e64",
                  "parentUUID": "111e871b-a729-412a-b23a-5f7add4d097e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalEvent({ summary: 'Testevent' }, null);\n}, /`calendar`/);",
                  "err": {},
                  "uuid": "5e741996-4966-42f3-8f42-b72698b53d95",
                  "parentUUID": "111e871b-a729-412a-b23a-5f7add4d097e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1560887a-0b8a-4322-bbff-b39254c14e64",
                "5e741996-4966-42f3-8f42-b72698b53d95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2006071c-026e-4064-94be-5688e4efaf30",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.id(1048));",
                  "err": {},
                  "uuid": "4a5135e3-1557-4946-95f9-357abec4aa44",
                  "parentUUID": "2006071c-026e-4064-94be-5688e4efaf30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar()).id(512);\nassert.strictEqual(event.id(), '512');\nevent.id('xyz');\nassert.strictEqual(event.id(), 'xyz');",
                  "err": {},
                  "uuid": "bfe8dcd9-f17f-45dc-b8f1-cd4b92b25095",
                  "parentUUID": "2006071c-026e-4064-94be-5688e4efaf30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a5135e3-1557-4946-95f9-357abec4aa44",
                "bfe8dcd9-f17f-45dc-b8f1-cd4b92b25095"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c337a671-b043-4dd4-9fdf-02835061065d",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.uid(1048));",
                  "err": {},
                  "uuid": "d83d5192-f7bb-4ce7-b38e-c639f288ce7b",
                  "parentUUID": "c337a671-b043-4dd4-9fdf-02835061065d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar()).uid(512);\nassert.strictEqual(event.uid(), '512');\nevent.id('xyz');\nassert.strictEqual(event.uid(), 'xyz');",
                  "err": {},
                  "uuid": "c1488452-1714-41cb-b050-8293994777ab",
                  "parentUUID": "c337a671-b043-4dd4-9fdf-02835061065d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d83d5192-f7bb-4ce7-b38e-c639f288ce7b",
                "c1488452-1714-41cb-b050-8293994777ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "efa51c04-b6c7-4e2b-afd4-e1ac78e50d8e",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.sequence(1));",
                  "err": {},
                  "uuid": "ae6cf166-c68d-4e1b-9556-bb70a282d56d",
                  "parentUUID": "efa51c04-b6c7-4e2b-afd4-e1ac78e50d8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar()).sequence(1048);\nassert.strictEqual(event.sequence(), 1048);",
                  "err": {},
                  "uuid": "ee482403-0075-4b91-8344-93afc250378b",
                  "parentUUID": "efa51c04-b6c7-4e2b-afd4-e1ac78e50d8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.sequence('hello');\n}, /`sequence`/);",
                  "err": {},
                  "uuid": "17778e03-7d93-4adb-a035-feba12f2e403",
                  "parentUUID": "efa51c04-b6c7-4e2b-afd4-e1ac78e50d8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar()).sequence(12);\nassert.strictEqual(event.sequence(), 12);\nevent.sequence(0);\nassert.strictEqual(event.sequence(), 0);",
                  "err": {},
                  "uuid": "6981d379-e998-47c2-827d-4cfce04719ad",
                  "parentUUID": "efa51c04-b6c7-4e2b-afd4-e1ac78e50d8e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae6cf166-c68d-4e1b-9556-bb70a282d56d",
                "ee482403-0075-4b91-8344-93afc250378b",
                "17778e03-7d93-4adb-a035-feba12f2e403",
                "6981d379-e998-47c2-827d-4cfce04719ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7dd7669-6aa5-46ca-b994-9d5666c72763",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nevent.start(now);\nassert.strictEqual(event.start(), now);",
                  "err": {},
                  "uuid": "20f3220d-050d-46da-a16c-dbaed359df80",
                  "parentUUID": "f7dd7669-6aa5-46ca-b994-9d5666c72763",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.start(date));\nassert.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "20c2d74a-814a-403e-8578-21d131d1eb66",
                  "parentUUID": "f7dd7669-6aa5-46ca-b994-9d5666c72763",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.start(date));\nassert.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "1cbfb041-54f5-44ae-a2c4-120b846cf81b",
                  "parentUUID": "f7dd7669-6aa5-46ca-b994-9d5666c72763",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.start(3);\n}, /`start`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.start(null);\n}, /`start`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.start(NaN);\n}, /`start`/, 'NaN');\nassert.throws(function () {\n    event.start(new Date('hallo'));\n}, /`start`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "6eb3e488-218a-4d83-b11e-9b82289bcbc9",
                  "parentUUID": "f7dd7669-6aa5-46ca-b994-9d5666c72763",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment().add(5, 'minutes');\nconst end = moment();\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .end(end)\n    .start(start);\nassert.deepStrictEqual(event.start(), end);\nassert.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "c9a38e0e-7325-4263-a870-41d18856342f",
                  "parentUUID": "f7dd7669-6aa5-46ca-b994-9d5666c72763",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.start(moment()));\nassert.deepStrictEqual(event, event.start(new Date()));",
                  "err": {},
                  "uuid": "8c6be820-53f4-4d01-bc30-cfd04dc27925",
                  "parentUUID": "f7dd7669-6aa5-46ca-b994-9d5666c72763",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20f3220d-050d-46da-a16c-dbaed359df80",
                "20c2d74a-814a-403e-8578-21d131d1eb66",
                "1cbfb041-54f5-44ae-a2c4-120b846cf81b",
                "6eb3e488-218a-4d83-b11e-9b82289bcbc9",
                "c9a38e0e-7325-4263-a870-41d18856342f",
                "8c6be820-53f4-4d01-bc30-cfd04dc27925"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "93da0f80-5e1f-4cff-a9fb-9bb9fb4875fd",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({ start: moment().subtract({ minute: 1 }) }, new ICalCalendar());\nevent.end(now);\nassert.deepStrictEqual(event.end(), now);",
                  "err": {},
                  "uuid": "55ff80db-dd8c-4679-b8e0-c37a1461e15c",
                  "parentUUID": "93da0f80-5e1f-4cff-a9fb-9bb9fb4875fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.end(date));\nassert.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "236efb34-0a84-49d5-ba1a-784f7cba41c1",
                  "parentUUID": "93da0f80-5e1f-4cff-a9fb-9bb9fb4875fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.end(date));\nassert.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "3cc10b75-aa3e-4c2a-b799-91092c3bd092",
                  "parentUUID": "93da0f80-5e1f-4cff-a9fb-9bb9fb4875fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.end(3);\n}, /`end`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.end(NaN);\n}, /`end`/, 'NaN');\nassert.throws(function () {\n    event.end(new Date('hallo'));\n}, /`end`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "ea7a7899-c863-4001-9ced-1cc3b3292536",
                  "parentUUID": "93da0f80-5e1f-4cff-a9fb-9bb9fb4875fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment().add(5, 'minutes');\nconst end = moment();\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .start(start)\n    .end(end);\nassert.deepStrictEqual(event.start(), end);\nassert.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "5b556c10-e4a1-4943-b1e7-ff09a3f0afab",
                  "parentUUID": "93da0f80-5e1f-4cff-a9fb-9bb9fb4875fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.end(moment()));\nassert.deepStrictEqual(event, event.end(new Date()));",
                  "err": {},
                  "uuid": "882afea1-6263-43f2-860b-d325a939be48",
                  "parentUUID": "93da0f80-5e1f-4cff-a9fb-9bb9fb4875fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55ff80db-dd8c-4679-b8e0-c37a1461e15c",
                "236efb34-0a84-49d5-ba1a-784f7cba41c1",
                "3cc10b75-aa3e-4c2a-b799-91092c3bd092",
                "ea7a7899-c863-4001-9ced-1cc3b3292536",
                "5b556c10-e4a1-4943-b1e7-ff09a3f0afab",
                "882afea1-6263-43f2-860b-d325a939be48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99ff4fdb-d8dc-4efe-990c-344b6723a14c",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nevent.recurrenceId(now);\nassert.deepStrictEqual(event.recurrenceId(), now);",
                  "err": {},
                  "uuid": "90661f64-ceac-46bb-b2b5-81d70021bbce",
                  "parentUUID": "99ff4fdb-d8dc-4efe-990c-344b6723a14c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.recurrenceId(date));\nassert.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "a4fe9fbb-18cd-497c-9534-f59f36719fb7",
                  "parentUUID": "99ff4fdb-d8dc-4efe-990c-344b6723a14c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.recurrenceId(date));\nassert.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "9e03eeef-2148-4367-b529-a7193f90d667",
                  "parentUUID": "99ff4fdb-d8dc-4efe-990c-344b6723a14c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(3);\n}, /`recurrenceId`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(NaN);\n}, /`recurrenceId`/, 'NaN');\nassert.throws(function () {\n    event.recurrenceId(new Date('hallo'));\n}, /`recurrenceId`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "974562c0-96a5-430c-9393-1981bbcb3e46",
                  "parentUUID": "99ff4fdb-d8dc-4efe-990c-344b6723a14c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event, event.recurrenceId(moment()));\nassert.deepStrictEqual(event, event.recurrenceId(new Date()));",
                  "err": {},
                  "uuid": "f13c9be7-252c-4124-bd8b-874278e0cad8",
                  "parentUUID": "99ff4fdb-d8dc-4efe-990c-344b6723a14c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90661f64-ceac-46bb-b2b5-81d70021bbce",
                "a4fe9fbb-18cd-497c-9534-f59f36719fb7",
                "9e03eeef-2148-4367-b529-a7193f90d667",
                "974562c0-96a5-430c-9393-1981bbcb3e46",
                "f13c9be7-252c-4124-bd8b-874278e0cad8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "533c7cbb-cbb8-4f6d-aca7-7779f755305a",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .timezone('Europe/Berlin');\nassert.strictEqual(e.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "1e061de9-0ff0-4cd0-a8c2-3f4a458b800c",
                  "parentUUID": "533c7cbb-cbb8-4f6d-aca7-7779f755305a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, cal);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), null);\ncal.timezone('Europe/London');\nassert.strictEqual(cal.timezone(), 'Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/London');\ne.timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone(null);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "944f0c03-bcfa-4adb-9e80-a06f531a167e",
                  "parentUUID": "533c7cbb-cbb8-4f6d-aca7-7779f755305a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.timezone('Europe/Berlin'));",
                  "err": {},
                  "uuid": "76bc9294-a1d8-43f4-a788-df4dbda54d01",
                  "parentUUID": "533c7cbb-cbb8-4f6d-aca7-7779f755305a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "c7a26c0f-586d-4330-86d4-af325690ebbe",
                  "parentUUID": "533c7cbb-cbb8-4f6d-aca7-7779f755305a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.floating(true);\ne.timezone('Europe/London');\nassert.strictEqual(e.floating(), false);",
                  "err": {},
                  "uuid": "c784b8d7-8bdf-4f71-b62c-97dce73da76f",
                  "parentUUID": "533c7cbb-cbb8-4f6d-aca7-7779f755305a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.floating(true);\ne.timezone(null);\nassert.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "d8545b3d-23cf-44bd-8a99-bf84fb5f14d3",
                  "parentUUID": "533c7cbb-cbb8-4f6d-aca7-7779f755305a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    timezone: 'Europe/Berlin',\n    summary: 'Example Event'\n}, new ICalCalendar());\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone('UTC');\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "bcc119c1-3792-46f8-8f1d-6bfbb4a1558f",
                  "parentUUID": "533c7cbb-cbb8-4f6d-aca7-7779f755305a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e061de9-0ff0-4cd0-a8c2-3f4a458b800c",
                "944f0c03-bcfa-4adb-9e80-a06f531a167e",
                "76bc9294-a1d8-43f4-a788-df4dbda54d01",
                "c7a26c0f-586d-4330-86d4-af325690ebbe",
                "c784b8d7-8bdf-4f71-b62c-97dce73da76f",
                "d8545b3d-23cf-44bd-8a99-bf84fb5f14d3",
                "bcc119c1-3792-46f8-8f1d-6bfbb4a1558f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aaa9f58f-4fc1-4830-b8ae-93af600eb6ef",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment().add(1, 'day');\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar()).stamp(now);\nassert.deepStrictEqual(e.stamp(), now);",
                  "err": {},
                  "uuid": "f9625c7b-ddb6-45f6-b60f-f58724d13efc",
                  "parentUUID": "aaa9f58f-4fc1-4830-b8ae-93af600eb6ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.stamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "a8922209-6a46-481f-865d-ec60d4eb3727",
                  "parentUUID": "aaa9f58f-4fc1-4830-b8ae-93af600eb6ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.stamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "833a1348-43a9-43a0-98e9-d9d1b1f66102",
                  "parentUUID": "aaa9f58f-4fc1-4830-b8ae-93af600eb6ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(3);\n}, /`stamp`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(null);\n}, /`stamp`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(NaN);\n}, /`stamp`/, 'NaN');\nassert.throws(function () {\n    event.stamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "42c16d72-484f-4f5c-916a-879648a7fbc7",
                  "parentUUID": "aaa9f58f-4fc1-4830-b8ae-93af600eb6ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.stamp(new Date()));",
                  "err": {},
                  "uuid": "ae349274-a049-460b-9a92-4734b010d643",
                  "parentUUID": "aaa9f58f-4fc1-4830-b8ae-93af600eb6ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9625c7b-ddb6-45f6-b60f-f58724d13efc",
                "a8922209-6a46-481f-865d-ec60d4eb3727",
                "833a1348-43a9-43a0-98e9-d9d1b1f66102",
                "42c16d72-484f-4f5c-916a-879648a7fbc7",
                "ae349274-a049-460b-9a92-4734b010d643"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc6717f7-4307-4a75-bd61-6589e5a1be69",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment().add(1, 'day');\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar()).timestamp(now);\nassert.deepStrictEqual(e.timestamp(), now);",
                  "err": {},
                  "uuid": "b93e4ed1-05b4-4a1b-bbf5-6c4b126780f2",
                  "parentUUID": "dc6717f7-4307-4a75-bd61-6589e5a1be69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.timestamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "575400fb-98cb-4dec-a2ca-135b54d77963",
                  "parentUUID": "dc6717f7-4307-4a75-bd61-6589e5a1be69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.timestamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "700f28df-2315-4c09-b7c0-d72080e782c5",
                  "parentUUID": "dc6717f7-4307-4a75-bd61-6589e5a1be69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(3);\n}, /`stamp`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(null);\n}, /`stamp`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(NaN);\n}, /`stamp`/, 'NaN');\nassert.throws(function () {\n    event.timestamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "b4d31f5a-fb95-44b7-9c68-9ae48fbd421e",
                  "parentUUID": "dc6717f7-4307-4a75-bd61-6589e5a1be69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.timestamp(new Date()));",
                  "err": {},
                  "uuid": "51569a44-d65e-4476-b82a-80dbc1afcead",
                  "parentUUID": "dc6717f7-4307-4a75-bd61-6589e5a1be69",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b93e4ed1-05b4-4a1b-bbf5-6c4b126780f2",
                "575400fb-98cb-4dec-a2ca-135b54d77963",
                "700f28df-2315-4c09-b7c0-d72080e782c5",
                "b4d31f5a-fb95-44b7-9c68-9ae48fbd421e",
                "51569a44-d65e-4476-b82a-80dbc1afcead"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c18ee6e-9276-442f-b56d-84d58a1d3d90",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.allDay(true);\nassert.strictEqual(e.allDay(), true);",
                  "err": {},
                  "uuid": "cb0a8847-b5e4-4124-b7fa-7ed17887f31b",
                  "parentUUID": "0c18ee6e-9276-442f-b56d-84d58a1d3d90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.allDay(true));",
                  "err": {},
                  "uuid": "cfa85488-7882-424a-8a6c-38d4afcb6a3b",
                  "parentUUID": "0c18ee6e-9276-442f-b56d-84d58a1d3d90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.allDay(true);\nassert.strictEqual(event.allDay(), true);",
                  "err": {},
                  "uuid": "4d537801-eaff-4ff4-b6c9-1edf8d20ef5e",
                  "parentUUID": "0c18ee6e-9276-442f-b56d-84d58a1d3d90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb0a8847-b5e4-4124-b7fa-7ed17887f31b",
                "cfa85488-7882-424a-8a6c-38d4afcb6a3b",
                "4d537801-eaff-4ff4-b6c9-1edf8d20ef5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e68d6bb-1532-4ef5-9cd7-56bbdcee109d",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar()).floating(true);\nassert.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "05d5e248-c791-40bd-87f6-38d7687957a9",
                  "parentUUID": "7e68d6bb-1532-4ef5-9cd7-56bbdcee109d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.floating(false));\nassert.deepStrictEqual(e, e.floating(true));",
                  "err": {},
                  "uuid": "61b0f512-9e40-4ce0-ad75-3c86b95b2874",
                  "parentUUID": "7e68d6bb-1532-4ef5-9cd7-56bbdcee109d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.floating(true);\nassert.strictEqual(event.floating(), true);",
                  "err": {},
                  "uuid": "c6312f76-d0a2-4fae-a5eb-961eb6137a48",
                  "parentUUID": "7e68d6bb-1532-4ef5-9cd7-56bbdcee109d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\ne.floating(true);\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "be71fa25-1cc1-4843-bac2-f9955bcb3348",
                  "parentUUID": "7e68d6bb-1532-4ef5-9cd7-56bbdcee109d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\ne.floating(false);\nassert.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "3936b9d9-160f-459d-8eb2-822f18c9fda9",
                  "parentUUID": "7e68d6bb-1532-4ef5-9cd7-56bbdcee109d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05d5e248-c791-40bd-87f6-38d7687957a9",
                "61b0f512-9e40-4ce0-ad75-3c86b95b2874",
                "c6312f76-d0a2-4fae-a5eb-961eb6137a48",
                "be71fa25-1cc1-4843-bac2-f9955bcb3348",
                "3936b9d9-160f-459d-8eb2-822f18c9fda9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cf93ae25-865e-4240-a16e-77bfddbef432",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = {\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    count: 5,\n    interval: 2,\n    until: moment(),\n    exclude: [moment()]\n};\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e.repeating(), null);\ne.repeating(options);\nassert.strictEqual(JSON.stringify(e.repeating(), null, '  '), JSON.stringify(options, null, '  '));\ne.repeating(null);\nassert.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "9aa60cd9-edba-4f37-a245-6f08bcc192ed",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.repeating(null));\nassert.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "068b7665-d8e8-4272-9aee-43867a78d60b",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.repeating(null), 'repeating(null)');\nassert.deepStrictEqual(e, e.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY\n}), 'repeating({freq: \\'MONTHLY\\'})');",
                  "err": {},
                  "uuid": "c3239df9-47e9-44b4-a279-dd3dcd8c1212",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        // @ts-ignore\n        repeating: {}\n    }, new ICalCalendar());\n}, /Input must be one of the following: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY/);",
                  "err": {},
                  "uuid": "44addefa-469e-470b-a9ff-2eaf78019047",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            // @ts-ignore\n            freq: 'hello'\n        }\n    }, new ICalCalendar());\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "b05b72ce-88fc-4cfe-bc03-8291d1f25904",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY });\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.strictEqual(result.freq, 'MONTHLY');",
                  "err": {},
                  "uuid": "3b644abb-e59f-4ecc-a060-67046cb7a933",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            count: Infinity\n        }\n    }, new ICalCalendar());\n}, /`repeating.count` must be a finite number!/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            count: 'abc'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.count` must be a finite number!/);",
                  "err": {},
                  "uuid": "b8c1737b-29d6-418a-81d2-967f9af02267",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, count: 5 });\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.strictEqual(result.count, 5);",
                  "err": {},
                  "uuid": "52e2d04a-481a-4ee8-b095-69c626c70a38",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: Infinity\n        }\n    }, new ICalCalendar());\n}, /`repeating.interval` must be a finite number!/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            interval: 'abc'\n        }\n    }, new ICalCalendar());\n}, /`repeating.interval` must be a finite number!/);",
                  "err": {},
                  "uuid": "0e5c729e-d51f-43f0-b2e7-722d15785459",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, interval: 5 });\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.strictEqual(result.interval, 5);",
                  "err": {},
                  "uuid": "310ec671-b31f-44c8-874d-151f6b74e8c7",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            until: null\n        }\n    }, new ICalCalendar());\n}, /Error: `repeating\\.until` has to be a valid date!/);",
                  "err": {},
                  "uuid": "d2544491-3dfc-467c-9da1-43a1bf40e3de",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "b66d2680-1ead-44ba-b8fa-f929b25b607c",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "2c5d3c17-2ded-40ab-aee5-ee15ec8bcee7",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week');\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "16270b53-b10d-4496-9ad5-3c280140a68a",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: 3 });\n}, /`repeating.until`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: null });\n}, /`repeating.until`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: NaN });\n}, /`repeating.until`/, 'NaN');\nassert.throws(function () {\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: new Date('foo') });\n}, /`repeating.until`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "39bf1a59-b482-4bc2-8098-faa152b77d57",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', 'BAR', 'th']\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', Infinity, 'th']\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "efea500d-8991-4268-9d01-508d44c33730",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    byDay: [ICalWeekday.SU, ICalWeekday.WE, ICalWeekday.TH]\n});\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.byDay, ['SU', 'WE', 'TH']);",
                  "err": {},
                  "uuid": "91745f35-dd59-4adb-95b9-9928c2be84f5",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonth: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonth` contains invalid value `FOO`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonth: [1, 14, 7]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonth` contains invalid value `14`/);",
                  "err": {},
                  "uuid": "3fa7d730-c351-444f-b366-af8fd4aa1204",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, byMonth: [1, 12, 7] });\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.byMonth, [1, 12, 7]);",
                  "err": {},
                  "uuid": "73c2ef3d-b36c-43aa-89ee-0e66e4b9553a",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonthDay: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `FOO`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 32, -15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `32`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [-1, -32, 15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `-32`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 0, 15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `0`/);",
                  "err": {},
                  "uuid": "6ceb4717-6b40-4134-a782-2626bd2f268f",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, byMonthDay: [1, 15] });\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.byMonthDay, [1, 15]);",
                  "err": {},
                  "uuid": "cda078e5-edcc-4e3d-b94c-2cb470b8b56f",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [367]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `367`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [-367]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `-367`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [0]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `0`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            // @ts-ignore\n            bySetPos: ['FOO']\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `FOO`/);",
                  "err": {},
                  "uuid": "6ba32280-8f44-4855-90cf-27a4695e55c2",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            bySetPos: 6\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/);",
                  "err": {},
                  "uuid": "d5b1f20c-8dd3-4a51-a204-345633e5554c",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    byDay: [ICalWeekday.SU],\n    bySetPos: [2]\n});\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.strictEqual((_a = result.byDay) === null || _a === void 0 ? void 0 : _a.length, 1);\n// @ts-ignore\nassert.strictEqual((_b = result.bySetPos) === null || _b === void 0 ? void 0 : _b.length, 1);",
                  "err": {},
                  "uuid": "eca86c58-2441-43a6-9d5e-f395133c9fe2",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            exclude: new Date('FOO')\n        }\n    }, new ICalCalendar());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "fa47ad87-ff73-4caa-b33a-094422ce0283",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            exclude: [moment(), new Date('BAR'), 'FOO']\n        }\n    }, new ICalCalendar());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "f9f74c3f-76cf-4fa3-9a5c-d2777f522107",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            // @ts-ignore\n            exclude: 42\n        }\n    }, new ICalCalendar());\n}, /`repeating.exclude\\[0\\]` has to be a valid date!/);",
                  "err": {},
                  "uuid": "e3329eb4-06d7-4aa7-b698-4ac2c22b4495",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().add(1, 'week');\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    exclude: [\n        date.toJSON(),\n        date.toDate(),\n        date\n    ]\n});\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.ok(Array.isArray(result.exclude));\n// @ts-ignore\nassert.strictEqual(result.exclude.length, 3);\n// @ts-ignore\nassert.deepStrictEqual(result.exclude[0], date.toJSON(), 'String');\n// @ts-ignore\nassert.deepStrictEqual(result.exclude[1], date.toDate(), 'Date');\n// @ts-ignore\nassert.deepStrictEqual(result.exclude[2], date, 'Moment');",
                  "err": {},
                  "uuid": "b32ae3e7-b4ff-4214-8c0b-1b122787d7ac",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            startOfWeek: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "c85257de-a575-4c58-9d9d-4069dca2e36c",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    startOfWeek: ICalWeekday.SU\n});\nconst result = e.repeating();\nassert.ok(result);\nassert.ok(!isRRule(result));\nassert.ok(typeof result !== 'string');\n// @ts-ignore\nassert.deepStrictEqual(result.startOfWeek, 'SU');",
                  "err": {},
                  "uuid": "4367f449-d47b-4c2a-b936-99b25756adaf",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = new Date(Date.UTC(2012, 1, 1, 10, 30));\nconst e = new ICalEvent({ start }, new ICalCalendar());\nconst rule = new rrule.RRule({\n    freq: rrule.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule.RRule.MO, rrule.RRule.FR],\n    dtstart: start,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\ne.repeating(rule);\nconst result = e.repeating();\nassert.ok(isRRule(result));\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "6b2ef223-32f6-41db-a452-b173b89d26a0",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst rule = 'RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "bd11a3ba-e408-41e0-b127-9232895bb126",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add RRULE: prefix for single line string if not already there",
                  "fullTitle": "ical-generator Event repeating() should add RRULE: prefix for single line string if not already there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst rule = 'FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "09831cb3-6464-488d-bc9d-9917caeccf10",
                  "parentUUID": "cf93ae25-865e-4240-a16e-77bfddbef432",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9aa60cd9-edba-4f37-a245-6f08bcc192ed",
                "068b7665-d8e8-4272-9aee-43867a78d60b",
                "c3239df9-47e9-44b4-a279-dd3dcd8c1212",
                "44addefa-469e-470b-a9ff-2eaf78019047",
                "b05b72ce-88fc-4cfe-bc03-8291d1f25904",
                "3b644abb-e59f-4ecc-a060-67046cb7a933",
                "b8c1737b-29d6-418a-81d2-967f9af02267",
                "52e2d04a-481a-4ee8-b095-69c626c70a38",
                "0e5c729e-d51f-43f0-b2e7-722d15785459",
                "310ec671-b31f-44c8-874d-151f6b74e8c7",
                "d2544491-3dfc-467c-9da1-43a1bf40e3de",
                "b66d2680-1ead-44ba-b8fa-f929b25b607c",
                "2c5d3c17-2ded-40ab-aee5-ee15ec8bcee7",
                "16270b53-b10d-4496-9ad5-3c280140a68a",
                "39bf1a59-b482-4bc2-8098-faa152b77d57",
                "efea500d-8991-4268-9d01-508d44c33730",
                "91745f35-dd59-4adb-95b9-9928c2be84f5",
                "3fa7d730-c351-444f-b366-af8fd4aa1204",
                "73c2ef3d-b36c-43aa-89ee-0e66e4b9553a",
                "6ceb4717-6b40-4134-a782-2626bd2f268f",
                "cda078e5-edcc-4e3d-b94c-2cb470b8b56f",
                "6ba32280-8f44-4855-90cf-27a4695e55c2",
                "d5b1f20c-8dd3-4a51-a204-345633e5554c",
                "eca86c58-2441-43a6-9d5e-f395133c9fe2",
                "fa47ad87-ff73-4caa-b33a-094422ce0283",
                "f9f74c3f-76cf-4fa3-9a5c-d2777f522107",
                "e3329eb4-06d7-4aa7-b698-4ac2c22b4495",
                "b32ae3e7-b4ff-4214-8c0b-1b122787d7ac",
                "c85257de-a575-4c58-9d9d-4069dca2e36c",
                "4367f449-d47b-4c2a-b936-99b25756adaf",
                "6b2ef223-32f6-41db-a452-b173b89d26a0",
                "bd11a3ba-e408-41e0-b127-9232895bb126",
                "09831cb3-6464-488d-bc9d-9917caeccf10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af3d3073-b38b-4df4-a606-660915266dbd",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.summary(), '');\ne.summary('Testevent');\nassert.strictEqual(e.summary(), 'Testevent');",
                  "err": {},
                  "uuid": "02e74894-07e9-4b50-b78c-3fdd22244c89",
                  "parentUUID": "af3d3073-b38b-4df4-a606-660915266dbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.summary(''));\nassert.deepStrictEqual(e, e.summary('Testevent'));",
                  "err": {},
                  "uuid": "45e360ed-8a70-47d4-b9f8-41b16e16a132",
                  "parentUUID": "af3d3073-b38b-4df4-a606-660915266dbd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.summary('Example Event II');\nassert.strictEqual(event.summary(), 'Example Event II');\nevent.summary('');\nassert.strictEqual(event.summary(), '');",
                  "err": {},
                  "uuid": "072e1717-2e7b-4986-938e-da5ce3c23d32",
                  "parentUUID": "af3d3073-b38b-4df4-a606-660915266dbd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02e74894-07e9-4b50-b78c-3fdd22244c89",
                "45e360ed-8a70-47d4-b9f8-41b16e16a132",
                "072e1717-2e7b-4986-938e-da5ce3c23d32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "25b89b8f-59de-41c8-a44e-70b1fd7974b6",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.location(), null);\ne.location('Test Location');\nassert.deepStrictEqual(e.location(), { title: 'Test Location' });\ne.location(null);\nassert.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "ecdf5344-b41a-486d-b810-a6d5e7117367",
                  "parentUUID": "25b89b8f-59de-41c8-a44e-70b1fd7974b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.location(), null);\ne.location({\n    title: 'Foo',\n    geo: { lat: 44.5, lon: -3.4 }\n});\nconst location = e.location();\nassert.ok(location);\nassert.ok('title' in location);\nassert.deepStrictEqual(location === null || location === void 0 ? void 0 : location.title, 'Foo');\nassert.deepStrictEqual(location === null || location === void 0 ? void 0 : location.geo, { lat: 44.5, lon: -3.4 });\ne.location(null);\nassert.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "1a91ffcf-06d9-454a-9a17-bdd8bed21a96",
                  "parentUUID": "25b89b8f-59de-41c8-a44e-70b1fd7974b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.location(null));\nassert.deepStrictEqual(e, e.location('Test Location'));",
                  "err": {},
                  "uuid": "6ff1cf31-24c5-4078-a7f7-a52ec4e54759",
                  "parentUUID": "25b89b8f-59de-41c8-a44e-70b1fd7974b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.location('Europa-Park');\nconst location = event.location();\nassert.ok(location);\nassert.ok('title' in location);\nassert.strictEqual(location === null || location === void 0 ? void 0 : location.title, 'Europa-Park');",
                  "err": {},
                  "uuid": "cfe38bb0-b705-4966-8c55-36a40c519cc6",
                  "parentUUID": "25b89b8f-59de-41c8-a44e-70b1fd7974b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\n// @ts-ignore\nassert.throws(() => event.location({ geo: 3 }), /`location` isn't formatted correctly/i);\n// @ts-ignore\nassert.throws(() => event.location({}), /`location` isn't formatted correctly/i);",
                  "err": {},
                  "uuid": "b359204e-1eb9-45fc-8630-9ff139e319cc",
                  "parentUUID": "25b89b8f-59de-41c8-a44e-70b1fd7974b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecdf5344-b41a-486d-b810-a6d5e7117367",
                "1a91ffcf-06d9-454a-9a17-bdd8bed21a96",
                "6ff1cf31-24c5-4078-a7f7-a52ec4e54759",
                "cfe38bb0-b705-4966-8c55-36a40c519cc6",
                "b359204e-1eb9-45fc-8630-9ff139e319cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d8e101a-5e4a-46b4-b6f7-8be7ead81dfe",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.description(), null);\ne.description('I don\\'t need a description. I\\'m far to awesome for descriptions…');\nassert.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…'\n});\ne.description({\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\nassert.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\ne.description(null);\nassert.strictEqual(e.description(), null);",
                  "err": {},
                  "uuid": "bfcfc678-b7a5-41f1-885f-2f567b00f801",
                  "parentUUID": "0d8e101a-5e4a-46b4-b6f7-8be7ead81dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.description(null));\nassert.deepStrictEqual(e, e.description('I don\\'t need a description. I\\'m far to awesome for descriptions…'));",
                  "err": {},
                  "uuid": "6d6551be-74ec-456c-996c-c21e78fc5b44",
                  "parentUUID": "0d8e101a-5e4a-46b4-b6f7-8be7ead81dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.description('Well. But other people need descriptions… :/');\nassert.deepStrictEqual(event.description(), {\n    plain: 'Well. But other people need descriptions… :/'\n});\nevent.description({\n    plain: 'I am uncool text.',\n    html: '<marquee>I\\'m the best HTML tag in this universe!</marquee>'\n});\nassert.ok(event.toString().includes('<marquee>I\\'m the best HTML tag in this universe!</marquee>'));",
                  "err": {},
                  "uuid": "6d059cd9-4ada-482c-bdf1-d3252ee059d2",
                  "parentUUID": "0d8e101a-5e4a-46b4-b6f7-8be7ead81dfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfcfc678-b7a5-41f1-885f-2f567b00f801",
                "6d6551be-74ec-456c-996c-c21e78fc5b44",
                "6d059cd9-4ada-482c-bdf1-d3252ee059d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1cca7f5d-44f6-40ff-9872-55e06e7ffaf7",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b, _c, _d, _e;\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.organizer(), null);\ne.organizer(null);\nassert.strictEqual(e.organizer(), null);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert.strictEqual('Sebastian Pekarek', (_a = e.organizer()) === null || _a === void 0 ? void 0 : _a.name);\nassert.strictEqual('mail@example.com', (_b = e.organizer()) === null || _b === void 0 ? void 0 : _b.email);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert.strictEqual('Sebastian Pekarek', (_c = e.organizer()) === null || _c === void 0 ? void 0 : _c.name);\nassert.strictEqual('mail@example.com', (_d = e.organizer()) === null || _d === void 0 ? void 0 : _d.email);\nassert.strictEqual('mail2@example2.com', (_e = e.organizer()) === null || _e === void 0 ? void 0 : _e.mailto);",
                  "err": {},
                  "uuid": "34d6169d-df47-422d-a91e-9de09445dde5",
                  "parentUUID": "1cca7f5d-44f6-40ff-9872-55e06e7ffaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.organizer(null));\nassert.deepStrictEqual(e, e.organizer('Sebastian Pekarek <mail@example.com>'));",
                  "err": {},
                  "uuid": "1f8195ad-bbdc-4372-8c76-d8283ae46eeb",
                  "parentUUID": "1cca7f5d-44f6-40ff-9872-55e06e7ffaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: undefined\n});\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: 'mail2@example2.com',\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "79badf7f-343a-49bf-b475-03247d4d5a04",
                  "parentUUID": "1cca7f5d-44f6-40ff-9872-55e06e7ffaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', sentBy: 'bot@example.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: 'bot@example.com'\n});",
                  "err": {},
                  "uuid": "3707f6dc-cb11-4db5-b56c-aadfbe6390fb",
                  "parentUUID": "1cca7f5d-44f6-40ff-9872-55e06e7ffaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer('Sebastian Pekarek <mail@example.com>');\nassert.deepStrictEqual(event.organizer(), { name: 'Sebastian Pekarek', email: 'mail@example.com' });",
                  "err": {},
                  "uuid": "868f6fca-6687-42ff-86e6-5bd90f496204",
                  "parentUUID": "1cca7f5d-44f6-40ff-9872-55e06e7ffaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    e.organizer('foo bar');\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "e0fb5c88-e58d-4e83-bc24-f6314d7ac52f",
                  "parentUUID": "1cca7f5d-44f6-40ff-9872-55e06e7ffaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer({ email: 'foo' });\n}, /`organizer\\.name`/);",
                  "err": {},
                  "uuid": "c7a580cb-5b1e-4610-8aa0-eab868445d56",
                  "parentUUID": "1cca7f5d-44f6-40ff-9872-55e06e7ffaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer(Infinity);\n}, /`organizer`/);\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer(NaN);\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "976e0bdb-7ab9-48ab-b533-f5320b2ce7ba",
                  "parentUUID": "1cca7f5d-44f6-40ff-9872-55e06e7ffaf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: undefined,\n    mailto: undefined,\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "6772ba0b-4dfd-4ff4-b8d2-95c7a1329886",
                  "parentUUID": "1cca7f5d-44f6-40ff-9872-55e06e7ffaf7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34d6169d-df47-422d-a91e-9de09445dde5",
                "1f8195ad-bbdc-4372-8c76-d8283ae46eeb",
                "79badf7f-343a-49bf-b475-03247d4d5a04",
                "3707f6dc-cb11-4db5-b56c-aadfbe6390fb",
                "868f6fca-6687-42ff-86e6-5bd90f496204",
                "e0fb5c88-e58d-4e83-bc24-f6314d7ac52f",
                "c7a580cb-5b1e-4610-8aa0-eab868445d56",
                "976e0bdb-7ab9-48ab-b533-f5320b2ce7ba",
                "6772ba0b-4dfd-4ff4-b8d2-95c7a1329886"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b561db22-be1b-47dd-a298-ae3a9618c35c",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst attendee = new ICalAttendee({ email: 'mail@example.com' }, event);\nassert.strictEqual(event.createAttendee(attendee), attendee, 'createAttendee returns attendee');\nassert.deepStrictEqual(event.attendees()[0], attendee, 'attendee pushed');",
                  "err": {},
                  "uuid": "5b7ad2cf-b7a3-44ac-9c64-44c4e8fd1b29",
                  "parentUUID": "b561db22-be1b-47dd-a298-ae3a9618c35c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.ok(event.createAttendee({ email: 'mail@example.com' }) instanceof ICalAttendee);\nassert.strictEqual(event.attendees.length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "19ae38ad-740f-40ce-b796-3a5b980914d3",
                  "parentUUID": "b561db22-be1b-47dd-a298-ae3a9618c35c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst attendee = event.createAttendee('Zac <zac@example.com>');\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "13f6e780-1c68-4024-b9d9-b3a8af6771fe",
                  "parentUUID": "b561db22-be1b-47dd-a298-ae3a9618c35c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    e.createAttendee('foo bar');\n}, /isn't formated correctly/);",
                  "err": {},
                  "uuid": "21c18698-7a87-4f9b-9898-46174ec81e65",
                  "parentUUID": "b561db22-be1b-47dd-a298-ae3a9618c35c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst attendee = event.createAttendee({ name: 'Zac', email: 'zac@example.com' });\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "5da4f559-d292-4bd5-b8c9-d1bd649ec7ba",
                  "parentUUID": "b561db22-be1b-47dd-a298-ae3a9618c35c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b7ad2cf-b7a3-44ac-9c64-44c4e8fd1b29",
                "19ae38ad-740f-40ce-b796-3a5b980914d3",
                "13f6e780-1c68-4024-b9d9-b3a8af6771fe",
                "21c18698-7a87-4f9b-9898-46174ec81e65",
                "5da4f559-d292-4bd5-b8c9-d1bd649ec7ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a15b2216-956c-45a8-8bc9-e85fe47164a1",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.attendees().length, 0);\nconst attendee = event.createAttendee({ email: 'mail@example.com' });\nassert.strictEqual(event.attendees().length, 1);\nassert.deepStrictEqual(event.attendees()[0], attendee);",
                  "err": {},
                  "uuid": "ef5797fa-6079-4ce1-8288-288112c8693f",
                  "parentUUID": "a15b2216-956c-45a8-8bc9-e85fe47164a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst foo = event.attendees([\n    { name: 'Person A', email: 'a@example.com' },\n    { name: 'Person B', email: 'b@example.com' }\n]);\nassert.strictEqual(event.attendees().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "84808cad-3b97-417e-98f3-da6a45bacbdd",
                  "parentUUID": "a15b2216-956c-45a8-8bc9-e85fe47164a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef5797fa-6079-4ce1-8288-288112c8693f",
                "84808cad-3b97-417e-98f3-da6a45bacbdd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79595e11-606c-4023-a98d-4d731e26429a",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.ok(event.createAlarm({\n    type: ICalAlarmType.display,\n    trigger: 60 * 10\n}) instanceof ICalAlarm);",
                  "err": {},
                  "uuid": "65e1c99a-d974-403f-9f40-77376f38ddcc",
                  "parentUUID": "79595e11-606c-4023-a98d-4d731e26429a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst alarm = event.createAlarm({\n    type: ICalAlarmType.audio,\n    trigger: 60 * 10\n});\nassert.strictEqual(alarm.type(), 'audio');",
                  "err": {},
                  "uuid": "bf1b071e-5902-4713-b062-bd064c7b3e45",
                  "parentUUID": "79595e11-606c-4023-a98d-4d731e26429a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65e1c99a-d974-403f-9f40-77376f38ddcc",
                "bf1b071e-5902-4713-b062-bd064c7b3e45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1cfed4e6-c884-4e17-9532-8732fd261ee1",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.alarms().length, 0);\nconst alarm = event.createAlarm({\n    type: ICalAlarmType.display,\n    trigger: 600\n});\nassert.strictEqual(event.alarms().length, 1);\nassert.deepStrictEqual(event.alarms()[0], alarm);",
                  "err": {},
                  "uuid": "2b331208-d193-4364-aa34-a3b9d984ef2e",
                  "parentUUID": "1cfed4e6-c884-4e17-9532-8732fd261ee1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst foo = event.alarms([\n    { type: ICalAlarmType.audio, trigger: 60 },\n    { type: ICalAlarmType.display, trigger: 600 }\n]);\nassert.strictEqual(event.alarms().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "b5077e02-4180-4ae0-bbd5-d345800e5609",
                  "parentUUID": "1cfed4e6-c884-4e17-9532-8732fd261ee1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b331208-d193-4364-aa34-a3b9d984ef2e",
                "b5077e02-4180-4ae0-bbd5-d345800e5609"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "145fdcc7-90ed-44c1-8276-1e73eeaffd17",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.ok(event.createCategory({ name: 'Test' }) instanceof ICalCategory);",
                  "err": {},
                  "uuid": "deb78c81-5f48-4036-bd5e-72404834391a",
                  "parentUUID": "145fdcc7-90ed-44c1-8276-1e73eeaffd17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst category = event.createCategory({ name: 'foo' });\nassert.strictEqual(category.name(), 'foo');",
                  "err": {},
                  "uuid": "5464bc42-ae2d-49c7-8ed9-45d4173ee9f2",
                  "parentUUID": "145fdcc7-90ed-44c1-8276-1e73eeaffd17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "deb78c81-5f48-4036-bd5e-72404834391a",
                "5464bc42-ae2d-49c7-8ed9-45d4173ee9f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9e8b9459-8c80-47c9-b594-cfecc755203e",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.categories().length, 0);\nconst category = event.createCategory({ name: 'Test' });\nassert.strictEqual(event.categories().length, 1);\nassert.deepStrictEqual(event.categories()[0], category);",
                  "err": {},
                  "uuid": "b5257ee2-abcc-4df5-9bea-c5dbe12b2f74",
                  "parentUUID": "9e8b9459-8c80-47c9-b594-cfecc755203e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst foo = event.categories([\n    { name: 'foo' },\n    { name: 'bar' }\n]);\nassert.strictEqual(event.categories().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "1921b54a-8ff1-467e-ad7f-c0f3917ab7a5",
                  "parentUUID": "9e8b9459-8c80-47c9-b594-cfecc755203e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5257ee2-abcc-4df5-9bea-c5dbe12b2f74",
                "1921b54a-8ff1-467e-ad7f-c0f3917ab7a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c9a9ebb-4cb0-4982-b278-a9686797fd0d",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.status(), null);\nevent.status(ICalEventStatus.CONFIRMED);\nassert.strictEqual(event.status(), 'CONFIRMED');\nevent.status(null);\nassert.strictEqual(event.status(), null);",
                  "err": {},
                  "uuid": "44b3b603-326a-44d9-a13a-6ddd55da6081",
                  "parentUUID": "0c9a9ebb-4cb0-4982-b278-a9686797fd0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.status(null));\nassert.deepStrictEqual(e, e.status(ICalEventStatus.CONFIRMED));",
                  "err": {},
                  "uuid": "c1066d0b-05f7-4d61-9d60-e18628eb4cf9",
                  "parentUUID": "0c9a9ebb-4cb0-4982-b278-a9686797fd0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.status(ICalEventStatus.CONFIRMED);\ne.status(null);\nassert.strictEqual(e.status(), null);",
                  "err": {},
                  "uuid": "b969dce6-531e-4f24-8358-33a7c5e42dbb",
                  "parentUUID": "0c9a9ebb-4cb0-4982-b278-a9686797fd0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.status(ICalEventStatus.CONFIRMED);\nassert.strictEqual(e.status(), 'CONFIRMED');\nassert.strictEqual(e.status(), ICalEventStatus.CONFIRMED);",
                  "err": {},
                  "uuid": "f49b3dbe-aedd-4ec0-804b-cb2c79cd9848",
                  "parentUUID": "0c9a9ebb-4cb0-4982-b278-a9686797fd0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.status('COOKING');\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(Infinity);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(NaN);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(-1);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);",
                  "err": {},
                  "uuid": "9071b74c-ff56-45e8-9fe0-18964ba7078a",
                  "parentUUID": "0c9a9ebb-4cb0-4982-b278-a9686797fd0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44b3b603-326a-44d9-a13a-6ddd55da6081",
                "c1066d0b-05f7-4d61-9d60-e18628eb4cf9",
                "b969dce6-531e-4f24-8358-33a7c5e42dbb",
                "f49b3dbe-aedd-4ec0-804b-cb2c79cd9848",
                "9071b74c-ff56-45e8-9fe0-18964ba7078a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "38dac2ad-9330-425a-9963-d974362371ab",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.busystatus(), null);\nevent.busystatus(ICalEventBusyStatus.BUSY);\nassert.strictEqual(event.busystatus(), 'BUSY');\nevent.busystatus(null);\nassert.strictEqual(event.busystatus(), null);",
                  "err": {},
                  "uuid": "c041dbc6-6c42-477a-9804-06860537d979",
                  "parentUUID": "38dac2ad-9330-425a-9963-d974362371ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.busystatus(null));\nassert.deepStrictEqual(e, e.busystatus(ICalEventBusyStatus.BUSY));",
                  "err": {},
                  "uuid": "b2548b69-c263-4c1c-9800-20be14ce5f74",
                  "parentUUID": "38dac2ad-9330-425a-9963-d974362371ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.busystatus(ICalEventBusyStatus.BUSY);\ne.busystatus(null);\nassert.strictEqual(e.busystatus(), null);",
                  "err": {},
                  "uuid": "044cff13-f9bd-42f1-b30d-1d322a8e3f4e",
                  "parentUUID": "38dac2ad-9330-425a-9963-d974362371ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.busystatus(ICalEventBusyStatus.BUSY);\nassert.strictEqual(e.busystatus(), 'BUSY');",
                  "err": {},
                  "uuid": "401e16ea-8b2f-4381-9341-e53a59e3cac7",
                  "parentUUID": "38dac2ad-9330-425a-9963-d974362371ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus('COOKING');\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(Infinity);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(NaN);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(-1);\n}, /FREE, TENTATIVE, BUSY, OOF/);",
                  "err": {},
                  "uuid": "8c12f6fd-952a-486f-9927-e4f52d3eb73d",
                  "parentUUID": "38dac2ad-9330-425a-9963-d974362371ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c041dbc6-6c42-477a-9804-06860537d979",
                "b2548b69-c263-4c1c-9800-20be14ce5f74",
                "044cff13-f9bd-42f1-b30d-1d322a8e3f4e",
                "401e16ea-8b2f-4381-9341-e53a59e3cac7",
                "8c12f6fd-952a-486f-9927-e4f52d3eb73d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ede68e51-798e-4f52-80e8-9df9268e1a78",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.priority(), null);\ne.priority(5);\nassert.strictEqual(e.priority(), 5);",
                  "err": {},
                  "uuid": "bf8e888a-0e2f-4271-88a0-61f1eb5decbc",
                  "parentUUID": "ede68e51-798e-4f52-80e8-9df9268e1a78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.priority(null));\nassert.deepStrictEqual(e, e.priority(5));",
                  "err": {},
                  "uuid": "cead7d9f-c75c-45ae-aad5-221e80e4ce0d",
                  "parentUUID": "ede68e51-798e-4f52-80e8-9df9268e1a78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.priority(5);\nassert.strictEqual(event.priority(), 5);\nassert.ok(event.toString().includes('PRIORITY:5'));",
                  "err": {},
                  "uuid": "dcce11b0-0d8b-473d-ad41-068cb478bbcf",
                  "parentUUID": "ede68e51-798e-4f52-80e8-9df9268e1a78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf8e888a-0e2f-4271-88a0-61f1eb5decbc",
                "cead7d9f-c75c-45ae-aad5-221e80e4ce0d",
                "dcce11b0-0d8b-473d-ad41-068cb478bbcf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "94f8a6f5-f348-4ab3-896e-de070fbaf321",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(e.url(), null);\ne.url('http://sebbo.net/');\nassert.strictEqual(e.url(), 'http://sebbo.net/');",
                  "err": {},
                  "uuid": "7689d50a-b3eb-4c31-a8d8-3919729327d2",
                  "parentUUID": "94f8a6f5-f348-4ab3-896e-de070fbaf321",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.url(null));\nassert.deepStrictEqual(e, e.url('http://sebbo.net/'));",
                  "err": {},
                  "uuid": "5ccaad1e-9889-4f90-9917-6c1716f0d781",
                  "parentUUID": "94f8a6f5-f348-4ab3-896e-de070fbaf321",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.url('http://github.com/sebbo2002/ical-generator');\nassert.strictEqual(event.url(), 'http://github.com/sebbo2002/ical-generator');",
                  "err": {},
                  "uuid": "0c3c91a7-7509-446e-ac9f-c3c95d091ab0",
                  "parentUUID": "94f8a6f5-f348-4ab3-896e-de070fbaf321",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7689d50a-b3eb-4c31-a8d8-3919729327d2",
                "5ccaad1e-9889-4f90-9917-6c1716f0d781",
                "0c3c91a7-7509-446e-ac9f-c3c95d091ab0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c58f957-aa7b-4473-8ccb-7da2aa1924bc",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(event.createAttachment('https://files.sebbo.net/calendar/attachments/foo'), event);",
                  "err": {},
                  "uuid": "99480d1b-3328-472a-9e3b-569f2ede23b8",
                  "parentUUID": "5c58f957-aa7b-4473-8ccb-7da2aa1924bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99480d1b-3328-472a-9e3b-569f2ede23b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84f94f3d-5f11-4e5f-87bb-39b6b713546f",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.attachments().length, 0);\nevent.createAttachment('https://files.sebbo.net/calendar/attachments/foo');\nassert.strictEqual(event.attachments().length, 1);\nassert.deepStrictEqual(typeof event.attachments()[0], 'string');",
                  "err": {},
                  "uuid": "2994a5e0-21b3-4d5f-8fa0-af1903d0106f",
                  "parentUUID": "84f94f3d-5f11-4e5f-87bb-39b6b713546f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst foo = event.attachments([\n    'https://files.sebbo.net/calendar/attachments/foo',\n    'https://files.sebbo.net/calendar/attachments/bar'\n]);\nassert.strictEqual(event.attachments().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "29616f70-b64c-456e-a1a1-7aed6304c62d",
                  "parentUUID": "84f94f3d-5f11-4e5f-87bb-39b6b713546f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2994a5e0-21b3-4d5f-8fa0-af1903d0106f",
                "29616f70-b64c-456e-a1a1-7aed6304c62d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca9350a1-1e36-4d6d-88b9-98edda94800a",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.created(new Date()));",
                  "err": {},
                  "uuid": "a5f55a02-9a4b-4126-a00f-40163713b401",
                  "parentUUID": "ca9350a1-1e36-4d6d-88b9-98edda94800a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.created(moment());\nassert.ok(moment.isMoment(e.created()));",
                  "err": {},
                  "uuid": "48ebd3c4-aa89-4a00-aef7-b9dbe4fc92a1",
                  "parentUUID": "ca9350a1-1e36-4d6d-88b9-98edda94800a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.created(new Date());\nassert.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "06563f3d-d372-44dc-8eb8-d5dc4fef0ef1",
                  "parentUUID": "ca9350a1-1e36-4d6d-88b9-98edda94800a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.created(moment().toJSON());\nassert.strictEqual(typeof e.created(), 'string');",
                  "err": {},
                  "uuid": "b9b339d1-3739-495d-9a79-9bfb86da2a72",
                  "parentUUID": "ca9350a1-1e36-4d6d-88b9-98edda94800a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.created(new Date());\nassert.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "aa266976-708f-4ee8-b87b-e32e7389f09f",
                  "parentUUID": "ca9350a1-1e36-4d6d-88b9-98edda94800a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .created(now);\nassert.deepStrictEqual((_a = e.created()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "9d89ddd9-9807-43d6-882d-d3e776496309",
                  "parentUUID": "ca9350a1-1e36-4d6d-88b9-98edda94800a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    e.created('hallo'); // this will produce a \"Deprecation warning\", sorry 😇\n}, /`created`/);",
                  "err": {},
                  "uuid": "4585e568-c7f6-4c60-9230-937c9c589eab",
                  "parentUUID": "ca9350a1-1e36-4d6d-88b9-98edda94800a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5f55a02-9a4b-4126-a00f-40163713b401",
                "48ebd3c4-aa89-4a00-aef7-b9dbe4fc92a1",
                "06563f3d-d372-44dc-8eb8-d5dc4fef0ef1",
                "b9b339d1-3739-495d-9a79-9bfb86da2a72",
                "aa266976-708f-4ee8-b87b-e32e7389f09f",
                "9d89ddd9-9807-43d6-882d-d3e776496309",
                "4585e568-c7f6-4c60-9230-937c9c589eab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13cfbbaa-fc82-44ee-80a4-46f0e0624f46",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.lastModified(new Date()));",
                  "err": {},
                  "uuid": "bd149a75-8ef6-431f-80a5-78e144ed20f0",
                  "parentUUID": "13cfbbaa-fc82-44ee-80a4-46f0e0624f46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.lastModified(moment());\nassert.ok(moment.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "66b08eb4-0ee2-426c-b816-e2430af47d07",
                  "parentUUID": "13cfbbaa-fc82-44ee-80a4-46f0e0624f46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.lastModified(new Date());\nassert.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "b33415c7-3f0f-4444-889b-ca5908fb35c3",
                  "parentUUID": "13cfbbaa-fc82-44ee-80a4-46f0e0624f46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst date = moment().toJSON();\ne.lastModified(date);\nassert.strictEqual(e.lastModified(), date);",
                  "err": {},
                  "uuid": "2adb4027-9296-4b2a-ac38-9fc3e7a842dc",
                  "parentUUID": "13cfbbaa-fc82-44ee-80a4-46f0e0624f46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.lastModified(new Date());\nassert.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "01babef8-c48e-41dd-99f9-d27c2ddea743",
                  "parentUUID": "13cfbbaa-fc82-44ee-80a4-46f0e0624f46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .lastModified(now);\nassert.deepStrictEqual((_a = e.lastModified()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "efd2e3dd-9001-4213-b088-bb8d4b214038",
                  "parentUUID": "13cfbbaa-fc82-44ee-80a4-46f0e0624f46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    e.lastModified('hallo');\n}, /`lastModified`/);",
                  "err": {},
                  "uuid": "d68f0097-3f36-4540-ab4d-d9bf93a7b43f",
                  "parentUUID": "13cfbbaa-fc82-44ee-80a4-46f0e0624f46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd149a75-8ef6-431f-80a5-78e144ed20f0",
                "66b08eb4-0ee2-426c-b816-e2430af47d07",
                "b33415c7-3f0f-4444-889b-ca5908fb35c3",
                "2adb4027-9296-4b2a-ac38-9fc3e7a842dc",
                "01babef8-c48e-41dd-99f9-d27c2ddea743",
                "efd2e3dd-9001-4213-b088-bb8d4b214038",
                "d68f0097-3f36-4540-ab4d-d9bf93a7b43f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0b0dc23a-1c01-4358-91f1-7086557d35b9",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.class(), null);\nevent.class(ICalEventClass.PRIVATE);\nassert.strictEqual(event.class(), 'PRIVATE');\nevent.class(null);\nassert.strictEqual(event.class(), null);",
                  "err": {},
                  "uuid": "83989596-289c-4c3e-80aa-4bbfb491da18",
                  "parentUUID": "0b0dc23a-1c01-4358-91f1-7086557d35b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.class(null));\nassert.deepStrictEqual(e, e.class(ICalEventClass.PRIVATE));",
                  "err": {},
                  "uuid": "6dd032d2-2d87-4438-8eb9-40229e3daab6",
                  "parentUUID": "0b0dc23a-1c01-4358-91f1-7086557d35b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.class(ICalEventClass.PRIVATE);\ne.class(null);\nassert.strictEqual(e.class(), null);",
                  "err": {},
                  "uuid": "2a325120-7aaf-4992-ae8b-e918a1782d79",
                  "parentUUID": "0b0dc23a-1c01-4358-91f1-7086557d35b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.class(ICalEventClass.PRIVATE);\nassert.strictEqual(e.class(), 'PRIVATE');\nassert.strictEqual(e.class(), ICalEventClass.PRIVATE);",
                  "err": {},
                  "uuid": "b1366300-3097-4df4-b1e4-96dbf849ce05",
                  "parentUUID": "0b0dc23a-1c01-4358-91f1-7086557d35b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.class('COOKING');\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(Infinity);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(NaN);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(-1);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);",
                  "err": {},
                  "uuid": "ffa840c7-9490-4be6-8636-9d1b5492cb83",
                  "parentUUID": "0b0dc23a-1c01-4358-91f1-7086557d35b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "83989596-289c-4c3e-80aa-4bbfb491da18",
                "6dd032d2-2d87-4438-8eb9-40229e3daab6",
                "2a325120-7aaf-4992-ae8b-e918a1782d79",
                "b1366300-3097-4df4-b1e4-96dbf849ce05",
                "ffa840c7-9490-4be6-8636-9d1b5492cb83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5772a7cb-7064-4447-8e28-37ab15fb9fe8",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "0a2c2553-3198-49af-9a67-b5d32eefbeb0",
                  "parentUUID": "5772a7cb-7064-4447-8e28-37ab15fb9fe8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a2c2553-3198-49af-9a67-b5d32eefbeb0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c4da9be-2181-4c42-afa4-6bbeac32f2d9",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = moment().add(1, 'month');\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .summary('foo')\n    .start(date);\nassert.strictEqual(event.toJSON().summary, 'foo', 'summary is okay');\nassert.deepStrictEqual(event.toJSON().start, date.toJSON(), 'start is okay');\nassert.strictEqual(typeof event.toJSON().start, 'string', 'start is string');",
                  "err": {},
                  "uuid": "786c4a38-16b5-49ca-be2e-aafceaf64cc1",
                  "parentUUID": "8c4da9be-2181-4c42-afa4-6bbeac32f2d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nconst rule = new rrule.RRule({\n    freq: rrule.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule.RRule.MO, rrule.RRule.FR],\n    dtstart: date,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\nconst event = new ICalEvent({ start: new Date() }, new ICalCalendar())\n    .summary('foo')\n    .start(date)\n    .repeating(rule);\nconst json = event.toJSON();\nconst before = event.toString();\nassert.ok(typeof json.repeating === 'string');\nconst event2 = new ICalEvent(event.toJSON(), new ICalCalendar());\nconst after = event2.toString();\nassert.strictEqual(after, before);",
                  "err": {},
                  "uuid": "9e051a86-b0ac-456c-a7f2-2e16c54ccd56",
                  "parentUUID": "8c4da9be-2181-4c42-afa4-6bbeac32f2d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalEvent({ start: new Date() }, new ICalCalendar());\nnew ICalEvent(a.toJSON(), new ICalCalendar());",
                  "err": {},
                  "uuid": "9dd1c5a8-cfce-47ec-8ee1-aafd47069a99",
                  "parentUUID": "8c4da9be-2181-4c42-afa4-6bbeac32f2d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "786c4a38-16b5-49ca-be2e-aafceaf64cc1",
                "9e051a86-b0ac-456c-a7f2-2e16c54ccd56",
                "9dd1c5a8-cfce-47ec-8ee1-aafd47069a99"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0121d8d1-f0ea-4eae-9c4e-fca4d22dc13e",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.strictEqual(event.transparency(), null);\nevent.transparency(ICalEventTransparency.OPAQUE);\nassert.strictEqual(event.transparency(), 'OPAQUE');\nevent.transparency(null);\nassert.strictEqual(event.transparency(), null);",
                  "err": {},
                  "uuid": "c5d3187d-8dfb-47e7-9b87-a6339f88d798",
                  "parentUUID": "0121d8d1-f0ea-4eae-9c4e-fca4d22dc13e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.deepStrictEqual(e, e.transparency(null));\nassert.deepStrictEqual(e, e.transparency(ICalEventTransparency.TRANSPARENT));",
                  "err": {},
                  "uuid": "50b50600-1839-43e8-87fc-65be492db6dc",
                  "parentUUID": "0121d8d1-f0ea-4eae-9c4e-fca4d22dc13e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.transparency(ICalEventTransparency.OPAQUE);\ne.transparency(null);\nassert.strictEqual(e.transparency(), null);",
                  "err": {},
                  "uuid": "0a6c4bf0-f614-440c-addb-d60d28f58537",
                  "parentUUID": "0121d8d1-f0ea-4eae-9c4e-fca4d22dc13e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\ne.transparency(ICalEventTransparency.OPAQUE);\nassert.strictEqual(e.transparency(), 'OPAQUE');",
                  "err": {},
                  "uuid": "1b1603a1-4595-4297-ad92-5689361fd6d1",
                  "parentUUID": "0121d8d1-f0ea-4eae-9c4e-fca4d22dc13e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency('COOKING');\n}, /TRANSPARENT, OPAQUE/);\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency(Infinity);\n}, /TRANSPARENT, OPAQUE/);\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency(-1);\n}, /TRANSPARENT, OPAQUE/);",
                  "err": {},
                  "uuid": "8220a11f-d025-4dee-b37e-81d61e6e3b38",
                  "parentUUID": "0121d8d1-f0ea-4eae-9c4e-fca4d22dc13e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5d3187d-8dfb-47e7-9b87-a6339f88d798",
                "50b50600-1839-43e8-87fc-65be492db6dc",
                "0a6c4bf0-f614-440c-addb-d60d28f58537",
                "1b1603a1-4595-4297-ad92-5689361fd6d1",
                "8220a11f-d025-4dee-b37e-81d61e6e3b38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f2e546c4-63fb-4227-8e95-77f82f2ab3b1",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Hel\\\\\\\\lo\\nW;orl,d'\n}, new ICalCalendar());\nassert.ok(e.toString().indexOf('Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d') > -1);",
                  "err": {},
                  "uuid": "69e36346-1e72-4618-b331-91ff971a7ec4",
                  "parentUUID": "f2e546c4-63fb-4227-8e95-77f82f2ab3b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst event = new ICalEvent({\n    id: 42,\n    start: moment(),\n    summary: ':)'\n}, cal);\nassert.ok(event.toString().indexOf('UID:42\\r') > -1);",
                  "err": {},
                  "uuid": "a2674375-46d8-48ce-a26e-8bcdd3f60584",
                  "parentUUID": "f2e546c4-63fb-4227-8e95-77f82f2ab3b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nlet event = new ICalEvent({\n    start: moment(),\n    end: moment(),\n    repeating: {\n        freq: ICalEventRepeatingFreq.WEEKLY\n    }\n}, cal);\nassert.ok(!event.toString().includes('WKST'), 'without WKST');\nevent = new ICalEvent({\n    start: moment(),\n    end: moment(),\n    repeating: {\n        freq: ICalEventRepeatingFreq.WEEKLY,\n        startOfWeek: ICalWeekday.SU\n    }\n}, cal);\nassert.ok(event.toString().includes('WKST'), 'with WKST');",
                  "err": {},
                  "uuid": "452575bc-c7ea-4fd1-a14e-2e4132a626c9",
                  "parentUUID": "f2e546c4-63fb-4227-8e95-77f82f2ab3b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69e36346-1e72-4618-b331-91ff971a7ec4",
                "a2674375-46d8-48ce-a26e-8bcdd3f60584",
                "452575bc-c7ea-4fd1-a14e-2e4132a626c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6c4c2f63-5ef9-4f22-b500-1d1169c27fc2",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f1e8e3e3-7781-49b5-ab9e-031cc257f97a",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(typeof ical, 'function');",
                  "err": {},
                  "uuid": "ed4e14ab-d044-4a85-935d-1f9c39f450aa",
                  "parentUUID": "f1e8e3e3-7781-49b5-ab9e-031cc257f97a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ical() instanceof ICalCalendar);",
                  "err": {},
                  "uuid": "06c2246d-7b7e-4089-b1c3-efb4faaf0ba3",
                  "parentUUID": "f1e8e3e3-7781-49b5-ab9e-031cc257f97a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed4e14ab-d044-4a85-935d-1f9c39f450aa",
                "06c2246d-7b7e-4089-b1c3-efb4faaf0ba3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "be1cb2a8-09f9-4438-9b07-760dfb3de29f",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarm);",
                  "err": {},
                  "uuid": "ea7f8ec9-98d0-46e4-be2c-7f18c32678c8",
                  "parentUUID": "be1cb2a8-09f9-4438-9b07-760dfb3de29f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarmType);",
                  "err": {},
                  "uuid": "fd8ade0f-7f32-4de5-8835-733464859ae7",
                  "parentUUID": "be1cb2a8-09f9-4438-9b07-760dfb3de29f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea7f8ec9-98d0-46e4-be2c-7f18c32678c8",
                "fd8ade0f-7f32-4de5-8835-733464859ae7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "564f4fc7-7d21-462d-9b45-306b0d53a8b2",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendee);",
                  "err": {},
                  "uuid": "f4d2d89c-264c-4b8d-a452-f0efbc7058e7",
                  "parentUUID": "564f4fc7-7d21-462d-9b45-306b0d53a8b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeType);",
                  "err": {},
                  "uuid": "c208dd4d-8bb3-430c-8644-92be3cf4e132",
                  "parentUUID": "564f4fc7-7d21-462d-9b45-306b0d53a8b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeRole);",
                  "err": {},
                  "uuid": "aa764bfa-c3c5-40e5-9921-b06956515725",
                  "parentUUID": "564f4fc7-7d21-462d-9b45-306b0d53a8b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeStatus);",
                  "err": {},
                  "uuid": "72796e6e-8f60-4fb4-9ae2-619b718baba9",
                  "parentUUID": "564f4fc7-7d21-462d-9b45-306b0d53a8b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4d2d89c-264c-4b8d-a452-f0efbc7058e7",
                "c208dd4d-8bb3-430c-8644-92be3cf4e132",
                "aa764bfa-c3c5-40e5-9921-b06956515725",
                "72796e6e-8f60-4fb4-9ae2-619b718baba9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7db5c41e-95d3-45a1-b297-8b209dd2794b",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendar);",
                  "err": {},
                  "uuid": "5be41f56-e5c5-443c-a981-ba721a48f2c4",
                  "parentUUID": "7db5c41e-95d3-45a1-b297-8b209dd2794b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendarMethod);",
                  "err": {},
                  "uuid": "168b4960-69eb-48e6-b3d7-5326cf982211",
                  "parentUUID": "7db5c41e-95d3-45a1-b297-8b209dd2794b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5be41f56-e5c5-443c-a981-ba721a48f2c4",
                "168b4960-69eb-48e6-b3d7-5326cf982211"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3fad879e-4d4a-4538-b8b5-bdf0077d2a85",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCategory);",
                  "err": {},
                  "uuid": "1a59d28d-6e3d-4dfa-925c-5c84d47ff751",
                  "parentUUID": "3fad879e-4d4a-4538-b8b5-bdf0077d2a85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a59d28d-6e3d-4dfa-925c-5c84d47ff751"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3978780a-809c-49ac-adc7-beab3200da42",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEvent);",
                  "err": {},
                  "uuid": "dea3c950-b413-4e7f-979c-caad4788f1d6",
                  "parentUUID": "3978780a-809c-49ac-adc7-beab3200da42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventStatus);",
                  "err": {},
                  "uuid": "ff12098f-0607-4e3a-9bd4-415b2acd7f65",
                  "parentUUID": "3978780a-809c-49ac-adc7-beab3200da42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventBusyStatus);",
                  "err": {},
                  "uuid": "0afb11ee-6d94-4625-8ddc-21764ed9806c",
                  "parentUUID": "3978780a-809c-49ac-adc7-beab3200da42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventTransparency);",
                  "err": {},
                  "uuid": "8b70f267-f321-47fa-9075-6152b2dbda52",
                  "parentUUID": "3978780a-809c-49ac-adc7-beab3200da42",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dea3c950-b413-4e7f-979c-caad4788f1d6",
                "ff12098f-0607-4e3a-9bd4-415b2acd7f65",
                "0afb11ee-6d94-4625-8ddc-21764ed9806c",
                "8b70f267-f321-47fa-9075-6152b2dbda52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "86542b25-bf76-41b0-a1d2-c14732e426b8",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventRepeatingFreq);",
                  "err": {},
                  "uuid": "5c90c2bc-7052-480c-84dc-e8373a4d7013",
                  "parentUUID": "86542b25-bf76-41b0-a1d2-c14732e426b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalWeekday);",
                  "err": {},
                  "uuid": "762b85c1-e82d-405c-9276-77b89408c46c",
                  "parentUUID": "86542b25-bf76-41b0-a1d2-c14732e426b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c90c2bc-7052-480c-84dc-e8373a4d7013",
                "762b85c1-e82d-405c-9276-77b89408c46c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "797dde1e-cbb7-4ddf-9042-7293a0830d11",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDate === 'function');",
                  "err": {},
                  "uuid": "3e5fabb0-6d6d-4d18-bb04-90a7d001f9eb",
                  "parentUUID": "797dde1e-cbb7-4ddf-9042-7293a0830d11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDateTZ === 'function');",
                  "err": {},
                  "uuid": "9709afdb-2b3e-491d-94ab-fc08ce7ae4e9",
                  "parentUUID": "797dde1e-cbb7-4ddf-9042-7293a0830d11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof escape === 'function');",
                  "err": {},
                  "uuid": "4946e1b7-4fc7-4010-9c86-57ee2dc8cc72",
                  "parentUUID": "797dde1e-cbb7-4ddf-9042-7293a0830d11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof foldLines === 'function');",
                  "err": {},
                  "uuid": "65f27af6-e0df-4f1c-ae4f-84159ed8fbe7",
                  "parentUUID": "797dde1e-cbb7-4ddf-9042-7293a0830d11",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e5fabb0-6d6d-4d18-bb04-90a7d001f9eb",
                "9709afdb-2b3e-491d-94ab-fc08ce7ae4e9",
                "4946e1b7-4fc7-4010-9c86-57ee2dc8cc72",
                "65f27af6-e0df-4f1c-ae4f-84159ed8fbe7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9cbf7520-38ed-4417-993e-643b9eb3acce",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "267ab084-46ea-4c3b-b152-7b5ecbe31fc6",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "16349a62-e9b2-46f4-b8bc-4f157523ad39",
                  "parentUUID": "267ab084-46ea-4c3b-b152-7b5ecbe31fc6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Brazil/East',\n    events: [{\n            start: moment('2016-05-01T03:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "fc16ca27-a20b-4d1a-8419-a5fc09970cf6",
                  "parentUUID": "267ab084-46ea-4c3b-b152-7b5ecbe31fc6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "16349a62-e9b2-46f4-b8bc-4f157523ad39",
                "fc16ca27-a20b-4d1a-8419-a5fc09970cf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d548051-61f5-4c8a-ab8f-78d966ad9f20",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            end: moment('2016-05-01T00:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [ICalWeekday.SU],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "1ca095f5-9634-4ce5-a844-a23dc882d995",
                  "parentUUID": "8d548051-61f5-4c8a-ab8f-78d966ad9f20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking all elements of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking all elements of the byDay array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            end: moment('2016-05-01T00:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [ICalWeekday.MO, ICalWeekday.FR],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO,FR;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "4e1f3da8-85bf-4973-8a4c-c1fdc4edfe7c",
                  "parentUUID": "8d548051-61f5-4c8a-ab8f-78d966ad9f20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ca095f5-9634-4ce5-a844-a23dc882d995",
                "4e1f3da8-85bf-4973-8a4c-c1fdc4edfe7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "acf08558-e7b2-4adb-a4d1-0cbd20f0ab6e",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "e42ace42-f20c-4966-abc7-19612a66c1a2",
                  "parentUUID": "acf08558-e7b2-4adb-a4d1-0cbd20f0ab6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "b2446681-91f0-4ab9-8b64-741fe992af13",
                  "parentUUID": "acf08558-e7b2-4adb-a4d1-0cbd20f0ab6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "66c285c9-25c6-41ab-869c-37c4b98ccb24",
                  "parentUUID": "acf08558-e7b2-4adb-a4d1-0cbd20f0ab6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e42ace42-f20c-4966-abc7-19612a66c1a2",
                "b2446681-91f0-4ab9-8b64-741fe992af13",
                "66c285c9-25c6-41ab-869c-37c4b98ccb24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0b77ff32-a41c-4ebf-bfc9-834eaba406f2",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment('2020-08-13T00:00:00+01:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment('2020-12-13T00:00:00+01:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('EXDATE;TZID=Europe/Berlin:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "e01ed270-a10f-431a-a43e-e555e62022af",
                  "parentUUID": "0b77ff32-a41c-4ebf-bfc9-834eaba406f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'America/New_York',\n    events: [{\n            start: moment('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment('2020-12-13T00:00:00-05:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('EXDATE;TZID=America/New_York:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "6683bca3-7f9a-46b3-8cd2-ce112928c5b8",
                  "parentUUID": "0b77ff32-a41c-4ebf-bfc9-834eaba406f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e01ed270-a10f-431a-a43e-e555e62022af",
                "6683bca3-7f9a-46b3-8cd2-ce112928c5b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c1006424-b3cb-4c6b-84ef-0f8de9fb9c50",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            location: {\n                title: 'Los Angeles, California, United States',\n                geo: {\n                    lon: -118.24368,\n                    lat: 34.05223,\n                },\n                radius: 400\n            }\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:Example Event',\n    'LOCATION:Los Angeles\\\\, California\\\\, United States',\n    'X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel',\n    ' es\\\\, California\\\\, United States:geo:34.05223,-118.24368',\n    'GEO:34.05223;-118.24368',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "33dfe1e3-53e1-4076-8722-7ee1d02c7695",
                  "parentUUID": "c1006424-b3cb-4c6b-84ef-0f8de9fb9c50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33dfe1e3-53e1-4076-8722-7ee1d02c7695"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d402f9a-ccae-47d2-8c53-5904b1673911",
              "title": "Issue #377",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not escape quotes in summary",
                  "fullTitle": "Issues Issue #377 should not escape quotes in summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [\n        {\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'My \"quoted\" string'\n        }\n    ]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:My \"quoted\" string',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "f87e5781-b68f-4f3a-9aab-8c9b9c58c4d8",
                  "parentUUID": "2d402f9a-ccae-47d2-8c53-5904b1673911",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f87e5781-b68f-4f3a-9aab-8c9b9c58c4d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7f715cd7-f373-468b-bab0-89f2058460ea",
              "title": "Issue #442",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate floating repeat until value if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat until value if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3360629e-13b5-42a6-ab4a-f495f94e0462",
                  "parentUUID": "7f715cd7-f373-468b-bab0-89f2058460ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate floating repeat exclusion dates if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat exclusion dates if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "2e631f6b-282a-449e-9869-8503200a655e",
                  "parentUUID": "7f715cd7-f373-468b-bab0-89f2058460ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "3360629e-13b5-42a6-ab4a-f495f94e0462",
                "2e631f6b-282a-449e-9869-8503200a655e"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d1df095-2642-445c-822b-adeee7470f98",
              "title": "Issue #459",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.repeating should work with `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work with `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: 'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1'\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1',\n    'SUMMARY:Example Event',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "810483d5-3783-4003-b54b-056ffddf3bc6",
                  "parentUUID": "1d1df095-2642-445c-822b-adeee7470f98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "event.repeating should work without `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work without `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: 'FREQ=MONTHLY;COUNT=3;INTERVAL=1'\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1',\n    'SUMMARY:Example Event',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "06531218-6c13-460f-90e0-2b747f3d72ec",
                  "parentUUID": "1d1df095-2642-445c-822b-adeee7470f98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "810483d5-3783-4003-b54b-056ffddf3bc6",
                "06531218-6c13-460f-90e0-2b747f3d72ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1fba57f-2fa9-4672-9f12-fb2e6f40cd96",
              "title": "Issue #569 / 570",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.location should work with `geo` only",
                  "fullTitle": "Issues Issue #569 / 570 event.location should work with `geo` only",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = ical().createEvent({\n    id: '12345',\n    summary: 'Hello',\n    start: new Date('2020-06-15T00:00:00Z'),\n    end: new Date('2020-06-15T01:00:00Z'),\n    stamp: new Date('2020-06-15T00:00:00Z')\n});\nevent.location({\n    geo: {\n        lat: 52.51147570081018,\n        lon: 13.342200696373846\n    }\n});\nassert.strictEqual(event.toString(), [\n    'BEGIN:VEVENT',\n    'UID:12345',\n    'SEQUENCE:0',\n    'DTSTAMP:20200615T000000Z',\n    'DTSTART:20200615T000000Z',\n    'DTEND:20200615T010000Z',\n    'SUMMARY:Hello',\n    'GEO:52.51147570081018;13.342200696373846',\n    'END:VEVENT',\n    ''\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "f73d86cb-89cb-4eb4-9e7f-bb90cc78e153",
                  "parentUUID": "e1fba57f-2fa9-4672-9f12-fb2e6f40cd96",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f73d86cb-89cb-4eb4-9e7f-bb90cc78e153"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "438e41c1-5f7b-4f2f-a4de-3d54625a32b5",
              "title": "Issue #581",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.start and event.end should be swappable",
                  "fullTitle": "Issues Issue #581 event.start and event.end should be swappable",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical();\nconst event = calendar.createEvent({\n    summary: 'Test Event',\n    start: '2024-02-29T17:00:00.000Z',\n    end: '2024-02-29T17:20:00.000Z'\n});\nevent.start('2024-02-29T19:00:00.000Z');\nevent.end('2024-02-29T19:20:00.000Z');\nconst start = event.start();\nassert.ok(typeof start === 'string');\nassert.strictEqual(start, '2024-02-29T19:00:00.000Z');\nconst end = event.end();\nassert.ok(typeof end === 'string');\nassert.strictEqual(end, '2024-02-29T19:20:00.000Z');",
                  "err": {},
                  "uuid": "94c507cf-e3e4-42ef-8acc-83288edcd634",
                  "parentUUID": "438e41c1-5f7b-4f2f-a4de-3d54625a32b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94c507cf-e3e4-42ef-8acc-83288edcd634"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "01df2d03-587e-4917-96fd-5af8282db095",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0cd5f3f8-3da4-4a84-a7e4-c3103dfe38c5",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "18752ccf-fd60-49ac-8b06-41d61ae36768",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "99d87a89-b8a2-4ea4-95bb-e2b894c9bf37",
                      "parentUUID": "18752ccf-fd60-49ac-8b06-41d61ae36768",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "3014a278-ce15-4032-af2f-ccbccad0be12",
                      "parentUUID": "18752ccf-fd60-49ac-8b06-41d61ae36768",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', true, false), '20180705');",
                      "err": {},
                      "uuid": "6a27a395-2c72-4364-90fb-156b4f5ba750",
                      "parentUUID": "18752ccf-fd60-49ac-8b06-41d61ae36768",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', true, true), '20180705');",
                      "err": {},
                      "uuid": "27e3617c-e41b-4d19-ab34-8bb6824c2ca7",
                      "parentUUID": "18752ccf-fd60-49ac-8b06-41d61ae36768",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, false), '20180705T182400');",
                      "err": {},
                      "uuid": "bda8d01f-9560-416e-820c-b8110bbe32ad",
                      "parentUUID": "18752ccf-fd60-49ac-8b06-41d61ae36768",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "59d7f750-eaf6-4fd8-aa9a-eef6ed20db8d",
                      "parentUUID": "18752ccf-fd60-49ac-8b06-41d61ae36768",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, false), '20180705');",
                      "err": {},
                      "uuid": "7781d0b0-0662-4976-a96c-69f949fa8b2c",
                      "parentUUID": "18752ccf-fd60-49ac-8b06-41d61ae36768",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, true), '20180705');",
                      "err": {},
                      "uuid": "40f759d2-0dc9-43b4-8e3b-8178144fb1ee",
                      "parentUUID": "18752ccf-fd60-49ac-8b06-41d61ae36768",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with / prefixed global timezones",
                      "fullTitle": "ICalTools formatDate() Date / String should work with / prefixed global timezones",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('/Europe/Berlin', '2018-07-05T18:24:00.052', false, false), '20180705T182400');",
                      "err": {},
                      "uuid": "1f24ded8-39f8-4d20-8c35-f9babcfc3148",
                      "parentUUID": "18752ccf-fd60-49ac-8b06-41d61ae36768",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "99d87a89-b8a2-4ea4-95bb-e2b894c9bf37",
                    "3014a278-ce15-4032-af2f-ccbccad0be12",
                    "6a27a395-2c72-4364-90fb-156b4f5ba750",
                    "27e3617c-e41b-4d19-ab34-8bb6824c2ca7",
                    "bda8d01f-9560-416e-820c-b8110bbe32ad",
                    "59d7f750-eaf6-4fd8-aa9a-eef6ed20db8d",
                    "7781d0b0-0662-4976-a96c-69f949fa8b2c",
                    "40f759d2-0dc9-43b4-8e3b-8178144fb1ee",
                    "1f24ded8-39f8-4d20-8c35-f9babcfc3148"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d5341cba-74db-410e-bcf8-626c88cbd871",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, moment('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "f0df9409-f693-4210-9957-8b0699ce7d66",
                      "parentUUID": "d5341cba-74db-410e-bcf8-626c88cbd871",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', moment('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "fd0862a1-7db6-48fa-9708-6eecf64fbdd0",
                      "parentUUID": "d5341cba-74db-410e-bcf8-626c88cbd871",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, moment('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "9cd22332-5433-4c79-9ad7-3c21d5336655",
                      "parentUUID": "d5341cba-74db-410e-bcf8-626c88cbd871",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f0df9409-f693-4210-9957-8b0699ce7d66",
                    "fd0862a1-7db6-48fa-9708-6eecf64fbdd0",
                    "9cd22332-5433-4c79-9ad7-3c21d5336655"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "62d5c1fc-f8ef-4769-8a69-40e0c46f1ba3",
                  "title": "moment-timezone.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, momentTz('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "f5d167d6-8020-440e-8dfe-0e33396dc2a7",
                      "parentUUID": "62d5c1fc-f8ef-4769-8a69-40e0c46f1ba3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', momentTz('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "11784e3f-4741-4cb5-9aa9-27fd498e590d",
                      "parentUUID": "62d5c1fc-f8ef-4769-8a69-40e0c46f1ba3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, momentTz('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "b52ea48c-c41a-48c8-a848-88b2015dd447",
                      "parentUUID": "62d5c1fc-f8ef-4769-8a69-40e0c46f1ba3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f5d167d6-8020-440e-8dfe-0e33396dc2a7",
                    "11784e3f-4741-4cb5-9aa9-27fd498e590d",
                    "b52ea48c-c41a-48c8-a848-88b2015dd447"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0a2ac378-1b0f-48db-9134-63d84792e814",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "ec139cb4-71cc-4a08-b5f0-ddc931ea5cca",
                      "parentUUID": "0a2ac378-1b0f-48db-9134-63d84792e814",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "9049509c-7aef-44e0-ab1a-add92cdde50f",
                      "parentUUID": "0a2ac378-1b0f-48db-9134-63d84792e814",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "678c8525-55e9-4997-a3e4-077c1d9a069b",
                      "parentUUID": "0a2ac378-1b0f-48db-9134-63d84792e814",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "041faa60-5e5e-4a0c-8fde-fb7dd2eae5ba",
                      "parentUUID": "0a2ac378-1b0f-48db-9134-63d84792e814",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ec139cb4-71cc-4a08-b5f0-ddc931ea5cca",
                    "9049509c-7aef-44e0-ab1a-add92cdde50f",
                    "678c8525-55e9-4997-a3e4-077c1d9a069b",
                    "041faa60-5e5e-4a0c-8fde-fb7dd2eae5ba"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "efb4cc41-b19a-4afb-a845-027195ca8536",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "74bb31fb-4344-4b14-ac3d-ce0f15d82e96",
                      "parentUUID": "efb4cc41-b19a-4afb-a845-027195ca8536",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', dayjs('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "b180235d-2107-4dfc-921b-6648cc6f62ac",
                      "parentUUID": "efb4cc41-b19a-4afb-a845-027195ca8536",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "417cdcde-8e6b-4e44-bcef-1c84f202cd4b",
                      "parentUUID": "efb4cc41-b19a-4afb-a845-027195ca8536",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "6f865318-8362-4c47-a06b-136d9330ab9a",
                      "parentUUID": "efb4cc41-b19a-4afb-a845-027195ca8536",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "74bb31fb-4344-4b14-ac3d-ce0f15d82e96",
                    "b180235d-2107-4dfc-921b-6648cc6f62ac",
                    "417cdcde-8e6b-4e44-bcef-1c84f202cd4b",
                    "6f865318-8362-4c47-a06b-136d9330ab9a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bfc08c49-95e1-4af6-b404-0a8849fca7f2",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed = { timezone: 'Europe/Berlin' };\nassert.strictEqual(formatDateTZ('Europe/Berlin', 'DSTART', moment('2018-07-02T15:48:05.000Z'), ed), 'DSTART;TZID=Europe/Berlin:20180702T174805');",
                  "err": {},
                  "uuid": "6502a106-42b9-436a-b094-bcd620e05ee2",
                  "parentUUID": "bfc08c49-95e1-4af6-b404-0a8849fca7f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z', {}), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "39312854-d3a0-4807-b450-5315bda4405a",
                  "parentUUID": "bfc08c49-95e1-4af6-b404-0a8849fca7f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z'), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "68b85acb-a1eb-4a35-b62b-2a09e5184209",
                  "parentUUID": "bfc08c49-95e1-4af6-b404-0a8849fca7f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6502a106-42b9-436a-b094-bcd620e05ee2",
                "39312854-d3a0-4807-b450-5315bda4405a",
                "68b85acb-a1eb-4a35-b62b-2a09e5184209"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "24d2e626-27ea-4a2a-beaa-1b0439f1c11f",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\\\ipsum', false), 'Lorem \\\\\\\\ipsum');",
                  "err": {},
                  "uuid": "cccdbf6e-6aaa-435c-a4ee-39d68deddb49",
                  "parentUUID": "24d2e626-27ea-4a2a-beaa-1b0439f1c11f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem ;ipsum', false), 'Lorem \\\\;ipsum');",
                  "err": {},
                  "uuid": "7c8bfe4e-b440-4755-bc9b-4df10ea40c65",
                  "parentUUID": "24d2e626-27ea-4a2a-beaa-1b0439f1c11f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem, ipsum', false), 'Lorem\\\\, ipsum');",
                  "err": {},
                  "uuid": "41a9cdd2-928e-4bf2-8064-81464876d3d1",
                  "parentUUID": "24d2e626-27ea-4a2a-beaa-1b0439f1c11f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\ripsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "36493599-cc78-44dc-9201-9cd695365bba",
                  "parentUUID": "24d2e626-27ea-4a2a-beaa-1b0439f1c11f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "636c3603-c701-4386-8ea8-6b9245349947",
                  "parentUUID": "24d2e626-27ea-4a2a-beaa-1b0439f1c11f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\r\\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "27ef7600-81e9-472a-9179-6bfbb9294a30",
                  "parentUUID": "24d2e626-27ea-4a2a-beaa-1b0439f1c11f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \" in text when inQuotes = true",
                  "fullTitle": "ICalTools escape() should escape \" in text when inQuotes = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum', true), 'Lorem \\\\\"ipsum');",
                  "err": {},
                  "uuid": "479a9504-c8c0-4e2c-96bd-1d5d4dc84238",
                  "parentUUID": "24d2e626-27ea-4a2a-beaa-1b0439f1c11f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not escape \" in text when inQuotes = false",
                  "fullTitle": "ICalTools escape() should not escape \" in text when inQuotes = false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum', false), 'Lorem \"ipsum');",
                  "err": {},
                  "uuid": "769ad0fb-7933-4c16-865d-31b3aa8eea4a",
                  "parentUUID": "24d2e626-27ea-4a2a-beaa-1b0439f1c11f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cccdbf6e-6aaa-435c-a4ee-39d68deddb49",
                "7c8bfe4e-b440-4755-bc9b-4df10ea40c65",
                "41a9cdd2-928e-4bf2-8064-81464876d3d1",
                "36493599-cc78-44dc-9201-9cd695365bba",
                "636c3603-c701-4386-8ea8-6b9245349947",
                "27ef7600-81e9-472a-9179-6bfbb9294a30",
                "479a9504-c8c0-4e2c-96bd-1d5d4dc84238",
                "769ad0fb-7933-4c16-865d-31b3aa8eea4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e193baea-7932-4aa7-9ed9-6403b2450021",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines('12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981'), '12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "4cbb4ee5-1c5e-4b24-bf3f-1327a814d0d8",
                  "parentUUID": "e193baea-7932-4aa7-9ed9-6403b2450021",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines('👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981'), '👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "31efc6a8-dc46-460e-a659-bb736a1ff182",
                  "parentUUID": "e193baea-7932-4aa7-9ed9-6403b2450021",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4cbb4ee5-1c5e-4b24-bf3f-1327a814d0d8",
                "31efc6a8-dc46-460e-a659-bb736a1ff182"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "71389b32-48e5-4201-a768-0bde46b6b623",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "51300108-7090-4e82-94d3-d805fc600c88",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "ed72a322-4042-42c0-be55-ed1cc1996fa1",
                      "parentUUID": "51300108-7090-4e82-94d3-d805fc600c88",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "2715c3e9-987b-4701-a327-542d700b3c68",
                      "parentUUID": "51300108-7090-4e82-94d3-d805fc600c88",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ed72a322-4042-42c0-be55-ed1cc1996fa1",
                    "2715c3e9-987b-4701-a327-542d700b3c68"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8116aa2f-58a1-421d-aa31-f658e0c640bb",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = '2021-03-28T13:15:23.587Z';\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "72faee7f-32c5-4b12-ab43-efaa739ab41c",
                      "parentUUID": "8116aa2f-58a1-421d-aa31-f658e0c640bb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = 'foo';\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "1c93633e-6b0d-4e17-baed-ea0c8e5b0815",
                      "parentUUID": "8116aa2f-58a1-421d-aa31-f658e0c640bb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "72faee7f-32c5-4b12-ab43-efaa739ab41c",
                    "1c93633e-6b0d-4e17-baed-ea0c8e5b0815"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "4e73979d-46fa-4d2e-87c1-0a4172a9a3a2",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = DateTime.now();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "bae448ea-df5a-46b7-a956-9b4dcf1f4908",
                      "parentUUID": "4e73979d-46fa-4d2e-87c1-0a4172a9a3a2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = DateTime.fromISO('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "aaae6714-f186-4aa9-8b45-e4466a3aedcc",
                      "parentUUID": "4e73979d-46fa-4d2e-87c1-0a4172a9a3a2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "bae448ea-df5a-46b7-a956-9b4dcf1f4908",
                    "aaae6714-f186-4aa9-8b45-e4466a3aedcc"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "86e2b457-99d1-42a6-8546-3fa15f85cced",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "480f7c05-8553-47f7-b82d-2846c4cbd073",
                      "parentUUID": "86e2b457-99d1-42a6-8546-3fa15f85cced",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment('foo', 'MM/DD/YYYY', true);\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "7ecd8971-6c7d-4990-92da-424b1a39334f",
                      "parentUUID": "86e2b457-99d1-42a6-8546-3fa15f85cced",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "480f7c05-8553-47f7-b82d-2846c4cbd073",
                    "7ecd8971-6c7d-4990-92da-424b1a39334f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d711654e-8e2c-40ce-a39b-d8c1cd2e0a7d",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "77a95c7a-9b23-49f8-a161-3226ba14b972",
                      "parentUUID": "d711654e-8e2c-40ce-a39b-d8c1cd2e0a7d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "31c4a3bb-f056-45ab-8339-054a5ed436d5",
                      "parentUUID": "d711654e-8e2c-40ce-a39b-d8c1cd2e0a7d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "77a95c7a-9b23-49f8-a161-3226ba14b972",
                    "31c4a3bb-f056-45ab-8339-054a5ed436d5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e9dd7f4d-e1f4-4682-b504-42abff26f1f4",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(date.toJSON()), date);",
                  "err": {},
                  "uuid": "3a7432e9-3c11-4efd-b352-aceb94c54dce",
                  "parentUUID": "e9dd7f4d-e1f4-4682-b504-42abff26f1f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(date), date);",
                  "err": {},
                  "uuid": "5144bcf8-8d1d-472c-8bf4-7c6e9bbf0e92",
                  "parentUUID": "e9dd7f4d-e1f4-4682-b504-42abff26f1f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(moment(date)), date);",
                  "err": {},
                  "uuid": "cae2041d-a504-4dbb-abf9-df077a31a99b",
                  "parentUUID": "e9dd7f4d-e1f4-4682-b504-42abff26f1f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment-timezone object",
                  "fullTitle": "ICalTools toDate() should work with moment-timezone object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(momentTz(date)), date);",
                  "err": {},
                  "uuid": "10e22d2f-e5ca-4fe3-b62c-f61c5a80c2ef",
                  "parentUUID": "e9dd7f4d-e1f4-4682-b504-42abff26f1f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(dayjs(date)), date);",
                  "err": {},
                  "uuid": "c7272675-15ff-4f66-8f5d-b19ebfa8cff3",
                  "parentUUID": "e9dd7f4d-e1f4-4682-b504-42abff26f1f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(DateTime.fromJSDate(date)), date);",
                  "err": {},
                  "uuid": "0ac3efc2-702f-476c-b0a9-a117d5151369",
                  "parentUUID": "e9dd7f4d-e1f4-4682-b504-42abff26f1f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a7432e9-3c11-4efd-b352-aceb94c54dce",
                "5144bcf8-8d1d-472c-8bf4-7c6e9bbf0e92",
                "cae2041d-a504-4dbb-abf9-df077a31a99b",
                "10e22d2f-e5ca-4fe3-b62c-f61c5a80c2ef",
                "c7272675-15ff-4f66-8f5d-b19ebfa8cff3",
                "0ac3efc2-702f-476c-b0a9-a117d5151369"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "241d3eda-61d8-4943-8e96-990a68bb8741",
              "title": "toDurationString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ICalTools toDurationString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    assert.strictEqual(toDurationString(0), 'PT0S');\n    assert.strictEqual(toDurationString(1), 'PT1S');\n    assert.strictEqual(toDurationString(60), 'PT1M');\n    assert.strictEqual(toDurationString(3600), 'PT1H');\n    assert.strictEqual(toDurationString(86400), 'P1D');\n    assert.strictEqual(toDurationString(-3600), '-PT1H');\n});",
                  "err": {},
                  "uuid": "25fccfc5-5ab5-4568-9a78-5e51c1d5e11a",
                  "parentUUID": "241d3eda-61d8-4943-8e96-990a68bb8741",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25fccfc5-5ab5-4568-9a78-5e51c1d5e11a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0b30b32f-9dc0-4837-a76c-1b3dab07359d",
          "title": "ical-generator Types",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/types.ts",
          "file": "/test/types.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stubs should be compatible with third party libraries",
              "fullTitle": "ical-generator Types stubs should be compatible with third party libraries",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(dayJsTest, 'day.js stub should be compatible');\nassert.ok(luxonTest, 'luxon stub should be compatible');\nassert.ok(momentTest, 'moment stub should be compatible');\nassert.ok(momentTimezoneTest, 'moment-timezone stub should be compatible');\nassert.ok(rruleTest, 'rrule stub should be compatible');",
              "err": {},
              "uuid": "e5b7e122-3ca5-4f24-bcc8-6e7e9babea78",
              "parentUUID": "0b30b32f-9dc0-4837-a76c-1b3dab07359d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calendar data should be compatible with calendar json data",
              "fullTitle": "ical-generator Types calendar data should be compatible with calendar json data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(attendeeJson, 'attendee json data should be compatible');\nassert.ok(calendarJson, 'calendar json data should be compatible');\nassert.ok(categoryJson, 'category json data should be compatible');\nassert.ok(eventJson, 'event json data should be compatible');",
              "err": {},
              "uuid": "89586558-7904-4380-99e8-169eee63e997",
              "parentUUID": "0b30b32f-9dc0-4837-a76c-1b3dab07359d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e5b7e122-3ca5-4f24-bcc8-6e7e9babea78",
            "89586558-7904-4380-99e8-169eee63e997"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}