{
  "stats": {
    "suites": 131,
    "tests": 447,
    "passes": 445,
    "pending": 2,
    "failures": 0,
    "start": "2024-11-12T10:22:06.866Z",
    "end": "2024-11-12T10:22:07.024Z",
    "duration": 158,
    "testsRegistered": 447,
    "passPercent": 100,
    "pendingPercent": 0.44742729306487694,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "27814627-1942-4df8-8282-ca63243a1f67",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e19ef6ea-ce80-4911-bd52-b6b637f46266",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bbc19b7d-825a-4b35-904f-85fa9f829c80",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({type:ICalAlarmType.display},null)},/`event`/)",
                  "err": {},
                  "uuid": "5f94ea33-464c-46e4-911f-508aa4aaa4e6",
                  "parentUUID": "bbc19b7d-825a-4b35-904f-85fa9f829c80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({unknown:true,type:ICalAlarmType.display},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),\"display\")",
                  "err": {},
                  "uuid": "a5a8703e-d5d7-4269-9418-4f927bac991f",
                  "parentUUID": "bbc19b7d-825a-4b35-904f-85fa9f829c80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f94ea33-464c-46e4-911f-508aa4aaa4e6",
                "a5a8703e-d5d7-4269-9418-4f927bac991f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac07cfac-4998-42c1-a306-91897b7da745",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.type(ICalAlarmType.display))",
                  "err": {},
                  "uuid": "d814f554-d0c1-4437-adce-aca77f38f835",
                  "parentUUID": "ac07cfac-4998-42c1-a306-91897b7da745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),\"display\");a.type(ICalAlarmType.audio);assert.strictEqual(a.type(),\"audio\")",
                  "err": {},
                  "uuid": "df049a31-901e-4ee0-ae05-3c4b522ac7fe",
                  "parentUUID": "ac07cfac-4998-42c1-a306-91897b7da745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.type(\"BANANA\")},/`type`/);assert.throws(function(){a.type(null)},/`type`/)",
                  "err": {},
                  "uuid": "124701ac-2b92-4768-ade0-eedcf48d6994",
                  "parentUUID": "ac07cfac-4998-42c1-a306-91897b7da745",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"ACTION:DISPLAY\")>-1)",
                  "err": {},
                  "uuid": "59de4ea8-7e56-4142-9c51-eb4f140b66ec",
                  "parentUUID": "ac07cfac-4998-42c1-a306-91897b7da745",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d814f554-d0c1-4437-adce-aca77f38f835",
                "df049a31-901e-4ee0-ae05-3c4b522ac7fe",
                "124701ac-2b92-4768-ade0-eedcf48d6994",
                "59de4ea8-7e56-4142-9c51-eb4f140b66ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "88cb5123-41f9-47bc-a094-7782ad3a6855",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.trigger(60*10))",
                  "err": {},
                  "uuid": "e058bddd-5565-4c58-be53-c138bd52b3e9",
                  "parentUUID": "88cb5123-41f9-47bc-a094-7782ad3a6855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;assert.strictEqual(a.trigger(),600);assert.strictEqual(a.triggerAfter(),-600);a.trigger(300);assert.strictEqual(a.trigger(),300);assert.strictEqual(a.triggerAfter(),-300);a.trigger(now);const dateResult=a.trigger();assert.deepStrictEqual(dateResult,now)",
                  "err": {},
                  "uuid": "27ae12e5-8610-4c4d-8aa3-3c7b34d93895",
                  "parentUUID": "88cb5123-41f9-47bc-a094-7782ad3a6855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.trigger(Infinity)},/`trigger`/);assert.throws(function(){a.trigger(\"hi\")},/`trigger`/);assert.throws(function(){a.trigger(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "9dfbb2ba-2c13-47cd-9789-815e64424186",
                  "parentUUID": "88cb5123-41f9-47bc-a094-7782ad3a6855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(new Date);assert.ok(a.trigger()instanceof Date)",
                  "err": {},
                  "uuid": "cdde6154-ef46-4de7-949c-30ebf7a4eab8",
                  "parentUUID": "88cb5123-41f9-47bc-a094-7782ad3a6855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(moment());assert.ok(moment.isMoment(a.trigger()))",
                  "err": {},
                  "uuid": "ee934203-520f-4fc8-b1c8-4d8f0e627e35",
                  "parentUUID": "88cb5123-41f9-47bc-a094-7782ad3a6855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(2*60);assert.strictEqual(a.trigger(),120)",
                  "err": {},
                  "uuid": "ab22b13e-0eb6-4962-80e3-40dac62257ae",
                  "parentUUID": "88cb5123-41f9-47bc-a094-7782ad3a6855",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"2015-02-01T13:38:45.000Z\");const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"TRIGGER:-PT10M\"));a.trigger(trigger);assert.ok(a.toString().includes(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\"))",
                  "err": {},
                  "uuid": "8a92b824-3ce9-4820-821d-93701e9ba081",
                  "parentUUID": "88cb5123-41f9-47bc-a094-7782ad3a6855",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e058bddd-5565-4c58-be53-c138bd52b3e9",
                "27ae12e5-8610-4c4d-8aa3-3c7b34d93895",
                "9dfbb2ba-2c13-47cd-9789-815e64424186",
                "cdde6154-ef46-4de7-949c-30ebf7a4eab8",
                "ee934203-520f-4fc8-b1c8-4d8f0e627e35",
                "ab22b13e-0eb6-4962-80e3-40dac62257ae",
                "8a92b824-3ce9-4820-821d-93701e9ba081"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13585a36-c2a1-4667-baa4-40b513f3b1b6",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.triggerAfter(60*10))",
                  "err": {},
                  "uuid": "2b107098-a3fc-4632-886b-ad1fcbd3b93d",
                  "parentUUID": "13585a36-c2a1-4667-baa4-40b513f3b1b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar)).triggerAfter(300);assert.strictEqual(a.triggerAfter(),300);assert.strictEqual(a.trigger(),-300)",
                  "err": {},
                  "uuid": "b7f998f9-830b-4510-a2ef-b860889f409d",
                  "parentUUID": "13585a36-c2a1-4667-baa4-40b513f3b1b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.triggerAfter(120);assert.strictEqual(a.trigger(),-120)",
                  "err": {},
                  "uuid": "58dbdb46-2281-4571-b7fe-91a21ddfc8d7",
                  "parentUUID": "13585a36-c2a1-4667-baa4-40b513f3b1b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.triggerAfter(Infinity)},/`trigger`/);assert.throws(function(){a.triggerAfter(\"hi\")},/`trigger`/);assert.throws(function(){a.triggerAfter(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "288fcc4b-51f5-4c6f-8b29-18e98ff9f94c",
                  "parentUUID": "13585a36-c2a1-4667-baa4-40b513f3b1b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"20150201T133845Z\");const a=new ICalAlarm({triggerAfter:600},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"TRIGGER;RELATED=END:PT10M\")>-1);a.triggerAfter(trigger);assert.ok(a.toString().indexOf(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\")>-1)",
                  "err": {},
                  "uuid": "3d812ef4-2c16-4229-b3e3-2d45e88716de",
                  "parentUUID": "13585a36-c2a1-4667-baa4-40b513f3b1b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b107098-a3fc-4632-886b-ad1fcbd3b93d",
                "b7f998f9-830b-4510-a2ef-b860889f409d",
                "58dbdb46-2281-4571-b7fe-91a21ddfc8d7",
                "288fcc4b-51f5-4c6f-8b29-18e98ff9f94c",
                "3d812ef4-2c16-4229-b3e3-2d45e88716de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae9915c1-c33e-4e10-a1c0-3e5bb82c2b1b",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.triggerBefore(60*10))",
                  "err": {},
                  "uuid": "9783cce8-9fbd-4ed5-82e6-297eae250e69",
                  "parentUUID": "ae9915c1-c33e-4e10-a1c0-3e5bb82c2b1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;assert.strictEqual(a.triggerBefore(),600);a.trigger(300);assert.strictEqual(a.triggerBefore(),300);a.trigger(now);const dateResult=a.triggerBefore();assert.deepStrictEqual(dateResult,now)",
                  "err": {},
                  "uuid": "5fe39fd6-bf3e-440c-ae03-508397cb9647",
                  "parentUUID": "ae9915c1-c33e-4e10-a1c0-3e5bb82c2b1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.triggerBefore(Infinity)},/`trigger`/);assert.throws(function(){a.triggerBefore(\"hi\")},/`trigger`/);assert.throws(function(){a.triggerBefore(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "b8fd3912-49a2-4387-aba7-60efcd8ead85",
                  "parentUUID": "ae9915c1-c33e-4e10-a1c0-3e5bb82c2b1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;a.triggerBefore(now);assert.deepStrictEqual(a.trigger(),now)",
                  "err": {},
                  "uuid": "d9cb9948-1cac-4493-b356-c063f7b0fd07",
                  "parentUUID": "ae9915c1-c33e-4e10-a1c0-3e5bb82c2b1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({triggerBefore:moment()},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(moment.isMoment(a.trigger()))",
                  "err": {},
                  "uuid": "4091e839-f585-488a-a917-9de0bf8bfb67",
                  "parentUUID": "ae9915c1-c33e-4e10-a1c0-3e5bb82c2b1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.triggerBefore(2*60);assert.strictEqual(a.trigger(),120)",
                  "err": {},
                  "uuid": "e22a96ea-0c6c-45cd-8f86-66a38e242a96",
                  "parentUUID": "ae9915c1-c33e-4e10-a1c0-3e5bb82c2b1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"2015-02-01T13:38:45.000Z\");const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"TRIGGER:-PT10M\")>-1);a.triggerBefore(trigger);assert.ok(a.toString().indexOf(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\")>-1)",
                  "err": {},
                  "uuid": "a1e78195-3f9c-43a9-baf2-42b68ab69312",
                  "parentUUID": "ae9915c1-c33e-4e10-a1c0-3e5bb82c2b1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9783cce8-9fbd-4ed5-82e6-297eae250e69",
                "5fe39fd6-bf3e-440c-ae03-508397cb9647",
                "b8fd3912-49a2-4387-aba7-60efcd8ead85",
                "d9cb9948-1cac-4493-b356-c063f7b0fd07",
                "4091e839-f585-488a-a917-9de0bf8bfb67",
                "e22a96ea-0c6c-45cd-8f86-66a38e242a96",
                "a1e78195-3f9c-43a9-baf2-42b68ab69312"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "337b3890-bfc7-419c-bc84-83995b464d84",
              "title": "relatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm relatesTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.relatesTo(null));assert.deepStrictEqual(a,a.relatesTo(ICalAlarmRelatesTo.end))",
                  "err": {},
                  "uuid": "87224ac8-f75c-46e5-a42c-c724169cf05e",
                  "parentUUID": "337b3890-bfc7-419c-bc84-83995b464d84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm relatesTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.relatesTo(ICalAlarmRelatesTo.end);assert.strictEqual(a.relatesTo(),ICalAlarmRelatesTo.end);a.relatesTo(null);assert.strictEqual(a.relatesTo(),null)",
                  "err": {},
                  "uuid": "6176e399-dc64-49d1-b43b-dafd54b0b092",
                  "parentUUID": "337b3890-bfc7-419c-bc84-83995b464d84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw if value is not `null`, \"START\" or \"END\"",
                  "fullTitle": "ical-generator Alarm relatesTo() should throw if value is not `null`, \"START\" or \"END\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.relatesTo(\"hi\")},/`relatesTo`/);assert.throws(function(){a.relatesTo(true)},/`relatesTo`/);assert.throws(function(){a.relatesTo(Infinity)},/`relatesTo`/)",
                  "err": {},
                  "uuid": "4ed00b6c-d3c6-4273-878b-5cc5bbc4456e",
                  "parentUUID": "337b3890-bfc7-419c-bc84-83995b464d84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change RELATED",
                  "fullTitle": "ical-generator Alarm relatesTo() should change RELATED",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"RELATED=START\")===-1);a.relatesTo(ICalAlarmRelatesTo.start);assert.ok(a.toString().indexOf(\"RELATED=START\")>-1);a.relatesTo(ICalAlarmRelatesTo.end);assert.ok(a.toString().indexOf(\"RELATED=END\")>-1)",
                  "err": {},
                  "uuid": "58fb7dec-432c-44a6-bbc6-4f94402fe603",
                  "parentUUID": "337b3890-bfc7-419c-bc84-83995b464d84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87224ac8-f75c-46e5-a42c-c724169cf05e",
                "6176e399-dc64-49d1-b43b-dafd54b0b092",
                "4ed00b6c-d3c6-4273-878b-5cc5bbc4456e",
                "58fb7dec-432c-44a6-bbc6-4f94402fe603"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1ef5d733-58e2-4a9d-ab04-2582387f0524",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.repeat({times:4,interval:60}))",
                  "err": {},
                  "uuid": "7723e795-3e33-4b28-a5ec-e5da667d6892",
                  "parentUUID": "1ef5d733-58e2-4a9d-ab04-2582387f0524",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.repeat(),null);a.repeat({times:4,interval:60});assert.deepStrictEqual(a.repeat(),{times:4,interval:60})",
                  "err": {},
                  "uuid": "002759ff-a598-4f85-b4fd-7b657cbc317f",
                  "parentUUID": "1ef5d733-58e2-4a9d-ab04-2582387f0524",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.repeat({times:Infinity,interval:60})},/`repeat.times`/);assert.throws(function(){a.repeat({times:\"hi\",interval:60})},/`repeat.times`/);assert.throws(function(){a.repeat({times:true,interval:60})},/`repeat.times`/);assert.throws(function(){a.repeat({times:4,interval:Infinity})},/`repeat.interval`/);assert.throws(function(){a.repeat({times:4,interval:\"hi\"})},/`repeat.interval`/);assert.throws(function(){a.repeat({times:4,interval:true})},/`repeat.interval`/)",
                  "err": {},
                  "uuid": "eb244f06-65a5-408d-8f24-0b96648d6bd6",
                  "parentUUID": "1ef5d733-58e2-4a9d-ab04-2582387f0524",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({trigger:300,repeat:{times:42,interval:90}},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"REPEAT:42\"));assert.ok(a.toString().includes(\"DURATION:PT1M30S\"));a.repeat(null);assert.ok(!a.toString().includes(\"REPEAT:42\"));assert.ok(!a.toString().includes(\"DURATION:PT1M30S\"))",
                  "err": {},
                  "uuid": "619b8fc6-d1a0-4eca-b89e-194371491c68",
                  "parentUUID": "1ef5d733-58e2-4a9d-ab04-2582387f0524",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({trigger:300,repeat:{times:4,interval:null}},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat.interval`/)",
                  "err": {},
                  "uuid": "87ba1d27-cad5-4e9a-a18a-6ed75c9d30be",
                  "parentUUID": "1ef5d733-58e2-4a9d-ab04-2582387f0524",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({trigger:300,repeat:{times:null,interval:60}},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat.times`/)",
                  "err": {},
                  "uuid": "85e9e59b-9065-4c0a-b2b9-7c9fad16575b",
                  "parentUUID": "1ef5d733-58e2-4a9d-ab04-2582387f0524",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is of wrong type",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is of wrong type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({trigger:300,repeat:true},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat` is not correct, must be an object!/)",
                  "err": {},
                  "uuid": "02610915-a8fc-45a6-92b5-9dc96a08ce51",
                  "parentUUID": "1ef5d733-58e2-4a9d-ab04-2582387f0524",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7723e795-3e33-4b28-a5ec-e5da667d6892",
                "002759ff-a598-4f85-b4fd-7b657cbc317f",
                "eb244f06-65a5-408d-8f24-0b96648d6bd6",
                "619b8fc6-d1a0-4eca-b89e-194371491c68",
                "87ba1d27-cad5-4e9a-a18a-6ed75c9d30be",
                "85e9e59b-9065-4c0a-b2b9-7c9fad16575b",
                "02610915-a8fc-45a6-92b5-9dc96a08ce51"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b69f8809-cbd0-4fa7-9440-b8e0de66e44b",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.attach(null));assert.deepStrictEqual(a,a.attach(\"https://sebbo.net/beep.aud\"))",
                  "err": {},
                  "uuid": "d5d55a83-4ebb-45c8-b782-c2504b6bc923",
                  "parentUUID": "b69f8809-cbd0-4fa7-9440-b8e0de66e44b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t={uri:\"https://example.com/alarm.aud\",mime:\"audio/basic\"};const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.attach(),null);a.attach(t);assert.deepStrictEqual(a.attach(),t);a.attach(\"https://www.example.com/beep.aud\");assert.deepStrictEqual(a.attach(),{uri:\"https://www.example.com/beep.aud\",mime:null});a.attach({uri:\"https://www.example.com/beep.aud\"});assert.deepStrictEqual(a.attach(),{uri:\"https://www.example.com/beep.aud\",mime:null});a.attach(null);assert.strictEqual(a.attach(),null)",
                  "err": {},
                  "uuid": "eedeb19d-d5e3-4ea5-ab3f-be2384cffdad",
                  "parentUUID": "b69f8809-cbd0-4fa7-9440-b8e0de66e44b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.attach({mime:\"audio/basic\"})},/`attach.uri`/)",
                  "err": {},
                  "uuid": "4c5c3850-8cd9-43a1-98d8-ec84dc5dacd4",
                  "parentUUID": "b69f8809-cbd0-4fa7-9440-b8e0de66e44b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.attach(Infinity)},/`attachment`/)",
                  "err": {},
                  "uuid": "895558df-485e-4b6b-b249-37d1e530c6d4",
                  "parentUUID": "b69f8809-cbd0-4fa7-9440-b8e0de66e44b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.audio},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nATTACH;VALUE=URI:Basso\")>-1);a.attach(\"https://example.com/beep.aud\");assert.ok(a.toString().indexOf(\"\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud\")>-1);a.attach({uri:\"https://example.com/beep.aud\",mime:\"audio/basic\"});assert.ok(a.toString().indexOf(\"\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud\")>-1)",
                  "err": {},
                  "uuid": "f82ddb2d-a14c-4053-8467-95a27f64544a",
                  "parentUUID": "b69f8809-cbd0-4fa7-9440-b8e0de66e44b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5d55a83-4ebb-45c8-b782-c2504b6bc923",
                "eedeb19d-d5e3-4ea5-ab3f-be2384cffdad",
                "4c5c3850-8cd9-43a1-98d8-ec84dc5dacd4",
                "895558df-485e-4b6b-b249-37d1e530c6d4",
                "f82ddb2d-a14c-4053-8467-95a27f64544a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3625a2c1-7752-4569-94ea-81f73e78e162",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.description(null));assert.deepStrictEqual(a,a.description(\"Hey Ho!\"))",
                  "err": {},
                  "uuid": "644eee60-147e-41e9-8416-dcdaf757c289",
                  "parentUUID": "3625a2c1-7752-4569-94ea-81f73e78e162",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.description(),null);a.description(\"blablabla\");assert.deepStrictEqual(a.description(),\"blablabla\");a.description(null);assert.deepStrictEqual(a.description(),null)",
                  "err": {},
                  "uuid": "8cd4ce82-66b8-4a4b-8c58-837d8686c3a7",
                  "parentUUID": "3625a2c1-7752-4569-94ea-81f73e78e162",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({description:\"Huibuh!\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nDESCRIPTION:Huibuh\")>-1)",
                  "err": {},
                  "uuid": "70fa7dcb-b50e-459b-a56f-c7ffb0257c09",
                  "parentUUID": "3625a2c1-7752-4569-94ea-81f73e78e162",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({description:\"Example Event\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nDESCRIPTION:Example Event\")>-1)",
                  "err": {},
                  "uuid": "aa5b6bd9-13f5-4e4a-962b-a7494c7d5de8",
                  "parentUUID": "3625a2c1-7752-4569-94ea-81f73e78e162",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "644eee60-147e-41e9-8416-dcdaf757c289",
                "8cd4ce82-66b8-4a4b-8c58-837d8686c3a7",
                "70fa7dcb-b50e-459b-a56f-c7ffb0257c09",
                "aa5b6bd9-13f5-4e4a-962b-a7494c7d5de8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ef91928-5573-4448-ae3c-9e7e5afbb13a",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.summary(null));assert.deepStrictEqual(a,a.summary(\"Hey Ho!\"))",
                  "err": {},
                  "uuid": "c788e8a3-3d7c-4b3f-96c1-8f4a155a2879",
                  "parentUUID": "6ef91928-5573-4448-ae3c-9e7e5afbb13a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.summary(),null);a.summary(\"blablabla\");assert.deepStrictEqual(a.summary(),\"blablabla\");a.summary(null);assert.deepStrictEqual(a.summary(),null)",
                  "err": {},
                  "uuid": "9f29caa5-01ee-41c3-b13a-fd9636ee563b",
                  "parentUUID": "6ef91928-5573-4448-ae3c-9e7e5afbb13a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm summary() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.email,summary:\"Huibuh!\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nSUMMARY:Huibuh\")>-1)",
                  "err": {},
                  "uuid": "19525f18-1c04-47a6-ae42-b343b61b2b59",
                  "parentUUID": "6ef91928-5573-4448-ae3c-9e7e5afbb13a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm summary() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.email},new ICalEvent({start:new Date,summary:\"Example Event\"},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nSUMMARY:Example Event\")>-1)",
                  "err": {},
                  "uuid": "3a65c0d8-3328-430f-a5b0-a521e7c90e1a",
                  "parentUUID": "6ef91928-5573-4448-ae3c-9e7e5afbb13a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c788e8a3-3d7c-4b3f-96c1-8f4a155a2879",
                "9f29caa5-01ee-41c3-b13a-fd9636ee563b",
                "19525f18-1c04-47a6-ae42-b343b61b2b59",
                "3a65c0d8-3328-430f-a5b0-a521e7c90e1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa7ce557-51c0-4a6f-bf5d-68c3c90ea883",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Alarm createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=new ICalAttendee({email:\"mail@example.com\"},alarm);assert.strictEqual(alarm.createAttendee(attendee),attendee,\"createAttendee returns attendee\");assert.deepStrictEqual(alarm.attendees()[0],attendee,\"attendee pushed\")",
                  "err": {},
                  "uuid": "ca7eb15b-66dd-4d40-9104-e5d35def4c51",
                  "parentUUID": "aa7ce557-51c0-4a6f-bf5d-68c3c90ea883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Alarm createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});;assert.ok(alarm.createAttendee({email:\"mail@example.com\"})instanceof ICalAttendee);assert.strictEqual(alarm.attendees.length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "819255ef-4da9-48a5-aa50-dddc22c60f70",
                  "parentUUID": "aa7ce557-51c0-4a6f-bf5d-68c3c90ea883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});;const attendee=alarm.createAttendee(\"Zac <zac@example.com>\");assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(alarm.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "ef636c49-c4f5-4780-b85a-fd23d2593441",
                  "parentUUID": "aa7ce557-51c0-4a6f-bf5d-68c3c90ea883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Alarm createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});;assert.throws(function(){alarm.createAttendee(\"foo bar\")},/isn't formated correctly/)",
                  "err": {},
                  "uuid": "55ec34a9-fc65-4b86-b86b-0dbb46b9f423",
                  "parentUUID": "aa7ce557-51c0-4a6f-bf5d-68c3c90ea883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=alarm.createAttendee({name:\"Zac\",email:\"zac@example.com\"});assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(alarm.attendees().length,1,\"attendee pushed\");assert.ok(alarm.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;CN=\"Zac\":MAILTO:zac@example.com'))",
                  "err": {},
                  "uuid": "67b8150d-a597-438f-9423-7204d4c6954a",
                  "parentUUID": "aa7ce557-51c0-4a6f-bf5d-68c3c90ea883",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca7eb15b-66dd-4d40-9104-e5d35def4c51",
                "819255ef-4da9-48a5-aa50-dddc22c60f70",
                "ef636c49-c4f5-4780-b85a-fd23d2593441",
                "55ec34a9-fc65-4b86-b86b-0dbb46b9f423",
                "67b8150d-a597-438f-9423-7204d4c6954a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "763d2afd-243d-4be6-9b4f-ffe619230f2e",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Alarm attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});assert.strictEqual(alarm.attendees().length,0);const attendee=alarm.createAttendee({email:\"mail@example.com\"});assert.strictEqual(alarm.attendees().length,1);assert.deepStrictEqual(alarm.attendees()[0],attendee)",
                  "err": {},
                  "uuid": "f4ea9f8f-1f3c-49b6-b59a-83f125186220",
                  "parentUUID": "763d2afd-243d-4be6-9b4f-ffe619230f2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Alarm attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const foo=alarm.attendees([{name:\"Person A\",email:\"a@example.com\"},{name:\"Person B\",email:\"b@example.com\"}]);assert.strictEqual(alarm.attendees().length,2);assert.deepStrictEqual(foo,alarm)",
                  "err": {},
                  "uuid": "1688cb33-acfc-41e0-a437-d08f2d1af389",
                  "parentUUID": "763d2afd-243d-4be6-9b4f-ffe619230f2e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4ea9f8f-1f3c-49b6-b59a-83f125186220",
                "1688cb33-acfc-41e0-a437-d08f2d1af389"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5b8d861-fee9-4dfe-a7ba-41b37188b5bc",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "22dbe832-ccbb-48e4-a52f-c6a3cb46b126",
                  "parentUUID": "f5b8d861-fee9-4dfe-a7ba-41b37188b5bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22dbe832-ccbb-48e4-a52f-c6a3cb46b126"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a42d5c90-9118-424f-86c5-430770bfbba1",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.type(ICalAlarmType.display);a.trigger(120);assert.deepStrictEqual(a.toJSON(),{attach:null,attendees:[],description:null,relatesTo:null,interval:null,repeat:null,summary:null,trigger:120,type:\"display\",x:[]})",
                  "err": {},
                  "uuid": "8d9f15cf-2a59-4f77-8445-547a8bd6a941",
                  "parentUUID": "a42d5c90-9118-424f-86c5-430770bfbba1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));new ICalAlarm(a.toJSON(),new ICalEvent({start:new Date},new ICalCalendar))",
                  "err": {},
                  "uuid": "2511b090-243f-4617-b0aa-d4fc21805c7f",
                  "parentUUID": "a42d5c90-9118-424f-86c5-430770bfbba1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d9f15cf-2a59-4f77-8445-547a8bd6a941",
                "2511b090-243f-4617-b0aa-d4fc21805c7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0b76e8c2-5f9e-4edc-bfbc-d90b2f9844f3",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "acd60862-8f8a-49bf-9b69-fcc62529b7fa",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={name:\"John Doe\",email:\"john@example.org\",mailto:\"john+calendar@example.org\",sentBy:null,status:ICalAttendeeStatus.ACCEPTED,role:ICalAttendeeRole.REQ,rsvp:false,type:ICalAttendeeType.INDIVIDUAL,delegatedTo:null,delegatedFrom:null,x:[]};const event=new ICalAttendee(data,new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(event.toJSON(),data)",
                  "err": {},
                  "uuid": "756011cf-1020-42f7-8125-d81f75f67b10",
                  "parentUUID": "acd60862-8f8a-49bf-9b69-fcc62529b7fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAttendee({email:\"foo@bar.com\"})},/`event`/)",
                  "err": {},
                  "uuid": "acea97ee-70a5-4da9-8d36-bc348b83f106",
                  "parentUUID": "acd60862-8f8a-49bf-9b69-fcc62529b7fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee constructor() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAttendee({name:\"Testuser\"},new ICalEvent({start:new Date},new ICalCalendar))},/`email`/)",
                  "err": {},
                  "uuid": "ef8a0bbf-1f6b-473e-9363-b70a089f0666",
                  "parentUUID": "acd60862-8f8a-49bf-9b69-fcc62529b7fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "756011cf-1020-42f7-8125-d81f75f67b10",
                "acea97ee-70a5-4da9-8d36-bc348b83f106",
                "ef8a0bbf-1f6b-473e-9363-b70a089f0666"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d76f70ba-6c06-4838-aeb5-cc26cb2f35ad",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.name(),null);a.name(\"Sebastian\");assert.strictEqual(a.name(),\"Sebastian\")",
                  "err": {},
                  "uuid": "c9bb932c-0c35-4ab8-8508-b063c6a4616b",
                  "parentUUID": "d76f70ba-6c06-4838-aeb5-cc26cb2f35ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.name(null));assert.deepStrictEqual(a,a.name(\"Sebastian\"))",
                  "err": {},
                  "uuid": "4fc8ac13-5bfa-430e-9f6a-b5573a58736f",
                  "parentUUID": "d76f70ba-6c06-4838-aeb5-cc26cb2f35ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.name(\"Sebastian\");assert.strictEqual(a.name(),\"Sebastian\");a.name(null);assert.strictEqual(a.name(),null)",
                  "err": {},
                  "uuid": "780fe4a7-5dfb-4dbf-ae11-63647d48b271",
                  "parentUUID": "d76f70ba-6c06-4838-aeb5-cc26cb2f35ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9bb932c-0c35-4ab8-8508-b063c6a4616b",
                "4fc8ac13-5bfa-430e-9f6a-b5573a58736f",
                "780fe4a7-5dfb-4dbf-ae11-63647d48b271"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9f96560f-90a8-4c7b-b7c4-dc787140d393",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).email(\"foo@example.com\");assert.strictEqual(a.email(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "7d98a46c-131c-4a1a-8513-04b623cbb217",
                  "parentUUID": "9f96560f-90a8-4c7b-b7c4-dc787140d393",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.email(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "94866dcc-0799-4ec9-b440-914225d3741b",
                  "parentUUID": "9f96560f-90a8-4c7b-b7c4-dc787140d393",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"mail@example.com\")>-1)",
                  "err": {},
                  "uuid": "49dd9940-cc5d-46e2-a4f7-ad3763b7ff4f",
                  "parentUUID": "9f96560f-90a8-4c7b-b7c4-dc787140d393",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d98a46c-131c-4a1a-8513-04b623cbb217",
                "94866dcc-0799-4ec9-b440-914225d3741b",
                "49dd9940-cc5d-46e2-a4f7-ad3763b7ff4f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52849937-70c3-49bb-a60d-914f6476372d",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.mailto(),null);a.mailto(\"foo@example.com\");assert.strictEqual(a.mailto(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "4d017668-1494-4cbf-892e-6937d3d3a9cd",
                  "parentUUID": "52849937-70c3-49bb-a60d-914f6476372d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.mailto(null));assert.deepStrictEqual(a,a.mailto(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "703e2a0a-b875-4218-9c53-6821c7f06b86",
                  "parentUUID": "52849937-70c3-49bb-a60d-914f6476372d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.mailto(\"mail2@example2.com\");assert.ok(a.toString().indexOf(\"EMAIL=mail@example.com\")>-1&&a.toString().indexOf(\"MAILTO:mail2@example2.com\")>-1)",
                  "err": {},
                  "uuid": "16bc12fb-ecfb-4fda-8f31-2b2fa8567647",
                  "parentUUID": "52849937-70c3-49bb-a60d-914f6476372d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d017668-1494-4cbf-892e-6937d3d3a9cd",
                "703e2a0a-b875-4218-9c53-6821c7f06b86",
                "16bc12fb-ecfb-4fda-8f31-2b2fa8567647"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "873d782d-2f3b-462c-aa01-adcc394a14ad",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).sentBy(\"foo@example.com\");assert.strictEqual(a.sentBy(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "abe80a7e-394a-4a1b-9712-52ba63f19529",
                  "parentUUID": "873d782d-2f3b-462c-aa01-adcc394a14ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.sentBy(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "9b46e05f-9a75-4057-b865-532c3d2c9cae",
                  "parentUUID": "873d782d-2f3b-462c-aa01-adcc394a14ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\",sentBy:\"bar@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"bar@example.com\"))",
                  "err": {},
                  "uuid": "1bc2bcf0-5823-4493-aace-3054052bc6f8",
                  "parentUUID": "873d782d-2f3b-462c-aa01-adcc394a14ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abe80a7e-394a-4a1b-9712-52ba63f19529",
                "9b46e05f-9a75-4057-b865-532c3d2c9cae",
                "1bc2bcf0-5823-4493-aace-3054052bc6f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b79cf442-8625-4d93-808e-44f0b194e42f",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.role(ICalAttendeeRole.REQ))",
                  "err": {},
                  "uuid": "8227aa5d-7026-4b2b-b264-310164f71324",
                  "parentUUID": "b79cf442-8625-4d93-808e-44f0b194e42f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).role(ICalAttendeeRole.REQ);assert.strictEqual(a.role(),\"REQ-PARTICIPANT\")",
                  "err": {},
                  "uuid": "234fe9d1-2fe5-4232-83d9-afcaa643aeae",
                  "parentUUID": "b79cf442-8625-4d93-808e-44f0b194e42f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.role(\"\")},/Input must be one of the following: CHAIR, REQ-PARTICIPANT, OPT-PARTICIPANT, NON-PARTICIPANT/)",
                  "err": {},
                  "uuid": "037b9615-546e-41fa-85b3-8cef4f75689f",
                  "parentUUID": "b79cf442-8625-4d93-808e-44f0b194e42f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.role(\"COOKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "b14bed81-57f4-483f-b038-ab6397659f1d",
                  "parentUUID": "b79cf442-8625-4d93-808e-44f0b194e42f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",role:ICalAttendeeRole.NON},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"NON-PARTICIPANT\")>-1)",
                  "err": {},
                  "uuid": "c9e8a92d-c37e-42f2-8928-b85992e7b308",
                  "parentUUID": "b79cf442-8625-4d93-808e-44f0b194e42f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8227aa5d-7026-4b2b-b264-310164f71324",
                "234fe9d1-2fe5-4232-83d9-afcaa643aeae",
                "037b9615-546e-41fa-85b3-8cef4f75689f",
                "b14bed81-57f4-483f-b038-ab6397659f1d",
                "c9e8a92d-c37e-42f2-8928-b85992e7b308"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb5a1222-0645-4ea0-b53c-1045b77cc002",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.rsvp(null));assert.deepStrictEqual(a,a.rsvp(true))",
                  "err": {},
                  "uuid": "b95c816a-3465-47ab-b962-3fef17feaf3c",
                  "parentUUID": "fb5a1222-0645-4ea0-b53c-1045b77cc002",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.rsvp(true);assert.strictEqual(a.rsvp(),true);a.rsvp(false);assert.strictEqual(a.rsvp(),false)",
                  "err": {},
                  "uuid": "a085aaf2-b444-400f-9f4e-4d7cb88be5f6",
                  "parentUUID": "fb5a1222-0645-4ea0-b53c-1045b77cc002",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.rsvp(),null);a.rsvp(false);assert.strictEqual(a.rsvp(),false);a.rsvp(null);assert.strictEqual(a.rsvp(),null)",
                  "err": {},
                  "uuid": "6a95bac1-02e2-4784-bc26-108aa1b272a4",
                  "parentUUID": "fb5a1222-0645-4ea0-b53c-1045b77cc002",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",rsvp:true},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\";RSVP=TRUE\")>-1)",
                  "err": {},
                  "uuid": "8bfdc100-3948-430b-82a2-bd7e47fc280d",
                  "parentUUID": "fb5a1222-0645-4ea0-b53c-1045b77cc002",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b95c816a-3465-47ab-b962-3fef17feaf3c",
                "a085aaf2-b444-400f-9f4e-4d7cb88be5f6",
                "6a95bac1-02e2-4784-bc26-108aa1b272a4",
                "8bfdc100-3948-430b-82a2-bd7e47fc280d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4cfc5e59-91e5-4845-a99d-36f6776dbfed",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.status(null));assert.deepStrictEqual(a,a.status(ICalAttendeeStatus.ACCEPTED))",
                  "err": {},
                  "uuid": "82d3e606-8cd2-4edd-8cfd-9ab9e1f56065",
                  "parentUUID": "4cfc5e59-91e5-4845-a99d-36f6776dbfed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.status(),null);a.status(ICalAttendeeStatus.ACCEPTED);assert.strictEqual(a.status(),\"ACCEPTED\");a.status(null);assert.strictEqual(a.status(),null)",
                  "err": {},
                  "uuid": "3118f971-c9f3-498b-afc5-25c295223da5",
                  "parentUUID": "4cfc5e59-91e5-4845-a99d-36f6776dbfed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.status(\"DRINKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "f76c58bc-c5b7-4511-b2d3-713f073eb9a9",
                  "parentUUID": "4cfc5e59-91e5-4845-a99d-36f6776dbfed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",status:ICalAttendeeStatus.DECLINED},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"DECLINED\")>-1)",
                  "err": {},
                  "uuid": "40739dc1-dd6a-4035-a94a-531faf11f36a",
                  "parentUUID": "4cfc5e59-91e5-4845-a99d-36f6776dbfed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",status:ICalAttendeeStatus.NEEDSACTION},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"NEEDS-ACTION\")>-1)",
                  "err": {},
                  "uuid": "9036b05d-b5ba-4271-bf5d-cfaba96bf92a",
                  "parentUUID": "4cfc5e59-91e5-4845-a99d-36f6776dbfed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82d3e606-8cd2-4edd-8cfd-9ab9e1f56065",
                "3118f971-c9f3-498b-afc5-25c295223da5",
                "f76c58bc-c5b7-4511-b2d3-713f073eb9a9",
                "40739dc1-dd6a-4035-a94a-531faf11f36a",
                "9036b05d-b5ba-4271-bf5d-cfaba96bf92a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f34442d4-6d26-405d-8e03-f318b40893de",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.type(null),a);assert.deepStrictEqual(a.type(ICalAttendeeType.INDIVIDUAL),a)",
                  "err": {},
                  "uuid": "3655f90c-96f4-4501-907a-2fa518c13596",
                  "parentUUID": "f34442d4-6d26-405d-8e03-f318b40893de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),null);a.type(ICalAttendeeType.ROOM);assert.strictEqual(a.type(),\"ROOM\");a.type(null);assert.strictEqual(a.type(),null)",
                  "err": {},
                  "uuid": "58b41a36-764d-4240-97c3-f72ec91a6cd0",
                  "parentUUID": "f34442d4-6d26-405d-8e03-f318b40893de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.type(\"DRINKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "4851f241-f92a-4e85-885a-6ed141b42625",
                  "parentUUID": "f34442d4-6d26-405d-8e03-f318b40893de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mailing-list@example.com\",type:ICalAttendeeType.GROUP},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"GROUP\")>-1)",
                  "err": {},
                  "uuid": "d59ce71f-7487-42d5-872a-7531badb7a2c",
                  "parentUUID": "f34442d4-6d26-405d-8e03-f318b40893de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3655f90c-96f4-4501-907a-2fa518c13596",
                "58b41a36-764d-4240-97c3-f72ec91a6cd0",
                "4851f241-f92a-4e85-885a-6ed141b42625",
                "d59ce71f-7487-42d5-872a-7531badb7a2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7f195a26-09cd-4886-b002-a9859ce42cb4",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.delegatedTo(null));assert.deepStrictEqual(a,a.delegatedTo(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "41f61047-9c63-4b18-99e7-baa1774610f6",
                  "parentUUID": "7f195a26-09cd-4886-b002-a9859ce42cb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.delegatedTo(),null);a.delegatedTo(\"foo@example.com\");const result=a.delegatedTo();assert.ok(result);assert.strictEqual(result.email(),\"foo@example.com\");a.delegatedTo(null);assert.strictEqual(a.delegatedTo(),null)",
                  "err": {},
                  "uuid": "1b9479ea-4bd2-4697-ace9-b244d08f9d6f",
                  "parentUUID": "7f195a26-09cd-4886-b002-a9859ce42cb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",delegatedTo:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"foo@example\")>-1)",
                  "err": {},
                  "uuid": "b5024191-0965-4316-84b6-db3c0ef1626a",
                  "parentUUID": "7f195a26-09cd-4886-b002-a9859ce42cb4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41f61047-9c63-4b18-99e7-baa1774610f6",
                "1b9479ea-4bd2-4697-ace9-b244d08f9d6f",
                "b5024191-0965-4316-84b6-db3c0ef1626a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8cd53d03-c47b-4f82-bcd8-488bd6b909eb",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.delegatedFrom(null));assert.deepStrictEqual(a,a.delegatedFrom(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "e2036e7a-ac0a-47f7-a17e-de681d4ea3ef",
                  "parentUUID": "8cd53d03-c47b-4f82-bcd8-488bd6b909eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.delegatedFrom(),null);a.delegatedFrom(\"foo@example.com\");let result=a.delegatedFrom();assert.ok(result);assert.strictEqual(result.email(),\"foo@example.com\");a.delegatedFrom({name:\"Max Mustermann\",email:\"max.mustermann@example.com\"});result=a.delegatedFrom();assert.ok(result);assert.strictEqual(result.name(),\"Max Mustermann\");assert.strictEqual(result.email(),\"max.mustermann@example.com\");a.delegatedFrom(null);assert.strictEqual(a.delegatedFrom(),null)",
                  "err": {},
                  "uuid": "48d62a30-8f27-4309-a7ee-31d7715f8922",
                  "parentUUID": "8cd53d03-c47b-4f82-bcd8-488bd6b909eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",delegatedFrom:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"foo@example.com\")>-1)",
                  "err": {},
                  "uuid": "6ef7abf5-a52d-4c72-90f3-7046ee928162",
                  "parentUUID": "8cd53d03-c47b-4f82-bcd8-488bd6b909eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2036e7a-ac0a-47f7-a17e-de681d4ea3ef",
                "48d62a30-8f27-4309-a7ee-31d7715f8922",
                "6ef7abf5-a52d-4c72-90f3-7046ee928162"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "17e92ab0-dea7-44a0-9349-f7894eed24d0",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.delegatesTo({email:\"mail@example.com\"})instanceof ICalAttendee)",
                  "err": {},
                  "uuid": "fe7fdc09-ad83-401b-a536-2d4ef661cfe9",
                  "parentUUID": "17e92ab0-dea7-44a0-9349-f7894eed24d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({name:\"Muh\",email:\"muh@example.com\"},event);assert.deepStrictEqual(new ICalAttendee({email:\"foo@example.com\"},event).delegatesTo(attendee),attendee)",
                  "err": {},
                  "uuid": "8fffbea5-5f5a-4bc3-94ee-f738efd7c1a0",
                  "parentUUID": "17e92ab0-dea7-44a0-9349-f7894eed24d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee=new ICalAttendee({name:\"Zac\",email:\"zac@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).delegatesTo({name:\"Cody\",email:\"cody@example.com\"});assert.strictEqual(attendee.name(),\"Cody\")",
                  "err": {},
                  "uuid": "47225e65-30fe-4892-8ce7-198df3edca54",
                  "parentUUID": "17e92ab0-dea7-44a0-9349-f7894eed24d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe7fdc09-ad83-401b-a536-2d4ef661cfe9",
                "8fffbea5-5f5a-4bc3-94ee-f738efd7c1a0",
                "47225e65-30fe-4892-8ce7-198df3edca54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b5f698d2-0366-46b2-bc2c-a44a3e7d65e8",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.delegatesFrom({email:\"bar@example.com\"})instanceof ICalAttendee)",
                  "err": {},
                  "uuid": "793ee9e4-676c-444e-a8ee-73b14fe01122",
                  "parentUUID": "b5f698d2-0366-46b2-bc2c-a44a3e7d65e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({name:\"Muh\",email:\"muh@example.com\"},event);assert.deepStrictEqual(new ICalAttendee({email:\"bar@example.com\"},event).delegatesFrom(attendee),attendee)",
                  "err": {},
                  "uuid": "7f72f696-99a4-4f6d-b5ce-2c9db4ada8e9",
                  "parentUUID": "b5f698d2-0366-46b2-bc2c-a44a3e7d65e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({name:\"Zac\",email:\"zac@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).delegatesFrom({name:\"Cody\",email:\"cody@example.com\"});assert.strictEqual(a.name(),\"Cody\");const b=new ICalAttendee({name:\"Zac\",email:\"zac@example.com\",delegatesFrom:{name:\"Cody\",email:\"cody@example.com\"}},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(b.name(),\"Zac\")",
                  "err": {},
                  "uuid": "996250c0-c00c-430c-8f7a-b6e3de466fcf",
                  "parentUUID": "b5f698d2-0366-46b2-bc2c-a44a3e7d65e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "793ee9e4-676c-444e-a8ee-73b14fe01122",
                "7f72f696-99a4-4f6d-b5ce-2c9db4ada8e9",
                "996250c0-c00c-430c-8f7a-b6e3de466fcf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "01a96072-600a-471a-bb2a-dc055d51f4ae",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.org\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.x(\"X-NUM-GUESTS\",\"5\"));assert.ok(a.toString().includes(\"ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org\"))",
                  "err": {},
                  "uuid": "e65f10b5-ed9f-4fa6-b398-739758a1f4a9",
                  "parentUUID": "01a96072-600a-471a-bb2a-dc055d51f4ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e65f10b5-ed9f-4fa6-b398-739758a1f4a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b7aa8dc-4380-43a5-8177-24d34a191cff",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({name:\"Max Mustermann\",email:\"max@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.delegatesTo(\"Moritz <moritz@example.com>\");assert.deepStrictEqual(a.toJSON(),{delegatedFrom:null,delegatedTo:\"moritz@example.com\",email:\"max@example.com\",mailto:null,sentBy:null,name:\"Max Mustermann\",role:\"REQ-PARTICIPANT\",rsvp:null,status:\"DELEGATED\",type:null,x:[]})",
                  "err": {},
                  "uuid": "518f177b-77b9-40dc-b670-71d997bfa431",
                  "parentUUID": "8b7aa8dc-4380-43a5-8177-24d34a191cff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));new ICalAttendee(a.toJSON(),new ICalEvent({start:new Date},new ICalCalendar))",
                  "err": {},
                  "uuid": "4fa01edd-af59-402d-bcfe-b4882464fbdb",
                  "parentUUID": "8b7aa8dc-4380-43a5-8177-24d34a191cff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "518f177b-77b9-40dc-b670-71d997bfa431",
                "4fa01edd-af59-402d-bcfe-b4882464fbdb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ebeb8ca1-80e1-4e92-8a40-fcb6795dc409",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "235c9b9c-714a-4523-98bd-8da022a36ac2",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={prodId:\"//sebbo.net//ical-generator//EN\",method:ICalCalendarMethod.PUBLISH,name:\"Test Calendar\",description:\"Hi, I am the description.\",timezone:null,url:\"https://github.com/sebbo2002/ical-generator\",source:\"http://example.com/my/original_source.ical\",scale:null,ttl:null,events:[],x:[]};const cal=new ICalCalendar(data);assert.deepStrictEqual(cal.toJSON(),data)",
                  "err": {},
                  "uuid": "23d14f93-fe7b-4e97-8f8c-ac3787a1868f",
                  "parentUUID": "235c9b9c-714a-4523-98bd-8da022a36ac2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23d14f93-fe7b-4e97-8f8c-ac3787a1868f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc86fa04-2b31-4db0-bc54-f9139fb7e8c5",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.prodId(\"//loremipsum.de//ical-tests//EN\");assert.strictEqual(cal.prodId(),\"//loremipsum.de//ical-tests//EN\")",
                  "err": {},
                  "uuid": "cfeb73cf-c8f6-416e-937d-87fc76808761",
                  "parentUUID": "bc86fa04-2b31-4db0-bc54-f9139fb7e8c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.prodId(\"//loremipsum.de//ical-tests//EN\"))",
                  "err": {},
                  "uuid": "075aaba6-012c-45da-8006-659d0c0e801b",
                  "parentUUID": "bc86fa04-2b31-4db0-bc54-f9139fb7e8c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId(256)},/`prodid`/)",
                  "err": {},
                  "uuid": "4696f53b-350d-4a67-b7b2-23c97917b180",
                  "parentUUID": "bc86fa04-2b31-4db0-bc54-f9139fb7e8c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId({product:\"ical-tests\"})},/`prodid\\.company`/)",
                  "err": {},
                  "uuid": "f3275706-c4e5-4f61-8f53-b79a5c78e8b0",
                  "parentUUID": "bc86fa04-2b31-4db0-bc54-f9139fb7e8c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId({company:\"sebbo.net\"})},/`prodid\\.product`/)",
                  "err": {},
                  "uuid": "bfbb8f54-1ccd-46a4-8a47-39657b5158f1",
                  "parentUUID": "bc86fa04-2b31-4db0-bc54-f9139fb7e8c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().prodId({company:\"loremipsum.com\",product:\"awesome-unit-tests\"});assert.strictEqual(cal.prodId(),\"//loremipsum.com//awesome-unit-tests//EN\")",
                  "err": {},
                  "uuid": "7de68779-72de-4ddd-92f6-0868f757bc55",
                  "parentUUID": "bc86fa04-2b31-4db0-bc54-f9139fb7e8c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().prodId({company:\"loremipsum.com\",product:\"awesome-unit-tests\",language:\"DE\"});assert.strictEqual(cal.prodId(),\"//loremipsum.com//awesome-unit-tests//DE\")",
                  "err": {},
                  "uuid": "cab5e978-7227-4b0f-adec-458bfe3f2a18",
                  "parentUUID": "bc86fa04-2b31-4db0-bc54-f9139fb7e8c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cfeb73cf-c8f6-416e-937d-87fc76808761",
                "075aaba6-012c-45da-8006-659d0c0e801b",
                "4696f53b-350d-4a67-b7b2-23c97917b180",
                "f3275706-c4e5-4f61-8f53-b79a5c78e8b0",
                "bfbb8f54-1ccd-46a4-8a47-39657b5158f1",
                "7de68779-72de-4ddd-92f6-0868f757bc55",
                "cab5e978-7227-4b0f-adec-458bfe3f2a18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "259be4b5-2814-4310-a032-3c911c26bd1d",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.deepStrictEqual(c,c.method(null),\"method(null)\");assert.deepStrictEqual(c,c.method(ICalCalendarMethod.PUBLISH),\"method(enum)\")",
                  "err": {},
                  "uuid": "5d6f8587-9535-49fb-b700-a7153d4107ef",
                  "parentUUID": "259be4b5-2814-4310-a032-3c911c26bd1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.strictEqual(c.method(),null);c.method(null);assert.strictEqual(c.method(),null);c.method(ICalCalendarMethod.PUBLISH);assert.strictEqual(c.method(),\"PUBLISH\");c.method(null);assert.strictEqual(c.method(),null)",
                  "err": {},
                  "uuid": "33a4889f-cf43-49b5-af12-90d3bc56a8c9",
                  "parentUUID": "259be4b5-2814-4310-a032-3c911c26bd1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.throws(function(){c.method(\"KICK ASS\")},/Input must be one of the following: PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER/)",
                  "err": {},
                  "uuid": "7e375d2e-7a82-4a76-9285-fdf05925842e",
                  "parentUUID": "259be4b5-2814-4310-a032-3c911c26bd1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar({method:ICalCalendarMethod.PUBLISH});assert.strictEqual(c.method(),\"PUBLISH\");c.method(ICalCalendarMethod.ADD);assert.strictEqual(c.method(),\"ADD\")",
                  "err": {},
                  "uuid": "6e9e5730-fcaa-424d-af6d-82af0cb23203",
                  "parentUUID": "259be4b5-2814-4310-a032-3c911c26bd1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d6f8587-9535-49fb-b700-a7153d4107ef",
                "33a4889f-cf43-49b5-af12-90d3bc56a8c9",
                "7e375d2e-7a82-4a76-9285-fdf05925842e",
                "6e9e5730-fcaa-424d-af6d-82af0cb23203"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9144fff9-567e-4388-899f-3943fec77986",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.name(null));assert.deepStrictEqual(cal,cal.name(\"Testevents\"))",
                  "err": {},
                  "uuid": "ff81a287-7d10-4696-8d73-a9d543d801a2",
                  "parentUUID": "9144fff9-567e-4388-899f-3943fec77986",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.name(),null);cal.name(\"Testevents\");assert.strictEqual(cal.name(),\"Testevents\");cal.name(null);assert.strictEqual(cal.name(),null)",
                  "err": {},
                  "uuid": "86bdac20-1dbd-4a40-be01-62888c0b1029",
                  "parentUUID": "9144fff9-567e-4388-899f-3943fec77986",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().name(\"Testevents\");cal.createEvent({start:new Date,summary:\"Example Event\"});assert.strictEqual(cal.name(),\"Testevents\")",
                  "err": {},
                  "uuid": "ab9e1597-58ae-40ce-ab74-bcc660bb31e3",
                  "parentUUID": "9144fff9-567e-4388-899f-3943fec77986",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff81a287-7d10-4696-8d73-a9d543d801a2",
                "86bdac20-1dbd-4a40-be01-62888c0b1029",
                "ab9e1597-58ae-40ce-ab74-bcc660bb31e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce031432-a11c-44ba-b22f-a53b246ab261",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.description(null));assert.deepStrictEqual(cal,cal.description(\"Testbeschreibung\"))",
                  "err": {},
                  "uuid": "8e29b2d4-31b8-4c64-8f08-a9f97f97520c",
                  "parentUUID": "ce031432-a11c-44ba-b22f-a53b246ab261",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.description(),null);cal.description(\"Testbeschreibung\");assert.strictEqual(cal.description(),\"Testbeschreibung\");cal.description(null);assert.strictEqual(cal.description(),null)",
                  "err": {},
                  "uuid": "b82018a0-8195-4665-990e-22a84522564a",
                  "parentUUID": "ce031432-a11c-44ba-b22f-a53b246ab261",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().description(\"Testbeschreibung\");cal.createEvent({start:new Date,summary:\"Example Event\"});assert.ok(cal.description(),\"Testbeschreibung\")",
                  "err": {},
                  "uuid": "0f386ebf-cf38-4827-83ad-5eb2fedd076c",
                  "parentUUID": "ce031432-a11c-44ba-b22f-a53b246ab261",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e29b2d4-31b8-4c64-8f08-a9f97f97520c",
                "b82018a0-8195-4665-990e-22a84522564a",
                "0f386ebf-cf38-4827-83ad-5eb2fedd076c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f49a6956-8a02-432a-8928-aef5bfaf0158",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.timezone(\"Europe/Berlin\"));assert.deepStrictEqual(cal,cal.timezone(null));assert.deepStrictEqual(cal,cal.timezone({name:\"Europe/Berlin\",generator:getVtimezoneComponent}))",
                  "err": {},
                  "uuid": "b8ec54ca-af03-4b72-8307-3119f329a6f3",
                  "parentUUID": "f49a6956-8a02-432a-8928-aef5bfaf0158",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/Berlin\");cal.timezone(null);assert.strictEqual(cal.timezone(),null);cal.timezone({name:\"Europe/Berlin\"});assert.strictEqual(cal.timezone(),\"Europe/Berlin\")",
                  "err": {},
                  "uuid": "08348034-3b3d-4520-b415-c1f76b200c06",
                  "parentUUID": "f49a6956-8a02-432a-8928-aef5bfaf0158",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/Berlin\");cal.timezone(\"UTC\");assert.strictEqual(cal.timezone(),null)",
                  "err": {},
                  "uuid": "e2f39b04-4a44-47d2-ac63-268362744d38",
                  "parentUUID": "f49a6956-8a02-432a-8928-aef5bfaf0158",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8ec54ca-af03-4b72-8307-3119f329a6f3",
                "08348034-3b3d-4520-b415-c1f76b200c06",
                "e2f39b04-4a44-47d2-ac63-268362744d38"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e10bb76-05d7-4595-9dd5-a5e83cb2c70d",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal.ttl(60*60*24),cal);assert.deepStrictEqual(cal.ttl(moment.duration(2,\"days\")),cal);assert.deepStrictEqual(cal.ttl(null),cal)",
                  "err": {},
                  "uuid": "d4d95b31-25d9-44c9-8241-9580f5fc3202",
                  "parentUUID": "8e10bb76-05d7-4595-9dd5-a5e83cb2c70d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.ttl(),null);cal.ttl(86400);assert.strictEqual(cal.ttl(),86400)",
                  "err": {},
                  "uuid": "230c02d5-217e-42b3-bea2-614e93e7694d",
                  "parentUUID": "8e10bb76-05d7-4595-9dd5-a5e83cb2c70d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().ttl(86400);assert.strictEqual(cal.ttl(),86400)",
                  "err": {},
                  "uuid": "b8e6f669-0d3c-44bc-9faf-1bd288ff3eab",
                  "parentUUID": "8e10bb76-05d7-4595-9dd5-a5e83cb2c70d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4d95b31-25d9-44c9-8241-9580f5fc3202",
                "230c02d5-217e-42b3-bea2-614e93e7694d",
                "b8e6f669-0d3c-44bc-9faf-1bd288ff3eab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7d36266-9d06-49c0-b242-0bbc02801e61",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.source(\"http://example.com/my/original_source.ical\"))",
                  "err": {},
                  "uuid": "587eda55-a705-490e-92d6-d8a854342fa1",
                  "parentUUID": "a7d36266-9d06-49c0-b242-0bbc02801e61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.source(),null);cal.source(\"http://example.com/my/original_source.ical\");assert.strictEqual(cal.source(),\"http://example.com/my/original_source.ical\");cal.url(null);assert.strictEqual(cal.url(),null)",
                  "err": {},
                  "uuid": "acf5e5f5-8ed0-4e28-915c-d58f1c5268c2",
                  "parentUUID": "a7d36266-9d06-49c0-b242-0bbc02801e61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "587eda55-a705-490e-92d6-d8a854342fa1",
                "acf5e5f5-8ed0-4e28-915c-d58f1c5268c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37d7e460-a574-4383-b6fd-ad9ae296c345",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.url(\"https://example.com/calendar.ical\"))",
                  "err": {},
                  "uuid": "1aa30835-c093-455b-b42c-eaea74a57cc8",
                  "parentUUID": "37d7e460-a574-4383-b6fd-ad9ae296c345",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.url(),null);cal.url(\"https://example.com/calendar.ical\");assert.strictEqual(cal.url(),\"https://example.com/calendar.ical\");cal.url(null);assert.strictEqual(cal.url(),null)",
                  "err": {},
                  "uuid": "3df7ec96-8813-4f6e-a42e-2715a82fa264",
                  "parentUUID": "37d7e460-a574-4383-b6fd-ad9ae296c345",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().url(\"https://example.com/calendar.ical\");cal.createEvent({start:new Date,end:new Date(new Date().getTime()+36e5),summary:\"Example Event\"});assert.ok(cal.url(),\"https://example.com/calendar.ical\")",
                  "err": {},
                  "uuid": "3c0f017e-af3c-4910-91ca-de008cf93438",
                  "parentUUID": "37d7e460-a574-4383-b6fd-ad9ae296c345",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1aa30835-c093-455b-b42c-eaea74a57cc8",
                "3df7ec96-8813-4f6e-a42e-2715a82fa264",
                "3c0f017e-af3c-4910-91ca-de008cf93438"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6b49ca62-b855-46b4-9872-4bfff2e34978",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.scale(\"gregorian\"))",
                  "err": {},
                  "uuid": "1a94ebaf-f0e8-48cf-823e-e43f722a8e3a",
                  "parentUUID": "6b49ca62-b855-46b4-9872-4bfff2e34978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.scale(),null);cal.scale(\"GREGORIAN\");assert.strictEqual(cal.scale(),\"GREGORIAN\");cal.scale(null);assert.strictEqual(cal.scale(),null)",
                  "err": {},
                  "uuid": "e85d120d-1ffc-4070-8b42-ea17acad2473",
                  "parentUUID": "6b49ca62-b855-46b4-9872-4bfff2e34978",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().scale(\"gregorian\");cal.createEvent({start:new Date,end:new Date(new Date().getTime()+36e5),summary:\"Example Event\"});assert.ok(cal.scale(),\"GREGORIAN\")",
                  "err": {},
                  "uuid": "7cc0554b-7404-4702-a412-1302d0aa0a4d",
                  "parentUUID": "6b49ca62-b855-46b4-9872-4bfff2e34978",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a94ebaf-f0e8-48cf-823e-e43f722a8e3a",
                "e85d120d-1ffc-4070-8b42-ea17acad2473",
                "7cc0554b-7404-4702-a412-1302d0aa0a4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7451d927-c32d-483d-8109-7022520af027",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.ok(cal.createEvent({start:new Date})instanceof ICalEvent)",
                  "err": {},
                  "uuid": "835a5478-cd8c-41ec-84fc-3327527f6e5a",
                  "parentUUID": "7451d927-c32d-483d-8109-7022520af027",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const event=cal.createEvent({start:new Date,summary:\"Patch-Day\"});assert.strictEqual(event.summary(),\"Patch-Day\")",
                  "err": {},
                  "uuid": "2d9a8c7e-e97f-4825-ab27-59b8db317970",
                  "parentUUID": "7451d927-c32d-483d-8109-7022520af027",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.doesNotThrow(function(){new ICalCalendar().createEvent({start:new Date,summary:\"Patch-Day\"})},Error)",
                  "err": {},
                  "uuid": "e69acd5d-a0d7-4c02-8266-f988a1c73354",
                  "parentUUID": "7451d927-c32d-483d-8109-7022520af027",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "835a5478-cd8c-41ec-84fc-3327527f6e5a",
                "2d9a8c7e-e97f-4825-ab27-59b8db317970",
                "e69acd5d-a0d7-4c02-8266-f988a1c73354"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c3d3797-b7db-4522-9844-4c7f0f69834e",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.events().length,0);const event=cal.createEvent({start:new Date});assert.strictEqual(cal.events().length,1);assert.deepStrictEqual(cal.events()[0],event)",
                  "err": {},
                  "uuid": "c769b9d6-aaf6-422c-9cc7-ffc6c467e34f",
                  "parentUUID": "5c3d3797-b7db-4522-9844-4c7f0f69834e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.length(),0);const cal2=cal.events([{start:new Date,summary:\"Event A\"},{start:new Date,summary:\"Event B\"}]);assert.strictEqual(cal.length(),2);assert.deepStrictEqual(cal2,cal)",
                  "err": {},
                  "uuid": "7416db58-8709-4717-9146-5aecfc1e4801",
                  "parentUUID": "5c3d3797-b7db-4522-9844-4c7f0f69834e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c769b9d6-aaf6-422c-9cc7-ffc6c467e34f",
                "7416db58-8709-4717-9146-5aecfc1e4801"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "261e089f-b253-449f-bd9a-1fc956ef38f2",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.createEvent({start:new Date});assert.strictEqual(cal.events().length,1);assert.deepStrictEqual(cal.clear(),cal);assert.strictEqual(cal.events().length,0)",
                  "err": {},
                  "uuid": "4efeb1c2-6819-4cc5-b64b-e5773aa67d59",
                  "parentUUID": "261e089f-b253-449f-bd9a-1fc956ef38f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4efeb1c2-6819-4cc5-b64b-e5773aa67d59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0969af98-24b8-490c-b89c-b1576ad3ccaf",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "ff414029-2b4d-4abc-9f20-a21ab3d00ba9",
                  "parentUUID": "0969af98-24b8-490c-b89c-b1576ad3ccaf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x(\"X-FOO\",\"bar\"));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x(\"X-LOREM\",\"ipsum\"));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x(\"LOREM\",\"ipsum\")});assert.throws(()=>{cal.x(\"X-LOREM\",1337)});assert.throws(()=>{cal.x(5,\"ipsum\")})",
                  "err": {},
                  "uuid": "6696ce1b-79e7-43f0-9786-7ad452c2f91d",
                  "parentUUID": "0969af98-24b8-490c-b89c-b1576ad3ccaf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x([{key:\"X-FOO\",value:\"bar\"}]));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x([{key:\"X-LOREM\",value:\"ipsum\"}]));assert.deepEqual(cal.x(),[{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x([{key:\"LOREM\",value:\"ipsum\"}])});assert.throws(()=>{cal.x([{key:\"X-LOREM\",value:1337}])});assert.throws(()=>{cal.x([{key:5,value:\"ipsum\"}])})",
                  "err": {},
                  "uuid": "a5aa4bc2-9a5d-4314-9f45-731a3a7ed8ee",
                  "parentUUID": "0969af98-24b8-490c-b89c-b1576ad3ccaf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x({\"X-FOO\":\"bar\"}));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x({\"X-LOREM\":\"ipsum\"}));assert.deepEqual(cal.x(),[{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x({\"LOREM\":\"ipsum\"})});assert.throws(()=>{cal.x({\"X-LOREM\":1337})});assert.throws(()=>{cal.x({5:\"ipsum\"})})",
                  "err": {},
                  "uuid": "2b6cc6a0-d2c1-4e3b-a361-22b66a56d6c0",
                  "parentUUID": "0969af98-24b8-490c-b89c-b1576ad3ccaf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepEqual(cal.x(),[]);cal.x(\"X-FOO\",\"BAR\");assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"BAR\"}]);cal.x({});assert.deepEqual(cal.x().length,0)",
                  "err": {},
                  "uuid": "23b8c811-ba08-4f8a-a2ed-2753b154b593",
                  "parentUUID": "0969af98-24b8-490c-b89c-b1576ad3ccaf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().x(\"X-FOO\",\"BAR\");cal.createEvent({start:new Date,end:new Date(new Date().getTime()+36e5),summary:\"Example Event\"});assert.ok(cal.toString().includes(\"X-FOO\"))",
                  "err": {},
                  "uuid": "ba4adefa-31cc-4aac-a6c7-c2c89c3a0991",
                  "parentUUID": "0969af98-24b8-490c-b89c-b1576ad3ccaf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff414029-2b4d-4abc-9f20-a21ab3d00ba9",
                "6696ce1b-79e7-43f0-9786-7ad452c2f91d",
                "a5aa4bc2-9a5d-4314-9f45-731a3a7ed8ee",
                "2b6cc6a0-d2c1-4e3b-a361-22b66a56d6c0",
                "23b8c811-ba08-4f8a-a2ed-2753b154b593",
                "ba4adefa-31cc-4aac-a6c7-c2c89c3a0991"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b0b028f-5c5a-4135-90b6-09c3bd85fbd9",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const prodId=cal.toJSON().prodId;assert.strictEqual(typeof prodId,\"string\");assert.ok(prodId.length>0);assert.strictEqual(cal.toJSON().events?.length,0)",
                  "err": {},
                  "uuid": "427896f1-fb1d-4ea5-b95e-b431ab4aca21",
                  "parentUUID": "4b0b028f-5c5a-4135-90b6-09c3bd85fbd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.createEvent({start:new Date,end:new Date(new Date().getTime()+1e3*60*60),summary:\"HTTP Calendar Event\",x:[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}]});const prodId=cal.toJSON().prodId;assert.strictEqual(typeof prodId,\"string\");assert.ok(prodId.length>0);const events=cal.toJSON().events;assert.strictEqual(events?.length,1);assert.deepEqual(events[0].x,[{\"key\":\"X-FOO\",\"value\":\"bar\"},{\"key\":\"X-LOREM\",\"value\":\"ipsum\"}])",
                  "err": {},
                  "uuid": "13d17da9-a154-445b-832a-326d22b8f5be",
                  "parentUUID": "4b0b028f-5c5a-4135-90b6-09c3bd85fbd9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalCalendar;new ICalCalendar(a.toJSON())",
                  "err": {},
                  "uuid": "e7cf1739-5683-44a5-9898-6a02545e888c",
                  "parentUUID": "4b0b028f-5c5a-4135-90b6-09c3bd85fbd9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "427896f1-fb1d-4ea5-b95e-b431ab4aca21",
                "13d17da9-a154-445b-832a-326d22b8f5be",
                "e7cf1739-5683-44a5-9898-6a02545e888c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9c86589e-e072-4413-b717-b02a4ebd4980",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.length(),0);cal.createEvent({start:new Date,end:new Date(new Date().getTime()+36e5),summary:\"Example Event\"});assert.strictEqual(cal.length(),1)",
                  "err": {},
                  "uuid": "768acab8-eb5f-472b-b0cd-a82b866dce8a",
                  "parentUUID": "9c86589e-e072-4413-b717-b02a4ebd4980",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "768acab8-eb5f-472b-b0cd-a82b866dce8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "779ea3d4-1da7-4724-b6f7-5262408ab973",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.url(\"https://sebbo.net/foo\");assert.ok(cal.toString().indexOf(\"URL:https://sebbo.net/foo\")>-1)",
                  "err": {},
                  "uuid": "fc116878-eea1-41eb-90a8-e66fec980504",
                  "parentUUID": "779ea3d4-1da7-4724-b6f7-5262408ab973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.method(ICalCalendarMethod.REFRESH);assert.ok(cal.toString().indexOf(\"METHOD:REFRESH\")>-1)",
                  "err": {},
                  "uuid": "75fbfd8b-7719-466d-a02c-1b4936392aeb",
                  "parentUUID": "779ea3d4-1da7-4724-b6f7-5262408ab973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.name(\"TEST\");assert.ok(cal.toString().indexOf(\"NAME:TEST\")>-1);assert.ok(cal.toString().indexOf(\"X-WR-CALNAME:TEST\")>-1)",
                  "err": {},
                  "uuid": "2a4c3ffe-42cc-4dd0-99cf-8667458d4db0",
                  "parentUUID": "779ea3d4-1da7-4724-b6f7-5262408ab973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.description(\"TEST\");assert.ok(cal.toString().indexOf(\"X-WR-CALDESC:TEST\")>-1)",
                  "err": {},
                  "uuid": "f335cc7f-ae77-441e-8029-56bff66a7643",
                  "parentUUID": "779ea3d4-1da7-4724-b6f7-5262408ab973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone(\"TEST\");assert.ok(cal.toString().indexOf(\"TIMEZONE-ID:TEST\")>-1);assert.ok(cal.toString().indexOf(\"X-WR-TIMEZONE:TEST\")>-1)",
                  "err": {},
                  "uuid": "f1d15fd1-15da-441d-878a-5487697f2a79",
                  "parentUUID": "779ea3d4-1da7-4724-b6f7-5262408ab973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.source(\"http://foo.bar.example.com/ical.cal\");assert.ok(cal.toString().includes(\"http://foo.bar.example.com/ical.cal\"))",
                  "err": {},
                  "uuid": "33813a80-0a48-4e68-84e2-3c07759d8195",
                  "parentUUID": "779ea3d4-1da7-4724-b6f7-5262408ab973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({name:\"Europe/Berlin\",generator:getVtimezoneComponent});cal.createEvent({start:new Date,timezone:\"Europe/London\"});assert.ok(cal.toString().includes(\"BEGIN:VTIMEZONE\\r\\n\"),\"BEGIN:VTIMEZONE\");assert.ok(cal.toString().includes(\"TZID:Europe/Berlin\\r\\n\"),\"TZID:Europe/Berlin\");assert.ok(cal.toString().includes(\"TZID:Europe/London\\r\\n\"),\"TZID:Europe/London\")",
                  "err": {},
                  "uuid": "4481541a-7343-4b09-b828-44da94758d67",
                  "parentUUID": "779ea3d4-1da7-4724-b6f7-5262408ab973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({name:\"FOO\",generator:getVtimezoneComponent});assert.ok(!cal.toString().includes(\"TZID:Foo\\r\\n\"))",
                  "err": {},
                  "uuid": "5b4faa74-6fda-4912-9c26-7acfaeb8a85d",
                  "parentUUID": "779ea3d4-1da7-4724-b6f7-5262408ab973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({name:\"/Europe/Berlin\",generator:getVtimezoneComponent});assert.ok(!cal.toString().includes(\"TZID:/Europe/Berlin\\r\\n\"))",
                  "err": {},
                  "uuid": "8925edc0-f571-40bd-b531-653c9433cb7d",
                  "parentUUID": "779ea3d4-1da7-4724-b6f7-5262408ab973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.ttl(moment.duration(3,\"days\"));assert.ok(cal.toString().indexOf(\"REFRESH-INTERVAL;VALUE=DURATION:P3D\")>-1);assert.ok(cal.toString().indexOf(\"X-PUBLISHED-TTL:P3D\")>-1)",
                  "err": {},
                  "uuid": "4f2324ea-f462-4271-a75a-a67f103f2640",
                  "parentUUID": "779ea3d4-1da7-4724-b6f7-5262408ab973",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc116878-eea1-41eb-90a8-e66fec980504",
                "75fbfd8b-7719-466d-a02c-1b4936392aeb",
                "2a4c3ffe-42cc-4dd0-99cf-8667458d4db0",
                "f335cc7f-ae77-441e-8029-56bff66a7643",
                "f1d15fd1-15da-441d-878a-5487697f2a79",
                "33813a80-0a48-4e68-84e2-3c07759d8195",
                "4481541a-7343-4b09-b828-44da94758d67",
                "5b4faa74-6fda-4912-9c26-7acfaeb8a85d",
                "8925edc0-f571-40bd-b531-653c9433cb7d",
                "4f2324ea-f462-4271-a75a-a67f103f2640"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "74ea87a6-5ce4-4ea6-98a9-61c73c091177",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),created:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),lastModified:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Simple Event\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_01.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "10f5914c-ae81-4c5c-9fbd-51e036edd2ab",
              "parentUUID": "74ea87a6-5ce4-4ea6-98a9-61c73c091177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Sample Event\",location:\"localhost\",transparency:ICalEventTransparency.OPAQUE,description:{plain:\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop\",html:\"<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>\"}});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_02.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "8215ffc2-3daa-46f7-8f61-7d4c0e4d255f",
              "parentUUID": "74ea87a6-5ce4-4ea6-98a9-61c73c091177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.ADD,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),allDay:true,stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Sample Event\",location:{title:\"Apple Store Kurf\\xFCrstendamm\",address:\"Kurf\\xFCrstendamm 26, 10719 Berlin, Deutschland\",radius:141.1751386318387,geo:{lat:52.50363,lon:13.32865}},organizer:\"Sebastian Pekarek <mail@sebbo.net>\",status:ICalEventStatus.CONFIRMED,categories:[{name:\"WORK\"}],url:\"http://sebbo.net/\",attachments:[\"https://files.sebbo.net/calendar/attachments/foo\"]});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_03.ics\",\"utf8\"),\"toString\");assert.strictEqual(ical(cal.toJSON()).toString(),string,\"toJSON / toString()\")",
              "err": {},
              "uuid": "00f8ecb2-41f3-4f83-a78e-602464e16427",
              "parentUUID": "74ea87a6-5ce4-4ea6-98a9-61c73c091177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.timezone({name:null,generator:getVtimezoneComponent});cal.events([{id:\"1\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"repeating by month\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,exclude:new Date(\"Fr Oct 06 2013 23:15:00 UTC\")}},{id:\"2\",start:new Date(\"Fr Oct 04 2013 22:39:30\"),end:new Date(\"Fr Oct 06 2013 23:15:00\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),timezone:\"Europe/Berlin\",summary:\"repeating by day, twice\",repeating:{freq:ICalEventRepeatingFreq.DAILY,count:2}},{id:\"3\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"repeating by 3 weeks, until 2014\",repeating:{freq:ICalEventRepeatingFreq.WEEKLY,interval:3,until:new Date(\"We Jan 01 2014 00:00:00 UTC\")}}]);assert.strictEqual(cal.toString(),await fs.readFile(resultDir+\"/generate_04.ics\",\"utf8\"),\"first check\");cal.timezone(null);assert.strictEqual(ical(cal.toJSON()).toString(),cal.toString(),\"second check\")",
              "err": {},
              "uuid": "dcceabd2-6b69-420d-8519-48d965b78896",
              "parentUUID": "74ea87a6-5ce4-4ea6-98a9-61c73c091177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"1\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"floating\",floating:true});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_05.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "9c071e70-ac14-49cc-8df3-0bb2d0929848",
              "parentUUID": "74ea87a6-5ce4-4ea6-98a9-61c73c091177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\",method:ICalCalendarMethod.PUBLISH});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),allDay:true,stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Sample Event\",organizer:\"Sebastian Pekarek <mail@sebbo.net>\",attendees:[{name:'Smith, Matt; (\"Sales\")',email:\"matt@example.com\",delegatesTo:{name:\"John\",email:\"john@example.com\",status:ICalAttendeeStatus.ACCEPTED}}],alarms:[{type:ICalAlarmType.display,trigger:60*10,repeat:{times:2,interval:60}},{type:ICalAlarmType.display,trigger:60*60,description:\"I'm a reminder :)\"}],status:ICalEventStatus.CONFIRMED,url:\"http://sebbo.net/\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_06.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "39e002fa-80ec-450b-bd4f-7a61e8f589fd",
              "parentUUID": "74ea87a6-5ce4-4ea6-98a9-61c73c091177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.events([{id:\"1\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"repeating by month\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,byMonth:[1,4,7,10]}},{id:\"2\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"repeating on Mo/We/Fr, twice\",repeating:{freq:ICalEventRepeatingFreq.DAILY,count:2,byDay:[ICalWeekday.MO,ICalWeekday.WE,ICalWeekday.FR]}},{id:\"3\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"repeating on 1st and 15th\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:1,byMonthDay:[1,15]}}]);const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_07.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "6cde32e8-eeb4-48bf-b0ad-77aa8a68cebd",
              "parentUUID": "74ea87a6-5ce4-4ea6-98a9-61c73c091177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),created:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),lastModified:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Simple Event\",attendees:[{type:ICalAttendeeType.INDIVIDUAL,role:ICalAttendeeRole.REQ,status:ICalAttendeeStatus.NEEDSACTION,email:\"mail@example.com\",rsvp:true}]});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_08.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "62b6a0d3-5cfb-46b4-92d7-f2f76e6bc539",
              "parentUUID": "74ea87a6-5ce4-4ea6-98a9-61c73c091177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.REQUEST,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Sample Event\",organizer:{name:\"Sebastian Pekarek\",email:\"mail@sebbo.net\",mailto:\"mail2@example2.com\"},attendees:[{type:ICalAttendeeType.INDIVIDUAL,role:ICalAttendeeRole.REQ,status:ICalAttendeeStatus.NEEDSACTION,email:\"mail@example.com\",rsvp:true}]});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_09.ics\",\"utf8\"),\"toString\");assert.strictEqual(ical(cal.toJSON()).toString(),string,\"toJSON / toString()\")",
              "err": {},
              "uuid": "42862348-8c2b-4018-bad4-7735b4a8c277",
              "parentUUID": "74ea87a6-5ce4-4ea6-98a9-61c73c091177",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "10f5914c-ae81-4c5c-9fbd-51e036edd2ab",
            "8215ffc2-3daa-46f7-8f61-7d4c0e4d255f",
            "00f8ecb2-41f3-4f83-a78e-602464e16427",
            "dcceabd2-6b69-420d-8519-48d965b78896",
            "9c071e70-ac14-49cc-8df3-0bb2d0929848",
            "39e002fa-80ec-450b-bd4f-7a61e8f589fd",
            "6cde32e8-eeb4-48bf-b0ad-77aa8a68cebd",
            "62b6a0d3-5cfb-46b4-92d7-f2f76e6bc539",
            "42862348-8c2b-4018-bad4-7735b4a8c277"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bc8ecc82-0a6f-4304-a8ab-3b826f7d39f0",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ab51e665-33db-4a88-b62f-45d567b26872",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalCategory({unknown:true,name:\"FOO\"});assert.strictEqual(a.name(),\"FOO\")",
                  "err": {},
                  "uuid": "0ecfd548-f2f2-46b4-9a8b-4d1ee018cfff",
                  "parentUUID": "ab51e665-33db-4a88-b62f-45d567b26872",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category constructor() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalCategory({})},/`name`/)",
                  "err": {},
                  "uuid": "7a437ccd-0445-47fa-9ee9-eb0172afad68",
                  "parentUUID": "ab51e665-33db-4a88-b62f-45d567b26872",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ecfd548-f2f2-46b4-9a8b-4d1ee018cfff",
                "7a437ccd-0445-47fa-9ee9-eb0172afad68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd060646-2a04-4ad0-a7a3-f437b4507657",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"foo\"});assert.deepStrictEqual(c,c.name(\"FOO\"))",
                  "err": {},
                  "uuid": "edfb2de2-dbb0-4f38-b0a3-e5ef329f2453",
                  "parentUUID": "cd060646-2a04-4ad0-a7a3-f437b4507657",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"foo\"});assert.strictEqual(c.name(),\"foo\");c.name(\"HELLO-WORLD\");assert.strictEqual(c.name(),\"HELLO-WORLD\")",
                  "err": {},
                  "uuid": "2545938e-d145-47c9-873b-2b081cd838a0",
                  "parentUUID": "cd060646-2a04-4ad0-a7a3-f437b4507657",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"BANANA\"});assert.ok(c.toString().includes(\"BANANA\"))",
                  "err": {},
                  "uuid": "cce4fb9b-848f-49a0-97a7-ee13e9cc676d",
                  "parentUUID": "cd060646-2a04-4ad0-a7a3-f437b4507657",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "edfb2de2-dbb0-4f38-b0a3-e5ef329f2453",
                "2545938e-d145-47c9-873b-2b081cd838a0",
                "cce4fb9b-848f-49a0-97a7-ee13e9cc676d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "705ecf57-27cc-4198-9a66-04db3a634f5b",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"FOOBAR\"});assert.deepStrictEqual(c.toJSON(),{name:\"FOOBAR\"})",
                  "err": {},
                  "uuid": "1ced35e1-4d12-4487-a831-1f0d132652aa",
                  "parentUUID": "705ecf57-27cc-4198-9a66-04db3a634f5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ced35e1-4d12-4487-a831-1f0d132652aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "85d7a6ed-e9dd-491e-a1b0-e4882976313b",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "297817ec-ab45-4021-825f-cbf6da29da8a",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={id:\"FOO\",sequence:1,start:new Date().toJSON(),end:new Date().toJSON(),recurrenceId:new Date().toJSON(),timezone:\"Europe/Berlin\",stamp:new Date().toJSON(),allDay:true,floating:false,repeating:null,summary:\"Hello.\",location:null,description:null,organizer:null,attendees:[],alarms:[],categories:[],status:null,busystatus:ICalEventBusyStatus.BUSY,priority:5,url:\"https://github.com/sebbo2002/ical-generator\",attachments:[\"https://files.sebbo.net/calendar/attachments/foo\"],transparency:ICalEventTransparency.TRANSPARENT,created:new Date().toJSON(),lastModified:new Date().toJSON(),class:null,x:[]};const event=new ICalEvent(data,new ICalCalendar);assert.deepStrictEqual(event.toJSON(),data)",
                  "err": {},
                  "uuid": "86232651-9ade-4044-b2e8-8a241c966e1b",
                  "parentUUID": "297817ec-ab45-4021-825f-cbf6da29da8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({summary:\"Testevent\"},null)},/`calendar`/)",
                  "err": {},
                  "uuid": "cbd48a00-5991-4e70-b24c-f3f1ccbf682e",
                  "parentUUID": "297817ec-ab45-4021-825f-cbf6da29da8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86232651-9ade-4044-b2e8-8a241c966e1b",
                "cbd48a00-5991-4e70-b24c-f3f1ccbf682e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c60ed97d-1f77-4a26-8dd7-e93337e205ae",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.id(1048))",
                  "err": {},
                  "uuid": "ec29e838-42df-4e0b-8d84-5e556ddcbb04",
                  "parentUUID": "c60ed97d-1f77-4a26-8dd7-e93337e205ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).id(512);assert.strictEqual(event.id(),\"512\");event.id(\"xyz\");assert.strictEqual(event.id(),\"xyz\")",
                  "err": {},
                  "uuid": "c4a15316-7e28-43c2-b24d-2470abf2c14f",
                  "parentUUID": "c60ed97d-1f77-4a26-8dd7-e93337e205ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec29e838-42df-4e0b-8d84-5e556ddcbb04",
                "c4a15316-7e28-43c2-b24d-2470abf2c14f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd5cc854-bed7-4ed5-aea0-0ed2dc499f30",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.uid(1048))",
                  "err": {},
                  "uuid": "40ab4b53-6c9c-405e-a237-aec6f6644be7",
                  "parentUUID": "fd5cc854-bed7-4ed5-aea0-0ed2dc499f30",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).uid(512);assert.strictEqual(event.uid(),\"512\");event.id(\"xyz\");assert.strictEqual(event.uid(),\"xyz\")",
                  "err": {},
                  "uuid": "15bef1c8-fb77-4f30-b392-44d3bba6bf8c",
                  "parentUUID": "fd5cc854-bed7-4ed5-aea0-0ed2dc499f30",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40ab4b53-6c9c-405e-a237-aec6f6644be7",
                "15bef1c8-fb77-4f30-b392-44d3bba6bf8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1f06fa7-8d80-4668-9237-bc2bf2d2334d",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.sequence(1))",
                  "err": {},
                  "uuid": "03363d28-027f-405b-8eea-1e29dcdcada9",
                  "parentUUID": "e1f06fa7-8d80-4668-9237-bc2bf2d2334d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).sequence(1048);assert.strictEqual(event.sequence(),1048)",
                  "err": {},
                  "uuid": "4eefcfe7-44c2-4abc-b6a5-505d8986c00c",
                  "parentUUID": "e1f06fa7-8d80-4668-9237-bc2bf2d2334d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.sequence(\"hello\")},/`sequence`/)",
                  "err": {},
                  "uuid": "cc6dd65c-e635-4a57-b02c-5debd97f6e5a",
                  "parentUUID": "e1f06fa7-8d80-4668-9237-bc2bf2d2334d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).sequence(12);assert.strictEqual(event.sequence(),12);event.sequence(0);assert.strictEqual(event.sequence(),0)",
                  "err": {},
                  "uuid": "1bdae12c-245f-40ab-bd20-98063ad18b05",
                  "parentUUID": "e1f06fa7-8d80-4668-9237-bc2bf2d2334d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03363d28-027f-405b-8eea-1e29dcdcada9",
                "4eefcfe7-44c2-4abc-b6a5-505d8986c00c",
                "cc6dd65c-e635-4a57-b02c-5debd97f6e5a",
                "1bdae12c-245f-40ab-bd20-98063ad18b05"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5225f357-b38c-4cfb-aa4e-a2dc45b232c8",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:new Date},new ICalCalendar);event.start(now);assert.strictEqual(event.start(),now)",
                  "err": {},
                  "uuid": "6c846f23-050b-4e7d-8621-5b78ef720435",
                  "parentUUID": "5225f357-b38c-4cfb-aa4e-a2dc45b232c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.start(date));assert.deepStrictEqual(event.start(),date)",
                  "err": {},
                  "uuid": "a54f05bb-122e-4ba4-9bfc-bfd6493eb272",
                  "parentUUID": "5225f357-b38c-4cfb-aa4e-a2dc45b232c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.start(date));assert.deepStrictEqual(event.start(),date)",
                  "err": {},
                  "uuid": "bc22ac5c-d9be-46b6-8c35-16d61fe46f32",
                  "parentUUID": "5225f357-b38c-4cfb-aa4e-a2dc45b232c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.start(3)},/`start`/,\"Number\");assert.throws(function(){event.start(null)},/`start`/,\"null\");assert.throws(function(){event.start(NaN)},/`start`/,\"NaN\");assert.throws(function(){event.start(new Date(\"hallo\"))},/`start`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "566e702c-b05c-40e3-b122-5003ef7a1cf9",
                  "parentUUID": "5225f357-b38c-4cfb-aa4e-a2dc45b232c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=moment().add(5,\"minutes\");const end=moment();const event=new ICalEvent({start:new Date},new ICalCalendar).end(end).start(start);assert.deepStrictEqual(event.start(),end);assert.deepStrictEqual(event.end(),start)",
                  "err": {},
                  "uuid": "22fbfc0a-2c38-4166-9937-c0f568f5c900",
                  "parentUUID": "5225f357-b38c-4cfb-aa4e-a2dc45b232c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.start(moment()));assert.deepStrictEqual(event,event.start(new Date))",
                  "err": {},
                  "uuid": "9dd9261a-cdf0-44df-ac02-aed15d6cd1b2",
                  "parentUUID": "5225f357-b38c-4cfb-aa4e-a2dc45b232c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c846f23-050b-4e7d-8621-5b78ef720435",
                "a54f05bb-122e-4ba4-9bfc-bfd6493eb272",
                "bc22ac5c-d9be-46b6-8c35-16d61fe46f32",
                "566e702c-b05c-40e3-b122-5003ef7a1cf9",
                "22fbfc0a-2c38-4166-9937-c0f568f5c900",
                "9dd9261a-cdf0-44df-ac02-aed15d6cd1b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1701f062-30ad-4d80-b93a-be09cda538ad",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:moment().subtract({minute:1})},new ICalCalendar);event.end(now);assert.deepStrictEqual(event.end(),now)",
                  "err": {},
                  "uuid": "2dc7171e-2589-49dd-95ad-6a05660e8d6e",
                  "parentUUID": "1701f062-30ad-4d80-b93a-be09cda538ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.end(date));assert.deepStrictEqual(event.end(),date)",
                  "err": {},
                  "uuid": "be45a410-0900-4f34-bff6-95c40237d67e",
                  "parentUUID": "1701f062-30ad-4d80-b93a-be09cda538ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.end(date));assert.deepStrictEqual(event.end(),date)",
                  "err": {},
                  "uuid": "e1482dc6-c3cf-4683-a33f-7b7532625b3b",
                  "parentUUID": "1701f062-30ad-4d80-b93a-be09cda538ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.end(3)},/`end`/,\"Number\");assert.throws(function(){event.end(NaN)},/`end`/,\"NaN\");assert.throws(function(){event.end(new Date(\"hallo\"))},/`end`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "4e0aa787-b207-4ac8-8805-353321278eee",
                  "parentUUID": "1701f062-30ad-4d80-b93a-be09cda538ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=moment().add(5,\"minutes\");const end=moment();const event=new ICalEvent({start:new Date},new ICalCalendar).start(start).end(end);assert.deepStrictEqual(event.start(),end);assert.deepStrictEqual(event.end(),start)",
                  "err": {},
                  "uuid": "7aa93645-55d8-4336-81a9-6d27a299004f",
                  "parentUUID": "1701f062-30ad-4d80-b93a-be09cda538ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.end(moment()));assert.deepStrictEqual(event,event.end(new Date))",
                  "err": {},
                  "uuid": "c14a3414-129e-4a39-b713-1c33f8bd0ef1",
                  "parentUUID": "1701f062-30ad-4d80-b93a-be09cda538ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2dc7171e-2589-49dd-95ad-6a05660e8d6e",
                "be45a410-0900-4f34-bff6-95c40237d67e",
                "e1482dc6-c3cf-4683-a33f-7b7532625b3b",
                "4e0aa787-b207-4ac8-8805-353321278eee",
                "7aa93645-55d8-4336-81a9-6d27a299004f",
                "c14a3414-129e-4a39-b713-1c33f8bd0ef1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c67f072-3201-4890-b00f-a017c655fe84",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:new Date},new ICalCalendar);event.recurrenceId(now);assert.deepStrictEqual(event.recurrenceId(),now)",
                  "err": {},
                  "uuid": "397c7212-f9cb-4358-8f9e-e1146db245b3",
                  "parentUUID": "6c67f072-3201-4890-b00f-a017c655fe84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.recurrenceId(date));assert.deepStrictEqual(event.recurrenceId(),date)",
                  "err": {},
                  "uuid": "cf3e37f2-e838-4e5b-b0b2-b4035c408ae8",
                  "parentUUID": "6c67f072-3201-4890-b00f-a017c655fe84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.recurrenceId(date));assert.deepStrictEqual(event.recurrenceId(),date)",
                  "err": {},
                  "uuid": "6646f8ff-dff9-42a7-b6a3-02114632242d",
                  "parentUUID": "6c67f072-3201-4890-b00f-a017c655fe84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.recurrenceId(3)},/`recurrenceId`/,\"Number\");assert.throws(function(){event.recurrenceId(NaN)},/`recurrenceId`/,\"NaN\");assert.throws(function(){event.recurrenceId(new Date(\"hallo\"))},/`recurrenceId`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "3d5b3f67-3438-48a6-8326-73c3327116ca",
                  "parentUUID": "6c67f072-3201-4890-b00f-a017c655fe84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.recurrenceId(moment()));assert.deepStrictEqual(event,event.recurrenceId(new Date))",
                  "err": {},
                  "uuid": "d79edc7c-e92c-423c-a3f1-083563f8680a",
                  "parentUUID": "6c67f072-3201-4890-b00f-a017c655fe84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "397c7212-f9cb-4358-8f9e-e1146db245b3",
                "cf3e37f2-e838-4e5b-b0b2-b4035c408ae8",
                "6646f8ff-dff9-42a7-b6a3-02114632242d",
                "3d5b3f67-3438-48a6-8326-73c3327116ca",
                "d79edc7c-e92c-423c-a3f1-083563f8680a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d46e3a13-1cf5-4a3f-b87d-2c632694b226",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar).timezone(\"Europe/Berlin\");assert.strictEqual(e.timezone(),\"Europe/Berlin\")",
                  "err": {},
                  "uuid": "850227b7-16af-438e-993e-32029abb6cfd",
                  "parentUUID": "d46e3a13-1cf5-4a3f-b87d-2c632694b226",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const e=new ICalEvent({start:moment(),summary:\"Example Event\"},cal);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),null);cal.timezone(\"Europe/London\");assert.strictEqual(cal.timezone(),\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/London\");e.timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/Berlin\");cal.timezone(null);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),\"Europe/Berlin\");e.timezone(null);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "417fbf81-b98a-4487-a209-af5e51966ce8",
                  "parentUUID": "d46e3a13-1cf5-4a3f-b87d-2c632694b226",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.timezone(\"Europe/Berlin\"))",
                  "err": {},
                  "uuid": "d1424b94-d6d0-4d8a-abb6-f42d4de50b4a",
                  "parentUUID": "d46e3a13-1cf5-4a3f-b87d-2c632694b226",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),end:new Date(new Date().getTime()+36e5),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/London\")",
                  "err": {},
                  "uuid": "6d200d84-ffdb-4b21-93c7-6e0a232fd33f",
                  "parentUUID": "d46e3a13-1cf5-4a3f-b87d-2c632694b226",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.floating(true);e.timezone(\"Europe/London\");assert.strictEqual(e.floating(),false)",
                  "err": {},
                  "uuid": "6c8a35a3-7681-47e2-9168-efcab73757a8",
                  "parentUUID": "d46e3a13-1cf5-4a3f-b87d-2c632694b226",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.floating(true);e.timezone(null);assert.strictEqual(e.floating(),true)",
                  "err": {},
                  "uuid": "7602ff22-b787-4298-9a5a-6cbda29489d2",
                  "parentUUID": "d46e3a13-1cf5-4a3f-b87d-2c632694b226",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),timezone:\"Europe/Berlin\",summary:\"Example Event\"},new ICalCalendar);assert.strictEqual(e.timezone(),\"Europe/Berlin\");e.timezone(\"UTC\");assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "15be19d6-2a9d-45ff-98ab-bf5ed600f7d8",
                  "parentUUID": "d46e3a13-1cf5-4a3f-b87d-2c632694b226",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "850227b7-16af-438e-993e-32029abb6cfd",
                "417fbf81-b98a-4487-a209-af5e51966ce8",
                "d1424b94-d6d0-4d8a-abb6-f42d4de50b4a",
                "6d200d84-ffdb-4b21-93c7-6e0a232fd33f",
                "6c8a35a3-7681-47e2-9168-efcab73757a8",
                "7602ff22-b787-4298-9a5a-6cbda29489d2",
                "15be19d6-2a9d-45ff-98ab-bf5ed600f7d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0ac746d6-e906-4d52-a01d-41322913d660",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment().add(1,\"day\");const e=new ICalEvent({start:new Date},new ICalCalendar).stamp(now);assert.deepStrictEqual(e.stamp(),now)",
                  "err": {},
                  "uuid": "fea1b484-1466-4a6b-891b-838e48b473f4",
                  "parentUUID": "0ac746d6-e906-4d52-a01d-41322913d660",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.stamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "e4451787-1586-4165-83ad-c686787a50cf",
                  "parentUUID": "0ac746d6-e906-4d52-a01d-41322913d660",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.stamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "e0032125-4dd2-499a-8cb8-decbdcd9d7e8",
                  "parentUUID": "0ac746d6-e906-4d52-a01d-41322913d660",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.stamp(3)},/`stamp`/,\"Number\");assert.throws(function(){event.stamp(null)},/`stamp`/,\"null\");assert.throws(function(){event.stamp(NaN)},/`stamp`/,\"NaN\");assert.throws(function(){event.stamp(new Date(\"hallo\"))},/`stamp`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "1edd537b-0212-496e-9490-5ac05d568a8a",
                  "parentUUID": "0ac746d6-e906-4d52-a01d-41322913d660",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.stamp(new Date))",
                  "err": {},
                  "uuid": "d37bc2fa-9794-419b-a8a0-923447926f70",
                  "parentUUID": "0ac746d6-e906-4d52-a01d-41322913d660",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fea1b484-1466-4a6b-891b-838e48b473f4",
                "e4451787-1586-4165-83ad-c686787a50cf",
                "e0032125-4dd2-499a-8cb8-decbdcd9d7e8",
                "1edd537b-0212-496e-9490-5ac05d568a8a",
                "d37bc2fa-9794-419b-a8a0-923447926f70"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cffb15c5-e14e-4df0-9a39-7ddf789c888e",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment().add(1,\"day\");const e=new ICalEvent({start:new Date},new ICalCalendar).timestamp(now);assert.deepStrictEqual(e.timestamp(),now)",
                  "err": {},
                  "uuid": "42f83a1a-0d5a-4124-bcf8-5af573306123",
                  "parentUUID": "cffb15c5-e14e-4df0-9a39-7ddf789c888e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.timestamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "0f1aa4db-ad67-45c6-b65f-ce90abf4fe86",
                  "parentUUID": "cffb15c5-e14e-4df0-9a39-7ddf789c888e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.timestamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "110b0b69-d7f8-4f1f-9a05-93746d7e6961",
                  "parentUUID": "cffb15c5-e14e-4df0-9a39-7ddf789c888e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.timestamp(3)},/`stamp`/,\"Number\");assert.throws(function(){event.timestamp(null)},/`stamp`/,\"null\");assert.throws(function(){event.timestamp(NaN)},/`stamp`/,\"NaN\");assert.throws(function(){event.timestamp(new Date(\"hallo\"))},/`stamp`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "5143b3a4-0275-4cef-ba5e-c4c000ecd6ff",
                  "parentUUID": "cffb15c5-e14e-4df0-9a39-7ddf789c888e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.timestamp(new Date))",
                  "err": {},
                  "uuid": "8b33d51e-4078-45e7-a469-96b7b3317aae",
                  "parentUUID": "cffb15c5-e14e-4df0-9a39-7ddf789c888e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42f83a1a-0d5a-4124-bcf8-5af573306123",
                "0f1aa4db-ad67-45c6-b65f-ce90abf4fe86",
                "110b0b69-d7f8-4f1f-9a05-93746d7e6961",
                "5143b3a4-0275-4cef-ba5e-c4c000ecd6ff",
                "8b33d51e-4078-45e7-a469-96b7b3317aae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "afc6bc06-734c-403d-afc6-eacb39dce644",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.allDay(true);assert.strictEqual(e.allDay(),true)",
                  "err": {},
                  "uuid": "12662bcf-96eb-42c4-a49c-a00ad99f2ccb",
                  "parentUUID": "afc6bc06-734c-403d-afc6-eacb39dce644",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.allDay(true))",
                  "err": {},
                  "uuid": "460096a9-75d3-4743-a985-9f29b3fac0e5",
                  "parentUUID": "afc6bc06-734c-403d-afc6-eacb39dce644",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.allDay(true);assert.strictEqual(event.allDay(),true)",
                  "err": {},
                  "uuid": "6307e92c-3330-4f9d-a814-e55b518e6c58",
                  "parentUUID": "afc6bc06-734c-403d-afc6-eacb39dce644",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12662bcf-96eb-42c4-a49c-a00ad99f2ccb",
                "460096a9-75d3-4743-a985-9f29b3fac0e5",
                "6307e92c-3330-4f9d-a814-e55b518e6c58"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a99f6d73-ccdc-4471-8346-07236fc9d9a0",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar).floating(true);assert.strictEqual(e.floating(),true)",
                  "err": {},
                  "uuid": "345958e2-c0ab-46a2-97b8-a376503ddadf",
                  "parentUUID": "a99f6d73-ccdc-4471-8346-07236fc9d9a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.floating(false));assert.deepStrictEqual(e,e.floating(true))",
                  "err": {},
                  "uuid": "0b9956ee-010a-4f3b-bea9-3c2fab8c2544",
                  "parentUUID": "a99f6d73-ccdc-4471-8346-07236fc9d9a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.floating(true);assert.strictEqual(event.floating(),true)",
                  "err": {},
                  "uuid": "8cd1c04d-aa93-496c-b639-5f5ca53f9390",
                  "parentUUID": "a99f6d73-ccdc-4471-8346-07236fc9d9a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");e.floating(true);assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "035aea44-879c-42a7-a45a-ceaa4243919c",
                  "parentUUID": "a99f6d73-ccdc-4471-8346-07236fc9d9a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");e.floating(false);assert.strictEqual(e.timezone(),\"Europe/London\")",
                  "err": {},
                  "uuid": "4de2b061-a57e-4c64-a607-f93029393b1c",
                  "parentUUID": "a99f6d73-ccdc-4471-8346-07236fc9d9a0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "345958e2-c0ab-46a2-97b8-a376503ddadf",
                "0b9956ee-010a-4f3b-bea9-3c2fab8c2544",
                "8cd1c04d-aa93-496c-b639-5f5ca53f9390",
                "035aea44-879c-42a7-a45a-ceaa4243919c",
                "4de2b061-a57e-4c64-a607-f93029393b1c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d81f9020-5039-4754-af49-9dd2f96eea11",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options={freq:ICalEventRepeatingFreq.MONTHLY,count:5,interval:2,until:moment(),exclude:[moment()]};const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e.repeating(),null);e.repeating(options);assert.strictEqual(JSON.stringify(e.repeating(),null,\"  \"),JSON.stringify(options,null,\"  \"));e.repeating(null);assert.deepStrictEqual(e.repeating(),null)",
                  "err": {},
                  "uuid": "9de2cbc6-5d95-40ef-bbf2-6226b813742d",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.repeating(null));assert.deepStrictEqual(e.repeating(),null)",
                  "err": {},
                  "uuid": "5d2949e5-79d2-4b9c-a599-076bcc3a8663",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.repeating(null),\"repeating(null)\");assert.deepStrictEqual(e,e.repeating({freq:ICalEventRepeatingFreq.MONTHLY}),\"repeating({freq: 'MONTHLY'})\")",
                  "err": {},
                  "uuid": "673a9765-5e40-4280-91c3-0ccc627f9783",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{}},new ICalCalendar)},/Input must be one of the following: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY/)",
                  "err": {},
                  "uuid": "5fd44b89-03e1-466e-a268-aaf1c7ea4dc4",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:\"hello\"}},new ICalCalendar)},/must be one of the following/)",
                  "err": {},
                  "uuid": "65946e7b-3a06-4f3b-9f04-9c2f757df101",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.freq,\"MONTHLY\")",
                  "err": {},
                  "uuid": "b7349a30-545f-4b96-a76f-63154aa6c178",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,count:Infinity}},new ICalCalendar)},/`repeating.count` must be a finite number!/);assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,count:\"abc\"}},new ICalCalendar)},/`repeating\\.count` must be a finite number!/)",
                  "err": {},
                  "uuid": "32f97b71-201a-47d3-9d8d-90dc77774117",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,count:5});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.count,5)",
                  "err": {},
                  "uuid": "81dd71e5-df07-4983-adc7-5fbbbaa6f541",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:Infinity}},new ICalCalendar)},/`repeating.interval` must be a finite number!/);assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:\"abc\"}},new ICalCalendar)},/`repeating.interval` must be a finite number!/)",
                  "err": {},
                  "uuid": "7931e68f-d55e-480a-87a8-9223ad4b4a3c",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,interval:5});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.interval,5)",
                  "err": {},
                  "uuid": "e6b707ea-3eac-447a-af00-622871646b36",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,until:null}},new ICalCalendar)},/Error: `repeating\\.until` has to be a valid date!/)",
                  "err": {},
                  "uuid": "0418b47d-6367-4467-be2d-4356ca94a275",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "8fee5805-4c47-4b5b-a342-780cd69cb2af",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "a9003f65-b406-4c9e-bd55-660036e9ae79",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\");event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "9883ba21-3392-4ac7-8bdd-96318a5d60b6",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:3})},/`repeating.until`/,\"Number\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:null})},/`repeating.until`/,\"null\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:NaN})},/`repeating.until`/,\"NaN\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:new Date(\"foo\")})},/`repeating.until`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "dfd70c11-69fc-4b5f-83c6-78b4c0508495",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:\"FOO\"}},new ICalCalendar)},/Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:[\"SU\",\"BAR\",\"th\"]}},new ICalCalendar)},/Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:[\"SU\",Infinity,\"th\"]}},new ICalCalendar)},/Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/)",
                  "err": {},
                  "uuid": "fb713c0f-b439-49f9-b343-7a2374c40f8f",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,byDay:[ICalWeekday.SU,ICalWeekday.WE,ICalWeekday.TH]});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byDay,[\"SU\",\"WE\",\"TH\"])",
                  "err": {},
                  "uuid": "55165596-d4a3-437d-b67c-f28e144261e0",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonth:\"FOO\"}},new ICalCalendar)},/`repeating\\.byMonth` contains invalid value `FOO`/);assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonth:[1,14,7]}},new ICalCalendar)},/`repeating\\.byMonth` contains invalid value `14`/)",
                  "err": {},
                  "uuid": "f6296eee-9f3d-4802-9310-22b0d4345cbc",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,byMonth:[1,12,7]});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byMonth,[1,12,7])",
                  "err": {},
                  "uuid": "e9fdcfec-fef7-43d3-9c4b-2156074ad731",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonthDay:\"FOO\"}},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `FOO`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonthDay:[1,32,-15]}},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `32`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonthDay:[-1,-32,15]}},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `-32`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonthDay:[1,0,15]}},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `0`/)",
                  "err": {},
                  "uuid": "c0b3d25f-1a8f-441d-9749-140a9ea9f598",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,byMonthDay:[1,15]});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byMonthDay,[1,15])",
                  "err": {},
                  "uuid": "7748689c-a3cf-4e71-8904-24f7344726a9",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,interval:2,byDay:[ICalWeekday.SU],bySetPos:[367]}},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `367`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,interval:2,byDay:[ICalWeekday.SU],bySetPos:[-367]}},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `-367`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,interval:2,byDay:[ICalWeekday.SU],bySetPos:[0]}},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `0`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,interval:2,byDay:[ICalWeekday.SU],bySetPos:[\"FOO\"]}},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `FOO`/)",
                  "err": {},
                  "uuid": "6e374384-5215-40bd-af8f-3dca07defb76",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,interval:2,bySetPos:6}},new ICalCalendar)},/`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/)",
                  "err": {},
                  "uuid": "8f8297d2-1012-43c5-8b6e-e062587e0d9f",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,byDay:[ICalWeekday.SU],bySetPos:[2]});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.byDay?.length,1);assert.strictEqual(result.bySetPos?.length,1)",
                  "err": {},
                  "uuid": "9ee43a1f-b7c1-4b9c-85e0-3fb6720301ab",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:[ICalWeekday.SU],exclude:new Date(\"FOO\")}},new ICalCalendar)},/has to be a valid date/)",
                  "err": {},
                  "uuid": "512021c5-4716-442a-b5f6-c1ebce28758b",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:[ICalWeekday.SU],exclude:[moment(),new Date(\"BAR\"),\"FOO\"]}},new ICalCalendar)},/has to be a valid date/)",
                  "err": {},
                  "uuid": "226ab9b8-6470-4ff1-ab29-098a4730f7c5",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:[ICalWeekday.SU],exclude:42}},new ICalCalendar)},/`repeating.exclude\\[0\\]` has to be a valid date!/)",
                  "err": {},
                  "uuid": "dd44d7ef-2138-4cd3-b8b3-048eb180a324",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\");e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,exclude:[date.toJSON(),date.toDate(),date]});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.ok(Array.isArray(result.exclude));assert.strictEqual(result.exclude.length,3);assert.deepStrictEqual(result.exclude[0],date.toJSON(),\"String\");assert.deepStrictEqual(result.exclude[1],date.toDate(),\"Date\");assert.deepStrictEqual(result.exclude[2],date,\"Moment\")",
                  "err": {},
                  "uuid": "7a08e71a-c235-449f-89ac-3f90899040c7",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,startOfWeek:\"FOO\"}},new ICalCalendar)},/Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/)",
                  "err": {},
                  "uuid": "c14851a5-c934-4aa6-80b1-245801aeb23b",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,startOfWeek:ICalWeekday.SU});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.startOfWeek,\"SU\")",
                  "err": {},
                  "uuid": "902b5d37-de99-4106-a8a2-3f0162860e79",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=new Date(Date.UTC(2012,1,1,10,30));const e=new ICalEvent({start},new ICalCalendar);const rule=new rrule.RRule({freq:rrule.RRule.WEEKLY,interval:5,byweekday:[rrule.RRule.MO,rrule.RRule.FR],dtstart:start,until:new Date(Date.UTC(2012,12,31))});e.repeating(rule);const result=e.repeating();assert.ok(isRRule(result));assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "9f1b0df9-89e5-40b8-9e69-659c97103597",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const rule=\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\";e.repeating(rule);const result=e.repeating();assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "49989b40-1c68-49dc-b948-ff0d7518dbd8",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add RRULE: prefix for single line string if not already there",
                  "fullTitle": "ical-generator Event repeating() should add RRULE: prefix for single line string if not already there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const rule=\"FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\";e.repeating(rule);const result=e.repeating();assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "cd4fb192-7ff6-4d3b-945f-8c11366c4439",
                  "parentUUID": "d81f9020-5039-4754-af49-9dd2f96eea11",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9de2cbc6-5d95-40ef-bbf2-6226b813742d",
                "5d2949e5-79d2-4b9c-a599-076bcc3a8663",
                "673a9765-5e40-4280-91c3-0ccc627f9783",
                "5fd44b89-03e1-466e-a268-aaf1c7ea4dc4",
                "65946e7b-3a06-4f3b-9f04-9c2f757df101",
                "b7349a30-545f-4b96-a76f-63154aa6c178",
                "32f97b71-201a-47d3-9d8d-90dc77774117",
                "81dd71e5-df07-4983-adc7-5fbbbaa6f541",
                "7931e68f-d55e-480a-87a8-9223ad4b4a3c",
                "e6b707ea-3eac-447a-af00-622871646b36",
                "0418b47d-6367-4467-be2d-4356ca94a275",
                "8fee5805-4c47-4b5b-a342-780cd69cb2af",
                "a9003f65-b406-4c9e-bd55-660036e9ae79",
                "9883ba21-3392-4ac7-8bdd-96318a5d60b6",
                "dfd70c11-69fc-4b5f-83c6-78b4c0508495",
                "fb713c0f-b439-49f9-b343-7a2374c40f8f",
                "55165596-d4a3-437d-b67c-f28e144261e0",
                "f6296eee-9f3d-4802-9310-22b0d4345cbc",
                "e9fdcfec-fef7-43d3-9c4b-2156074ad731",
                "c0b3d25f-1a8f-441d-9749-140a9ea9f598",
                "7748689c-a3cf-4e71-8904-24f7344726a9",
                "6e374384-5215-40bd-af8f-3dca07defb76",
                "8f8297d2-1012-43c5-8b6e-e062587e0d9f",
                "9ee43a1f-b7c1-4b9c-85e0-3fb6720301ab",
                "512021c5-4716-442a-b5f6-c1ebce28758b",
                "226ab9b8-6470-4ff1-ab29-098a4730f7c5",
                "dd44d7ef-2138-4cd3-b8b3-048eb180a324",
                "7a08e71a-c235-449f-89ac-3f90899040c7",
                "c14851a5-c934-4aa6-80b1-245801aeb23b",
                "902b5d37-de99-4106-a8a2-3f0162860e79",
                "9f1b0df9-89e5-40b8-9e69-659c97103597",
                "49989b40-1c68-49dc-b948-ff0d7518dbd8",
                "cd4fb192-7ff6-4d3b-945f-8c11366c4439"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0afebf53-083e-4e5e-95f9-3b2cb009dbf0",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.summary(),\"\");e.summary(\"Testevent\");assert.strictEqual(e.summary(),\"Testevent\")",
                  "err": {},
                  "uuid": "628d2883-86d0-41e8-8b57-e43d5a0408b9",
                  "parentUUID": "0afebf53-083e-4e5e-95f9-3b2cb009dbf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.summary(\"\"));assert.deepStrictEqual(e,e.summary(\"Testevent\"))",
                  "err": {},
                  "uuid": "f5899eca-996f-4855-8c37-25a30ab6408e",
                  "parentUUID": "0afebf53-083e-4e5e-95f9-3b2cb009dbf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.summary(\"Example Event II\");assert.strictEqual(event.summary(),\"Example Event II\");event.summary(\"\");assert.strictEqual(event.summary(),\"\")",
                  "err": {},
                  "uuid": "d83914de-d523-4350-9d17-6a56a6db1577",
                  "parentUUID": "0afebf53-083e-4e5e-95f9-3b2cb009dbf0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "628d2883-86d0-41e8-8b57-e43d5a0408b9",
                "f5899eca-996f-4855-8c37-25a30ab6408e",
                "d83914de-d523-4350-9d17-6a56a6db1577"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ebf3c064-2ecc-4235-be01-ecc385a80935",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.location(),null);e.location(\"Test Location\");assert.deepStrictEqual(e.location(),{title:\"Test Location\"});e.location(null);assert.strictEqual(e.location(),null)",
                  "err": {},
                  "uuid": "5efacbac-89b4-4797-bb7f-cca72f2acbe1",
                  "parentUUID": "ebf3c064-2ecc-4235-be01-ecc385a80935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.location(),null);e.location({title:\"Foo\",geo:{lat:44.5,lon:-3.4}});const location=e.location();assert.ok(location);assert.ok(\"title\"in location);assert.deepStrictEqual(location?.title,\"Foo\");assert.deepStrictEqual(location?.geo,{lat:44.5,lon:-3.4});e.location(null);assert.strictEqual(e.location(),null)",
                  "err": {},
                  "uuid": "a4b75146-44dd-422e-84a6-712810d293a6",
                  "parentUUID": "ebf3c064-2ecc-4235-be01-ecc385a80935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.location(null));assert.deepStrictEqual(e,e.location(\"Test Location\"))",
                  "err": {},
                  "uuid": "5f5ea3b6-e503-4de6-b46e-0e4667ea193d",
                  "parentUUID": "ebf3c064-2ecc-4235-be01-ecc385a80935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.location(\"Europa-Park\");const location=event.location();assert.ok(location);assert.ok(\"title\"in location);assert.strictEqual(location?.title,\"Europa-Park\")",
                  "err": {},
                  "uuid": "67b78587-d152-4893-b64c-76e844b45570",
                  "parentUUID": "ebf3c064-2ecc-4235-be01-ecc385a80935",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);assert.throws(()=>event.location({geo:3}),/`location` isn't formatted correctly/i);assert.throws(()=>event.location({}),/`location` isn't formatted correctly/i)",
                  "err": {},
                  "uuid": "cc0e7a4d-aaba-41c4-a627-d615bd8464c5",
                  "parentUUID": "ebf3c064-2ecc-4235-be01-ecc385a80935",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5efacbac-89b4-4797-bb7f-cca72f2acbe1",
                "a4b75146-44dd-422e-84a6-712810d293a6",
                "5f5ea3b6-e503-4de6-b46e-0e4667ea193d",
                "67b78587-d152-4893-b64c-76e844b45570",
                "cc0e7a4d-aaba-41c4-a627-d615bd8464c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca2849c8-5371-43fa-aefd-234c03ab549d",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.description(),null);e.description(\"I don't need a description. I'm far to awesome for descriptions\\u2026\");assert.deepStrictEqual(e.description(),{plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\"});e.description({plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\",html:\"I don't need a description.<br />I'm far to awesome for descriptions\\u2026\"});assert.deepStrictEqual(e.description(),{plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\",html:\"I don't need a description.<br />I'm far to awesome for descriptions\\u2026\"});e.description(null);assert.strictEqual(e.description(),null)",
                  "err": {},
                  "uuid": "d7f7d811-e1a3-4226-9af1-fc26eb17e047",
                  "parentUUID": "ca2849c8-5371-43fa-aefd-234c03ab549d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.description(null));assert.deepStrictEqual(e,e.description(\"I don't need a description. I'm far to awesome for descriptions\\u2026\"))",
                  "err": {},
                  "uuid": "a9415c35-8b32-43bc-916f-ca86173eb38e",
                  "parentUUID": "ca2849c8-5371-43fa-aefd-234c03ab549d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.description(\"Well. But other people need descriptions\\u2026 :/\");assert.deepStrictEqual(event.description(),{plain:\"Well. But other people need descriptions\\u2026 :/\"});event.description({plain:\"I am uncool text.\",html:\"<marquee>I'm the best HTML tag in this universe!</marquee>\"});assert.ok(event.toString().includes(\"<marquee>I'm the best HTML tag in this universe!</marquee>\"))",
                  "err": {},
                  "uuid": "87af0377-bef8-4f0c-8ffa-5332db2d113f",
                  "parentUUID": "ca2849c8-5371-43fa-aefd-234c03ab549d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7f7d811-e1a3-4226-9af1-fc26eb17e047",
                "a9415c35-8b32-43bc-916f-ca86173eb38e",
                "87af0377-bef8-4f0c-8ffa-5332db2d113f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d180e03-edd5-41cd-babe-e7d24aa2adea",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.organizer(),null);e.organizer(null);assert.strictEqual(e.organizer(),null);e.organizer({name:\"Sebastian Pekarek\",email:\"mail@example.com\"});assert.strictEqual(\"Sebastian Pekarek\",e.organizer()?.name);assert.strictEqual(\"mail@example.com\",e.organizer()?.email);e.organizer({name:\"Sebastian Pekarek\",email:\"mail@example.com\",mailto:\"mail2@example2.com\"});assert.strictEqual(\"Sebastian Pekarek\",e.organizer()?.name);assert.strictEqual(\"mail@example.com\",e.organizer()?.email);assert.strictEqual(\"mail2@example2.com\",e.organizer()?.mailto)",
                  "err": {},
                  "uuid": "0fe29641-6ec1-43ec-9360-71c06a522ed5",
                  "parentUUID": "4d180e03-edd5-41cd-babe-e7d24aa2adea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.organizer(null));assert.deepStrictEqual(e,e.organizer(\"Sebastian Pekarek <mail@example.com>\"))",
                  "err": {},
                  "uuid": "0f851dca-10e8-4480-a7c0-85b9debd894e",
                  "parentUUID": "4d180e03-edd5-41cd-babe-e7d24aa2adea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({name:\"Sebastian Pekarek\",email:\"mail@example.com\"});assert.deepStrictEqual(event.organizer(),{name:\"Sebastian Pekarek\",email:\"mail@example.com\",mailto:void 0,sentBy:void 0});event.organizer({name:\"Sebastian Pekarek\",email:\"mail@example.com\",mailto:\"mail2@example2.com\"});assert.deepStrictEqual(event.organizer(),{name:\"Sebastian Pekarek\",email:\"mail@example.com\",mailto:\"mail2@example2.com\",sentBy:void 0})",
                  "err": {},
                  "uuid": "b67b4227-31b7-43bd-b462-1f5db5d8d64e",
                  "parentUUID": "4d180e03-edd5-41cd-babe-e7d24aa2adea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({name:\"Sebastian Pekarek\",email:\"mail@example.com\",sentBy:\"bot@example.com\"});assert.deepStrictEqual(event.organizer(),{name:\"Sebastian Pekarek\",email:\"mail@example.com\",mailto:void 0,sentBy:\"bot@example.com\"})",
                  "err": {},
                  "uuid": "af0ca1f7-8c83-4f41-af76-4fd30dac5d89",
                  "parentUUID": "4d180e03-edd5-41cd-babe-e7d24aa2adea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer(\"Sebastian Pekarek <mail@example.com>\");assert.deepStrictEqual(event.organizer(),{name:\"Sebastian Pekarek\",email:\"mail@example.com\"})",
                  "err": {},
                  "uuid": "d33f27de-48e2-4ca7-9d76-778db2b74955",
                  "parentUUID": "4d180e03-edd5-41cd-babe-e7d24aa2adea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer(\"foo bar\")},/`organizer`/)",
                  "err": {},
                  "uuid": "df2aa955-66d6-4196-83ee-9746d1051799",
                  "parentUUID": "4d180e03-edd5-41cd-babe-e7d24aa2adea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer({email:\"foo\"})},/`organizer\\.name`/)",
                  "err": {},
                  "uuid": "5f352af3-29f5-41f3-a43d-fb99ae067e93",
                  "parentUUID": "4d180e03-edd5-41cd-babe-e7d24aa2adea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer(Infinity)},/`organizer`/);assert.throws(function(){e.organizer(NaN)},/`organizer`/)",
                  "err": {},
                  "uuid": "51b91b01-41f3-4569-ab11-546a6f21f33a",
                  "parentUUID": "4d180e03-edd5-41cd-babe-e7d24aa2adea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({name:\"Sebastian Pekarek\"});assert.deepStrictEqual(event.organizer(),{name:\"Sebastian Pekarek\",email:void 0,mailto:void 0,sentBy:void 0})",
                  "err": {},
                  "uuid": "60cd687b-b466-4bd9-96a5-5912cc56b38a",
                  "parentUUID": "4d180e03-edd5-41cd-babe-e7d24aa2adea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include a : (PR #610)",
                  "fullTitle": "ical-generator Event organizer() should include a : (PR #610)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\",organizer:{name:\"Some Guy\"}},new ICalCalendar);assert.ok(event.toString().includes('ORGANIZER;CN=\"Some Guy\":'))",
                  "err": {},
                  "uuid": "9d1143ae-2227-4361-9414-f5b7b0c6ea90",
                  "parentUUID": "4d180e03-edd5-41cd-babe-e7d24aa2adea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fe29641-6ec1-43ec-9360-71c06a522ed5",
                "0f851dca-10e8-4480-a7c0-85b9debd894e",
                "b67b4227-31b7-43bd-b462-1f5db5d8d64e",
                "af0ca1f7-8c83-4f41-af76-4fd30dac5d89",
                "d33f27de-48e2-4ca7-9d76-778db2b74955",
                "df2aa955-66d6-4196-83ee-9746d1051799",
                "5f352af3-29f5-41f3-a43d-fb99ae067e93",
                "51b91b01-41f3-4569-ab11-546a6f21f33a",
                "60cd687b-b466-4bd9-96a5-5912cc56b38a",
                "9d1143ae-2227-4361-9414-f5b7b0c6ea90"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8551763e-682d-4160-be39-21e453426d01",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({email:\"mail@example.com\"},event);assert.strictEqual(event.createAttendee(attendee),attendee,\"createAttendee returns attendee\");assert.deepStrictEqual(event.attendees()[0],attendee,\"attendee pushed\")",
                  "err": {},
                  "uuid": "f07ac171-d0b2-4c24-b04a-262e4370e2b5",
                  "parentUUID": "8551763e-682d-4160-be39-21e453426d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createAttendee({email:\"mail@example.com\"})instanceof ICalAttendee);assert.strictEqual(event.attendees.length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "8f0a3a7e-e674-4153-a3c6-fe645dd94905",
                  "parentUUID": "8551763e-682d-4160-be39-21e453426d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=event.createAttendee(\"Zac <zac@example.com>\");assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(event.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "28967208-45aa-4122-8977-633af6dbcde5",
                  "parentUUID": "8551763e-682d-4160-be39-21e453426d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.createAttendee(\"foo bar\")},/isn't formated correctly/)",
                  "err": {},
                  "uuid": "60598acf-4cd8-41c7-8c90-5b5ce3f711e6",
                  "parentUUID": "8551763e-682d-4160-be39-21e453426d01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=event.createAttendee({name:\"Zac\",email:\"zac@example.com\"});assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(event.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "62f888c6-bc75-48ee-aa9a-5f0b912f6baa",
                  "parentUUID": "8551763e-682d-4160-be39-21e453426d01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f07ac171-d0b2-4c24-b04a-262e4370e2b5",
                "8f0a3a7e-e674-4153-a3c6-fe645dd94905",
                "28967208-45aa-4122-8977-633af6dbcde5",
                "60598acf-4cd8-41c7-8c90-5b5ce3f711e6",
                "62f888c6-bc75-48ee-aa9a-5f0b912f6baa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "46affc2f-8287-4f47-8720-b148f73fb035",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.attendees().length,0);const attendee=event.createAttendee({email:\"mail@example.com\"});assert.strictEqual(event.attendees().length,1);assert.deepStrictEqual(event.attendees()[0],attendee)",
                  "err": {},
                  "uuid": "ad1c71f9-807c-45c1-a3d5-78403645e652",
                  "parentUUID": "46affc2f-8287-4f47-8720-b148f73fb035",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.attendees([{name:\"Person A\",email:\"a@example.com\"},{name:\"Person B\",email:\"b@example.com\"}]);assert.strictEqual(event.attendees().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "3afe0696-6efa-4c3c-9b13-cd7ff609158f",
                  "parentUUID": "46affc2f-8287-4f47-8720-b148f73fb035",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad1c71f9-807c-45c1-a3d5-78403645e652",
                "3afe0696-6efa-4c3c-9b13-cd7ff609158f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cf45eb8d-48df-4ea2-ae38-e03af01a59b2",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createAlarm({type:ICalAlarmType.display,trigger:60*10})instanceof ICalAlarm)",
                  "err": {},
                  "uuid": "df75d906-5d05-404a-9b84-1671471d8999",
                  "parentUUID": "cf45eb8d-48df-4ea2-ae38-e03af01a59b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const alarm=event.createAlarm({type:ICalAlarmType.audio,trigger:60*10});assert.strictEqual(alarm.type(),\"audio\")",
                  "err": {},
                  "uuid": "1ab3d55a-bc00-44e9-a1c4-1839e588f8e1",
                  "parentUUID": "cf45eb8d-48df-4ea2-ae38-e03af01a59b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df75d906-5d05-404a-9b84-1671471d8999",
                "1ab3d55a-bc00-44e9-a1c4-1839e588f8e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5a94bb42-efec-4935-af38-e0833bced49e",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.alarms().length,0);const alarm=event.createAlarm({type:ICalAlarmType.display,trigger:600});assert.strictEqual(event.alarms().length,1);assert.deepStrictEqual(event.alarms()[0],alarm)",
                  "err": {},
                  "uuid": "8a0fac73-0c8d-4e54-926d-9e1687c61db0",
                  "parentUUID": "5a94bb42-efec-4935-af38-e0833bced49e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.alarms([{type:ICalAlarmType.audio,trigger:60},{type:ICalAlarmType.display,trigger:600}]);assert.strictEqual(event.alarms().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "ab99cfbb-d9f8-4e67-8040-2a1aa277279c",
                  "parentUUID": "5a94bb42-efec-4935-af38-e0833bced49e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a0fac73-0c8d-4e54-926d-9e1687c61db0",
                "ab99cfbb-d9f8-4e67-8040-2a1aa277279c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "19adefe9-cda3-42ac-8701-7e2c0baddb56",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createCategory({name:\"Test\"})instanceof ICalCategory)",
                  "err": {},
                  "uuid": "742832b1-175d-4915-91ef-e7d406e9dd91",
                  "parentUUID": "19adefe9-cda3-42ac-8701-7e2c0baddb56",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const category=event.createCategory({name:\"foo\"});assert.strictEqual(category.name(),\"foo\")",
                  "err": {},
                  "uuid": "97dec323-3351-4763-a4a1-0b6e18367fcd",
                  "parentUUID": "19adefe9-cda3-42ac-8701-7e2c0baddb56",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "742832b1-175d-4915-91ef-e7d406e9dd91",
                "97dec323-3351-4763-a4a1-0b6e18367fcd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ff9d039-2704-46e6-9266-ae60a8508500",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.categories().length,0);const category=event.createCategory({name:\"Test\"});assert.strictEqual(event.categories().length,1);assert.deepStrictEqual(event.categories()[0],category)",
                  "err": {},
                  "uuid": "0fe33f00-fe65-4519-a7ae-625734d51074",
                  "parentUUID": "7ff9d039-2704-46e6-9266-ae60a8508500",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.categories([{name:\"foo\"},{name:\"bar\"}]);assert.strictEqual(event.categories().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "e4b53cf1-39e9-485c-a947-34a30ba256bb",
                  "parentUUID": "7ff9d039-2704-46e6-9266-ae60a8508500",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fe33f00-fe65-4519-a7ae-625734d51074",
                "e4b53cf1-39e9-485c-a947-34a30ba256bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d47187c-ca67-4104-b859-dcc7f08cd0e1",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.status(),null);event.status(ICalEventStatus.CONFIRMED);assert.strictEqual(event.status(),\"CONFIRMED\");event.status(null);assert.strictEqual(event.status(),null)",
                  "err": {},
                  "uuid": "c02e3cf4-b727-4f06-b76a-a5884d1d694b",
                  "parentUUID": "1d47187c-ca67-4104-b859-dcc7f08cd0e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.status(null));assert.deepStrictEqual(e,e.status(ICalEventStatus.CONFIRMED))",
                  "err": {},
                  "uuid": "e4c2cf82-b299-45c4-9fa5-eecc9fac0762",
                  "parentUUID": "1d47187c-ca67-4104-b859-dcc7f08cd0e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.status(ICalEventStatus.CONFIRMED);e.status(null);assert.strictEqual(e.status(),null)",
                  "err": {},
                  "uuid": "a1e5f14e-2f54-4a64-81a3-a755692b78a5",
                  "parentUUID": "1d47187c-ca67-4104-b859-dcc7f08cd0e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.status(ICalEventStatus.CONFIRMED);assert.strictEqual(e.status(),\"CONFIRMED\");assert.strictEqual(e.status(),ICalEventStatus.CONFIRMED)",
                  "err": {},
                  "uuid": "97ef3dc7-decf-4702-932f-348b2a01e9ca",
                  "parentUUID": "1d47187c-ca67-4104-b859-dcc7f08cd0e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.status(\"COOKING\")},/Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);assert.throws(function(){e.status(Infinity)},/Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);assert.throws(function(){e.status(NaN)},/Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);assert.throws(function(){e.status(-1)},/Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/)",
                  "err": {},
                  "uuid": "eae42179-3da6-4680-a844-5324a45f9ea5",
                  "parentUUID": "1d47187c-ca67-4104-b859-dcc7f08cd0e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c02e3cf4-b727-4f06-b76a-a5884d1d694b",
                "e4c2cf82-b299-45c4-9fa5-eecc9fac0762",
                "a1e5f14e-2f54-4a64-81a3-a755692b78a5",
                "97ef3dc7-decf-4702-932f-348b2a01e9ca",
                "eae42179-3da6-4680-a844-5324a45f9ea5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76825bf6-e484-4204-abcb-5c60d2472a6e",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.busystatus(),null);event.busystatus(ICalEventBusyStatus.BUSY);assert.strictEqual(event.busystatus(),\"BUSY\");event.busystatus(null);assert.strictEqual(event.busystatus(),null)",
                  "err": {},
                  "uuid": "bab2bc64-dda5-445b-8ccc-2ff2f339fb26",
                  "parentUUID": "76825bf6-e484-4204-abcb-5c60d2472a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.busystatus(null));assert.deepStrictEqual(e,e.busystatus(ICalEventBusyStatus.BUSY))",
                  "err": {},
                  "uuid": "ae9b6827-4930-4c24-8fb1-743365d7e910",
                  "parentUUID": "76825bf6-e484-4204-abcb-5c60d2472a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.busystatus(ICalEventBusyStatus.BUSY);e.busystatus(null);assert.strictEqual(e.busystatus(),null)",
                  "err": {},
                  "uuid": "c4b7dd9d-ed5c-4505-875b-f07d2d3f3437",
                  "parentUUID": "76825bf6-e484-4204-abcb-5c60d2472a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.busystatus(ICalEventBusyStatus.BUSY);assert.strictEqual(e.busystatus(),\"BUSY\")",
                  "err": {},
                  "uuid": "7aee3a6c-f94f-48be-b812-a457e5cd34d1",
                  "parentUUID": "76825bf6-e484-4204-abcb-5c60d2472a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.busystatus(\"COOKING\")},/FREE, TENTATIVE, BUSY, OOF/);assert.throws(function(){e.busystatus(Infinity)},/FREE, TENTATIVE, BUSY, OOF/);assert.throws(function(){e.busystatus(NaN)},/FREE, TENTATIVE, BUSY, OOF/);assert.throws(function(){e.busystatus(-1)},/FREE, TENTATIVE, BUSY, OOF/)",
                  "err": {},
                  "uuid": "8c51bacb-a58a-4841-99b2-cc36c7b70b30",
                  "parentUUID": "76825bf6-e484-4204-abcb-5c60d2472a6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bab2bc64-dda5-445b-8ccc-2ff2f339fb26",
                "ae9b6827-4930-4c24-8fb1-743365d7e910",
                "c4b7dd9d-ed5c-4505-875b-f07d2d3f3437",
                "7aee3a6c-f94f-48be-b812-a457e5cd34d1",
                "8c51bacb-a58a-4841-99b2-cc36c7b70b30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df4026d3-c905-4f4e-8a32-201c71ff2266",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.priority(),null);e.priority(5);assert.strictEqual(e.priority(),5)",
                  "err": {},
                  "uuid": "79a9c7b1-c523-4905-bf4b-be30c1f8aa42",
                  "parentUUID": "df4026d3-c905-4f4e-8a32-201c71ff2266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.priority(null));assert.deepStrictEqual(e,e.priority(5))",
                  "err": {},
                  "uuid": "e51b7ff0-5e91-4340-ba1d-8bb7a4cc010a",
                  "parentUUID": "df4026d3-c905-4f4e-8a32-201c71ff2266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.priority(5);assert.strictEqual(event.priority(),5);assert.ok(event.toString().includes(\"PRIORITY:5\"))",
                  "err": {},
                  "uuid": "90249d23-c69d-4f84-b89d-dedeab722181",
                  "parentUUID": "df4026d3-c905-4f4e-8a32-201c71ff2266",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79a9c7b1-c523-4905-bf4b-be30c1f8aa42",
                "e51b7ff0-5e91-4340-ba1d-8bb7a4cc010a",
                "90249d23-c69d-4f84-b89d-dedeab722181"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd990e19-389d-4d53-8c6a-3bd549fa354c",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.url(),null);e.url(\"http://sebbo.net/\");assert.strictEqual(e.url(),\"http://sebbo.net/\")",
                  "err": {},
                  "uuid": "40ba01ac-626d-4558-81c1-dd63b03730ba",
                  "parentUUID": "fd990e19-389d-4d53-8c6a-3bd549fa354c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.url(null));assert.deepStrictEqual(e,e.url(\"http://sebbo.net/\"))",
                  "err": {},
                  "uuid": "e60bd868-0099-4d43-a331-11339fc32d17",
                  "parentUUID": "fd990e19-389d-4d53-8c6a-3bd549fa354c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.url(\"http://github.com/sebbo2002/ical-generator\");assert.strictEqual(event.url(),\"http://github.com/sebbo2002/ical-generator\")",
                  "err": {},
                  "uuid": "821da009-4bda-4d9c-afd5-4fc431024e06",
                  "parentUUID": "fd990e19-389d-4d53-8c6a-3bd549fa354c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40ba01ac-626d-4558-81c1-dd63b03730ba",
                "e60bd868-0099-4d43-a331-11339fc32d17",
                "821da009-4bda-4d9c-afd5-4fc431024e06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eafc7587-a6ab-40c0-b121-129ef3ff544f",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event.createAttachment(\"https://files.sebbo.net/calendar/attachments/foo\"),event)",
                  "err": {},
                  "uuid": "8b6bf901-d7a5-456a-b9a3-8acd625b1b1f",
                  "parentUUID": "eafc7587-a6ab-40c0-b121-129ef3ff544f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b6bf901-d7a5-456a-b9a3-8acd625b1b1f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2411f878-20da-4a54-b118-f242a1fc92d7",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.attachments().length,0);event.createAttachment(\"https://files.sebbo.net/calendar/attachments/foo\");assert.strictEqual(event.attachments().length,1);assert.deepStrictEqual(typeof event.attachments()[0],\"string\")",
                  "err": {},
                  "uuid": "b6792e73-e1f0-4cea-a56c-035ff0cdc0a6",
                  "parentUUID": "2411f878-20da-4a54-b118-f242a1fc92d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.attachments([\"https://files.sebbo.net/calendar/attachments/foo\",\"https://files.sebbo.net/calendar/attachments/bar\"]);assert.strictEqual(event.attachments().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "9ddb67b1-918f-48d6-9d8f-77d31c48ba31",
                  "parentUUID": "2411f878-20da-4a54-b118-f242a1fc92d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b6792e73-e1f0-4cea-a56c-035ff0cdc0a6",
                "9ddb67b1-918f-48d6-9d8f-77d31c48ba31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47d12c45-1574-44c0-a608-323c37d55b3f",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.created(new Date))",
                  "err": {},
                  "uuid": "489d7633-d2f1-4644-ac09-2e1924bb644e",
                  "parentUUID": "47d12c45-1574-44c0-a608-323c37d55b3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(moment());assert.ok(moment.isMoment(e.created()))",
                  "err": {},
                  "uuid": "e68da5cc-3ee6-407d-8302-781c3c08dc4e",
                  "parentUUID": "47d12c45-1574-44c0-a608-323c37d55b3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(new Date);assert.ok(e.created()instanceof Date)",
                  "err": {},
                  "uuid": "98ab9b36-d1c7-4824-875c-1b20096730d3",
                  "parentUUID": "47d12c45-1574-44c0-a608-323c37d55b3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(moment().toJSON());assert.strictEqual(typeof e.created(),\"string\")",
                  "err": {},
                  "uuid": "80a571da-c8b7-4921-876e-cf6a293e904a",
                  "parentUUID": "47d12c45-1574-44c0-a608-323c37d55b3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(new Date);assert.ok(e.created()instanceof Date)",
                  "err": {},
                  "uuid": "ac74bba2-c5ae-477f-8dca-cb577193fdc5",
                  "parentUUID": "47d12c45-1574-44c0-a608-323c37d55b3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=new Date;const e=new ICalEvent({start:new Date},new ICalCalendar).created(now);assert.deepStrictEqual(e.created()?.valueOf(),now.getTime())",
                  "err": {},
                  "uuid": "caf6930c-2159-4599-bd41-8ebb612bb00c",
                  "parentUUID": "47d12c45-1574-44c0-a608-323c37d55b3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.created(\"hallo\")},/`created`/)",
                  "err": {},
                  "uuid": "6f338f6b-ef26-42b0-b860-28184df20246",
                  "parentUUID": "47d12c45-1574-44c0-a608-323c37d55b3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "489d7633-d2f1-4644-ac09-2e1924bb644e",
                "e68da5cc-3ee6-407d-8302-781c3c08dc4e",
                "98ab9b36-d1c7-4824-875c-1b20096730d3",
                "80a571da-c8b7-4921-876e-cf6a293e904a",
                "ac74bba2-c5ae-477f-8dca-cb577193fdc5",
                "caf6930c-2159-4599-bd41-8ebb612bb00c",
                "6f338f6b-ef26-42b0-b860-28184df20246"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e365cab-71da-452c-9fe5-1f4b8b294454",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.lastModified(new Date))",
                  "err": {},
                  "uuid": "cc1d5fc2-69e6-41d1-95ef-ed6ad55dd53d",
                  "parentUUID": "5e365cab-71da-452c-9fe5-1f4b8b294454",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(moment());assert.ok(moment.isMoment(e.lastModified()))",
                  "err": {},
                  "uuid": "189b7a49-e948-40e0-bea6-770f541da3ec",
                  "parentUUID": "5e365cab-71da-452c-9fe5-1f4b8b294454",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(new Date);assert.ok(e.lastModified()instanceof Date)",
                  "err": {},
                  "uuid": "4c720fa2-07b1-449d-9350-23482999ee87",
                  "parentUUID": "5e365cab-71da-452c-9fe5-1f4b8b294454",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().toJSON();e.lastModified(date);assert.strictEqual(e.lastModified(),date)",
                  "err": {},
                  "uuid": "e4e17e68-839b-48c8-bbe4-638bfa58c94b",
                  "parentUUID": "5e365cab-71da-452c-9fe5-1f4b8b294454",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(new Date);assert.ok(e.lastModified()instanceof Date)",
                  "err": {},
                  "uuid": "98554e17-bc78-4c21-82c5-c1db6800f5a5",
                  "parentUUID": "5e365cab-71da-452c-9fe5-1f4b8b294454",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=new Date;const e=new ICalEvent({start:new Date},new ICalCalendar).lastModified(now);assert.deepStrictEqual(e.lastModified()?.valueOf(),now.getTime())",
                  "err": {},
                  "uuid": "52d57e29-400a-4093-b43d-0c35ecc2ad8d",
                  "parentUUID": "5e365cab-71da-452c-9fe5-1f4b8b294454",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.lastModified(\"hallo\")},/`lastModified`/)",
                  "err": {},
                  "uuid": "a13cd86d-5896-4a2d-a80a-b8bcc34b4584",
                  "parentUUID": "5e365cab-71da-452c-9fe5-1f4b8b294454",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc1d5fc2-69e6-41d1-95ef-ed6ad55dd53d",
                "189b7a49-e948-40e0-bea6-770f541da3ec",
                "4c720fa2-07b1-449d-9350-23482999ee87",
                "e4e17e68-839b-48c8-bbe4-638bfa58c94b",
                "98554e17-bc78-4c21-82c5-c1db6800f5a5",
                "52d57e29-400a-4093-b43d-0c35ecc2ad8d",
                "a13cd86d-5896-4a2d-a80a-b8bcc34b4584"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83d426b6-3629-492f-97c7-be7c869c993e",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.class(),null);event.class(ICalEventClass.PRIVATE);assert.strictEqual(event.class(),\"PRIVATE\");event.class(null);assert.strictEqual(event.class(),null)",
                  "err": {},
                  "uuid": "509e070f-fbf5-48cc-8f4d-7cfd92934c74",
                  "parentUUID": "83d426b6-3629-492f-97c7-be7c869c993e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.class(null));assert.deepStrictEqual(e,e.class(ICalEventClass.PRIVATE))",
                  "err": {},
                  "uuid": "662486f3-6ea1-4033-8dd2-812af8036038",
                  "parentUUID": "83d426b6-3629-492f-97c7-be7c869c993e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.class(ICalEventClass.PRIVATE);e.class(null);assert.strictEqual(e.class(),null)",
                  "err": {},
                  "uuid": "d7a7c650-8416-43a1-8bad-676a0064215b",
                  "parentUUID": "83d426b6-3629-492f-97c7-be7c869c993e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.class(ICalEventClass.PRIVATE);assert.strictEqual(e.class(),\"PRIVATE\");assert.strictEqual(e.class(),ICalEventClass.PRIVATE)",
                  "err": {},
                  "uuid": "34053822-ea88-43cb-90e6-cc340ec19f78",
                  "parentUUID": "83d426b6-3629-492f-97c7-be7c869c993e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.class(\"COOKING\")},/Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);assert.throws(function(){e.class(Infinity)},/Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);assert.throws(function(){e.class(NaN)},/Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);assert.throws(function(){e.class(-1)},/Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/)",
                  "err": {},
                  "uuid": "fc37d216-e190-43db-9195-9d0e93493e2a",
                  "parentUUID": "83d426b6-3629-492f-97c7-be7c869c993e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "509e070f-fbf5-48cc-8f4d-7cfd92934c74",
                "662486f3-6ea1-4033-8dd2-812af8036038",
                "d7a7c650-8416-43a1-8bad-676a0064215b",
                "34053822-ea88-43cb-90e6-cc340ec19f78",
                "fc37d216-e190-43db-9195-9d0e93493e2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e0d4190d-3105-4f3f-89d5-dc8b791ec3d9",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "d14722b0-cce0-43df-82c6-1f81f53c4730",
                  "parentUUID": "e0d4190d-3105-4f3f-89d5-dc8b791ec3d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d14722b0-cce0-43df-82c6-1f81f53c4730"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a044f816-2614-420e-a357-42a1f04f8d75",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=moment().add(1,\"month\");const event=new ICalEvent({start:new Date},new ICalCalendar).summary(\"foo\").start(date);assert.strictEqual(event.toJSON().summary,\"foo\",\"summary is okay\");assert.deepStrictEqual(event.toJSON().start,date.toJSON(),\"start is okay\");assert.strictEqual(typeof event.toJSON().start,\"string\",\"start is string\")",
                  "err": {},
                  "uuid": "34736fbc-04e8-4180-86c1-8efded8b5a3d",
                  "parentUUID": "a044f816-2614-420e-a357-42a1f04f8d75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;const rule=new rrule.RRule({freq:rrule.RRule.WEEKLY,interval:5,byweekday:[rrule.RRule.MO,rrule.RRule.FR],dtstart:date,until:new Date(Date.UTC(2012,12,31))});const event=new ICalEvent({start:new Date},new ICalCalendar).summary(\"foo\").start(date).repeating(rule);const json=event.toJSON();const before=event.toString();assert.ok(typeof json.repeating===\"string\");const event2=new ICalEvent(event.toJSON(),new ICalCalendar);const after=event2.toString();assert.strictEqual(after,before)",
                  "err": {},
                  "uuid": "4a8552d0-cf12-414b-a1de-19899a741419",
                  "parentUUID": "a044f816-2614-420e-a357-42a1f04f8d75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalEvent({start:new Date},new ICalCalendar);new ICalEvent(a.toJSON(),new ICalCalendar)",
                  "err": {},
                  "uuid": "56296938-9d7c-4a63-ae47-bf53ce86ab78",
                  "parentUUID": "a044f816-2614-420e-a357-42a1f04f8d75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34736fbc-04e8-4180-86c1-8efded8b5a3d",
                "4a8552d0-cf12-414b-a1de-19899a741419",
                "56296938-9d7c-4a63-ae47-bf53ce86ab78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4e4c8235-011c-4a1a-b2c9-5d24403a1352",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.transparency(),null);event.transparency(ICalEventTransparency.OPAQUE);assert.strictEqual(event.transparency(),\"OPAQUE\");event.transparency(null);assert.strictEqual(event.transparency(),null)",
                  "err": {},
                  "uuid": "a585e7b3-d2f8-47ef-b4c4-6342e87e6c37",
                  "parentUUID": "4e4c8235-011c-4a1a-b2c9-5d24403a1352",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.transparency(null));assert.deepStrictEqual(e,e.transparency(ICalEventTransparency.TRANSPARENT))",
                  "err": {},
                  "uuid": "c0808f08-2a91-46d9-979a-6822a5b24939",
                  "parentUUID": "4e4c8235-011c-4a1a-b2c9-5d24403a1352",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.transparency(ICalEventTransparency.OPAQUE);e.transparency(null);assert.strictEqual(e.transparency(),null)",
                  "err": {},
                  "uuid": "670910f5-505d-4c86-9724-fb1943085ed8",
                  "parentUUID": "4e4c8235-011c-4a1a-b2c9-5d24403a1352",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.transparency(ICalEventTransparency.OPAQUE);assert.strictEqual(e.transparency(),\"OPAQUE\")",
                  "err": {},
                  "uuid": "6cf78d30-ecaf-4bfa-8d7e-43b550d9ed9a",
                  "parentUUID": "4e4c8235-011c-4a1a-b2c9-5d24403a1352",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.transparency(\"COOKING\")},/TRANSPARENT, OPAQUE/);assert.throws(function(){e.transparency(Infinity)},/TRANSPARENT, OPAQUE/);assert.throws(function(){e.transparency(-1)},/TRANSPARENT, OPAQUE/)",
                  "err": {},
                  "uuid": "5bdeb0b4-bdd3-40d5-b55b-102072c2172e",
                  "parentUUID": "4e4c8235-011c-4a1a-b2c9-5d24403a1352",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a585e7b3-d2f8-47ef-b4c4-6342e87e6c37",
                "c0808f08-2a91-46d9-979a-6822a5b24939",
                "670910f5-505d-4c86-9724-fb1943085ed8",
                "6cf78d30-ecaf-4bfa-8d7e-43b550d9ed9a",
                "5bdeb0b4-bdd3-40d5-b55b-102072c2172e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae1ba3f8-da3e-4dc7-be1a-e6d3747c6dd6",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date,end:new Date(new Date().getTime()+36e5),summary:\"Hel\\\\\\\\lo\\nW;orl,d\"},new ICalCalendar);assert.ok(e.toString().indexOf(\"Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d\")>-1)",
                  "err": {},
                  "uuid": "dd138c2a-15e4-4153-a87f-0fc70928b4d8",
                  "parentUUID": "ae1ba3f8-da3e-4dc7-be1a-e6d3747c6dd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const event=new ICalEvent({id:42,start:moment(),summary:\":)\"},cal);assert.ok(event.toString().indexOf(\"UID:42\\r\")>-1)",
                  "err": {},
                  "uuid": "531fbe8c-60b9-403a-9e4b-15c704d1d45d",
                  "parentUUID": "ae1ba3f8-da3e-4dc7-be1a-e6d3747c6dd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;let event=new ICalEvent({start:moment(),end:moment(),repeating:{freq:ICalEventRepeatingFreq.WEEKLY}},cal);assert.ok(!event.toString().includes(\"WKST\"),\"without WKST\");event=new ICalEvent({start:moment(),end:moment(),repeating:{freq:ICalEventRepeatingFreq.WEEKLY,startOfWeek:ICalWeekday.SU}},cal);assert.ok(event.toString().includes(\"WKST\"),\"with WKST\")",
                  "err": {},
                  "uuid": "ad2d9916-7945-4fa3-8673-5ea8d20892c7",
                  "parentUUID": "ae1ba3f8-da3e-4dc7-be1a-e6d3747c6dd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render allday events for luxon dates with timezone correct",
                  "fullTitle": "ical-generator Event toString() should render allday events for luxon dates with timezone correct",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const luxonStartDate=DateTime.fromISO(\"2024-03-17T00:00:00.000+01:00\",{setZone:true});const luxonEndDate=DateTime.fromISO(\"2024-03-18T00:00:00.000+01:00\",{setZone:true});const event=new ICalEvent({allDay:true,start:luxonStartDate,end:luxonEndDate},cal);const actual=event.toString();assert.match(actual,new RegExp(\"X-MICROSOFT-CDO-ALLDAYEVENT:TRUE\\r\\n\"),\"with Microsoft CDO alldayevent set\");assert.match(actual,new RegExp(\"X-MICROSOFT-MSNCALENDAR-ALLDAYEVENT:TRUE\\r\\n\"),\"with Microsoft MSNCalendar alldayevent flag set\");assert.match(actual,new RegExp(`DTSTART;VALUE=DATE:${luxonStartDate.toFormat(\"yyyyLLdd\")}\\r\n`),\"for DTSTART\");assert.match(actual,new RegExp(`DTEND;VALUE=DATE:${luxonEndDate.toFormat(\"yyyyLLdd\")}\\r\n`),\"for DTEND\")",
                  "err": {},
                  "uuid": "4d7831fc-9a14-4e14-a199-4e6ef673936b",
                  "parentUUID": "ae1ba3f8-da3e-4dc7-be1a-e6d3747c6dd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd138c2a-15e4-4153-a87f-0fc70928b4d8",
                "531fbe8c-60b9-403a-9e4b-15c704d1d45d",
                "ad2d9916-7945-4fa3-8673-5ea8d20892c7",
                "4d7831fc-9a14-4e14-a199-4e6ef673936b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "963340d6-7860-43c1-9df5-95e8cffe696d",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3cde3f70-5e4f-4b5a-8c38-75979240634b",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(typeof ical,\"function\")",
                  "err": {},
                  "uuid": "8a1be248-5b5e-4346-bf8a-432d83d45654",
                  "parentUUID": "3cde3f70-5e4f-4b5a-8c38-75979240634b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ical()instanceof ICalCalendar)",
                  "err": {},
                  "uuid": "314c07cf-ebc3-4e83-83e8-265c8b14bc18",
                  "parentUUID": "3cde3f70-5e4f-4b5a-8c38-75979240634b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a1be248-5b5e-4346-bf8a-432d83d45654",
                "314c07cf-ebc3-4e83-83e8-265c8b14bc18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f1a588bf-76d7-4565-94c1-507d3e73f8b9",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarm)",
                  "err": {},
                  "uuid": "61334d63-ecea-43c8-b80a-018c631bd31c",
                  "parentUUID": "f1a588bf-76d7-4565-94c1-507d3e73f8b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarmType)",
                  "err": {},
                  "uuid": "03fbe883-e3af-43d3-a6f3-ec5ccc2e6333",
                  "parentUUID": "f1a588bf-76d7-4565-94c1-507d3e73f8b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61334d63-ecea-43c8-b80a-018c631bd31c",
                "03fbe883-e3af-43d3-a6f3-ec5ccc2e6333"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d76739a-99f8-4201-9097-23d07a4666b2",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendee)",
                  "err": {},
                  "uuid": "9e5ccf2a-bc4b-4ebf-8e13-50694af337d9",
                  "parentUUID": "6d76739a-99f8-4201-9097-23d07a4666b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeType)",
                  "err": {},
                  "uuid": "5d69b01a-2942-458b-8f89-e4d0003d2e72",
                  "parentUUID": "6d76739a-99f8-4201-9097-23d07a4666b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeRole)",
                  "err": {},
                  "uuid": "ab3a6d51-9777-435e-97eb-e4753c9ef908",
                  "parentUUID": "6d76739a-99f8-4201-9097-23d07a4666b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeStatus)",
                  "err": {},
                  "uuid": "0e4e3e2b-540c-489b-9c58-62d62eebfddb",
                  "parentUUID": "6d76739a-99f8-4201-9097-23d07a4666b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e5ccf2a-bc4b-4ebf-8e13-50694af337d9",
                "5d69b01a-2942-458b-8f89-e4d0003d2e72",
                "ab3a6d51-9777-435e-97eb-e4753c9ef908",
                "0e4e3e2b-540c-489b-9c58-62d62eebfddb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8729e3bf-b38c-4410-9b04-4affb186dfad",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendar)",
                  "err": {},
                  "uuid": "61f5f8ba-b1da-4a8a-bf4e-5f4221e850f6",
                  "parentUUID": "8729e3bf-b38c-4410-9b04-4affb186dfad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendarMethod)",
                  "err": {},
                  "uuid": "e65d12f5-91fa-4342-b1ae-a3c3cafc536a",
                  "parentUUID": "8729e3bf-b38c-4410-9b04-4affb186dfad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61f5f8ba-b1da-4a8a-bf4e-5f4221e850f6",
                "e65d12f5-91fa-4342-b1ae-a3c3cafc536a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "61dba46d-7ba9-44ee-8681-b122b8656049",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCategory)",
                  "err": {},
                  "uuid": "458e9e08-5dad-4778-9f77-93cbdea09e74",
                  "parentUUID": "61dba46d-7ba9-44ee-8681-b122b8656049",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "458e9e08-5dad-4778-9f77-93cbdea09e74"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b9ec21d0-c498-4218-a356-03964eba4e1f",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEvent)",
                  "err": {},
                  "uuid": "50f915f4-b272-4981-9877-aac9dc7aee0a",
                  "parentUUID": "b9ec21d0-c498-4218-a356-03964eba4e1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventStatus)",
                  "err": {},
                  "uuid": "7e8acbdb-8380-4715-b59e-30c0005f2ad0",
                  "parentUUID": "b9ec21d0-c498-4218-a356-03964eba4e1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventBusyStatus)",
                  "err": {},
                  "uuid": "46bfa6ac-31a5-4a44-b32e-b1eb1fceaafc",
                  "parentUUID": "b9ec21d0-c498-4218-a356-03964eba4e1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventTransparency)",
                  "err": {},
                  "uuid": "95583365-4068-4ab4-a884-228cfba5fa08",
                  "parentUUID": "b9ec21d0-c498-4218-a356-03964eba4e1f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50f915f4-b272-4981-9877-aac9dc7aee0a",
                "7e8acbdb-8380-4715-b59e-30c0005f2ad0",
                "46bfa6ac-31a5-4a44-b32e-b1eb1fceaafc",
                "95583365-4068-4ab4-a884-228cfba5fa08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6990955d-e246-4949-8a41-dcfd54021b55",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventRepeatingFreq)",
                  "err": {},
                  "uuid": "3a01067c-1e3b-4fbe-b188-170b6919e8b3",
                  "parentUUID": "6990955d-e246-4949-8a41-dcfd54021b55",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalWeekday)",
                  "err": {},
                  "uuid": "42542f86-860c-4686-8f4f-ec791d5a7e6e",
                  "parentUUID": "6990955d-e246-4949-8a41-dcfd54021b55",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a01067c-1e3b-4fbe-b188-170b6919e8b3",
                "42542f86-860c-4686-8f4f-ec791d5a7e6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "04ef1a02-a6cd-41ff-a131-7a33a494fd07",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDate===\"function\")",
                  "err": {},
                  "uuid": "a7fb0f82-8177-4d99-802b-cbeca0816d51",
                  "parentUUID": "04ef1a02-a6cd-41ff-a131-7a33a494fd07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDateTZ===\"function\")",
                  "err": {},
                  "uuid": "3738c1e4-88fb-4f3d-9ed1-96c0c48bece6",
                  "parentUUID": "04ef1a02-a6cd-41ff-a131-7a33a494fd07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof escape===\"function\")",
                  "err": {},
                  "uuid": "de825f92-35a5-4e3e-9e1d-7f11ea2923fd",
                  "parentUUID": "04ef1a02-a6cd-41ff-a131-7a33a494fd07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof foldLines===\"function\")",
                  "err": {},
                  "uuid": "cc86346e-6547-4fa1-b78a-44c7b9de417a",
                  "parentUUID": "04ef1a02-a6cd-41ff-a131-7a33a494fd07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7fb0f82-8177-4d99-802b-cbeca0816d51",
                "3738c1e4-88fb-4f3d-9ed1-96c0c48bece6",
                "de825f92-35a5-4e3e-9e1d-7f11ea2923fd",
                "cc86346e-6547-4fa1-b78a-44c7b9de417a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "24c54283-15ca-47f4-889d-ad9089e48e83",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cc0bc014-9e3c-46b8-86b9-273da1aaa9aa",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Europe/Berlin\",events:[{start:moment(\"2016-04-30T22:00:00.000Z\"),summary:\"Example Event\",allDay:true}]});const str=calendar.toString();assert.ok(str.indexOf(\"DTSTART;VALUE=DATE:20160501\")>-1)",
                  "err": {},
                  "uuid": "fd4d2b4d-5e45-4a4e-be85-30a419794d05",
                  "parentUUID": "cc0bc014-9e3c-46b8-86b9-273da1aaa9aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Brazil/East\",events:[{start:moment(\"2016-05-01T03:00:00.000Z\"),summary:\"Example Event\",allDay:true}]});const str=calendar.toString();assert.ok(str.indexOf(\"DTSTART;VALUE=DATE:20160501\")>-1)",
                  "err": {},
                  "uuid": "bf9f951c-44f4-49d0-ae8d-ec2e8afa4c4a",
                  "parentUUID": "cc0bc014-9e3c-46b8-86b9-273da1aaa9aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd4d2b4d-5e45-4a4e-be85-30a419794d05",
                "bf9f951c-44f4-49d0-ae8d-ec2e8afa4c4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83f1420f-5816-4712-82eb-5955fb8bee29",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",events:[{start:moment(\"2016-04-30T22:00:00.000Z\"),end:moment(\"2016-05-01T00:00:00.000Z\"),summary:\"Example Event\",allDay:true,repeating:{freq:ICalEventRepeatingFreq.MONTHLY,count:3,interval:1,byDay:[ICalWeekday.SU],bySetPos:3}}]});const str=calendar.toString();assert.ok(str.indexOf(\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3\")>-1)",
                  "err": {},
                  "uuid": "efaf4698-a3dc-46a8-8b65-3e0f1c55fa27",
                  "parentUUID": "83f1420f-5816-4712-82eb-5955fb8bee29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking all elements of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking all elements of the byDay array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",events:[{start:moment(\"2016-04-30T22:00:00.000Z\"),end:moment(\"2016-05-01T00:00:00.000Z\"),summary:\"Example Event\",allDay:true,repeating:{freq:ICalEventRepeatingFreq.MONTHLY,count:3,interval:1,byDay:[ICalWeekday.MO,ICalWeekday.FR],bySetPos:3}}]});const str=calendar.toString();assert.ok(str.indexOf(\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO,FR;BYSETPOS=3\")>-1)",
                  "err": {},
                  "uuid": "9aa6eee8-5fc3-4b45-9a2a-2ac06a8ce8ca",
                  "parentUUID": "83f1420f-5816-4712-82eb-5955fb8bee29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "efaf4698-a3dc-46a8-8b65-3e0f1c55fa27",
                "9aa6eee8-5fc3-4b45-9a2a-2ac06a8ce8ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc084870-5f33-4831-b68d-ad16fb1d6769",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({timezone:\"America/Buenos_Aires\",events:[{start:moment(1553219772e3),end:moment(1553219772e3),recurrenceId:moment(1553219772e3),timezone:\"America/La_Paz\"}]});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "fe0be0b5-e0d5-454f-8c32-181cea0bf381",
                  "parentUUID": "bc084870-5f33-4831-b68d-ad16fb1d6769",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({timezone:\"America/Buenos_Aires\",events:[{start:moment(1553219772e3),end:moment(1553219772e3),recurrenceId:moment(1553219772e3),timezone:\"America/La_Paz\"}]});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "389f1805-428c-4b0c-967b-da6be1736794",
                  "parentUUID": "bc084870-5f33-4831-b68d-ad16fb1d6769",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({timezone:\"America/Buenos_Aires\",events:[{start:moment(1553219772e3),end:moment(1553219772e3),recurrenceId:moment(1553219772e3),timezone:\"America/La_Paz\"}]});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "f05c4e85-b646-4676-8bd4-9038f522b9c3",
                  "parentUUID": "bc084870-5f33-4831-b68d-ad16fb1d6769",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe0be0b5-e0d5-454f-8c32-181cea0bf381",
                "389f1805-428c-4b0c-967b-da6be1736794",
                "f05c4e85-b646-4676-8bd4-9038f522b9c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2481416c-48a5-4d4d-a22d-ac4fc88b59ed",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Europe/Berlin\",events:[{start:moment(\"2020-08-13T00:00:00+01:00\"),summary:\"Example Event\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,count:12,exclude:moment(\"2020-12-13T00:00:00+01:00\")}}]});const str=calendar.toString();assert.ok(str.indexOf(\"EXDATE;TZID=Europe/Berlin:20201213T000000\")>-1)",
                  "err": {},
                  "uuid": "00c2b73b-18ce-4a27-9b77-eeb389e1f22b",
                  "parentUUID": "2481416c-48a5-4d4d-a22d-ac4fc88b59ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"America/New_York\",events:[{start:moment(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,count:12,exclude:moment(\"2020-12-13T00:00:00-05:00\")}}]});const str=calendar.toString();assert.ok(str.indexOf(\"EXDATE;TZID=America/New_York:20201213T000000\")>-1)",
                  "err": {},
                  "uuid": "92cd2fe4-fdde-426f-b667-14465eba8cb7",
                  "parentUUID": "2481416c-48a5-4d4d-a22d-ac4fc88b59ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00c2b73b-18ce-4a27-9b77-eeb389e1f22b",
                "92cd2fe4-fdde-426f-b667-14465eba8cb7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c5f0cfb0-33a1-4184-afa4-94608cbd2533",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",start:new Date(\"2020-08-13T00:00:00-05:00\"),stamp:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\",location:{title:\"Los Angeles, California, United States\",geo:{lon:-118.24368,lat:34.05223},radius:400}}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"SUMMARY:Example Event\",\"LOCATION:Los Angeles\\\\, California\\\\, United States\",\"X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel\",\" es\\\\, California\\\\, United States:geo:34.05223,-118.24368\",\"GEO:34.05223;-118.24368\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "9f554aa8-f257-4b13-b152-f2d6ee1e4984",
                  "parentUUID": "c5f0cfb0-33a1-4184-afa4-94608cbd2533",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9f554aa8-f257-4b13-b152-f2d6ee1e4984"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a8b2a00a-f1c1-4897-8415-735b7b27eedb",
              "title": "Issue #377",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not escape quotes in summary",
                  "fullTitle": "Issues Issue #377 should not escape quotes in summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",start:new Date(\"2020-08-13T00:00:00-05:00\"),stamp:new Date(\"2020-08-13T00:00:00-05:00\"),summary:'My \"quoted\" string'}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",'SUMMARY:My \"quoted\" string',\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "18b9c87b-c1fd-439f-bc5c-4f7476a420d4",
                  "parentUUID": "a8b2a00a-f1c1-4897-8415-735b7b27eedb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18b9c87b-c1fd-439f-bc5c-4f7476a420d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74f1487a-23ba-4f36-9bd4-9bbd347d93c7",
              "title": "Issue #442",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate floating repeat until value if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat until value if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "519b04ba-be97-4557-89bd-8ca97b351f2c",
                  "parentUUID": "74f1487a-23ba-4f36-9bd4-9bbd347d93c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate floating repeat exclusion dates if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat exclusion dates if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "84ee0a1d-953b-4ed6-9c87-c45f62beac66",
                  "parentUUID": "74f1487a-23ba-4f36-9bd4-9bbd347d93c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "519b04ba-be97-4557-89bd-8ca97b351f2c",
                "84ee0a1d-953b-4ed6-9c87-c45f62beac66"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f28d3828-a974-4889-aa17-5815d8747c9f",
              "title": "Issue #459",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.repeating should work with `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work with `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",start:new Date(\"2020-08-13T00:00:00-05:00\"),stamp:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\",repeating:\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",\"SUMMARY:Example Event\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "cd43f0b9-47ce-47ed-bb38-a19b822bf32d",
                  "parentUUID": "f28d3828-a974-4889-aa17-5815d8747c9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "event.repeating should work without `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work without `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",start:new Date(\"2020-08-13T00:00:00-05:00\"),stamp:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\",repeating:\"FREQ=MONTHLY;COUNT=3;INTERVAL=1\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",\"SUMMARY:Example Event\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "d565380e-c4ee-490e-af68-0c60cc45a548",
                  "parentUUID": "f28d3828-a974-4889-aa17-5815d8747c9f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cd43f0b9-47ce-47ed-bb38-a19b822bf32d",
                "d565380e-c4ee-490e-af68-0c60cc45a548"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d854d2f-3994-4afe-a175-15f566718970",
              "title": "Issue #569 / 570",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.location should work with `geo` only",
                  "fullTitle": "Issues Issue #569 / 570 event.location should work with `geo` only",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=ical().createEvent({id:\"12345\",summary:\"Hello\",start:new Date(\"2020-06-15T00:00:00Z\"),end:new Date(\"2020-06-15T01:00:00Z\"),stamp:new Date(\"2020-06-15T00:00:00Z\")});event.location({geo:{lat:52.51147570081018,lon:13.342200696373846}});assert.strictEqual(event.toString(),[\"BEGIN:VEVENT\",\"UID:12345\",\"SEQUENCE:0\",\"DTSTAMP:20200615T000000Z\",\"DTSTART:20200615T000000Z\",\"DTEND:20200615T010000Z\",\"SUMMARY:Hello\",\"GEO:52.51147570081018;13.342200696373846\",\"END:VEVENT\",\"\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "99e857d7-9cc0-429b-8902-f3d7bcc3f83e",
                  "parentUUID": "6d854d2f-3994-4afe-a175-15f566718970",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99e857d7-9cc0-429b-8902-f3d7bcc3f83e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37657bd0-690b-4abc-8fb9-515e20fc6e10",
              "title": "Issue #581",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.start and event.end should be swappable",
                  "fullTitle": "Issues Issue #581 event.start and event.end should be swappable",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical();const event=calendar.createEvent({summary:\"Test Event\",start:\"2024-02-29T17:00:00.000Z\",end:\"2024-02-29T17:20:00.000Z\"});event.start(\"2024-02-29T19:00:00.000Z\");event.end(\"2024-02-29T19:20:00.000Z\");const start=event.start();assert.ok(typeof start===\"string\");assert.strictEqual(start,\"2024-02-29T19:00:00.000Z\");const end=event.end();assert.ok(typeof end===\"string\");assert.strictEqual(end,\"2024-02-29T19:20:00.000Z\")",
                  "err": {},
                  "uuid": "128f367d-f2d3-48b5-96c5-48d6a7351f15",
                  "parentUUID": "37657bd0-690b-4abc-8fb9-515e20fc6e10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "128f367d-f2d3-48b5-96c5-48d6a7351f15"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d10a4cc5-d96f-4359-a8a3-c510c2c292bf",
              "title": "Issue #618",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should also produce an error",
                  "fullTitle": "Issues Issue #618 should also produce an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(()=>{const calendar=ical();calendar.createEvent({summary:\"Test Event\",start:new Date,location:{title:\"Empty Venue\",address:null,geo:{lat:null,lon:null}}})},/`location` isn't formatted correctly/)",
                  "err": {},
                  "uuid": "58ee6bbe-d446-456d-8ac4-6804db428169",
                  "parentUUID": "d10a4cc5-d96f-4359-a8a3-c510c2c292bf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "58ee6bbe-d446-456d-8ac4-6804db428169"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "db0c9cd5-56dc-4ae0-ba7b-1f29a582ca1e",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6d1740e2-8aa1-442c-b36e-8adbb6e4b51b",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "e1c898a0-6b02-403a-9473-8a495b4c89e8",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "b5bf631a-4c09-4048-8b65-a9546f007ee5",
                      "parentUUID": "e1c898a0-6b02-403a-9473-8a495b4c89e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "4c939763-fc03-4e01-ad4d-2169d9ff4c02",
                      "parentUUID": "e1c898a0-6b02-403a-9473-8a495b4c89e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",true,false),\"20180705\")",
                      "err": {},
                      "uuid": "045c6962-f04e-4a5e-aef7-1f59a8901e4e",
                      "parentUUID": "e1c898a0-6b02-403a-9473-8a495b4c89e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",true,true),\"20180705\")",
                      "err": {},
                      "uuid": "e1d61aef-4e42-4f87-8f04-214b14d9215c",
                      "parentUUID": "e1c898a0-6b02-403a-9473-8a495b4c89e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "11c8fa5c-e101-4c49-a3e0-f102c6900c76",
                      "parentUUID": "e1c898a0-6b02-403a-9473-8a495b4c89e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "68c2e283-17e6-4a8f-a1d8-5256e2149f74",
                      "parentUUID": "e1c898a0-6b02-403a-9473-8a495b4c89e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",true,false),\"20180705\")",
                      "err": {},
                      "uuid": "2ffb86fa-fecd-4bd8-8ebe-ac57e6600585",
                      "parentUUID": "e1c898a0-6b02-403a-9473-8a495b4c89e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",true,true),\"20180705\")",
                      "err": {},
                      "uuid": "cbe0abe6-cdd2-41c3-b24e-f7826bc590c1",
                      "parentUUID": "e1c898a0-6b02-403a-9473-8a495b4c89e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with / prefixed global timezones",
                      "fullTitle": "ICalTools formatDate() Date / String should work with / prefixed global timezones",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"/Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "25d13e60-bccc-4f93-9111-392793d885ec",
                      "parentUUID": "e1c898a0-6b02-403a-9473-8a495b4c89e8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b5bf631a-4c09-4048-8b65-a9546f007ee5",
                    "4c939763-fc03-4e01-ad4d-2169d9ff4c02",
                    "045c6962-f04e-4a5e-aef7-1f59a8901e4e",
                    "e1d61aef-4e42-4f87-8f04-214b14d9215c",
                    "11c8fa5c-e101-4c49-a3e0-f102c6900c76",
                    "68c2e283-17e6-4a8f-a1d8-5256e2149f74",
                    "2ffb86fa-fecd-4bd8-8ebe-ac57e6600585",
                    "cbe0abe6-cdd2-41c3-b24e-f7826bc590c1",
                    "25d13e60-bccc-4f93-9111-392793d885ec"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d2d3f9c8-3144-48ec-ba62-d59069471a98",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,moment(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "3df9b34e-b056-4f03-b5aa-ae11604103d2",
                      "parentUUID": "d2d3f9c8-3144-48ec-ba62-d59069471a98",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",moment(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "8a64fa27-d9c4-42d1-99d4-1333a71f54e7",
                      "parentUUID": "d2d3f9c8-3144-48ec-ba62-d59069471a98",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,moment(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "3fdf2261-8042-492f-a3a2-81aba4884e75",
                      "parentUUID": "d2d3f9c8-3144-48ec-ba62-d59069471a98",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3df9b34e-b056-4f03-b5aa-ae11604103d2",
                    "8a64fa27-d9c4-42d1-99d4-1333a71f54e7",
                    "3fdf2261-8042-492f-a3a2-81aba4884e75"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "4caa276a-d130-47db-abd5-be198c748265",
                  "title": "moment-timezone.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,momentTz(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "e4e423ca-7c27-4ce2-9d74-9903baa37fb3",
                      "parentUUID": "4caa276a-d130-47db-abd5-be198c748265",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",momentTz(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "70525b19-e460-4cad-95e3-4f576d2a5dac",
                      "parentUUID": "4caa276a-d130-47db-abd5-be198c748265",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with floating flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,momentTz(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "206ce2ae-031c-46be-9787-d821c3a69c85",
                      "parentUUID": "4caa276a-d130-47db-abd5-be198c748265",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e4e423ca-7c27-4ce2-9d74-9903baa37fb3",
                    "70525b19-e460-4cad-95e3-4f576d2a5dac",
                    "206ce2ae-031c-46be-9787-d821c3a69c85"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e5c55be5-9e25-44d9-a546-8fd2a6538bd1",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "2e8ddb40-8feb-4915-b4ed-c1434dca0354",
                      "parentUUID": "e5c55be5-9e25-44d9-a546-8fd2a6538bd1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",DateTime.fromISO(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "b879ccc9-394c-4f60-94e4-32e0e9dba28d",
                      "parentUUID": "e5c55be5-9e25-44d9-a546-8fd2a6538bd1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "b6b759ab-942b-477b-85a9-fc6b79b6843a",
                      "parentUUID": "e5c55be5-9e25-44d9-a546-8fd2a6538bd1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "35bc590e-acb5-49c2-a0f0-cd7796e8dd25",
                      "parentUUID": "e5c55be5-9e25-44d9-a546-8fd2a6538bd1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag, non floating, and date with timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag, non floating, and date with timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2024-03-17T00:00:00.000+01:00\",{setZone:true}),true),\"20240317\")",
                      "err": {},
                      "uuid": "3518887e-3b02-4771-b621-a343664804c6",
                      "parentUUID": "e5c55be5-9e25-44d9-a546-8fd2a6538bd1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2e8ddb40-8feb-4915-b4ed-c1434dca0354",
                    "b879ccc9-394c-4f60-94e4-32e0e9dba28d",
                    "b6b759ab-942b-477b-85a9-fc6b79b6843a",
                    "35bc590e-acb5-49c2-a0f0-cd7796e8dd25",
                    "3518887e-3b02-4771-b621-a343664804c6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "362ccdb0-f7d7-4696-a261-094d311e6838",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "ebdffe5a-6968-43ca-8424-c50c93232736",
                      "parentUUID": "362ccdb0-f7d7-4696-a261-094d311e6838",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",dayjs(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "f20df0c1-53d9-4b5a-b1a8-bb30bbcf0b49",
                      "parentUUID": "362ccdb0-f7d7-4696-a261-094d311e6838",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "d5d9d602-c2bc-4f28-8b76-bc0e58e433bf",
                      "parentUUID": "362ccdb0-f7d7-4696-a261-094d311e6838",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "5ac11974-86c3-4400-9aeb-e3d71459cebd",
                      "parentUUID": "362ccdb0-f7d7-4696-a261-094d311e6838",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ebdffe5a-6968-43ca-8424-c50c93232736",
                    "f20df0c1-53d9-4b5a-b1a8-bb30bbcf0b49",
                    "d5d9d602-c2bc-4f28-8b76-bc0e58e433bf",
                    "5ac11974-86c3-4400-9aeb-e3d71459cebd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce2cd039-7a26-4aa3-a93d-cd78e4d67681",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed={timezone:\"Europe/Berlin\"};assert.strictEqual(formatDateTZ(\"Europe/Berlin\",\"DSTART\",moment(\"2018-07-02T15:48:05.000Z\"),ed),\"DSTART;TZID=Europe/Berlin:20180702T174805\")",
                  "err": {},
                  "uuid": "39873bcc-9be0-4034-a2d1-85ef1e68bfce",
                  "parentUUID": "ce2cd039-7a26-4aa3-a93d-cd78e4d67681",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null,\"DSTART\",\"2018-07-02T15:48:05.000Z\",{}),\"DSTART:20180702T154805Z\")",
                  "err": {},
                  "uuid": "f28bf828-5684-4b31-a14f-2f358cbcb2c7",
                  "parentUUID": "ce2cd039-7a26-4aa3-a93d-cd78e4d67681",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null,\"DSTART\",\"2018-07-02T15:48:05.000Z\"),\"DSTART:20180702T154805Z\")",
                  "err": {},
                  "uuid": "5ed2398d-753c-4fde-84dd-7cf44ed30ea4",
                  "parentUUID": "ce2cd039-7a26-4aa3-a93d-cd78e4d67681",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39873bcc-9be0-4034-a2d1-85ef1e68bfce",
                "f28bf828-5684-4b31-a14f-2f358cbcb2c7",
                "5ed2398d-753c-4fde-84dd-7cf44ed30ea4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "73c49401-87fc-48dc-aef9-152e6fc09cf3",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\\\ipsum\",false),\"Lorem \\\\\\\\ipsum\")",
                  "err": {},
                  "uuid": "ca9670df-92a7-46e2-bc53-ab861a43d7fb",
                  "parentUUID": "73c49401-87fc-48dc-aef9-152e6fc09cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem ;ipsum\",false),\"Lorem \\\\;ipsum\")",
                  "err": {},
                  "uuid": "e5a7224a-0414-4158-80f4-e2afb0cd0385",
                  "parentUUID": "73c49401-87fc-48dc-aef9-152e6fc09cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem, ipsum\",false),\"Lorem\\\\, ipsum\")",
                  "err": {},
                  "uuid": "be7ea70f-24e5-46c7-a24e-87c0f38633f4",
                  "parentUUID": "73c49401-87fc-48dc-aef9-152e6fc09cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\ripsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "afe8f7a5-1a42-4074-8e7a-f3e6a6b419bd",
                  "parentUUID": "73c49401-87fc-48dc-aef9-152e6fc09cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\nipsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "23d7931e-c00b-426f-8135-5a45e86c5511",
                  "parentUUID": "73c49401-87fc-48dc-aef9-152e6fc09cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\r\\nipsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "5ee95f6a-cc68-44be-8940-6f4f04305d0d",
                  "parentUUID": "73c49401-87fc-48dc-aef9-152e6fc09cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \" in text when inQuotes = true",
                  "fullTitle": "ICalTools escape() should escape \" in text when inQuotes = true",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum',true),'Lorem \\\\\"ipsum')",
                  "err": {},
                  "uuid": "87a95252-1cad-4c8a-bd06-27fb7001d2ff",
                  "parentUUID": "73c49401-87fc-48dc-aef9-152e6fc09cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not escape \" in text when inQuotes = false",
                  "fullTitle": "ICalTools escape() should not escape \" in text when inQuotes = false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum',false),'Lorem \"ipsum')",
                  "err": {},
                  "uuid": "53960c35-953b-4173-800e-b3f0fb94d211",
                  "parentUUID": "73c49401-87fc-48dc-aef9-152e6fc09cf3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca9670df-92a7-46e2-bc53-ab861a43d7fb",
                "e5a7224a-0414-4158-80f4-e2afb0cd0385",
                "be7ea70f-24e5-46c7-a24e-87c0f38633f4",
                "afe8f7a5-1a42-4074-8e7a-f3e6a6b419bd",
                "23d7931e-c00b-426f-8135-5a45e86c5511",
                "5ee95f6a-cc68-44be-8940-6f4f04305d0d",
                "87a95252-1cad-4c8a-bd06-27fb7001d2ff",
                "53960c35-953b-4173-800e-b3f0fb94d211"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "70ffc61d-1ac8-49f6-ba54-6da936ba705f",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines(\"12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981\"),\"12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981\")",
                  "err": {},
                  "uuid": "4bfa20d3-d153-4d24-a580-e382d3ddc1c9",
                  "parentUUID": "70ffc61d-1ac8-49f6-ba54-6da936ba705f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines(\"\\u{1F44B}\\u{1F3FC}12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981\"),\"\\u{1F44B}\\u{1F3FC}12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981\")",
                  "err": {},
                  "uuid": "0f36fc79-3098-4e09-ab72-05213636948b",
                  "parentUUID": "70ffc61d-1ac8-49f6-ba54-6da936ba705f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4bfa20d3-d153-4d24-a580-e382d3ddc1c9",
                "0f36fc79-3098-4e09-ab72-05213636948b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2f3ac67b-ded1-4c1c-a874-a7f53090fb7c",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "80810ca9-9fa7-4629-ac47-a41565ab013b",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=new Date;assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "80304a53-1486-4c9f-bec5-a53a190302ee",
                      "parentUUID": "80810ca9-9fa7-4629-ac47-a41565ab013b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=new Date(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "b95b7878-1c0b-4011-85e9-d6f938e1c7ab",
                      "parentUUID": "80810ca9-9fa7-4629-ac47-a41565ab013b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "80304a53-1486-4c9f-bec5-a53a190302ee",
                    "b95b7878-1c0b-4011-85e9-d6f938e1c7ab"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f3830a72-8486-48e4-8262-fd8db7a49b18",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=\"2021-03-28T13:15:23.587Z\";assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "3576cce0-7894-4dfe-a6b9-669547114ced",
                      "parentUUID": "f3830a72-8486-48e4-8262-fd8db7a49b18",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=\"foo\";assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "c48e843a-0b41-4c3c-9043-5d369909b1af",
                      "parentUUID": "f3830a72-8486-48e4-8262-fd8db7a49b18",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3576cce0-7894-4dfe-a6b9-669547114ced",
                    "c48e843a-0b41-4c3c-9043-5d369909b1af"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "6b60d0e1-20af-41b4-b584-666cc3da3619",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=DateTime.now();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "2a31db4c-63a0-40c8-8844-aac3e0840731",
                      "parentUUID": "6b60d0e1-20af-41b4-b584-666cc3da3619",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=DateTime.fromISO(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "4c4eec90-f141-4009-a7c4-bb51f54fad11",
                      "parentUUID": "6b60d0e1-20af-41b4-b584-666cc3da3619",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2a31db4c-63a0-40c8-8844-aac3e0840731",
                    "4c4eec90-f141-4009-a7c4-bb51f54fad11"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "35dec9de-f12c-4239-b918-2509a158717f",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=moment();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "95e15b2f-9dc7-4d6f-b7e0-8a708cfd2666",
                      "parentUUID": "35dec9de-f12c-4239-b918-2509a158717f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=moment(\"foo\",\"MM/DD/YYYY\",true);assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "4b522799-5c44-494b-9357-070970aa388c",
                      "parentUUID": "35dec9de-f12c-4239-b918-2509a158717f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "95e15b2f-9dc7-4d6f-b7e0-8a708cfd2666",
                    "4b522799-5c44-494b-9357-070970aa388c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "9965e4cb-4615-4d40-be3e-ddab3948dfc1",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=dayjs();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "824a6fbd-540c-40a9-8769-9a19953728d8",
                      "parentUUID": "9965e4cb-4615-4d40-be3e-ddab3948dfc1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=dayjs(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "a6ed7091-b36b-402c-94a3-d8ed194a7cdb",
                      "parentUUID": "9965e4cb-4615-4d40-be3e-ddab3948dfc1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "824a6fbd-540c-40a9-8769-9a19953728d8",
                    "a6ed7091-b36b-402c-94a3-d8ed194a7cdb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3256018b-ce2a-41cc-ad22-4b41d5139b16",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(date.toJSON()),date)",
                  "err": {},
                  "uuid": "0fc4299c-297c-40c3-80c6-2e1a3b548b31",
                  "parentUUID": "3256018b-ce2a-41cc-ad22-4b41d5139b16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(date),date)",
                  "err": {},
                  "uuid": "2fdca1a0-15eb-494e-934f-493fee3a8b2c",
                  "parentUUID": "3256018b-ce2a-41cc-ad22-4b41d5139b16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(moment(date)),date)",
                  "err": {},
                  "uuid": "2ced6498-4226-41a8-852d-07330d67f78a",
                  "parentUUID": "3256018b-ce2a-41cc-ad22-4b41d5139b16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment-timezone object",
                  "fullTitle": "ICalTools toDate() should work with moment-timezone object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(momentTz(date)),date)",
                  "err": {},
                  "uuid": "4545a1ec-5554-45d7-b456-1a422c66cdba",
                  "parentUUID": "3256018b-ce2a-41cc-ad22-4b41d5139b16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(dayjs(date)),date)",
                  "err": {},
                  "uuid": "4bb53774-6f1e-439c-b9ae-174dfcde194a",
                  "parentUUID": "3256018b-ce2a-41cc-ad22-4b41d5139b16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(DateTime.fromJSDate(date)),date)",
                  "err": {},
                  "uuid": "f890ee92-74ef-46bd-a3ee-4ef73aa789e7",
                  "parentUUID": "3256018b-ce2a-41cc-ad22-4b41d5139b16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fc4299c-297c-40c3-80c6-2e1a3b548b31",
                "2fdca1a0-15eb-494e-934f-493fee3a8b2c",
                "2ced6498-4226-41a8-852d-07330d67f78a",
                "4545a1ec-5554-45d7-b456-1a422c66cdba",
                "4bb53774-6f1e-439c-b9ae-174dfcde194a",
                "f890ee92-74ef-46bd-a3ee-4ef73aa789e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b31fffa4-a9db-44ad-b95a-674a59c5a68e",
              "title": "toDurationString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ICalTools toDurationString() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(toDurationString(0),\"PT0S\");assert.strictEqual(toDurationString(1),\"PT1S\");assert.strictEqual(toDurationString(60),\"PT1M\");assert.strictEqual(toDurationString(3600),\"PT1H\");assert.strictEqual(toDurationString(86400),\"P1D\");assert.strictEqual(toDurationString(-3600),\"-PT1H\")",
                  "err": {},
                  "uuid": "91d63982-6ed2-48cb-b4c5-cf638bc8d253",
                  "parentUUID": "b31fffa4-a9db-44ad-b95a-674a59c5a68e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91d63982-6ed2-48cb-b4c5-cf638bc8d253"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "469f4127-8795-4602-ac10-49115b353291",
          "title": "ical-generator Types",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/types.ts",
          "file": "/test/types.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stubs should be compatible with third party libraries",
              "fullTitle": "ical-generator Types stubs should be compatible with third party libraries",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(dayJsTest,\"day.js stub should be compatible\");assert.ok(luxonTest,\"luxon stub should be compatible\");assert.ok(momentTest,\"moment stub should be compatible\");assert.ok(momentTimezoneTest,\"moment-timezone stub should be compatible\");assert.ok(rruleTest,\"rrule stub should be compatible\")",
              "err": {},
              "uuid": "c45ef98b-8628-4a00-8859-7a97a349a95a",
              "parentUUID": "469f4127-8795-4602-ac10-49115b353291",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calendar data should be compatible with calendar json data",
              "fullTitle": "ical-generator Types calendar data should be compatible with calendar json data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(attendeeJson,\"attendee json data should be compatible\");assert.ok(calendarJson,\"calendar json data should be compatible\");assert.ok(categoryJson,\"category json data should be compatible\");assert.ok(eventJson,\"event json data should be compatible\")",
              "err": {},
              "uuid": "88bf123e-4404-4206-ab33-7f8295922fec",
              "parentUUID": "469f4127-8795-4602-ac10-49115b353291",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c45ef98b-8628-4a00-8859-7a97a349a95a",
            "88bf123e-4404-4206-ab33-7f8295922fec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}