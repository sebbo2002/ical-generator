{
  "stats": {
    "suites": 133,
    "tests": 464,
    "passes": 462,
    "pending": 2,
    "failures": 0,
    "start": "2025-05-13T21:36:21.287Z",
    "end": "2025-05-13T21:36:21.453Z",
    "duration": 166,
    "testsRegistered": 464,
    "passPercent": 100,
    "pendingPercent": 0.43103448275862066,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cbda96c3-e83d-4794-826d-ee1eedbdb64a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e946efee-d4fa-4a56-b0a4-c9298a360032",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6ac34e47-b04d-4114-a8fe-741835c03c50",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({type:ICalAlarmType.display},null)},/`event`/)",
                  "err": {},
                  "uuid": "1a585ff6-88c9-4159-8a59-85fb79c23257",
                  "parentUUID": "6ac34e47-b04d-4114-a8fe-741835c03c50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.display,unknown:true},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),\"display\")",
                  "err": {},
                  "uuid": "068f1e54-202c-420d-8d78-b068e5b0f5ca",
                  "parentUUID": "6ac34e47-b04d-4114-a8fe-741835c03c50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a585ff6-88c9-4159-8a59-85fb79c23257",
                "068f1e54-202c-420d-8d78-b068e5b0f5ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9e4d39c0-f85e-4c66-b08c-1e489719d368",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.type(ICalAlarmType.display))",
                  "err": {},
                  "uuid": "7409eb42-c447-4fd7-ba00-1346a108aaf3",
                  "parentUUID": "9e4d39c0-f85e-4c66-b08c-1e489719d368",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),\"display\");a.type(ICalAlarmType.audio);assert.strictEqual(a.type(),\"audio\")",
                  "err": {},
                  "uuid": "dc14b117-9c18-4a29-a35a-488e6a5ac36b",
                  "parentUUID": "9e4d39c0-f85e-4c66-b08c-1e489719d368",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.type(\"BANANA\")},/`type`/);assert.throws(function(){a.type(null)},/`type`/)",
                  "err": {},
                  "uuid": "c9ab1f56-3cd9-4f5c-b09f-9261621ed962",
                  "parentUUID": "9e4d39c0-f85e-4c66-b08c-1e489719d368",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"ACTION:DISPLAY\")>-1)",
                  "err": {},
                  "uuid": "86c6a593-64aa-437c-ba06-0c7cc24ab73b",
                  "parentUUID": "9e4d39c0-f85e-4c66-b08c-1e489719d368",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7409eb42-c447-4fd7-ba00-1346a108aaf3",
                "dc14b117-9c18-4a29-a35a-488e6a5ac36b",
                "c9ab1f56-3cd9-4f5c-b09f-9261621ed962",
                "86c6a593-64aa-437c-ba06-0c7cc24ab73b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8bba2260-fae2-4ab2-a42b-007d9fd306b5",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.trigger(60*10))",
                  "err": {},
                  "uuid": "730734ce-687c-4eda-bc75-6bfac5c5bf5c",
                  "parentUUID": "8bba2260-fae2-4ab2-a42b-007d9fd306b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;assert.strictEqual(a.trigger(),600);assert.strictEqual(a.triggerAfter(),-600);a.trigger(300);assert.strictEqual(a.trigger(),300);assert.strictEqual(a.triggerAfter(),-300);a.trigger(now);const dateResult=a.trigger();assert.deepStrictEqual(dateResult,now)",
                  "err": {},
                  "uuid": "cfe0b220-9a2f-4630-b276-d58a00c582ec",
                  "parentUUID": "8bba2260-fae2-4ab2-a42b-007d9fd306b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.trigger(Infinity)},/`trigger`/);assert.throws(function(){a.trigger(\"hi\")},/`trigger`/);assert.throws(function(){a.trigger(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "ae8d5c8d-ffe7-43a9-a23a-b621e266f7e9",
                  "parentUUID": "8bba2260-fae2-4ab2-a42b-007d9fd306b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(new Date);assert.ok(a.trigger()instanceof Date)",
                  "err": {},
                  "uuid": "f57e3c35-f9c4-4721-8d77-9969417f929c",
                  "parentUUID": "8bba2260-fae2-4ab2-a42b-007d9fd306b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(moment());assert.ok(moment.isMoment(a.trigger()))",
                  "err": {},
                  "uuid": "6dd00a19-b17d-45c6-b43e-145f2b7e9f56",
                  "parentUUID": "8bba2260-fae2-4ab2-a42b-007d9fd306b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(2*60);assert.strictEqual(a.trigger(),120)",
                  "err": {},
                  "uuid": "d468b337-81e6-4d87-a063-fe3eb29fe852",
                  "parentUUID": "8bba2260-fae2-4ab2-a42b-007d9fd306b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"2015-02-01T13:38:45.000Z\");const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"TRIGGER:-PT10M\"));a.trigger(trigger);assert.ok(a.toString().includes(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\"))",
                  "err": {},
                  "uuid": "30c15827-b13a-4894-bd0b-792f585b6dc2",
                  "parentUUID": "8bba2260-fae2-4ab2-a42b-007d9fd306b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "730734ce-687c-4eda-bc75-6bfac5c5bf5c",
                "cfe0b220-9a2f-4630-b276-d58a00c582ec",
                "ae8d5c8d-ffe7-43a9-a23a-b621e266f7e9",
                "f57e3c35-f9c4-4721-8d77-9969417f929c",
                "6dd00a19-b17d-45c6-b43e-145f2b7e9f56",
                "d468b337-81e6-4d87-a063-fe3eb29fe852",
                "30c15827-b13a-4894-bd0b-792f585b6dc2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1b7d5f74-29d8-49ba-bd46-3380e85c12e1",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.triggerAfter(60*10))",
                  "err": {},
                  "uuid": "c018db4d-3d85-4e88-80d0-733d76e16cf0",
                  "parentUUID": "1b7d5f74-29d8-49ba-bd46-3380e85c12e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar)).triggerAfter(300);assert.strictEqual(a.triggerAfter(),300);assert.strictEqual(a.trigger(),-300)",
                  "err": {},
                  "uuid": "de9c7c02-b8bb-4ee9-86bf-05fc2a21136e",
                  "parentUUID": "1b7d5f74-29d8-49ba-bd46-3380e85c12e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.triggerAfter(120);assert.strictEqual(a.trigger(),-120)",
                  "err": {},
                  "uuid": "cb6d5030-0b32-45b2-9424-7254deb98608",
                  "parentUUID": "1b7d5f74-29d8-49ba-bd46-3380e85c12e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.triggerAfter(Infinity)},/`trigger`/);assert.throws(function(){a.triggerAfter(\"hi\")},/`trigger`/);assert.throws(function(){a.triggerAfter(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "e50868d4-2314-48c3-a376-4830924bf8cc",
                  "parentUUID": "1b7d5f74-29d8-49ba-bd46-3380e85c12e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"20150201T133845Z\");const a=new ICalAlarm({triggerAfter:600},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"TRIGGER;RELATED=END:PT10M\")>-1);a.triggerAfter(trigger);assert.ok(a.toString().indexOf(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\")>-1)",
                  "err": {},
                  "uuid": "a0e998e9-0e98-4fd6-b42c-be7d86175ac6",
                  "parentUUID": "1b7d5f74-29d8-49ba-bd46-3380e85c12e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c018db4d-3d85-4e88-80d0-733d76e16cf0",
                "de9c7c02-b8bb-4ee9-86bf-05fc2a21136e",
                "cb6d5030-0b32-45b2-9424-7254deb98608",
                "e50868d4-2314-48c3-a376-4830924bf8cc",
                "a0e998e9-0e98-4fd6-b42c-be7d86175ac6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dcce4f28-0b35-41a8-9482-497aa003aedf",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.triggerBefore(60*10))",
                  "err": {},
                  "uuid": "923065ad-5b64-4660-96d1-85e179ac0578",
                  "parentUUID": "dcce4f28-0b35-41a8-9482-497aa003aedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;assert.strictEqual(a.triggerBefore(),600);a.trigger(300);assert.strictEqual(a.triggerBefore(),300);a.trigger(now);const dateResult=a.triggerBefore();assert.deepStrictEqual(dateResult,now)",
                  "err": {},
                  "uuid": "28e3f829-f58c-489c-985a-212ef76f5ad5",
                  "parentUUID": "dcce4f28-0b35-41a8-9482-497aa003aedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.triggerBefore(Infinity)},/`trigger`/);assert.throws(function(){a.triggerBefore(\"hi\")},/`trigger`/);assert.throws(function(){a.triggerBefore(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "0d217b6e-123c-42d0-ada0-f19579847ef1",
                  "parentUUID": "dcce4f28-0b35-41a8-9482-497aa003aedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;a.triggerBefore(now);assert.deepStrictEqual(a.trigger(),now)",
                  "err": {},
                  "uuid": "d19bceeb-54b0-40f0-a436-7963f950b31e",
                  "parentUUID": "dcce4f28-0b35-41a8-9482-497aa003aedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({triggerBefore:moment()},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(moment.isMoment(a.trigger()))",
                  "err": {},
                  "uuid": "413a611a-9d4a-41ce-9f44-53111d54c037",
                  "parentUUID": "dcce4f28-0b35-41a8-9482-497aa003aedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.triggerBefore(2*60);assert.strictEqual(a.trigger(),120)",
                  "err": {},
                  "uuid": "1885909f-9cac-46b9-81a2-5ca0d86117ff",
                  "parentUUID": "dcce4f28-0b35-41a8-9482-497aa003aedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"2015-02-01T13:38:45.000Z\");const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"TRIGGER:-PT10M\")>-1);a.triggerBefore(trigger);assert.ok(a.toString().indexOf(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\")>-1)",
                  "err": {},
                  "uuid": "6f94fb80-17a5-4817-b98d-c513ddcdecc1",
                  "parentUUID": "dcce4f28-0b35-41a8-9482-497aa003aedf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "923065ad-5b64-4660-96d1-85e179ac0578",
                "28e3f829-f58c-489c-985a-212ef76f5ad5",
                "0d217b6e-123c-42d0-ada0-f19579847ef1",
                "d19bceeb-54b0-40f0-a436-7963f950b31e",
                "413a611a-9d4a-41ce-9f44-53111d54c037",
                "1885909f-9cac-46b9-81a2-5ca0d86117ff",
                "6f94fb80-17a5-4817-b98d-c513ddcdecc1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7f888604-4d79-4657-ba0a-d4481f7e280b",
              "title": "relatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm relatesTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.relatesTo(null));assert.deepStrictEqual(a,a.relatesTo(ICalAlarmRelatesTo.end))",
                  "err": {},
                  "uuid": "1b025bb4-9d50-4381-a46c-9ad90e6f7aaa",
                  "parentUUID": "7f888604-4d79-4657-ba0a-d4481f7e280b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm relatesTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.relatesTo(ICalAlarmRelatesTo.end);assert.strictEqual(a.relatesTo(),ICalAlarmRelatesTo.end);a.relatesTo(null);assert.strictEqual(a.relatesTo(),null)",
                  "err": {},
                  "uuid": "3375f296-4b51-445a-9261-27f0aab9bb5e",
                  "parentUUID": "7f888604-4d79-4657-ba0a-d4481f7e280b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw if value is not `null`, \"START\" or \"END\"",
                  "fullTitle": "ical-generator Alarm relatesTo() should throw if value is not `null`, \"START\" or \"END\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.relatesTo(\"hi\")},/`relatesTo`/);assert.throws(function(){a.relatesTo(true)},/`relatesTo`/);assert.throws(function(){a.relatesTo(Infinity)},/`relatesTo`/)",
                  "err": {},
                  "uuid": "acb4f9dd-b24a-4bd0-980f-86460b96c854",
                  "parentUUID": "7f888604-4d79-4657-ba0a-d4481f7e280b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change RELATED",
                  "fullTitle": "ical-generator Alarm relatesTo() should change RELATED",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"RELATED=START\")===-1);a.relatesTo(ICalAlarmRelatesTo.start);assert.ok(a.toString().indexOf(\"RELATED=START\")>-1);a.relatesTo(ICalAlarmRelatesTo.end);assert.ok(a.toString().indexOf(\"RELATED=END\")>-1)",
                  "err": {},
                  "uuid": "c1fb65fd-3548-4c14-80a6-37a9936045e6",
                  "parentUUID": "7f888604-4d79-4657-ba0a-d4481f7e280b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b025bb4-9d50-4381-a46c-9ad90e6f7aaa",
                "3375f296-4b51-445a-9261-27f0aab9bb5e",
                "acb4f9dd-b24a-4bd0-980f-86460b96c854",
                "c1fb65fd-3548-4c14-80a6-37a9936045e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1115e218-6c20-4ce3-a538-1925095d75c1",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.repeat({interval:60,times:4}))",
                  "err": {},
                  "uuid": "5280dc89-a087-4037-9827-342d928d12a1",
                  "parentUUID": "1115e218-6c20-4ce3-a538-1925095d75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.repeat(),null);a.repeat({interval:60,times:4});assert.deepStrictEqual(a.repeat(),{interval:60,times:4})",
                  "err": {},
                  "uuid": "3be56083-b44b-4c40-b38c-f4674c982dcf",
                  "parentUUID": "1115e218-6c20-4ce3-a538-1925095d75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.repeat({interval:60,times:Infinity})},/`repeat.times`/);assert.throws(function(){a.repeat({interval:60,times:\"hi\"})},/`repeat.times`/);assert.throws(function(){a.repeat({interval:60,times:true})},/`repeat.times`/);assert.throws(function(){a.repeat({interval:Infinity,times:4})},/`repeat.interval`/);assert.throws(function(){a.repeat({interval:\"hi\",times:4})},/`repeat.interval`/);assert.throws(function(){a.repeat({interval:true,times:4})},/`repeat.interval`/)",
                  "err": {},
                  "uuid": "af9c582b-c9de-48db-bdd0-d3a251f76dfa",
                  "parentUUID": "1115e218-6c20-4ce3-a538-1925095d75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({repeat:{interval:90,times:42},trigger:300},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"REPEAT:42\"));assert.ok(a.toString().includes(\"DURATION:PT1M30S\"));a.repeat(null);assert.ok(!a.toString().includes(\"REPEAT:42\"));assert.ok(!a.toString().includes(\"DURATION:PT1M30S\"))",
                  "err": {},
                  "uuid": "ebe37791-0d94-4cdb-aedb-06e286364c79",
                  "parentUUID": "1115e218-6c20-4ce3-a538-1925095d75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({repeat:{interval:null,times:4},trigger:300},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat.interval`/)",
                  "err": {},
                  "uuid": "44ca77f1-a152-4a8a-919e-de6f8662fea1",
                  "parentUUID": "1115e218-6c20-4ce3-a538-1925095d75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({repeat:{interval:60,times:null},trigger:300},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat.times`/)",
                  "err": {},
                  "uuid": "cf371242-3b50-409a-a2b8-ea03b12fb069",
                  "parentUUID": "1115e218-6c20-4ce3-a538-1925095d75c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is of wrong type",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is of wrong type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({repeat:true,trigger:300},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat` is not correct, must be an object!/)",
                  "err": {},
                  "uuid": "4c8a2a21-be06-4482-a68c-e7aabd2ba119",
                  "parentUUID": "1115e218-6c20-4ce3-a538-1925095d75c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5280dc89-a087-4037-9827-342d928d12a1",
                "3be56083-b44b-4c40-b38c-f4674c982dcf",
                "af9c582b-c9de-48db-bdd0-d3a251f76dfa",
                "ebe37791-0d94-4cdb-aedb-06e286364c79",
                "44ca77f1-a152-4a8a-919e-de6f8662fea1",
                "cf371242-3b50-409a-a2b8-ea03b12fb069",
                "4c8a2a21-be06-4482-a68c-e7aabd2ba119"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "07d57b33-87c6-4aab-aa50-a84997a486a3",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.attach(null));assert.deepStrictEqual(a,a.attach(\"https://sebbo.net/beep.aud\"))",
                  "err": {},
                  "uuid": "5f8a90a4-acb8-4a58-9957-f1fc04eaaf46",
                  "parentUUID": "07d57b33-87c6-4aab-aa50-a84997a486a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t={mime:\"audio/basic\",uri:\"https://example.com/alarm.aud\"};const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.attach(),null);a.attach(t);assert.deepStrictEqual(a.attach(),t);a.attach(\"https://www.example.com/beep.aud\");assert.deepStrictEqual(a.attach(),{mime:null,uri:\"https://www.example.com/beep.aud\"});a.attach({uri:\"https://www.example.com/beep.aud\"});assert.deepStrictEqual(a.attach(),{mime:null,uri:\"https://www.example.com/beep.aud\"});a.attach(null);assert.strictEqual(a.attach(),null)",
                  "err": {},
                  "uuid": "93c0e6fe-1ca1-4c58-bf66-f01a419129f3",
                  "parentUUID": "07d57b33-87c6-4aab-aa50-a84997a486a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.attach({mime:\"audio/basic\"})},/`attach.uri`/)",
                  "err": {},
                  "uuid": "3ae7769a-65fc-4f89-b7ff-23de797ca37e",
                  "parentUUID": "07d57b33-87c6-4aab-aa50-a84997a486a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.attach(Infinity)},/`attachment`/)",
                  "err": {},
                  "uuid": "a34e6bbd-43c2-4ffa-9b17-536e4e697e34",
                  "parentUUID": "07d57b33-87c6-4aab-aa50-a84997a486a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.audio},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nATTACH;VALUE=URI:Basso\")>-1);a.attach(\"https://example.com/beep.aud\");assert.ok(a.toString().indexOf(\"\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud\")>-1);a.attach({mime:\"audio/basic\",uri:\"https://example.com/beep.aud\"});assert.ok(a.toString().indexOf(\"\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud\")>-1)",
                  "err": {},
                  "uuid": "240eed3b-abae-47e7-a0d1-db133809c750",
                  "parentUUID": "07d57b33-87c6-4aab-aa50-a84997a486a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f8a90a4-acb8-4a58-9957-f1fc04eaaf46",
                "93c0e6fe-1ca1-4c58-bf66-f01a419129f3",
                "3ae7769a-65fc-4f89-b7ff-23de797ca37e",
                "a34e6bbd-43c2-4ffa-9b17-536e4e697e34",
                "240eed3b-abae-47e7-a0d1-db133809c750"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4b0bfe9-05e0-445e-a3d3-2fe9fa627079",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.description(null));assert.deepStrictEqual(a,a.description(\"Hey Ho!\"))",
                  "err": {},
                  "uuid": "ad896de9-bf83-4175-83a6-04380ff1de02",
                  "parentUUID": "b4b0bfe9-05e0-445e-a3d3-2fe9fa627079",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.description(),null);a.description(\"blablabla\");assert.deepStrictEqual(a.description(),\"blablabla\");a.description(null);assert.deepStrictEqual(a.description(),null)",
                  "err": {},
                  "uuid": "114931bf-ea28-445d-8cd1-b3679276e750",
                  "parentUUID": "b4b0bfe9-05e0-445e-a3d3-2fe9fa627079",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({description:\"Huibuh!\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nDESCRIPTION:Huibuh\")>-1)",
                  "err": {},
                  "uuid": "954a2988-4494-4ad0-a7ac-5472bd8c18d8",
                  "parentUUID": "b4b0bfe9-05e0-445e-a3d3-2fe9fa627079",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({description:\"Example Event\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nDESCRIPTION:Example Event\")>-1)",
                  "err": {},
                  "uuid": "1c71294c-bd3e-47e4-bc73-2d0768750127",
                  "parentUUID": "b4b0bfe9-05e0-445e-a3d3-2fe9fa627079",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad896de9-bf83-4175-83a6-04380ff1de02",
                "114931bf-ea28-445d-8cd1-b3679276e750",
                "954a2988-4494-4ad0-a7ac-5472bd8c18d8",
                "1c71294c-bd3e-47e4-bc73-2d0768750127"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bab3d002-06d4-41c1-93ab-a1bcd980c0d1",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.summary(null));assert.deepStrictEqual(a,a.summary(\"Hey Ho!\"))",
                  "err": {},
                  "uuid": "d7ace17a-3336-4120-bb7f-18b4efc3c124",
                  "parentUUID": "bab3d002-06d4-41c1-93ab-a1bcd980c0d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.summary(),null);a.summary(\"blablabla\");assert.deepStrictEqual(a.summary(),\"blablabla\");a.summary(null);assert.deepStrictEqual(a.summary(),null)",
                  "err": {},
                  "uuid": "d300a0d1-ebd6-408d-abc3-0e66cb930a55",
                  "parentUUID": "bab3d002-06d4-41c1-93ab-a1bcd980c0d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm summary() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({summary:\"Huibuh!\",type:ICalAlarmType.email},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nSUMMARY:Huibuh\")>-1)",
                  "err": {},
                  "uuid": "76b45440-7dae-48d2-8635-29bc69cb7f69",
                  "parentUUID": "bab3d002-06d4-41c1-93ab-a1bcd980c0d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm summary() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.email},new ICalEvent({start:new Date,summary:\"Example Event\"},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nSUMMARY:Example Event\")>-1)",
                  "err": {},
                  "uuid": "3731dea2-b5d6-4cc5-979e-d7b65c61e4ac",
                  "parentUUID": "bab3d002-06d4-41c1-93ab-a1bcd980c0d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7ace17a-3336-4120-bb7f-18b4efc3c124",
                "d300a0d1-ebd6-408d-abc3-0e66cb930a55",
                "76b45440-7dae-48d2-8635-29bc69cb7f69",
                "3731dea2-b5d6-4cc5-979e-d7b65c61e4ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18d113bc-d9d7-4b1f-bd8f-d7ab4c533af1",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Alarm createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=new ICalAttendee({email:\"mail@example.com\"},alarm);assert.strictEqual(alarm.createAttendee(attendee),attendee,\"createAttendee returns attendee\");assert.deepStrictEqual(alarm.attendees()[0],attendee,\"attendee pushed\")",
                  "err": {},
                  "uuid": "5791346b-ebd6-4688-8d6d-3603fd7d97f0",
                  "parentUUID": "18d113bc-d9d7-4b1f-bd8f-d7ab4c533af1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Alarm createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});assert.ok(alarm.createAttendee({email:\"mail@example.com\"})instanceof ICalAttendee);assert.strictEqual(alarm.attendees.length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "a3406ec4-49e2-48ac-8d8c-cdb38c247957",
                  "parentUUID": "18d113bc-d9d7-4b1f-bd8f-d7ab4c533af1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=alarm.createAttendee(\"Zac <zac@example.com>\");assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(alarm.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "dba9c409-95da-4367-b899-724c645bdad4",
                  "parentUUID": "18d113bc-d9d7-4b1f-bd8f-d7ab4c533af1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Alarm createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});assert.throws(function(){alarm.createAttendee(\"foo bar\")},/isn't formated correctly/)",
                  "err": {},
                  "uuid": "3e474de8-90c6-4759-ae38-3bf309013d36",
                  "parentUUID": "18d113bc-d9d7-4b1f-bd8f-d7ab4c533af1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=alarm.createAttendee({email:\"zac@example.com\",name:\"Zac\"});assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(alarm.attendees().length,1,\"attendee pushed\");assert.ok(alarm.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;CN=\"Zac\":MAILTO:zac@example.com'))",
                  "err": {},
                  "uuid": "956305c3-90f1-4db3-9bec-0d57423b67d8",
                  "parentUUID": "18d113bc-d9d7-4b1f-bd8f-d7ab4c533af1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5791346b-ebd6-4688-8d6d-3603fd7d97f0",
                "a3406ec4-49e2-48ac-8d8c-cdb38c247957",
                "dba9c409-95da-4367-b899-724c645bdad4",
                "3e474de8-90c6-4759-ae38-3bf309013d36",
                "956305c3-90f1-4db3-9bec-0d57423b67d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "478e2601-b0e6-4bdc-9969-1a3c8dd1256e",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Alarm attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});assert.strictEqual(alarm.attendees().length,0);const attendee=alarm.createAttendee({email:\"mail@example.com\"});assert.strictEqual(alarm.attendees().length,1);assert.deepStrictEqual(alarm.attendees()[0],attendee)",
                  "err": {},
                  "uuid": "1438eee1-85e9-4915-95d2-410382137b64",
                  "parentUUID": "478e2601-b0e6-4bdc-9969-1a3c8dd1256e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Alarm attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const foo=alarm.attendees([{email:\"a@example.com\",name:\"Person A\"},{email:\"b@example.com\",name:\"Person B\"}]);assert.strictEqual(alarm.attendees().length,2);assert.deepStrictEqual(foo,alarm)",
                  "err": {},
                  "uuid": "a9fc3d40-7b55-4c58-8663-9df1096c1cbf",
                  "parentUUID": "478e2601-b0e6-4bdc-9969-1a3c8dd1256e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1438eee1-85e9-4915-95d2-410382137b64",
                "a9fc3d40-7b55-4c58-8663-9df1096c1cbf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d720b4bc-c9cb-433f-9d83-a8976f358eba",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "707b6d86-93a8-4c16-97bf-ce1b6287732a",
                  "parentUUID": "d720b4bc-c9cb-433f-9d83-a8976f358eba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "707b6d86-93a8-4c16-97bf-ce1b6287732a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "26031caa-c6aa-4557-b60d-6790d7b61188",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.type(ICalAlarmType.display);a.trigger(120);assert.deepStrictEqual(a.toJSON(),{attach:null,attendees:[],description:null,interval:null,relatesTo:null,repeat:null,summary:null,trigger:120,type:\"display\",x:[]})",
                  "err": {},
                  "uuid": "8597d766-842e-413e-a1f8-848d087812e5",
                  "parentUUID": "26031caa-c6aa-4557-b60d-6790d7b61188",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));new ICalAlarm(a.toJSON(),new ICalEvent({start:new Date},new ICalCalendar))",
                  "err": {},
                  "uuid": "f2828224-c2d9-4615-8da8-b9baa8ba8a6a",
                  "parentUUID": "26031caa-c6aa-4557-b60d-6790d7b61188",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8597d766-842e-413e-a1f8-848d087812e5",
                "f2828224-c2d9-4615-8da8-b9baa8ba8a6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ad6bbc5b-bd0d-4e24-9d73-ffbda90e81ad",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6628cc03-11aa-468c-91c8-fee774d8d635",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={delegatedFrom:null,delegatedTo:null,email:\"john@example.org\",mailto:\"john+calendar@example.org\",name:\"John Doe\",role:ICalAttendeeRole.REQ,rsvp:false,scheduleAgent:ICalAttendeeScheduleAgent.CLIENT,sentBy:null,status:ICalAttendeeStatus.ACCEPTED,type:ICalAttendeeType.INDIVIDUAL,x:[]};const event=new ICalAttendee(data,new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(event.toJSON(),data)",
                  "err": {},
                  "uuid": "ed677f35-1d36-4b12-8b40-8f710a49f821",
                  "parentUUID": "6628cc03-11aa-468c-91c8-fee774d8d635",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAttendee({email:\"foo@bar.com\"})},/`event`/)",
                  "err": {},
                  "uuid": "31d20255-43de-4cd8-afa0-f1cd41e9c56d",
                  "parentUUID": "6628cc03-11aa-468c-91c8-fee774d8d635",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee constructor() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAttendee({name:\"Testuser\"},new ICalEvent({start:new Date},new ICalCalendar))},/`email`/)",
                  "err": {},
                  "uuid": "3b32fa91-0d34-4fb6-88d9-089593a6f2e4",
                  "parentUUID": "6628cc03-11aa-468c-91c8-fee774d8d635",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed677f35-1d36-4b12-8b40-8f710a49f821",
                "31d20255-43de-4cd8-afa0-f1cd41e9c56d",
                "3b32fa91-0d34-4fb6-88d9-089593a6f2e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a85e029a-989d-4442-8cea-4c9d170ac129",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.name(),null);a.name(\"Sebastian\");assert.strictEqual(a.name(),\"Sebastian\")",
                  "err": {},
                  "uuid": "3d877e4a-3f7f-4296-8dd0-ce45c6fd771b",
                  "parentUUID": "a85e029a-989d-4442-8cea-4c9d170ac129",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.name(null));assert.deepStrictEqual(a,a.name(\"Sebastian\"))",
                  "err": {},
                  "uuid": "15095012-b611-4667-a747-9b417a3e89a2",
                  "parentUUID": "a85e029a-989d-4442-8cea-4c9d170ac129",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.name(\"Sebastian\");assert.strictEqual(a.name(),\"Sebastian\");a.name(null);assert.strictEqual(a.name(),null)",
                  "err": {},
                  "uuid": "48a136cf-d4b8-4da9-a8ce-aa9417cb5327",
                  "parentUUID": "a85e029a-989d-4442-8cea-4c9d170ac129",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d877e4a-3f7f-4296-8dd0-ce45c6fd771b",
                "15095012-b611-4667-a747-9b417a3e89a2",
                "48a136cf-d4b8-4da9-a8ce-aa9417cb5327"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e99f0623-ec6e-479e-96d9-01a48594a335",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).email(\"foo@example.com\");assert.strictEqual(a.email(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "1ec67d5a-6513-4dca-86a8-4f3159e4189b",
                  "parentUUID": "e99f0623-ec6e-479e-96d9-01a48594a335",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.email(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "93d53f23-568d-432e-a293-b864a0a3cf4e",
                  "parentUUID": "e99f0623-ec6e-479e-96d9-01a48594a335",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"mail@example.com\")>-1)",
                  "err": {},
                  "uuid": "0f23f3b5-96b2-4ef0-8089-4dec5a9d56ff",
                  "parentUUID": "e99f0623-ec6e-479e-96d9-01a48594a335",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ec67d5a-6513-4dca-86a8-4f3159e4189b",
                "93d53f23-568d-432e-a293-b864a0a3cf4e",
                "0f23f3b5-96b2-4ef0-8089-4dec5a9d56ff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "341654b1-b480-4596-bd3f-c5246fd71b52",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.mailto(),null);a.mailto(\"foo@example.com\");assert.strictEqual(a.mailto(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "93e915f6-ceee-420a-8834-588981f4206c",
                  "parentUUID": "341654b1-b480-4596-bd3f-c5246fd71b52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.mailto(null));assert.deepStrictEqual(a,a.mailto(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "4173c973-8d30-4df1-b6a5-2f0098d51ca5",
                  "parentUUID": "341654b1-b480-4596-bd3f-c5246fd71b52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.mailto(\"mail2@example2.com\");assert.ok(a.toString().indexOf(\"EMAIL=mail@example.com\")>-1&&a.toString().indexOf(\"MAILTO:mail2@example2.com\")>-1)",
                  "err": {},
                  "uuid": "fef945f9-b5d2-4762-bb60-7dd20c81fc06",
                  "parentUUID": "341654b1-b480-4596-bd3f-c5246fd71b52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93e915f6-ceee-420a-8834-588981f4206c",
                "4173c973-8d30-4df1-b6a5-2f0098d51ca5",
                "fef945f9-b5d2-4762-bb60-7dd20c81fc06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "897b1a36-f095-4d96-a48b-59f0ed326d49",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).sentBy(\"foo@example.com\");assert.strictEqual(a.sentBy(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "af70035e-f492-42ee-b82f-2b2c2df91eb9",
                  "parentUUID": "897b1a36-f095-4d96-a48b-59f0ed326d49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.sentBy(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "24181dee-327c-44a8-a233-9dc2bf665c74",
                  "parentUUID": "897b1a36-f095-4d96-a48b-59f0ed326d49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\",sentBy:\"bar@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"bar@example.com\"))",
                  "err": {},
                  "uuid": "448e2bcd-2c80-427a-b071-45c0872dc1b7",
                  "parentUUID": "897b1a36-f095-4d96-a48b-59f0ed326d49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af70035e-f492-42ee-b82f-2b2c2df91eb9",
                "24181dee-327c-44a8-a233-9dc2bf665c74",
                "448e2bcd-2c80-427a-b071-45c0872dc1b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e40a018b-bcc4-46d9-bede-ad733dbab3ab",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.role(ICalAttendeeRole.REQ))",
                  "err": {},
                  "uuid": "cb16a53f-2ea7-4ff7-981f-407df5c9d8ae",
                  "parentUUID": "e40a018b-bcc4-46d9-bede-ad733dbab3ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).role(ICalAttendeeRole.REQ);assert.strictEqual(a.role(),\"REQ-PARTICIPANT\")",
                  "err": {},
                  "uuid": "24e63db2-b238-4069-82cf-1d95af28c57f",
                  "parentUUID": "e40a018b-bcc4-46d9-bede-ad733dbab3ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.role(\"\")},/Input must be one of the following: CHAIR, NON-PARTICIPANT, OPT-PARTICIPANT, REQ-PARTICIPANT/)",
                  "err": {},
                  "uuid": "c88400f2-2439-4d84-96db-820c3893d100",
                  "parentUUID": "e40a018b-bcc4-46d9-bede-ad733dbab3ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.role(\"COOKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "550405ef-f41c-4108-886e-0bf8d78d976e",
                  "parentUUID": "e40a018b-bcc4-46d9-bede-ad733dbab3ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",role:ICalAttendeeRole.NON},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"NON-PARTICIPANT\")>-1)",
                  "err": {},
                  "uuid": "45995fd3-7a58-4f8b-a48a-02b3e4832c5f",
                  "parentUUID": "e40a018b-bcc4-46d9-bede-ad733dbab3ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb16a53f-2ea7-4ff7-981f-407df5c9d8ae",
                "24e63db2-b238-4069-82cf-1d95af28c57f",
                "c88400f2-2439-4d84-96db-820c3893d100",
                "550405ef-f41c-4108-886e-0bf8d78d976e",
                "45995fd3-7a58-4f8b-a48a-02b3e4832c5f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af9aee32-88e5-42de-a69f-43ff10755ab0",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.rsvp(null));assert.deepStrictEqual(a,a.rsvp(true))",
                  "err": {},
                  "uuid": "600bac5f-2edb-4d3d-af36-219edc31900e",
                  "parentUUID": "af9aee32-88e5-42de-a69f-43ff10755ab0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.rsvp(true);assert.strictEqual(a.rsvp(),true);a.rsvp(false);assert.strictEqual(a.rsvp(),false)",
                  "err": {},
                  "uuid": "910e4f52-5265-42d6-89b6-696e28cb4459",
                  "parentUUID": "af9aee32-88e5-42de-a69f-43ff10755ab0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.rsvp(),null);a.rsvp(false);assert.strictEqual(a.rsvp(),false);a.rsvp(null);assert.strictEqual(a.rsvp(),null)",
                  "err": {},
                  "uuid": "2ce49835-41ed-40da-bff0-c1d7ef40a27a",
                  "parentUUID": "af9aee32-88e5-42de-a69f-43ff10755ab0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",rsvp:true},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\";RSVP=TRUE\")>-1)",
                  "err": {},
                  "uuid": "1c02b8ab-bcac-493f-91f3-a8aaf1b0cd04",
                  "parentUUID": "af9aee32-88e5-42de-a69f-43ff10755ab0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "600bac5f-2edb-4d3d-af36-219edc31900e",
                "910e4f52-5265-42d6-89b6-696e28cb4459",
                "2ce49835-41ed-40da-bff0-c1d7ef40a27a",
                "1c02b8ab-bcac-493f-91f3-a8aaf1b0cd04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3ad96c24-5624-4041-a63b-c78555118fae",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.status(null));assert.deepStrictEqual(a,a.status(ICalAttendeeStatus.ACCEPTED))",
                  "err": {},
                  "uuid": "bcabb6cc-2c81-4f2e-b046-9dd185308246",
                  "parentUUID": "3ad96c24-5624-4041-a63b-c78555118fae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.status(),null);a.status(ICalAttendeeStatus.ACCEPTED);assert.strictEqual(a.status(),\"ACCEPTED\");a.status(null);assert.strictEqual(a.status(),null)",
                  "err": {},
                  "uuid": "fee4bcb9-3514-4283-8771-1421eb449758",
                  "parentUUID": "3ad96c24-5624-4041-a63b-c78555118fae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.status(\"DRINKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "c27c0974-122c-4b77-bd27-4503befae4a6",
                  "parentUUID": "3ad96c24-5624-4041-a63b-c78555118fae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",status:ICalAttendeeStatus.DECLINED},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"DECLINED\")>-1)",
                  "err": {},
                  "uuid": "e24a4c86-e5d1-494b-afec-0eb81e992cd7",
                  "parentUUID": "3ad96c24-5624-4041-a63b-c78555118fae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",status:ICalAttendeeStatus.NEEDSACTION},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"NEEDS-ACTION\")>-1)",
                  "err": {},
                  "uuid": "5298436c-f241-48ec-99f2-447e02ff01a6",
                  "parentUUID": "3ad96c24-5624-4041-a63b-c78555118fae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bcabb6cc-2c81-4f2e-b046-9dd185308246",
                "fee4bcb9-3514-4283-8771-1421eb449758",
                "c27c0974-122c-4b77-bd27-4503befae4a6",
                "e24a4c86-e5d1-494b-afec-0eb81e992cd7",
                "5298436c-f241-48ec-99f2-447e02ff01a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "93f5f81f-fd78-4efe-adb3-e60178dc62ed",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.type(null),a);assert.deepStrictEqual(a.type(ICalAttendeeType.INDIVIDUAL),a)",
                  "err": {},
                  "uuid": "f1b9c161-e3ad-49c0-8a66-f46003fdf98f",
                  "parentUUID": "93f5f81f-fd78-4efe-adb3-e60178dc62ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),null);a.type(ICalAttendeeType.ROOM);assert.strictEqual(a.type(),\"ROOM\");a.type(null);assert.strictEqual(a.type(),null)",
                  "err": {},
                  "uuid": "9a536acc-9d52-4389-98bb-934e5a05c06d",
                  "parentUUID": "93f5f81f-fd78-4efe-adb3-e60178dc62ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.type(\"DRINKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "d171df09-2535-40c9-ba9c-b95d4ee16f36",
                  "parentUUID": "93f5f81f-fd78-4efe-adb3-e60178dc62ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mailing-list@example.com\",type:ICalAttendeeType.GROUP},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"GROUP\")>-1)",
                  "err": {},
                  "uuid": "bbc58662-6c8f-4905-8568-2870248793f7",
                  "parentUUID": "93f5f81f-fd78-4efe-adb3-e60178dc62ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1b9c161-e3ad-49c0-8a66-f46003fdf98f",
                "9a536acc-9d52-4389-98bb-934e5a05c06d",
                "d171df09-2535-40c9-ba9c-b95d4ee16f36",
                "bbc58662-6c8f-4905-8568-2870248793f7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc9dd931-23fe-4daa-bacf-16d43c1313d7",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.delegatedTo(null));assert.deepStrictEqual(a,a.delegatedTo(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "0a792483-0cfb-41bc-a8c0-52699b6de1cb",
                  "parentUUID": "cc9dd931-23fe-4daa-bacf-16d43c1313d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.delegatedTo(),null);a.delegatedTo(\"foo@example.com\");const result=a.delegatedTo();assert.ok(result);assert.strictEqual(result.email(),\"foo@example.com\");a.delegatedTo(null);assert.strictEqual(a.delegatedTo(),null)",
                  "err": {},
                  "uuid": "a044496b-4355-4060-9f43-d389d0936e1b",
                  "parentUUID": "cc9dd931-23fe-4daa-bacf-16d43c1313d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({delegatedTo:\"foo@example.com\",email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"foo@example\")>-1)",
                  "err": {},
                  "uuid": "28e41910-893c-424e-a848-541d902aa6a3",
                  "parentUUID": "cc9dd931-23fe-4daa-bacf-16d43c1313d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a792483-0cfb-41bc-a8c0-52699b6de1cb",
                "a044496b-4355-4060-9f43-d389d0936e1b",
                "28e41910-893c-424e-a848-541d902aa6a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6adba74a-16f5-46b6-b136-d8e48281b42d",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.delegatedFrom(null));assert.deepStrictEqual(a,a.delegatedFrom(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "8953fade-04a0-4b91-bcc6-34c55cc98b3b",
                  "parentUUID": "6adba74a-16f5-46b6-b136-d8e48281b42d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.delegatedFrom(),null);a.delegatedFrom(\"foo@example.com\");let result=a.delegatedFrom();assert.ok(result);assert.strictEqual(result.email(),\"foo@example.com\");a.delegatedFrom({email:\"max.mustermann@example.com\",name:\"Max Mustermann\"});result=a.delegatedFrom();assert.ok(result);assert.strictEqual(result.name(),\"Max Mustermann\");assert.strictEqual(result.email(),\"max.mustermann@example.com\");a.delegatedFrom(null);assert.strictEqual(a.delegatedFrom(),null)",
                  "err": {},
                  "uuid": "2fdcda98-902e-4664-a948-fd7df17cd957",
                  "parentUUID": "6adba74a-16f5-46b6-b136-d8e48281b42d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({delegatedFrom:\"foo@example.com\",email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"foo@example.com\")>-1)",
                  "err": {},
                  "uuid": "5c39bcdc-9eb9-4cff-ab27-75815f52fdf5",
                  "parentUUID": "6adba74a-16f5-46b6-b136-d8e48281b42d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8953fade-04a0-4b91-bcc6-34c55cc98b3b",
                "2fdcda98-902e-4664-a948-fd7df17cd957",
                "5c39bcdc-9eb9-4cff-ab27-75815f52fdf5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "107750f4-fd4c-4d33-8f1f-f61c2c5e3ba7",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.delegatesTo({email:\"mail@example.com\"})instanceof ICalAttendee)",
                  "err": {},
                  "uuid": "2b975cdd-4dda-494b-887f-0283fd659d07",
                  "parentUUID": "107750f4-fd4c-4d33-8f1f-f61c2c5e3ba7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({email:\"muh@example.com\",name:\"Muh\"},event);assert.deepStrictEqual(new ICalAttendee({email:\"foo@example.com\"},event).delegatesTo(attendee),attendee)",
                  "err": {},
                  "uuid": "ed062668-1c37-438a-9520-7abe69f27426",
                  "parentUUID": "107750f4-fd4c-4d33-8f1f-f61c2c5e3ba7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee=new ICalAttendee({email:\"zac@example.com\",name:\"Zac\"},new ICalEvent({start:new Date},new ICalCalendar)).delegatesTo({email:\"cody@example.com\",name:\"Cody\"});assert.strictEqual(attendee.name(),\"Cody\")",
                  "err": {},
                  "uuid": "107da1e8-e8be-4a89-8f2f-ec470592bd94",
                  "parentUUID": "107750f4-fd4c-4d33-8f1f-f61c2c5e3ba7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b975cdd-4dda-494b-887f-0283fd659d07",
                "ed062668-1c37-438a-9520-7abe69f27426",
                "107da1e8-e8be-4a89-8f2f-ec470592bd94"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5fff0fba-ecdf-4ae9-a0e8-a12a8335e2de",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.delegatesFrom({email:\"bar@example.com\"})instanceof ICalAttendee)",
                  "err": {},
                  "uuid": "be1d6212-41dd-4385-912d-c8f8ccfb6b2b",
                  "parentUUID": "5fff0fba-ecdf-4ae9-a0e8-a12a8335e2de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({email:\"muh@example.com\",name:\"Muh\"},event);assert.deepStrictEqual(new ICalAttendee({email:\"bar@example.com\"},event).delegatesFrom(attendee),attendee)",
                  "err": {},
                  "uuid": "03e75064-b32c-48cb-b574-aba2f19991ec",
                  "parentUUID": "5fff0fba-ecdf-4ae9-a0e8-a12a8335e2de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"zac@example.com\",name:\"Zac\"},new ICalEvent({start:new Date},new ICalCalendar)).delegatesFrom({email:\"cody@example.com\",name:\"Cody\"});assert.strictEqual(a.name(),\"Cody\");const b=new ICalAttendee({delegatesFrom:{email:\"cody@example.com\",name:\"Cody\"},email:\"zac@example.com\",name:\"Zac\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(b.name(),\"Zac\")",
                  "err": {},
                  "uuid": "0a7f53c3-9676-404a-b92c-11bc1ae64341",
                  "parentUUID": "5fff0fba-ecdf-4ae9-a0e8-a12a8335e2de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be1d6212-41dd-4385-912d-c8f8ccfb6b2b",
                "03e75064-b32c-48cb-b574-aba2f19991ec",
                "0a7f53c3-9676-404a-b92c-11bc1ae64341"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b635bd0f-1cba-43a4-82db-d456f40a5e08",
              "title": "scheduleAgent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee scheduleAgent() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.scheduleAgent(null),a);assert.deepStrictEqual(a.scheduleAgent(ICalAttendeeScheduleAgent.CLIENT),a)",
                  "err": {},
                  "uuid": "bdb255c7-2836-4a0a-ba55-39b897f85850",
                  "parentUUID": "b635bd0f-1cba-43a4-82db-d456f40a5e08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee scheduleAgent() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.scheduleAgent(),null);a.scheduleAgent(ICalAttendeeScheduleAgent.CLIENT);assert.strictEqual(a.scheduleAgent(),\"CLIENT\");a.scheduleAgent(null);assert.strictEqual(a.scheduleAgent(),null)",
                  "err": {},
                  "uuid": "fb4b99b2-47c8-4071-be17-4237927cfc62",
                  "parentUUID": "b635bd0f-1cba-43a4-82db-d456f40a5e08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show in the toString() output",
                  "fullTitle": "ical-generator Attendee scheduleAgent() should show in the toString() output",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mailing-list@example.com\",scheduleAgent:ICalAttendeeScheduleAgent.CLIENT},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"SCHEDULE-AGENT=CLIENT\")>-1)",
                  "err": {},
                  "uuid": "5375cecf-391e-4ec9-be6d-819907efd67f",
                  "parentUUID": "b635bd0f-1cba-43a4-82db-d456f40a5e08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept X- prefixed custom values",
                  "fullTitle": "ical-generator Attendee scheduleAgent() should accept X- prefixed custom values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mailing-list@example.com\",scheduleAgent:\"X-CUSTOM-VALUE\"},new ICalEvent({start:new Date},new ICalCalendar));assert.equal(a.scheduleAgent(),\"X-CUSTOM-VALUE\");a.scheduleAgent(\"X-CUSTOM-VALUE-2\");assert.equal(a.scheduleAgent(),\"X-CUSTOM-VALUE-2\")",
                  "err": {},
                  "uuid": "5c1e38b8-049d-4f90-a295-525f1e822049",
                  "parentUUID": "b635bd0f-1cba-43a4-82db-d456f40a5e08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when using non-X- prefixed custom values",
                  "fullTitle": "ical-generator Attendee scheduleAgent() should throw error when using non-X- prefixed custom values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.scheduleAgent(\"NON-X-CUSTOM-VALUE\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "35a880cd-841d-4020-baf0-ab372d2c186c",
                  "parentUUID": "b635bd0f-1cba-43a4-82db-d456f40a5e08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bdb255c7-2836-4a0a-ba55-39b897f85850",
                "fb4b99b2-47c8-4071-be17-4237927cfc62",
                "5375cecf-391e-4ec9-be6d-819907efd67f",
                "5c1e38b8-049d-4f90-a295-525f1e822049",
                "35a880cd-841d-4020-baf0-ab372d2c186c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "16b9f6f4-1a33-41f6-895a-4329645dc8e6",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.org\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.x(\"X-NUM-GUESTS\",\"5\"));assert.ok(a.toString().includes(\"ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org\"))",
                  "err": {},
                  "uuid": "4006b64c-53cd-480a-bef6-d5c987098c32",
                  "parentUUID": "16b9f6f4-1a33-41f6-895a-4329645dc8e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4006b64c-53cd-480a-bef6-d5c987098c32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30d49924-3461-40c1-aa5b-a596723683cf",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"max@example.com\",name:\"Max Mustermann\"},new ICalEvent({start:new Date},new ICalCalendar));a.delegatesTo(\"Moritz <moritz@example.com>\");assert.deepStrictEqual(a.toJSON(),{delegatedFrom:null,delegatedTo:\"moritz@example.com\",email:\"max@example.com\",mailto:null,name:\"Max Mustermann\",role:\"REQ-PARTICIPANT\",rsvp:null,scheduleAgent:null,sentBy:null,status:\"DELEGATED\",type:null,x:[]})",
                  "err": {},
                  "uuid": "0e46916c-19c8-4292-ba40-c5003e8bb59b",
                  "parentUUID": "30d49924-3461-40c1-aa5b-a596723683cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));new ICalAttendee(a.toJSON(),new ICalEvent({start:new Date},new ICalCalendar))",
                  "err": {},
                  "uuid": "d524227b-06d1-4e0f-91f0-f15e31a3f47b",
                  "parentUUID": "30d49924-3461-40c1-aa5b-a596723683cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e46916c-19c8-4292-ba40-c5003e8bb59b",
                "d524227b-06d1-4e0f-91f0-f15e31a3f47b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c67d1c13-5850-4be6-ae5e-b95bb09ead3f",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a6423809-349b-4463-b317-f219e24ed61d",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={description:\"Hi, I am the description.\",events:[],method:ICalCalendarMethod.PUBLISH,name:\"Test Calendar\",prodId:\"//sebbo.net//ical-generator//EN\",scale:null,source:\"http://example.com/my/original_source.ical\",timezone:null,ttl:null,url:\"https://github.com/sebbo2002/ical-generator\",x:[]};const cal=new ICalCalendar(data);assert.deepStrictEqual(cal.toJSON(),data)",
                  "err": {},
                  "uuid": "9724299f-d58e-47ef-a7f5-2865afd668ee",
                  "parentUUID": "a6423809-349b-4463-b317-f219e24ed61d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9724299f-d58e-47ef-a7f5-2865afd668ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "44ba18da-d029-4b06-9abb-3a1b7a25800c",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.prodId(\"//loremipsum.de//ical-tests//EN\");assert.strictEqual(cal.prodId(),\"//loremipsum.de//ical-tests//EN\")",
                  "err": {},
                  "uuid": "11a4a6b6-552f-4d26-89ed-d41836e385a8",
                  "parentUUID": "44ba18da-d029-4b06-9abb-3a1b7a25800c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.prodId(\"//loremipsum.de//ical-tests//EN\"))",
                  "err": {},
                  "uuid": "1a5c69da-0516-4928-9ef4-b965f9d6b49d",
                  "parentUUID": "44ba18da-d029-4b06-9abb-3a1b7a25800c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId(256)},/`prodid`/)",
                  "err": {},
                  "uuid": "9c109423-aa5d-4a9e-9070-52b448cf8c78",
                  "parentUUID": "44ba18da-d029-4b06-9abb-3a1b7a25800c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId({product:\"ical-tests\"})},/`prodid\\.company`/)",
                  "err": {},
                  "uuid": "05cc176c-085d-4631-88b8-4f66abdb4ec1",
                  "parentUUID": "44ba18da-d029-4b06-9abb-3a1b7a25800c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId({company:\"sebbo.net\"})},/`prodid\\.product`/)",
                  "err": {},
                  "uuid": "4d3c47b4-a885-47ed-98a5-b8f3d3e90723",
                  "parentUUID": "44ba18da-d029-4b06-9abb-3a1b7a25800c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().prodId({company:\"loremipsum.com\",product:\"awesome-unit-tests\"});assert.strictEqual(cal.prodId(),\"//loremipsum.com//awesome-unit-tests//EN\")",
                  "err": {},
                  "uuid": "c1612797-78d5-4b5f-82ea-9c18d12b0fc0",
                  "parentUUID": "44ba18da-d029-4b06-9abb-3a1b7a25800c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().prodId({company:\"loremipsum.com\",language:\"DE\",product:\"awesome-unit-tests\"});assert.strictEqual(cal.prodId(),\"//loremipsum.com//awesome-unit-tests//DE\")",
                  "err": {},
                  "uuid": "91a26a39-8da0-4827-9804-7327a05b84cc",
                  "parentUUID": "44ba18da-d029-4b06-9abb-3a1b7a25800c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11a4a6b6-552f-4d26-89ed-d41836e385a8",
                "1a5c69da-0516-4928-9ef4-b965f9d6b49d",
                "9c109423-aa5d-4a9e-9070-52b448cf8c78",
                "05cc176c-085d-4631-88b8-4f66abdb4ec1",
                "4d3c47b4-a885-47ed-98a5-b8f3d3e90723",
                "c1612797-78d5-4b5f-82ea-9c18d12b0fc0",
                "91a26a39-8da0-4827-9804-7327a05b84cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "caf0a96d-11e2-4207-9608-c5fe70f6949f",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.deepStrictEqual(c,c.method(null),\"method(null)\");assert.deepStrictEqual(c,c.method(ICalCalendarMethod.PUBLISH),\"method(enum)\")",
                  "err": {},
                  "uuid": "7c4ef624-5e1c-4416-a0d8-efbe89f9880e",
                  "parentUUID": "caf0a96d-11e2-4207-9608-c5fe70f6949f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.strictEqual(c.method(),null);c.method(null);assert.strictEqual(c.method(),null);c.method(ICalCalendarMethod.PUBLISH);assert.strictEqual(c.method(),\"PUBLISH\");c.method(null);assert.strictEqual(c.method(),null)",
                  "err": {},
                  "uuid": "307c5a50-2225-4e54-85fa-477f681ebf8e",
                  "parentUUID": "caf0a96d-11e2-4207-9608-c5fe70f6949f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.throws(function(){c.method(\"KICK ASS\")},/Input must be one of the following: ADD, CANCEL, COUNTER, DECLINECOUNTER, PUBLISH, REFRESH, REPLY, REQUEST/)",
                  "err": {},
                  "uuid": "72fcfd53-3831-4cd6-b82f-512e2ac1aa89",
                  "parentUUID": "caf0a96d-11e2-4207-9608-c5fe70f6949f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar({method:ICalCalendarMethod.PUBLISH});assert.strictEqual(c.method(),\"PUBLISH\");c.method(ICalCalendarMethod.ADD);assert.strictEqual(c.method(),\"ADD\")",
                  "err": {},
                  "uuid": "f64e6fe6-7798-4e13-90db-0c8f447d4c5e",
                  "parentUUID": "caf0a96d-11e2-4207-9608-c5fe70f6949f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c4ef624-5e1c-4416-a0d8-efbe89f9880e",
                "307c5a50-2225-4e54-85fa-477f681ebf8e",
                "72fcfd53-3831-4cd6-b82f-512e2ac1aa89",
                "f64e6fe6-7798-4e13-90db-0c8f447d4c5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "98d0b47f-d5ce-4e18-9972-20612fdb63c9",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.name(null));assert.deepStrictEqual(cal,cal.name(\"Testevents\"))",
                  "err": {},
                  "uuid": "4da8d9a1-e81c-49bb-b6b6-f9e1017edf32",
                  "parentUUID": "98d0b47f-d5ce-4e18-9972-20612fdb63c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.name(),null);cal.name(\"Testevents\");assert.strictEqual(cal.name(),\"Testevents\");cal.name(null);assert.strictEqual(cal.name(),null)",
                  "err": {},
                  "uuid": "ed516470-6dee-4634-bb67-78a73e464984",
                  "parentUUID": "98d0b47f-d5ce-4e18-9972-20612fdb63c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().name(\"Testevents\");cal.createEvent({start:new Date,summary:\"Example Event\"});assert.strictEqual(cal.name(),\"Testevents\")",
                  "err": {},
                  "uuid": "9b1ed9f9-14ba-4e26-8a60-bca7ec00972d",
                  "parentUUID": "98d0b47f-d5ce-4e18-9972-20612fdb63c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4da8d9a1-e81c-49bb-b6b6-f9e1017edf32",
                "ed516470-6dee-4634-bb67-78a73e464984",
                "9b1ed9f9-14ba-4e26-8a60-bca7ec00972d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4cb731c-a91c-4cd4-b034-affec8f080cb",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.description(null));assert.deepStrictEqual(cal,cal.description(\"Testbeschreibung\"))",
                  "err": {},
                  "uuid": "625ee2c8-41dc-4c30-ba7a-42e2f3d40cb7",
                  "parentUUID": "b4cb731c-a91c-4cd4-b034-affec8f080cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.description(),null);cal.description(\"Testbeschreibung\");assert.strictEqual(cal.description(),\"Testbeschreibung\");cal.description(null);assert.strictEqual(cal.description(),null)",
                  "err": {},
                  "uuid": "58c8cd9c-ddce-49e9-96c0-5358b70f82db",
                  "parentUUID": "b4cb731c-a91c-4cd4-b034-affec8f080cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().description(\"Testbeschreibung\");cal.createEvent({start:new Date,summary:\"Example Event\"});assert.ok(cal.description(),\"Testbeschreibung\")",
                  "err": {},
                  "uuid": "c561059d-6d90-43c6-a596-aabc5d7a8a4d",
                  "parentUUID": "b4cb731c-a91c-4cd4-b034-affec8f080cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "625ee2c8-41dc-4c30-ba7a-42e2f3d40cb7",
                "58c8cd9c-ddce-49e9-96c0-5358b70f82db",
                "c561059d-6d90-43c6-a596-aabc5d7a8a4d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ba8034bc-6240-4252-abb7-019822753469",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.timezone(\"Europe/Berlin\"));assert.deepStrictEqual(cal,cal.timezone(null));assert.deepStrictEqual(cal,cal.timezone({generator:getVtimezoneComponent,name:\"Europe/Berlin\"}))",
                  "err": {},
                  "uuid": "2ff6595d-361d-41d7-b8a9-4cb6dd57037a",
                  "parentUUID": "ba8034bc-6240-4252-abb7-019822753469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/Berlin\");cal.timezone(null);assert.strictEqual(cal.timezone(),null);cal.timezone({name:\"Europe/Berlin\"});assert.strictEqual(cal.timezone(),\"Europe/Berlin\")",
                  "err": {},
                  "uuid": "53080c7b-a5d1-407e-a86d-911a33b148cc",
                  "parentUUID": "ba8034bc-6240-4252-abb7-019822753469",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/Berlin\");cal.timezone(\"UTC\");assert.strictEqual(cal.timezone(),null)",
                  "err": {},
                  "uuid": "484e5411-4e58-455b-b135-a82ec49fafac",
                  "parentUUID": "ba8034bc-6240-4252-abb7-019822753469",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ff6595d-361d-41d7-b8a9-4cb6dd57037a",
                "53080c7b-a5d1-407e-a86d-911a33b148cc",
                "484e5411-4e58-455b-b135-a82ec49fafac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7282510f-d5a0-48a1-a6ee-1e99f85f280f",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal.ttl(60*60*24),cal);assert.deepStrictEqual(cal.ttl(moment.duration(2,\"days\")),cal);assert.deepStrictEqual(cal.ttl(null),cal)",
                  "err": {},
                  "uuid": "d2f1c601-ae6f-40ac-b0fc-9cee7a33e562",
                  "parentUUID": "7282510f-d5a0-48a1-a6ee-1e99f85f280f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.ttl(),null);cal.ttl(86400);assert.strictEqual(cal.ttl(),86400)",
                  "err": {},
                  "uuid": "195a6e90-c82c-418d-ba97-b8715fdb396a",
                  "parentUUID": "7282510f-d5a0-48a1-a6ee-1e99f85f280f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().ttl(86400);assert.strictEqual(cal.ttl(),86400)",
                  "err": {},
                  "uuid": "59424da0-60e8-4015-889c-5ef6f6c2da8b",
                  "parentUUID": "7282510f-d5a0-48a1-a6ee-1e99f85f280f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2f1c601-ae6f-40ac-b0fc-9cee7a33e562",
                "195a6e90-c82c-418d-ba97-b8715fdb396a",
                "59424da0-60e8-4015-889c-5ef6f6c2da8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd7366ef-bde0-4e69-8722-99924ec8ab1b",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.source(\"http://example.com/my/original_source.ical\"))",
                  "err": {},
                  "uuid": "c8df7374-5f41-4efc-a878-a4bfad1f3c5d",
                  "parentUUID": "fd7366ef-bde0-4e69-8722-99924ec8ab1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.source(),null);cal.source(\"http://example.com/my/original_source.ical\");assert.strictEqual(cal.source(),\"http://example.com/my/original_source.ical\");cal.url(null);assert.strictEqual(cal.url(),null)",
                  "err": {},
                  "uuid": "52862f32-1882-4727-992a-e3e28c7a205c",
                  "parentUUID": "fd7366ef-bde0-4e69-8722-99924ec8ab1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8df7374-5f41-4efc-a878-a4bfad1f3c5d",
                "52862f32-1882-4727-992a-e3e28c7a205c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81d92046-43eb-4490-96da-feb03d48f2f5",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.url(\"https://example.com/calendar.ical\"))",
                  "err": {},
                  "uuid": "6bcd3bda-4bd0-4f6b-b2ad-0899764da276",
                  "parentUUID": "81d92046-43eb-4490-96da-feb03d48f2f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.url(),null);cal.url(\"https://example.com/calendar.ical\");assert.strictEqual(cal.url(),\"https://example.com/calendar.ical\");cal.url(null);assert.strictEqual(cal.url(),null)",
                  "err": {},
                  "uuid": "e3e302d8-1aa2-46a7-858c-49ab1f7976e4",
                  "parentUUID": "81d92046-43eb-4490-96da-feb03d48f2f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().url(\"https://example.com/calendar.ical\");cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.ok(cal.url(),\"https://example.com/calendar.ical\")",
                  "err": {},
                  "uuid": "0cb62a07-1267-42ef-bd56-730702d3377e",
                  "parentUUID": "81d92046-43eb-4490-96da-feb03d48f2f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6bcd3bda-4bd0-4f6b-b2ad-0899764da276",
                "e3e302d8-1aa2-46a7-858c-49ab1f7976e4",
                "0cb62a07-1267-42ef-bd56-730702d3377e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc256a16-fab7-44fd-9709-cd3d4a6ec411",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.scale(\"gregorian\"))",
                  "err": {},
                  "uuid": "df4d7125-2dbe-4245-84f7-547a4ca268cb",
                  "parentUUID": "fc256a16-fab7-44fd-9709-cd3d4a6ec411",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.scale(),null);cal.scale(\"GREGORIAN\");assert.strictEqual(cal.scale(),\"GREGORIAN\");cal.scale(null);assert.strictEqual(cal.scale(),null)",
                  "err": {},
                  "uuid": "9d60c122-75e9-4595-8aba-63d741ede17d",
                  "parentUUID": "fc256a16-fab7-44fd-9709-cd3d4a6ec411",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().scale(\"gregorian\");cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.ok(cal.scale(),\"GREGORIAN\")",
                  "err": {},
                  "uuid": "c6f9e96e-23ea-4e37-9406-d33f5f7b21d2",
                  "parentUUID": "fc256a16-fab7-44fd-9709-cd3d4a6ec411",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "df4d7125-2dbe-4245-84f7-547a4ca268cb",
                "9d60c122-75e9-4595-8aba-63d741ede17d",
                "c6f9e96e-23ea-4e37-9406-d33f5f7b21d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53fe0938-2744-4097-be06-758b8d07d51d",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.ok(cal.createEvent({start:new Date})instanceof ICalEvent)",
                  "err": {},
                  "uuid": "a25aa73e-44db-4f81-b64d-8d684350ed64",
                  "parentUUID": "53fe0938-2744-4097-be06-758b8d07d51d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const event=cal.createEvent({start:new Date,summary:\"Patch-Day\"});assert.strictEqual(event.summary(),\"Patch-Day\")",
                  "err": {},
                  "uuid": "ac380453-457e-4383-a637-5dacd2d55212",
                  "parentUUID": "53fe0938-2744-4097-be06-758b8d07d51d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.doesNotThrow(function(){new ICalCalendar().createEvent({start:new Date,summary:\"Patch-Day\"})},Error)",
                  "err": {},
                  "uuid": "16b65d0e-30ea-4b9e-971a-622db53e9602",
                  "parentUUID": "53fe0938-2744-4097-be06-758b8d07d51d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a25aa73e-44db-4f81-b64d-8d684350ed64",
                "ac380453-457e-4383-a637-5dacd2d55212",
                "16b65d0e-30ea-4b9e-971a-622db53e9602"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4719282-6f6a-4410-837a-4cb33567860b",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.events().length,0);const event=cal.createEvent({start:new Date});assert.strictEqual(cal.events().length,1);assert.deepStrictEqual(cal.events()[0],event)",
                  "err": {},
                  "uuid": "a82a7194-d5a2-4664-9163-86a0e031fec6",
                  "parentUUID": "b4719282-6f6a-4410-837a-4cb33567860b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.length(),0);const cal2=cal.events([{start:new Date,summary:\"Event A\"},{start:new Date,summary:\"Event B\"}]);assert.strictEqual(cal.length(),2);assert.deepStrictEqual(cal2,cal)",
                  "err": {},
                  "uuid": "4c65f802-17eb-4a16-94a0-1dad047fbb65",
                  "parentUUID": "b4719282-6f6a-4410-837a-4cb33567860b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a82a7194-d5a2-4664-9163-86a0e031fec6",
                "4c65f802-17eb-4a16-94a0-1dad047fbb65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76d7d737-0858-4696-be64-84057dd1811c",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.createEvent({start:new Date});assert.strictEqual(cal.events().length,1);assert.deepStrictEqual(cal.clear(),cal);assert.strictEqual(cal.events().length,0)",
                  "err": {},
                  "uuid": "60b363fd-ba31-4d80-b58e-73e0b025c5c2",
                  "parentUUID": "76d7d737-0858-4696-be64-84057dd1811c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60b363fd-ba31-4d80-b58e-73e0b025c5c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48e733cf-89cc-455e-ad9e-a5ce7143b5ef",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "1805c832-3e21-41aa-b880-77e3123cbf1e",
                  "parentUUID": "48e733cf-89cc-455e-ad9e-a5ce7143b5ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x(\"X-FOO\",\"bar\"));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x(\"X-LOREM\",\"ipsum\"));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x(\"LOREM\",\"ipsum\")});assert.throws(()=>{cal.x(\"X-LOREM\",1337)});assert.throws(()=>{cal.x(5,\"ipsum\")})",
                  "err": {},
                  "uuid": "54b4fc8e-d99f-4513-83bb-1c8d74df2d6f",
                  "parentUUID": "48e733cf-89cc-455e-ad9e-a5ce7143b5ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x([{key:\"X-FOO\",value:\"bar\"}]));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x([{key:\"X-LOREM\",value:\"ipsum\"}]));assert.deepEqual(cal.x(),[{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x([{key:\"LOREM\",value:\"ipsum\"}])});assert.throws(()=>{cal.x([{key:\"X-LOREM\",value:1337}])});assert.throws(()=>{cal.x([{key:5,value:\"ipsum\"}])})",
                  "err": {},
                  "uuid": "afea1005-93e9-4135-9c2c-80943460b153",
                  "parentUUID": "48e733cf-89cc-455e-ad9e-a5ce7143b5ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x({\"X-FOO\":\"bar\"}));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x({\"X-LOREM\":\"ipsum\"}));assert.deepEqual(cal.x(),[{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x({LOREM:\"ipsum\"})});assert.throws(()=>{cal.x({\"X-LOREM\":1337})});assert.throws(()=>{cal.x({5:\"ipsum\"})})",
                  "err": {},
                  "uuid": "54cbd06f-685b-4088-9713-9240ff2030d7",
                  "parentUUID": "48e733cf-89cc-455e-ad9e-a5ce7143b5ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepEqual(cal.x(),[]);cal.x(\"X-FOO\",\"BAR\");assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"BAR\"}]);cal.x({});assert.deepEqual(cal.x().length,0)",
                  "err": {},
                  "uuid": "343734cb-5475-4fbc-81b8-e70d416e22b9",
                  "parentUUID": "48e733cf-89cc-455e-ad9e-a5ce7143b5ef",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().x(\"X-FOO\",\"BAR\");cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.ok(cal.toString().includes(\"X-FOO\"))",
                  "err": {},
                  "uuid": "22f4d28a-8923-424c-b464-13493d927033",
                  "parentUUID": "48e733cf-89cc-455e-ad9e-a5ce7143b5ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1805c832-3e21-41aa-b880-77e3123cbf1e",
                "54b4fc8e-d99f-4513-83bb-1c8d74df2d6f",
                "afea1005-93e9-4135-9c2c-80943460b153",
                "54cbd06f-685b-4088-9713-9240ff2030d7",
                "343734cb-5475-4fbc-81b8-e70d416e22b9",
                "22f4d28a-8923-424c-b464-13493d927033"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd7dcaf7-879e-42a3-b66f-d99ecd47edc4",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const prodId=cal.toJSON().prodId;assert.strictEqual(typeof prodId,\"string\");assert.ok(prodId.length>0);assert.strictEqual(cal.toJSON().events?.length,0)",
                  "err": {},
                  "uuid": "ade52ea6-b7e9-40d3-93bb-aab5b9a79703",
                  "parentUUID": "bd7dcaf7-879e-42a3-b66f-d99ecd47edc4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.createEvent({end:new Date(new Date().getTime()+1e3*60*60),start:new Date,summary:\"HTTP Calendar Event\",x:[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}]});const prodId=cal.toJSON().prodId;assert.strictEqual(typeof prodId,\"string\");assert.ok(prodId.length>0);const events=cal.toJSON().events;assert.strictEqual(events?.length,1);assert.deepEqual(events[0].x,[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}])",
                  "err": {},
                  "uuid": "a017751e-7c81-4690-b580-97fc622a6c04",
                  "parentUUID": "bd7dcaf7-879e-42a3-b66f-d99ecd47edc4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalCalendar;new ICalCalendar(a.toJSON())",
                  "err": {},
                  "uuid": "f331153c-0762-4fab-9c82-9e413a5cabd5",
                  "parentUUID": "bd7dcaf7-879e-42a3-b66f-d99ecd47edc4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ade52ea6-b7e9-40d3-93bb-aab5b9a79703",
                "a017751e-7c81-4690-b580-97fc622a6c04",
                "f331153c-0762-4fab-9c82-9e413a5cabd5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d67b996f-885c-44c3-9c13-1e790cb63c62",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.length(),0);cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.strictEqual(cal.length(),1)",
                  "err": {},
                  "uuid": "a5ced337-787f-45bc-a166-c21bffe36e77",
                  "parentUUID": "d67b996f-885c-44c3-9c13-1e790cb63c62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5ced337-787f-45bc-a166-c21bffe36e77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95c93f68-a71d-4f78-b0b7-9e7401deb2ab",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.url(\"https://sebbo.net/foo\");assert.ok(cal.toString().indexOf(\"URL:https://sebbo.net/foo\")>-1)",
                  "err": {},
                  "uuid": "f54b8634-c118-43e6-beb4-7ab1dbf367ea",
                  "parentUUID": "95c93f68-a71d-4f78-b0b7-9e7401deb2ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.method(ICalCalendarMethod.REFRESH);assert.ok(cal.toString().indexOf(\"METHOD:REFRESH\")>-1)",
                  "err": {},
                  "uuid": "6c0bfdb2-8e5d-4d45-8895-1431ade32e50",
                  "parentUUID": "95c93f68-a71d-4f78-b0b7-9e7401deb2ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.name(\"TEST\");assert.ok(cal.toString().indexOf(\"NAME:TEST\")>-1);assert.ok(cal.toString().indexOf(\"X-WR-CALNAME:TEST\")>-1)",
                  "err": {},
                  "uuid": "ae6a0151-aa36-41d2-9475-810f8c20be69",
                  "parentUUID": "95c93f68-a71d-4f78-b0b7-9e7401deb2ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.description(\"TEST\");assert.ok(cal.toString().indexOf(\"X-WR-CALDESC:TEST\")>-1)",
                  "err": {},
                  "uuid": "928c424d-6564-4522-90d2-14495d584313",
                  "parentUUID": "95c93f68-a71d-4f78-b0b7-9e7401deb2ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone(\"TEST\");assert.ok(cal.toString().indexOf(\"TIMEZONE-ID:TEST\")>-1);assert.ok(cal.toString().indexOf(\"X-WR-TIMEZONE:TEST\")>-1)",
                  "err": {},
                  "uuid": "07cd9965-9eb3-43c0-9bf9-632d60fe5b85",
                  "parentUUID": "95c93f68-a71d-4f78-b0b7-9e7401deb2ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.source(\"http://foo.bar.example.com/ical.cal\");assert.ok(cal.toString().includes(\"http://foo.bar.example.com/ical.cal\"))",
                  "err": {},
                  "uuid": "97f95421-2656-404f-8fd5-ea9ddd324508",
                  "parentUUID": "95c93f68-a71d-4f78-b0b7-9e7401deb2ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({generator:getVtimezoneComponent,name:\"Europe/Berlin\"});cal.createEvent({start:new Date,timezone:\"Europe/London\"});assert.ok(cal.toString().includes(\"BEGIN:VTIMEZONE\\r\\n\"),\"BEGIN:VTIMEZONE\");assert.ok(cal.toString().includes(\"TZID:Europe/Berlin\\r\\n\"),\"TZID:Europe/Berlin\");assert.ok(cal.toString().includes(\"TZID:Europe/London\\r\\n\"),\"TZID:Europe/London\")",
                  "err": {},
                  "uuid": "eaa81dd7-d0a5-47cf-9f17-3b4a3b58373c",
                  "parentUUID": "95c93f68-a71d-4f78-b0b7-9e7401deb2ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({generator:getVtimezoneComponent,name:\"FOO\"});assert.ok(!cal.toString().includes(\"TZID:Foo\\r\\n\"))",
                  "err": {},
                  "uuid": "597f181a-e5fd-4667-ab3c-8d44e8678368",
                  "parentUUID": "95c93f68-a71d-4f78-b0b7-9e7401deb2ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({generator:getVtimezoneComponent,name:\"/Europe/Berlin\"});assert.ok(!cal.toString().includes(\"TZID:/Europe/Berlin\\r\\n\"))",
                  "err": {},
                  "uuid": "52331365-ca08-4207-a938-2f0df437cc85",
                  "parentUUID": "95c93f68-a71d-4f78-b0b7-9e7401deb2ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.ttl(moment.duration(3,\"days\"));assert.ok(cal.toString().indexOf(\"REFRESH-INTERVAL;VALUE=DURATION:P3D\")>-1);assert.ok(cal.toString().indexOf(\"X-PUBLISHED-TTL:P3D\")>-1)",
                  "err": {},
                  "uuid": "fbd2ddb9-0269-4899-bbf5-d133cd37c15c",
                  "parentUUID": "95c93f68-a71d-4f78-b0b7-9e7401deb2ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f54b8634-c118-43e6-beb4-7ab1dbf367ea",
                "6c0bfdb2-8e5d-4d45-8895-1431ade32e50",
                "ae6a0151-aa36-41d2-9475-810f8c20be69",
                "928c424d-6564-4522-90d2-14495d584313",
                "07cd9965-9eb3-43c0-9bf9-632d60fe5b85",
                "97f95421-2656-404f-8fd5-ea9ddd324508",
                "eaa81dd7-d0a5-47cf-9f17-3b4a3b58373c",
                "597f181a-e5fd-4667-ab3c-8d44e8678368",
                "52331365-ca08-4207-a938-2f0df437cc85",
                "fbd2ddb9-0269-4899-bbf5-d133cd37c15c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ecb9f69b-f3df-4bdd-a153-22471bb12e67",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({created:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",lastModified:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Simple Event\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_01.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "7ed65259-774f-45d9-95c5-cdd2c487a3d9",
              "parentUUID": "ecb9f69b-f3df-4bdd-a153-22471bb12e67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({description:{html:\"<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>\",plain:\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop\"},end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",location:\"localhost\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Sample Event\",transparency:ICalEventTransparency.OPAQUE});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_02.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "166afa6f-6158-4980-99a8-c9abd4214eb6",
              "parentUUID": "ecb9f69b-f3df-4bdd-a153-22471bb12e67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.ADD,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({allDay:true,attachments:[\"https://files.sebbo.net/calendar/attachments/foo\"],categories:[{name:\"WORK\"}],end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"123\",location:{address:\"Kurf\\xFCrstendamm 26, 10719 Berlin, Deutschland\",geo:{lat:52.50363,lon:13.32865},radius:141.1751386318387,title:\"Apple Store Kurf\\xFCrstendamm\"},organizer:\"Sebastian Pekarek <mail@sebbo.net>\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),status:ICalEventStatus.CONFIRMED,summary:\"Sample Event\",url:\"http://sebbo.net/\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_03.ics\",\"utf8\"),\"toString\");assert.strictEqual(ical(cal.toJSON()).toString(),string,\"toJSON / toString()\")",
              "err": {},
              "uuid": "d4812483-f39b-4777-8f26-6fd427bdc1ae",
              "parentUUID": "ecb9f69b-f3df-4bdd-a153-22471bb12e67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.timezone({generator:getVtimezoneComponent,name:null});cal.events([{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"1\",repeating:{exclude:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),freq:ICalEventRepeatingFreq.MONTHLY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating by month\"},{end:new Date(\"Fr Oct 06 2013 23:15:00\"),id:\"2\",repeating:{count:2,freq:ICalEventRepeatingFreq.DAILY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30\"),summary:\"repeating by day, twice\",timezone:\"Europe/Berlin\"},{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"3\",repeating:{freq:ICalEventRepeatingFreq.WEEKLY,interval:3,until:new Date(\"We Jan 01 2014 00:00:00 UTC\")},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating by 3 weeks, until 2014\"}]);assert.strictEqual(cal.toString(),await fs.readFile(resultDir+\"/generate_04.ics\",\"utf8\"),\"first check\");cal.timezone(null);assert.strictEqual(ical(cal.toJSON()).toString(),cal.toString(),\"second check\")",
              "err": {},
              "uuid": "2a6f8511-6793-4681-85d6-0600a6756426",
              "parentUUID": "ecb9f69b-f3df-4bdd-a153-22471bb12e67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),floating:true,id:\"1\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"floating\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_05.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "44017296-dc04-4c63-a64b-b0ea67785d69",
              "parentUUID": "ecb9f69b-f3df-4bdd-a153-22471bb12e67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.PUBLISH,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({alarms:[{repeat:{interval:60,times:2},trigger:60*10,type:ICalAlarmType.display},{description:\"I'm a reminder :)\",trigger:60*60,type:ICalAlarmType.display}],allDay:true,attendees:[{delegatesTo:{email:\"john@example.com\",name:\"John\",status:ICalAttendeeStatus.ACCEPTED},email:\"matt@example.com\",name:'Smith, Matt; (\"Sales\")'}],id:\"123\",organizer:\"Sebastian Pekarek <mail@sebbo.net>\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),status:ICalEventStatus.CONFIRMED,summary:\"Sample Event\",url:\"http://sebbo.net/\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_06.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "333a5fac-8958-42a2-939b-232cd12f05bd",
              "parentUUID": "ecb9f69b-f3df-4bdd-a153-22471bb12e67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.events([{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"1\",repeating:{byMonth:[1,4,7,10],freq:ICalEventRepeatingFreq.MONTHLY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating by month\"},{id:\"2\",repeating:{byDay:[ICalWeekday.MO,ICalWeekday.WE,ICalWeekday.FR],count:2,freq:ICalEventRepeatingFreq.DAILY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating on Mo/We/Fr, twice\"},{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"3\",repeating:{byMonthDay:[1,15],freq:ICalEventRepeatingFreq.DAILY,interval:1},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating on 1st and 15th\"}]);const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_07.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "d203c750-b620-4f2f-968d-d0561a7a1678",
              "parentUUID": "ecb9f69b-f3df-4bdd-a153-22471bb12e67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({attendees:[{email:\"mail@example.com\",role:ICalAttendeeRole.REQ,rsvp:true,status:ICalAttendeeStatus.NEEDSACTION,type:ICalAttendeeType.INDIVIDUAL}],created:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",lastModified:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Simple Event\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_08.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "39c9e457-74d3-47f1-b0c7-524bdd3c6950",
              "parentUUID": "ecb9f69b-f3df-4bdd-a153-22471bb12e67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.REQUEST,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({attendees:[{email:\"mail@example.com\",role:ICalAttendeeRole.REQ,rsvp:true,status:ICalAttendeeStatus.NEEDSACTION,type:ICalAttendeeType.INDIVIDUAL}],end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",organizer:{email:\"mail@sebbo.net\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\"},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Sample Event\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_09.ics\",\"utf8\"),\"toString\");assert.strictEqual(ical(cal.toJSON()).toString(),string,\"toJSON / toString()\")",
              "err": {},
              "uuid": "bcb54a3f-f4d6-47f6-acf2-26b400c136b2",
              "parentUUID": "ecb9f69b-f3df-4bdd-a153-22471bb12e67",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #10 (SCHEDULE-AGENT=CLIENT for custom invitation emails)",
              "fullTitle": "ical-generator Cases case #10 (SCHEDULE-AGENT=CLIENT for custom invitation emails)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.PUBLISH,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({allDay:true,attendees:[{delegatesTo:{email:\"john@example.com\",name:\"John\",status:ICalAttendeeStatus.ACCEPTED},email:\"matt@example.com\",name:'Smith, Matt; (\"Sales\")',scheduleAgent:ICalAttendeeScheduleAgent.CLIENT}],id:\"123\",organizer:\"Sebastian Pekarek <mail@sebbo.net>\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),status:ICalEventStatus.CONFIRMED,summary:\"Sample Event\",url:\"http://sebbo.net/\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_10.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "ef7b1abd-d5fd-409c-8e60-2d4d59432d9c",
              "parentUUID": "ecb9f69b-f3df-4bdd-a153-22471bb12e67",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7ed65259-774f-45d9-95c5-cdd2c487a3d9",
            "166afa6f-6158-4980-99a8-c9abd4214eb6",
            "d4812483-f39b-4777-8f26-6fd427bdc1ae",
            "2a6f8511-6793-4681-85d6-0600a6756426",
            "44017296-dc04-4c63-a64b-b0ea67785d69",
            "333a5fac-8958-42a2-939b-232cd12f05bd",
            "d203c750-b620-4f2f-968d-d0561a7a1678",
            "39c9e457-74d3-47f1-b0c7-524bdd3c6950",
            "bcb54a3f-f4d6-47f6-acf2-26b400c136b2",
            "ef7b1abd-d5fd-409c-8e60-2d4d59432d9c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "649590e9-f972-4f83-8ec9-306e7203a60f",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fcb31970-a0d4-4292-8b60-0c2b7854ad4c",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalCategory({name:\"FOO\",unknown:true});assert.strictEqual(a.name(),\"FOO\")",
                  "err": {},
                  "uuid": "25475f73-a571-4170-833d-bc487bff20f5",
                  "parentUUID": "fcb31970-a0d4-4292-8b60-0c2b7854ad4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category constructor() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalCategory({})},/`name`/)",
                  "err": {},
                  "uuid": "2cc88f81-f8c9-419a-9b82-c70ca6ad2c84",
                  "parentUUID": "fcb31970-a0d4-4292-8b60-0c2b7854ad4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25475f73-a571-4170-833d-bc487bff20f5",
                "2cc88f81-f8c9-419a-9b82-c70ca6ad2c84"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "15c6647f-4b36-4cfc-a1a2-6ceca7b1b9b6",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"foo\"});assert.deepStrictEqual(c,c.name(\"FOO\"))",
                  "err": {},
                  "uuid": "5caa4acd-d876-4525-bbfa-4ea359a7e46e",
                  "parentUUID": "15c6647f-4b36-4cfc-a1a2-6ceca7b1b9b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"foo\"});assert.strictEqual(c.name(),\"foo\");c.name(\"HELLO-WORLD\");assert.strictEqual(c.name(),\"HELLO-WORLD\")",
                  "err": {},
                  "uuid": "62fb8a91-2ba1-4fe7-9dda-c973ba095191",
                  "parentUUID": "15c6647f-4b36-4cfc-a1a2-6ceca7b1b9b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"BANANA\"});assert.ok(c.toString().includes(\"BANANA\"))",
                  "err": {},
                  "uuid": "ea12395b-8a07-485e-b8bc-48efde9adaea",
                  "parentUUID": "15c6647f-4b36-4cfc-a1a2-6ceca7b1b9b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5caa4acd-d876-4525-bbfa-4ea359a7e46e",
                "62fb8a91-2ba1-4fe7-9dda-c973ba095191",
                "ea12395b-8a07-485e-b8bc-48efde9adaea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7d1f68b3-3fa7-4363-8c35-7c572675580f",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"FOOBAR\"});assert.deepStrictEqual(c.toJSON(),{name:\"FOOBAR\"})",
                  "err": {},
                  "uuid": "f163a459-6612-47e9-98b5-ef736975b96e",
                  "parentUUID": "7d1f68b3-3fa7-4363-8c35-7c572675580f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f163a459-6612-47e9-98b5-ef736975b96e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0e878058-1f5b-4983-8e62-4f0cce62ae36",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "591b41ad-fd23-4f77-89d9-b4b8400748ac",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={alarms:[],allDay:true,attachments:[\"https://files.sebbo.net/calendar/attachments/foo\"],attendees:[],busystatus:ICalEventBusyStatus.BUSY,categories:[],class:null,created:new Date().toJSON(),description:null,end:new Date().toJSON(),floating:false,id:\"FOO\",lastModified:new Date().toJSON(),location:null,organizer:null,priority:5,recurrenceId:new Date().toJSON(),repeating:null,sequence:1,stamp:new Date().toJSON(),start:new Date().toJSON(),status:null,summary:\"Hello.\",timezone:\"Europe/Berlin\",transparency:ICalEventTransparency.TRANSPARENT,url:\"https://github.com/sebbo2002/ical-generator\",x:[]};const event=new ICalEvent(data,new ICalCalendar);assert.deepStrictEqual(event.toJSON(),data)",
                  "err": {},
                  "uuid": "6089772a-cf6e-44f2-b32b-4e201576d7f4",
                  "parentUUID": "591b41ad-fd23-4f77-89d9-b4b8400748ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({summary:\"Testevent\"},null)},/`calendar`/)",
                  "err": {},
                  "uuid": "b7dc7321-5cb5-49f3-b7a1-8be3d49e7737",
                  "parentUUID": "591b41ad-fd23-4f77-89d9-b4b8400748ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6089772a-cf6e-44f2-b32b-4e201576d7f4",
                "b7dc7321-5cb5-49f3-b7a1-8be3d49e7737"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c684aacd-73fa-46ef-a5b1-14aa4de13c2a",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.id(1048))",
                  "err": {},
                  "uuid": "c0746e7d-9ab6-44ac-88be-3c42961cfdf5",
                  "parentUUID": "c684aacd-73fa-46ef-a5b1-14aa4de13c2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).id(512);assert.strictEqual(event.id(),\"512\");event.id(\"xyz\");assert.strictEqual(event.id(),\"xyz\")",
                  "err": {},
                  "uuid": "47720c0e-5d95-4b58-8383-2fb812823d56",
                  "parentUUID": "c684aacd-73fa-46ef-a5b1-14aa4de13c2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0746e7d-9ab6-44ac-88be-3c42961cfdf5",
                "47720c0e-5d95-4b58-8383-2fb812823d56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5869e6f2-d673-4409-a677-984f1c91b14a",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.uid(1048))",
                  "err": {},
                  "uuid": "f7e708df-5e08-4440-99d3-a479e827f084",
                  "parentUUID": "5869e6f2-d673-4409-a677-984f1c91b14a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).uid(512);assert.strictEqual(event.uid(),\"512\");event.id(\"xyz\");assert.strictEqual(event.uid(),\"xyz\")",
                  "err": {},
                  "uuid": "2080bdb3-0fca-483c-a784-3c8863aac52c",
                  "parentUUID": "5869e6f2-d673-4409-a677-984f1c91b14a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7e708df-5e08-4440-99d3-a479e827f084",
                "2080bdb3-0fca-483c-a784-3c8863aac52c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7fd1b292-0064-4dbc-ba88-1f33841fa387",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.sequence(1))",
                  "err": {},
                  "uuid": "851bd7ca-9d6a-483e-bc80-a125a67dd36c",
                  "parentUUID": "7fd1b292-0064-4dbc-ba88-1f33841fa387",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).sequence(1048);assert.strictEqual(event.sequence(),1048)",
                  "err": {},
                  "uuid": "9bd93f4b-cde2-40fc-b2b0-8fddf6b1c31c",
                  "parentUUID": "7fd1b292-0064-4dbc-ba88-1f33841fa387",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.sequence(\"hello\")},/`sequence`/)",
                  "err": {},
                  "uuid": "94dff0aa-f8c4-41d4-bb7a-34d93493e95a",
                  "parentUUID": "7fd1b292-0064-4dbc-ba88-1f33841fa387",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).sequence(12);assert.strictEqual(event.sequence(),12);event.sequence(0);assert.strictEqual(event.sequence(),0)",
                  "err": {},
                  "uuid": "b32c8f2d-cd57-4220-860b-0c3ddac5a918",
                  "parentUUID": "7fd1b292-0064-4dbc-ba88-1f33841fa387",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "851bd7ca-9d6a-483e-bc80-a125a67dd36c",
                "9bd93f4b-cde2-40fc-b2b0-8fddf6b1c31c",
                "94dff0aa-f8c4-41d4-bb7a-34d93493e95a",
                "b32c8f2d-cd57-4220-860b-0c3ddac5a918"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65b13e13-b969-41f8-8fe5-f7576204c2b5",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:new Date},new ICalCalendar);event.start(now);assert.strictEqual(event.start(),now)",
                  "err": {},
                  "uuid": "e164a754-c36c-40ba-bc89-7f9fb9f50bf1",
                  "parentUUID": "65b13e13-b969-41f8-8fe5-f7576204c2b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.start(date));assert.deepStrictEqual(event.start(),date)",
                  "err": {},
                  "uuid": "72f66320-0150-48f8-ac73-9f3f10cd2f23",
                  "parentUUID": "65b13e13-b969-41f8-8fe5-f7576204c2b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.start(date));assert.deepStrictEqual(event.start(),date)",
                  "err": {},
                  "uuid": "cc01f3dc-21f3-4cf0-8396-ff8e9ecd02b7",
                  "parentUUID": "65b13e13-b969-41f8-8fe5-f7576204c2b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.start(3)},/`start`/,\"Number\");assert.throws(function(){event.start(null)},/`start`/,\"null\");assert.throws(function(){event.start(NaN)},/`start`/,\"NaN\");assert.throws(function(){event.start(new Date(\"hallo\"))},/`start`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "4923c20d-9064-459e-87eb-82953e716c93",
                  "parentUUID": "65b13e13-b969-41f8-8fe5-f7576204c2b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=moment().add(5,\"minutes\");const end=moment();const event=new ICalEvent({start:new Date},new ICalCalendar).end(end).start(start);assert.deepStrictEqual(event.start(),end);assert.deepStrictEqual(event.end(),start)",
                  "err": {},
                  "uuid": "4324d18e-3f37-4a3d-aeab-7e9b6ff5da01",
                  "parentUUID": "65b13e13-b969-41f8-8fe5-f7576204c2b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.start(moment()));assert.deepStrictEqual(event,event.start(new Date))",
                  "err": {},
                  "uuid": "d20c68f5-bdff-4761-b2a1-37a3e4222458",
                  "parentUUID": "65b13e13-b969-41f8-8fe5-f7576204c2b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e164a754-c36c-40ba-bc89-7f9fb9f50bf1",
                "72f66320-0150-48f8-ac73-9f3f10cd2f23",
                "cc01f3dc-21f3-4cf0-8396-ff8e9ecd02b7",
                "4923c20d-9064-459e-87eb-82953e716c93",
                "4324d18e-3f37-4a3d-aeab-7e9b6ff5da01",
                "d20c68f5-bdff-4761-b2a1-37a3e4222458"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d336cd1-71e7-4f10-a963-71d94d961e40",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:moment().subtract({minute:1})},new ICalCalendar);event.end(now);assert.deepStrictEqual(event.end(),now)",
                  "err": {},
                  "uuid": "3763b6ca-f0f7-4ac8-a95f-c90685c79b64",
                  "parentUUID": "0d336cd1-71e7-4f10-a963-71d94d961e40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.end(date));assert.deepStrictEqual(event.end(),date)",
                  "err": {},
                  "uuid": "d7f8f049-a81c-401d-b4a5-abaaf346e374",
                  "parentUUID": "0d336cd1-71e7-4f10-a963-71d94d961e40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.end(date));assert.deepStrictEqual(event.end(),date)",
                  "err": {},
                  "uuid": "ce902cad-b9a5-43d2-bf23-6a60d7120a11",
                  "parentUUID": "0d336cd1-71e7-4f10-a963-71d94d961e40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.end(3)},/`end`/,\"Number\");assert.throws(function(){event.end(NaN)},/`end`/,\"NaN\");assert.throws(function(){event.end(new Date(\"hallo\"))},/`end`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "eb68e47f-e307-4d87-836e-b8cb43284801",
                  "parentUUID": "0d336cd1-71e7-4f10-a963-71d94d961e40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=moment().add(5,\"minutes\");const end=moment();const event=new ICalEvent({start:new Date},new ICalCalendar).start(start).end(end);assert.deepStrictEqual(event.start(),end);assert.deepStrictEqual(event.end(),start)",
                  "err": {},
                  "uuid": "344e580f-22bc-4d78-9272-86f699269ec8",
                  "parentUUID": "0d336cd1-71e7-4f10-a963-71d94d961e40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.end(moment()));assert.deepStrictEqual(event,event.end(new Date))",
                  "err": {},
                  "uuid": "de3e4c19-e654-4457-986d-deca100028cd",
                  "parentUUID": "0d336cd1-71e7-4f10-a963-71d94d961e40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3763b6ca-f0f7-4ac8-a95f-c90685c79b64",
                "d7f8f049-a81c-401d-b4a5-abaaf346e374",
                "ce902cad-b9a5-43d2-bf23-6a60d7120a11",
                "eb68e47f-e307-4d87-836e-b8cb43284801",
                "344e580f-22bc-4d78-9272-86f699269ec8",
                "de3e4c19-e654-4457-986d-deca100028cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1396194e-1d14-4b7c-b605-025732963404",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:new Date},new ICalCalendar);event.recurrenceId(now);assert.deepStrictEqual(event.recurrenceId(),now)",
                  "err": {},
                  "uuid": "93e74d0e-e972-48d6-bd28-4f043492c7d1",
                  "parentUUID": "1396194e-1d14-4b7c-b605-025732963404",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.recurrenceId(date));assert.deepStrictEqual(event.recurrenceId(),date)",
                  "err": {},
                  "uuid": "89112bf1-5502-4da8-b2b9-f16979793355",
                  "parentUUID": "1396194e-1d14-4b7c-b605-025732963404",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.recurrenceId(date));assert.deepStrictEqual(event.recurrenceId(),date)",
                  "err": {},
                  "uuid": "180d80ac-c2b0-4a7d-b141-28f51523261f",
                  "parentUUID": "1396194e-1d14-4b7c-b605-025732963404",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.recurrenceId(3)},/`recurrenceId`/,\"Number\");assert.throws(function(){event.recurrenceId(NaN)},/`recurrenceId`/,\"NaN\");assert.throws(function(){event.recurrenceId(new Date(\"hallo\"))},/`recurrenceId`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "911b25f4-158c-4922-967f-ad3e9204cbce",
                  "parentUUID": "1396194e-1d14-4b7c-b605-025732963404",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.recurrenceId(moment()));assert.deepStrictEqual(event,event.recurrenceId(new Date))",
                  "err": {},
                  "uuid": "95b261d2-f483-4bc1-b37c-4517fa73bd24",
                  "parentUUID": "1396194e-1d14-4b7c-b605-025732963404",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "93e74d0e-e972-48d6-bd28-4f043492c7d1",
                "89112bf1-5502-4da8-b2b9-f16979793355",
                "180d80ac-c2b0-4a7d-b141-28f51523261f",
                "911b25f4-158c-4922-967f-ad3e9204cbce",
                "95b261d2-f483-4bc1-b37c-4517fa73bd24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e4098a01-ca52-4086-ab48-f49664ade464",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar).timezone(\"Europe/Berlin\");assert.strictEqual(e.timezone(),\"Europe/Berlin\")",
                  "err": {},
                  "uuid": "0ae78d10-3f47-416d-b2b2-8c2c9ce35a89",
                  "parentUUID": "e4098a01-ca52-4086-ab48-f49664ade464",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const e=new ICalEvent({start:moment(),summary:\"Example Event\"},cal);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),null);cal.timezone(\"Europe/London\");assert.strictEqual(cal.timezone(),\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/London\");e.timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/Berlin\");cal.timezone(null);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),\"Europe/Berlin\");e.timezone(null);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "6afc53af-985d-4677-96b9-df00384abd74",
                  "parentUUID": "e4098a01-ca52-4086-ab48-f49664ade464",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.timezone(\"Europe/Berlin\"))",
                  "err": {},
                  "uuid": "c2d3e88b-89fc-402f-8c8f-973db2f1a2d2",
                  "parentUUID": "e4098a01-ca52-4086-ab48-f49664ade464",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({end:new Date(new Date().getTime()+36e5),start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/London\")",
                  "err": {},
                  "uuid": "97b2f174-755c-4373-831a-15d31ce1105b",
                  "parentUUID": "e4098a01-ca52-4086-ab48-f49664ade464",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.floating(true);e.timezone(\"Europe/London\");assert.strictEqual(e.floating(),false)",
                  "err": {},
                  "uuid": "34115838-c537-4544-8c97-dcf33c2fbf7f",
                  "parentUUID": "e4098a01-ca52-4086-ab48-f49664ade464",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.floating(true);e.timezone(null);assert.strictEqual(e.floating(),true)",
                  "err": {},
                  "uuid": "9d691a34-37c2-40c6-9aa2-0a4a2c4a122c",
                  "parentUUID": "e4098a01-ca52-4086-ab48-f49664ade464",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\",timezone:\"Europe/Berlin\"},new ICalCalendar);assert.strictEqual(e.timezone(),\"Europe/Berlin\");e.timezone(\"UTC\");assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "00f2c334-1358-4387-b5f9-e0f30117600a",
                  "parentUUID": "e4098a01-ca52-4086-ab48-f49664ade464",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ae78d10-3f47-416d-b2b2-8c2c9ce35a89",
                "6afc53af-985d-4677-96b9-df00384abd74",
                "c2d3e88b-89fc-402f-8c8f-973db2f1a2d2",
                "97b2f174-755c-4373-831a-15d31ce1105b",
                "34115838-c537-4544-8c97-dcf33c2fbf7f",
                "9d691a34-37c2-40c6-9aa2-0a4a2c4a122c",
                "00f2c334-1358-4387-b5f9-e0f30117600a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "be57867d-4f11-4b96-937d-27e8cdb62caf",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment().add(1,\"day\");const e=new ICalEvent({start:new Date},new ICalCalendar).stamp(now);assert.deepStrictEqual(e.stamp(),now)",
                  "err": {},
                  "uuid": "899238c0-0e52-4ede-8a15-01c482577a6c",
                  "parentUUID": "be57867d-4f11-4b96-937d-27e8cdb62caf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.stamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "828ae7d4-8265-4112-98f8-13bad20310e3",
                  "parentUUID": "be57867d-4f11-4b96-937d-27e8cdb62caf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.stamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "f7e8e752-ad66-49bf-9258-e17bb6c82779",
                  "parentUUID": "be57867d-4f11-4b96-937d-27e8cdb62caf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.stamp(3)},/`stamp`/,\"Number\");assert.throws(function(){event.stamp(null)},/`stamp`/,\"null\");assert.throws(function(){event.stamp(NaN)},/`stamp`/,\"NaN\");assert.throws(function(){event.stamp(new Date(\"hallo\"))},/`stamp`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "58bbb813-689c-44ef-b66c-561f0440d23a",
                  "parentUUID": "be57867d-4f11-4b96-937d-27e8cdb62caf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.stamp(new Date))",
                  "err": {},
                  "uuid": "5f7ceca7-e936-45de-9993-e8c830b729fd",
                  "parentUUID": "be57867d-4f11-4b96-937d-27e8cdb62caf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "899238c0-0e52-4ede-8a15-01c482577a6c",
                "828ae7d4-8265-4112-98f8-13bad20310e3",
                "f7e8e752-ad66-49bf-9258-e17bb6c82779",
                "58bbb813-689c-44ef-b66c-561f0440d23a",
                "5f7ceca7-e936-45de-9993-e8c830b729fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd0ce5b7-62c7-46cd-9e67-58ec70b8b9ad",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment().add(1,\"day\");const e=new ICalEvent({start:new Date},new ICalCalendar).timestamp(now);assert.deepStrictEqual(e.timestamp(),now)",
                  "err": {},
                  "uuid": "37c7080c-b987-4dc1-83fe-4c6760f06923",
                  "parentUUID": "fd0ce5b7-62c7-46cd-9e67-58ec70b8b9ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.timestamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "d81348c9-db71-491d-b31b-695cde9acefe",
                  "parentUUID": "fd0ce5b7-62c7-46cd-9e67-58ec70b8b9ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.timestamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "ae6d2774-02da-4a49-b765-d76fc9f7db08",
                  "parentUUID": "fd0ce5b7-62c7-46cd-9e67-58ec70b8b9ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.timestamp(3)},/`stamp`/,\"Number\");assert.throws(function(){event.timestamp(null)},/`stamp`/,\"null\");assert.throws(function(){event.timestamp(NaN)},/`stamp`/,\"NaN\");assert.throws(function(){event.timestamp(new Date(\"hallo\"))},/`stamp`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "7cce67d3-7850-44a6-a283-e85857841f30",
                  "parentUUID": "fd0ce5b7-62c7-46cd-9e67-58ec70b8b9ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.timestamp(new Date))",
                  "err": {},
                  "uuid": "4bc5033a-bf38-4e5e-813a-e0f20aceb7df",
                  "parentUUID": "fd0ce5b7-62c7-46cd-9e67-58ec70b8b9ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37c7080c-b987-4dc1-83fe-4c6760f06923",
                "d81348c9-db71-491d-b31b-695cde9acefe",
                "ae6d2774-02da-4a49-b765-d76fc9f7db08",
                "7cce67d3-7850-44a6-a283-e85857841f30",
                "4bc5033a-bf38-4e5e-813a-e0f20aceb7df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b80fe137-1c04-4273-9d7a-a2ddb8cc2219",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.allDay(true);assert.strictEqual(e.allDay(),true)",
                  "err": {},
                  "uuid": "5e8ce82e-4f40-4673-8123-dcbff91acda9",
                  "parentUUID": "b80fe137-1c04-4273-9d7a-a2ddb8cc2219",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.allDay(true))",
                  "err": {},
                  "uuid": "441ea9dc-0b95-4ce0-b8b9-aa588faf7c76",
                  "parentUUID": "b80fe137-1c04-4273-9d7a-a2ddb8cc2219",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.allDay(true);assert.strictEqual(event.allDay(),true)",
                  "err": {},
                  "uuid": "80cb71ba-bf84-40c7-a25c-eff6b1409d4e",
                  "parentUUID": "b80fe137-1c04-4273-9d7a-a2ddb8cc2219",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e8ce82e-4f40-4673-8123-dcbff91acda9",
                "441ea9dc-0b95-4ce0-b8b9-aa588faf7c76",
                "80cb71ba-bf84-40c7-a25c-eff6b1409d4e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fbfa0755-39a3-4d2b-8590-93d1da0f4a52",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar).floating(true);assert.strictEqual(e.floating(),true)",
                  "err": {},
                  "uuid": "5b0947b3-d320-43c3-aaf6-d95daecd669c",
                  "parentUUID": "fbfa0755-39a3-4d2b-8590-93d1da0f4a52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.floating(false));assert.deepStrictEqual(e,e.floating(true))",
                  "err": {},
                  "uuid": "b8c6bb81-cef8-499d-b534-5c34dd804236",
                  "parentUUID": "fbfa0755-39a3-4d2b-8590-93d1da0f4a52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.floating(true);assert.strictEqual(event.floating(),true)",
                  "err": {},
                  "uuid": "f6eb6014-09a8-4def-9be9-f8b75159ad5b",
                  "parentUUID": "fbfa0755-39a3-4d2b-8590-93d1da0f4a52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");e.floating(true);assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "2ea9c31f-8094-4938-badf-4777d6420018",
                  "parentUUID": "fbfa0755-39a3-4d2b-8590-93d1da0f4a52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");e.floating(false);assert.strictEqual(e.timezone(),\"Europe/London\")",
                  "err": {},
                  "uuid": "6f880a25-a8b0-4849-84a0-5f36cd1617dc",
                  "parentUUID": "fbfa0755-39a3-4d2b-8590-93d1da0f4a52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b0947b3-d320-43c3-aaf6-d95daecd669c",
                "b8c6bb81-cef8-499d-b534-5c34dd804236",
                "f6eb6014-09a8-4def-9be9-f8b75159ad5b",
                "2ea9c31f-8094-4938-badf-4777d6420018",
                "6f880a25-a8b0-4849-84a0-5f36cd1617dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ac94fcec-6551-43e9-aab2-f01f22128db9",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options={count:5,exclude:[moment()],freq:ICalEventRepeatingFreq.MONTHLY,interval:2,until:moment()};const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e.repeating(),null);e.repeating(options);assert.deepStrictEqual(e.repeating(),options);e.repeating(null);assert.deepStrictEqual(e.repeating(),null)",
                  "err": {},
                  "uuid": "41d95bad-8cb9-4998-9c23-9da2b8eda5ba",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.repeating(null));assert.deepStrictEqual(e.repeating(),null)",
                  "err": {},
                  "uuid": "8ce053a0-3548-4185-9964-cfd23f4da9b1",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.repeating(null),\"repeating(null)\");assert.deepStrictEqual(e,e.repeating({freq:ICalEventRepeatingFreq.MONTHLY}),\"repeating({freq: 'MONTHLY'})\")",
                  "err": {},
                  "uuid": "5d482031-3877-4626-ab24-156106161818",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: DAILY, HOURLY, MINUTELY, MONTHLY, SECONDLY, WEEKLY, YEARLY/)",
                  "err": {},
                  "uuid": "03a04684-9e92-451f-8c48-f6782f4d1099",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:\"hello\"},start:moment(),summary:\"test\"},new ICalCalendar)},/must be one of the following/)",
                  "err": {},
                  "uuid": "7ec01696-4b6c-4597-b745-a4b1122c7550",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.freq,\"MONTHLY\")",
                  "err": {},
                  "uuid": "2800e03a-6138-4424-8bd3-c0bb7dfda921",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{count:Infinity,freq:ICalEventRepeatingFreq.DAILY},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.count` must be a finite number!/);assert.throws(function(){new ICalEvent({repeating:{count:\"abc\",freq:ICalEventRepeatingFreq.DAILY},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.count` must be a finite number!/)",
                  "err": {},
                  "uuid": "28b3c2ea-5eda-408b-bee1-8f2dd694daa7",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({count:5,freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.count,5)",
                  "err": {},
                  "uuid": "d66de9e9-3e3d-480e-9592-dbdc71ed965e",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:Infinity},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.interval` must be a finite number!/);assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:\"abc\"},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.interval` must be a finite number!/)",
                  "err": {},
                  "uuid": "1281ee55-8e9c-4518-adbc-9cff5783ad0a",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,interval:5});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.interval,5)",
                  "err": {},
                  "uuid": "be6e2211-6d03-437c-940c-bdabf06e0a7b",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,until:null},start:moment(),summary:\"test\"},new ICalCalendar)},/Error: `repeating\\.until` has to be a valid date!/)",
                  "err": {},
                  "uuid": "79d849f6-6291-4ca7-ac88-742b9c07ed84",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "9445e2ed-dcc7-4eb2-9c6b-9fda1278c395",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "7cf8ab73-8407-4aef-876f-8f4f424ac568",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\");event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "03deb45b-f4a9-456f-b29f-b43d7fc8a5cf",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:3})},/`repeating.until`/,\"Number\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:null})},/`repeating.until`/,\"null\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:NaN})},/`repeating.until`/,\"NaN\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:new Date(\"foo\")})},/`repeating.until`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "6e20598c-9d51-4c64-8d01-28f196d88690",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{byDay:\"FOO\",freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/);assert.throws(function(){new ICalEvent({repeating:{byDay:[\"SU\",\"BAR\",\"th\"],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/);assert.throws(function(){new ICalEvent({repeating:{byDay:[\"SU\",Infinity,\"th\"],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/)",
                  "err": {},
                  "uuid": "e0bc34e7-733c-4064-ac85-35be9c8ebd19",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byDay:[ICalWeekday.SU,ICalWeekday.WE,ICalWeekday.TH],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byDay,[\"SU\",\"WE\",\"TH\"])",
                  "err": {},
                  "uuid": "83b752f8-df02-4410-b4e6-46c59d682826",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{byMonth:\"FOO\",freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonth` contains invalid value `FOO`/);assert.throws(function(){new ICalEvent({repeating:{byMonth:[1,14,7],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonth` contains invalid value `14`/)",
                  "err": {},
                  "uuid": "d297868d-778d-4ddd-8fc6-ebaeded6272d",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byMonth:[1,12,7],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byMonth,[1,12,7])",
                  "err": {},
                  "uuid": "1741ebb3-a051-4f77-ad0d-c62b7969f540",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:\"FOO\",freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `FOO`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:[1,32,-15],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `32`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:[-1,-32,15],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `-32`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:[1,0,15],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `0`/)",
                  "err": {},
                  "uuid": "37861665-0bdd-41f8-9f95-0939c5103ec2",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byMonthDay:[1,15],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byMonthDay,[1,15])",
                  "err": {},
                  "uuid": "50a633d2-925d-4a2f-b846-00a8c430b50c",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[367],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `367`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[-367],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `-367`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[0],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `0`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[\"FOO\"],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `FOO`/)",
                  "err": {},
                  "uuid": "3f26e075-7c4d-45a3-accc-b30300916623",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{bySetPos:6,freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/)",
                  "err": {},
                  "uuid": "b4ad0ae2-f52b-4d71-b5ca-a1a7c41eb5f9",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byDay:[ICalWeekday.SU],bySetPos:[2],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.byDay?.length,1);assert.strictEqual(result.bySetPos?.length,1)",
                  "err": {},
                  "uuid": "d319e7e0-1287-4cd0-afe1-5e3669888813",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],exclude:new Date(\"FOO\"),freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/has to be a valid date/)",
                  "err": {},
                  "uuid": "6283ff12-5ccb-405a-89a5-4b93f9269f41",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],exclude:[moment(),new Date(\"BAR\"),\"FOO\"],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/has to be a valid date/)",
                  "err": {},
                  "uuid": "fd645143-72f1-4848-a096-aa7a76b82d86",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],exclude:42,freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.exclude\\[0\\]` has to be a valid date!/)",
                  "err": {},
                  "uuid": "be08f6e1-1053-4f93-b6c9-e7d8f859be59",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\");e.repeating({exclude:[date.toJSON(),date.toDate(),date],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.ok(Array.isArray(result.exclude));assert.strictEqual(result.exclude.length,3);assert.deepStrictEqual(result.exclude[0],date.toJSON(),\"String\");assert.deepStrictEqual(result.exclude[1],date.toDate(),\"Date\");assert.deepStrictEqual(result.exclude[2],date,\"Moment\")",
                  "err": {},
                  "uuid": "df2aaa2c-99a4-40e2-9153-28b6e9c9f00b",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,startOfWeek:\"FOO\"},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/)",
                  "err": {},
                  "uuid": "0de80e7b-2dd7-4c94-b6b1-ea9ed150f4ee",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,startOfWeek:ICalWeekday.SU});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.startOfWeek,\"SU\")",
                  "err": {},
                  "uuid": "6a0f287b-39af-4e86-b07d-60a1eb81a135",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=new Date(Date.UTC(2012,1,1,10,30));const e=new ICalEvent({start},new ICalCalendar);const rule=new rrule.RRule({byweekday:[rrule.RRule.MO,rrule.RRule.FR],dtstart:start,freq:rrule.RRule.WEEKLY,interval:5,until:new Date(Date.UTC(2012,12,31))});e.repeating(rule);const result=e.repeating();assert.ok(isRRule(result));assert.deepStrictEqual(result,rule);console.log(e.toString());assert.ok(e.toString().includes(\"RRULE:BYDAY=MO,FR;FREQ=WEEKLY;INTERVAL=5;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "48828c21-c1fe-4cc5-b10c-ab4e63389dfa",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const rule=\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\";e.repeating(rule);const result=e.repeating();assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "a55f3134-fffa-4078-a42d-ee6e9f4c092c",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add RRULE: prefix for single line string if not already there",
                  "fullTitle": "ical-generator Event repeating() should add RRULE: prefix for single line string if not already there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const rule=\"FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\";e.repeating(rule);const result=e.repeating();assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "cba18650-c9a4-4b40-8435-0901f3b76dbc",
                  "parentUUID": "ac94fcec-6551-43e9-aab2-f01f22128db9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41d95bad-8cb9-4998-9c23-9da2b8eda5ba",
                "8ce053a0-3548-4185-9964-cfd23f4da9b1",
                "5d482031-3877-4626-ab24-156106161818",
                "03a04684-9e92-451f-8c48-f6782f4d1099",
                "7ec01696-4b6c-4597-b745-a4b1122c7550",
                "2800e03a-6138-4424-8bd3-c0bb7dfda921",
                "28b3c2ea-5eda-408b-bee1-8f2dd694daa7",
                "d66de9e9-3e3d-480e-9592-dbdc71ed965e",
                "1281ee55-8e9c-4518-adbc-9cff5783ad0a",
                "be6e2211-6d03-437c-940c-bdabf06e0a7b",
                "79d849f6-6291-4ca7-ac88-742b9c07ed84",
                "9445e2ed-dcc7-4eb2-9c6b-9fda1278c395",
                "7cf8ab73-8407-4aef-876f-8f4f424ac568",
                "03deb45b-f4a9-456f-b29f-b43d7fc8a5cf",
                "6e20598c-9d51-4c64-8d01-28f196d88690",
                "e0bc34e7-733c-4064-ac85-35be9c8ebd19",
                "83b752f8-df02-4410-b4e6-46c59d682826",
                "d297868d-778d-4ddd-8fc6-ebaeded6272d",
                "1741ebb3-a051-4f77-ad0d-c62b7969f540",
                "37861665-0bdd-41f8-9f95-0939c5103ec2",
                "50a633d2-925d-4a2f-b846-00a8c430b50c",
                "3f26e075-7c4d-45a3-accc-b30300916623",
                "b4ad0ae2-f52b-4d71-b5ca-a1a7c41eb5f9",
                "d319e7e0-1287-4cd0-afe1-5e3669888813",
                "6283ff12-5ccb-405a-89a5-4b93f9269f41",
                "fd645143-72f1-4848-a096-aa7a76b82d86",
                "be08f6e1-1053-4f93-b6c9-e7d8f859be59",
                "df2aaa2c-99a4-40e2-9153-28b6e9c9f00b",
                "0de80e7b-2dd7-4c94-b6b1-ea9ed150f4ee",
                "6a0f287b-39af-4e86-b07d-60a1eb81a135",
                "48828c21-c1fe-4cc5-b10c-ab4e63389dfa",
                "a55f3134-fffa-4078-a42d-ee6e9f4c092c",
                "cba18650-c9a4-4b40-8435-0901f3b76dbc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d8aad5a7-ddd3-4689-a41e-bed9b5909487",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.summary(),\"\");e.summary(\"Testevent\");assert.strictEqual(e.summary(),\"Testevent\")",
                  "err": {},
                  "uuid": "1c869023-e30c-483e-8403-07dd9fdfa58e",
                  "parentUUID": "d8aad5a7-ddd3-4689-a41e-bed9b5909487",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.summary(\"\"));assert.deepStrictEqual(e,e.summary(\"Testevent\"))",
                  "err": {},
                  "uuid": "9555ab33-81c5-4f22-83be-d494e70a5236",
                  "parentUUID": "d8aad5a7-ddd3-4689-a41e-bed9b5909487",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.summary(\"Example Event II\");assert.strictEqual(event.summary(),\"Example Event II\");event.summary(\"\");assert.strictEqual(event.summary(),\"\")",
                  "err": {},
                  "uuid": "569a19ac-6466-4d7e-aa94-3af70fc9e2b4",
                  "parentUUID": "d8aad5a7-ddd3-4689-a41e-bed9b5909487",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c869023-e30c-483e-8403-07dd9fdfa58e",
                "9555ab33-81c5-4f22-83be-d494e70a5236",
                "569a19ac-6466-4d7e-aa94-3af70fc9e2b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c68ad3b-e32c-4781-91ad-d32912efe344",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.location(),null);e.location(\"Test Location\");assert.deepStrictEqual(e.location(),{title:\"Test Location\"});e.location(null);assert.strictEqual(e.location(),null)",
                  "err": {},
                  "uuid": "1d2945f8-f8ba-43d1-936f-937843c9c290",
                  "parentUUID": "8c68ad3b-e32c-4781-91ad-d32912efe344",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.location(),null);e.location({geo:{lat:44.5,lon:-3.4},title:\"Foo\"});const location=e.location();assert.ok(location);assert.ok(\"title\"in location);assert.deepStrictEqual(location?.title,\"Foo\");assert.deepStrictEqual(location?.geo,{lat:44.5,lon:-3.4});e.location(null);assert.strictEqual(e.location(),null)",
                  "err": {},
                  "uuid": "b0f38a89-dd57-42cd-a357-a7960f583b43",
                  "parentUUID": "8c68ad3b-e32c-4781-91ad-d32912efe344",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.location(null));assert.deepStrictEqual(e,e.location(\"Test Location\"))",
                  "err": {},
                  "uuid": "a0b8660d-be3e-49d5-9890-14ad9aba07c3",
                  "parentUUID": "8c68ad3b-e32c-4781-91ad-d32912efe344",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.location(\"Europa-Park\");const location=event.location();assert.ok(location);assert.ok(\"title\"in location);assert.strictEqual(location?.title,\"Europa-Park\")",
                  "err": {},
                  "uuid": "c7c04c89-d123-42ef-a1be-472d0480d8df",
                  "parentUUID": "8c68ad3b-e32c-4781-91ad-d32912efe344",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);assert.throws(()=>event.location({geo:3}),/`location` isn't formatted correctly/i);assert.throws(()=>event.location({}),/`location` isn't formatted correctly/i)",
                  "err": {},
                  "uuid": "5b6aba78-0c78-4926-aa83-48ab97a59d44",
                  "parentUUID": "8c68ad3b-e32c-4781-91ad-d32912efe344",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d2945f8-f8ba-43d1-936f-937843c9c290",
                "b0f38a89-dd57-42cd-a357-a7960f583b43",
                "a0b8660d-be3e-49d5-9890-14ad9aba07c3",
                "c7c04c89-d123-42ef-a1be-472d0480d8df",
                "5b6aba78-0c78-4926-aa83-48ab97a59d44"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d1b30a1a-0fca-457e-a68f-4219a77338ee",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.description(),null);e.description(\"I don't need a description. I'm far to awesome for descriptions\\u2026\");assert.deepStrictEqual(e.description(),{plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\"});e.description({html:\"I don't need a description.<br />I'm far to awesome for descriptions\\u2026\",plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\"});assert.deepStrictEqual(e.description(),{html:\"I don't need a description.<br />I'm far to awesome for descriptions\\u2026\",plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\"});e.description(null);assert.strictEqual(e.description(),null)",
                  "err": {},
                  "uuid": "712853a9-fe52-4696-840c-4e4b42780d8e",
                  "parentUUID": "d1b30a1a-0fca-457e-a68f-4219a77338ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.description(null));assert.deepStrictEqual(e,e.description(\"I don't need a description. I'm far to awesome for descriptions\\u2026\"))",
                  "err": {},
                  "uuid": "8e082bfe-2b81-4fa1-a254-72ebb2a67b35",
                  "parentUUID": "d1b30a1a-0fca-457e-a68f-4219a77338ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.description(\"Well. But other people need descriptions\\u2026 :/\");assert.deepStrictEqual(event.description(),{plain:\"Well. But other people need descriptions\\u2026 :/\"});event.description({html:\"<marquee>I'm the best HTML tag in this universe!</marquee>\",plain:\"I am uncool text.\"});assert.ok(event.toString().includes(\"<marquee>I'm the best HTML tag in this universe!</marquee>\"))",
                  "err": {},
                  "uuid": "cf8c7645-0b9f-413c-8108-22af855f9fb7",
                  "parentUUID": "d1b30a1a-0fca-457e-a68f-4219a77338ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "712853a9-fe52-4696-840c-4e4b42780d8e",
                "8e082bfe-2b81-4fa1-a254-72ebb2a67b35",
                "cf8c7645-0b9f-413c-8108-22af855f9fb7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "46c34f32-f7c1-4879-ad26-07bd0e2e03c5",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.organizer(),null);e.organizer(null);assert.strictEqual(e.organizer(),null);e.organizer({email:\"mail@example.com\",name:\"Sebastian Pekarek\"});assert.strictEqual(\"Sebastian Pekarek\",e.organizer()?.name);assert.strictEqual(\"mail@example.com\",e.organizer()?.email);e.organizer({email:\"mail@example.com\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\"});assert.strictEqual(\"Sebastian Pekarek\",e.organizer()?.name);assert.strictEqual(\"mail@example.com\",e.organizer()?.email);assert.strictEqual(\"mail2@example2.com\",e.organizer()?.mailto)",
                  "err": {},
                  "uuid": "632e484c-1974-467d-926f-2e8172eecc02",
                  "parentUUID": "46c34f32-f7c1-4879-ad26-07bd0e2e03c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.organizer(null));assert.deepStrictEqual(e,e.organizer(\"Sebastian Pekarek <mail@example.com>\"))",
                  "err": {},
                  "uuid": "19955a66-1398-4911-bc8d-3ee295f3b5d4",
                  "parentUUID": "46c34f32-f7c1-4879-ad26-07bd0e2e03c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({email:\"mail@example.com\",name:\"Sebastian Pekarek\"});assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",mailto:void 0,name:\"Sebastian Pekarek\",sentBy:void 0});event.organizer({email:\"mail@example.com\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\"});assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\",sentBy:void 0})",
                  "err": {},
                  "uuid": "c2b9938e-f0ab-4314-8e44-14800d4989ad",
                  "parentUUID": "46c34f32-f7c1-4879-ad26-07bd0e2e03c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({email:\"mail@example.com\",name:\"Sebastian Pekarek\",sentBy:\"bot@example.com\"});assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",mailto:void 0,name:\"Sebastian Pekarek\",sentBy:\"bot@example.com\"})",
                  "err": {},
                  "uuid": "7b8ead16-fad3-49c5-a9a5-1a3eaa7e4393",
                  "parentUUID": "46c34f32-f7c1-4879-ad26-07bd0e2e03c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer(\"Sebastian Pekarek <mail@example.com>\");assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",name:\"Sebastian Pekarek\"})",
                  "err": {},
                  "uuid": "df50822f-7bf9-49cb-bf2e-7f5d8070c4fa",
                  "parentUUID": "46c34f32-f7c1-4879-ad26-07bd0e2e03c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer(\"foo bar\")},/`organizer`/)",
                  "err": {},
                  "uuid": "71d17374-e45a-4313-902d-04f1318c4eae",
                  "parentUUID": "46c34f32-f7c1-4879-ad26-07bd0e2e03c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer({email:\"foo\"})},/`organizer\\.name`/)",
                  "err": {},
                  "uuid": "ece53f7a-a7c1-44f8-8d77-7578eef3afb0",
                  "parentUUID": "46c34f32-f7c1-4879-ad26-07bd0e2e03c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer(Infinity)},/`organizer`/);assert.throws(function(){e.organizer(NaN)},/`organizer`/)",
                  "err": {},
                  "uuid": "cb0b837a-6b34-4919-b04c-2656804f4035",
                  "parentUUID": "46c34f32-f7c1-4879-ad26-07bd0e2e03c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({name:\"Sebastian Pekarek\"});assert.deepStrictEqual(event.organizer(),{email:void 0,mailto:void 0,name:\"Sebastian Pekarek\",sentBy:void 0})",
                  "err": {},
                  "uuid": "b0451332-a72f-413e-842e-ef12c048dff0",
                  "parentUUID": "46c34f32-f7c1-4879-ad26-07bd0e2e03c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include a : (PR #610)",
                  "fullTitle": "ical-generator Event organizer() should include a : (PR #610)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({organizer:{name:\"Some Guy\"},start:moment(),summary:\"Example Event\"},new ICalCalendar);assert.ok(event.toString().includes('ORGANIZER;CN=\"Some Guy\":'))",
                  "err": {},
                  "uuid": "7e6f4f2c-a420-4d5b-ab53-adfb01c26673",
                  "parentUUID": "46c34f32-f7c1-4879-ad26-07bd0e2e03c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "632e484c-1974-467d-926f-2e8172eecc02",
                "19955a66-1398-4911-bc8d-3ee295f3b5d4",
                "c2b9938e-f0ab-4314-8e44-14800d4989ad",
                "7b8ead16-fad3-49c5-a9a5-1a3eaa7e4393",
                "df50822f-7bf9-49cb-bf2e-7f5d8070c4fa",
                "71d17374-e45a-4313-902d-04f1318c4eae",
                "ece53f7a-a7c1-44f8-8d77-7578eef3afb0",
                "cb0b837a-6b34-4919-b04c-2656804f4035",
                "b0451332-a72f-413e-842e-ef12c048dff0",
                "7e6f4f2c-a420-4d5b-ab53-adfb01c26673"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "446704f9-e753-409e-9da7-4a1a9c5dcd20",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({email:\"mail@example.com\"},event);assert.strictEqual(event.createAttendee(attendee),attendee,\"createAttendee returns attendee\");assert.deepStrictEqual(event.attendees()[0],attendee,\"attendee pushed\")",
                  "err": {},
                  "uuid": "533b7f87-684f-4878-8c12-06dad562785c",
                  "parentUUID": "446704f9-e753-409e-9da7-4a1a9c5dcd20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createAttendee({email:\"mail@example.com\"})instanceof ICalAttendee);assert.strictEqual(event.attendees.length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "994fdd1d-6766-4926-aeda-5824700ed491",
                  "parentUUID": "446704f9-e753-409e-9da7-4a1a9c5dcd20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=event.createAttendee(\"Zac <zac@example.com>\");assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(event.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "f177d3a3-ee5d-4aa3-90f4-2d2fda93dcac",
                  "parentUUID": "446704f9-e753-409e-9da7-4a1a9c5dcd20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.createAttendee(\"foo bar\")},/isn't formated correctly/)",
                  "err": {},
                  "uuid": "390f02dc-a442-4bc0-af1b-50514315360d",
                  "parentUUID": "446704f9-e753-409e-9da7-4a1a9c5dcd20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=event.createAttendee({email:\"zac@example.com\",name:\"Zac\"});assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(event.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "228d7c03-f525-4970-9271-af90fa8db046",
                  "parentUUID": "446704f9-e753-409e-9da7-4a1a9c5dcd20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "533b7f87-684f-4878-8c12-06dad562785c",
                "994fdd1d-6766-4926-aeda-5824700ed491",
                "f177d3a3-ee5d-4aa3-90f4-2d2fda93dcac",
                "390f02dc-a442-4bc0-af1b-50514315360d",
                "228d7c03-f525-4970-9271-af90fa8db046"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d6b2bdc-42d6-4771-bf3b-4d4fa42b148f",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.attendees().length,0);const attendee=event.createAttendee({email:\"mail@example.com\"});assert.strictEqual(event.attendees().length,1);assert.deepStrictEqual(event.attendees()[0],attendee)",
                  "err": {},
                  "uuid": "7a56204c-a762-4f5c-803f-f5c252007f17",
                  "parentUUID": "8d6b2bdc-42d6-4771-bf3b-4d4fa42b148f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.attendees([{email:\"a@example.com\",name:\"Person A\"},{email:\"b@example.com\",name:\"Person B\"}]);assert.strictEqual(event.attendees().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "efa1a4b0-cfc8-4a8c-8c24-57da213e52b4",
                  "parentUUID": "8d6b2bdc-42d6-4771-bf3b-4d4fa42b148f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a56204c-a762-4f5c-803f-f5c252007f17",
                "efa1a4b0-cfc8-4a8c-8c24-57da213e52b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1efab2c2-433e-4f62-ad23-a591a3b4d111",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createAlarm({trigger:60*10,type:ICalAlarmType.display})instanceof ICalAlarm)",
                  "err": {},
                  "uuid": "dc7b563e-7154-4eaa-b13b-7adfceb1e5c6",
                  "parentUUID": "1efab2c2-433e-4f62-ad23-a591a3b4d111",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const alarm=event.createAlarm({trigger:60*10,type:ICalAlarmType.audio});assert.strictEqual(alarm.type(),\"audio\")",
                  "err": {},
                  "uuid": "f99e702f-d6e2-4236-a4cd-edc71544dfcf",
                  "parentUUID": "1efab2c2-433e-4f62-ad23-a591a3b4d111",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc7b563e-7154-4eaa-b13b-7adfceb1e5c6",
                "f99e702f-d6e2-4236-a4cd-edc71544dfcf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a6267f4f-9850-4531-ae85-e7343aab2b8a",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.alarms().length,0);const alarm=event.createAlarm({trigger:600,type:ICalAlarmType.display});assert.strictEqual(event.alarms().length,1);assert.deepStrictEqual(event.alarms()[0],alarm)",
                  "err": {},
                  "uuid": "ab1245ce-4da2-4e5a-9fa9-4cde4a221660",
                  "parentUUID": "a6267f4f-9850-4531-ae85-e7343aab2b8a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.alarms([{trigger:60,type:ICalAlarmType.audio},{trigger:600,type:ICalAlarmType.display}]);assert.strictEqual(event.alarms().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "90229801-121a-42a8-831b-d84bb5d1f372",
                  "parentUUID": "a6267f4f-9850-4531-ae85-e7343aab2b8a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ab1245ce-4da2-4e5a-9fa9-4cde4a221660",
                "90229801-121a-42a8-831b-d84bb5d1f372"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d610ffdf-60b3-4876-87ad-34e49793a0f3",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createCategory({name:\"Test\"})instanceof ICalCategory)",
                  "err": {},
                  "uuid": "526bcc3d-3041-4791-9716-1247c46e8698",
                  "parentUUID": "d610ffdf-60b3-4876-87ad-34e49793a0f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const category=event.createCategory({name:\"foo\"});assert.strictEqual(category.name(),\"foo\")",
                  "err": {},
                  "uuid": "2089537d-cc03-433a-985c-6d2af4d1a2f9",
                  "parentUUID": "d610ffdf-60b3-4876-87ad-34e49793a0f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "526bcc3d-3041-4791-9716-1247c46e8698",
                "2089537d-cc03-433a-985c-6d2af4d1a2f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9c1a003-9213-413d-a4cd-8d53439380ea",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.categories().length,0);const category=event.createCategory({name:\"Test\"});assert.strictEqual(event.categories().length,1);assert.deepStrictEqual(event.categories()[0],category)",
                  "err": {},
                  "uuid": "18e04085-8362-430a-9326-573254c32560",
                  "parentUUID": "a9c1a003-9213-413d-a4cd-8d53439380ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.categories([{name:\"foo\"},{name:\"bar\"}]);assert.strictEqual(event.categories().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "2e56b005-c9c7-4543-b90f-400df7fc1c30",
                  "parentUUID": "a9c1a003-9213-413d-a4cd-8d53439380ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18e04085-8362-430a-9326-573254c32560",
                "2e56b005-c9c7-4543-b90f-400df7fc1c30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1db030a7-92fb-46a9-8e97-90942f39e14a",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.status(),null);event.status(ICalEventStatus.CONFIRMED);assert.strictEqual(event.status(),\"CONFIRMED\");event.status(null);assert.strictEqual(event.status(),null)",
                  "err": {},
                  "uuid": "b84fda8a-1bbe-4457-9e73-160884cf6741",
                  "parentUUID": "1db030a7-92fb-46a9-8e97-90942f39e14a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.status(null));assert.deepStrictEqual(e,e.status(ICalEventStatus.CONFIRMED))",
                  "err": {},
                  "uuid": "134affd1-980e-4b96-b29a-bc56819a8832",
                  "parentUUID": "1db030a7-92fb-46a9-8e97-90942f39e14a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.status(ICalEventStatus.CONFIRMED);e.status(null);assert.strictEqual(e.status(),null)",
                  "err": {},
                  "uuid": "e1a59841-b226-4933-acad-cc75642f270c",
                  "parentUUID": "1db030a7-92fb-46a9-8e97-90942f39e14a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.status(ICalEventStatus.CONFIRMED);assert.strictEqual(e.status(),\"CONFIRMED\");assert.strictEqual(e.status(),ICalEventStatus.CONFIRMED)",
                  "err": {},
                  "uuid": "61d574a8-aba2-4ee6-b8d9-1a8cda19cbc5",
                  "parentUUID": "1db030a7-92fb-46a9-8e97-90942f39e14a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.status(\"COOKING\")},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/);assert.throws(function(){e.status(Infinity)},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/);assert.throws(function(){e.status(NaN)},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/);assert.throws(function(){e.status(-1)},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/)",
                  "err": {},
                  "uuid": "a194ef0e-fbde-4df2-b904-e9f52f53f566",
                  "parentUUID": "1db030a7-92fb-46a9-8e97-90942f39e14a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b84fda8a-1bbe-4457-9e73-160884cf6741",
                "134affd1-980e-4b96-b29a-bc56819a8832",
                "e1a59841-b226-4933-acad-cc75642f270c",
                "61d574a8-aba2-4ee6-b8d9-1a8cda19cbc5",
                "a194ef0e-fbde-4df2-b904-e9f52f53f566"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c3f6e79f-9262-466e-8e2d-bc9010938b85",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.busystatus(),null);event.busystatus(ICalEventBusyStatus.BUSY);assert.strictEqual(event.busystatus(),\"BUSY\");event.busystatus(null);assert.strictEqual(event.busystatus(),null)",
                  "err": {},
                  "uuid": "e5cb80ab-4de2-4518-9b6b-09f13fa0161d",
                  "parentUUID": "c3f6e79f-9262-466e-8e2d-bc9010938b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.busystatus(null));assert.deepStrictEqual(e,e.busystatus(ICalEventBusyStatus.BUSY))",
                  "err": {},
                  "uuid": "291731a6-4150-46d4-b3ff-9d691312366f",
                  "parentUUID": "c3f6e79f-9262-466e-8e2d-bc9010938b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.busystatus(ICalEventBusyStatus.BUSY);e.busystatus(null);assert.strictEqual(e.busystatus(),null)",
                  "err": {},
                  "uuid": "5baba4d1-8747-4d1c-a261-6f74e3cd092e",
                  "parentUUID": "c3f6e79f-9262-466e-8e2d-bc9010938b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.busystatus(ICalEventBusyStatus.BUSY);assert.strictEqual(e.busystatus(),\"BUSY\")",
                  "err": {},
                  "uuid": "e99350cf-fa85-4f8f-a0ce-c325fd9d5d20",
                  "parentUUID": "c3f6e79f-9262-466e-8e2d-bc9010938b85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.busystatus(\"COOKING\")},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/);assert.throws(function(){e.busystatus(Infinity)},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/);assert.throws(function(){e.busystatus(NaN)},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/);assert.throws(function(){e.busystatus(-1)},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/)",
                  "err": {},
                  "uuid": "de2c3026-1d45-4cee-8518-8da81f362502",
                  "parentUUID": "c3f6e79f-9262-466e-8e2d-bc9010938b85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5cb80ab-4de2-4518-9b6b-09f13fa0161d",
                "291731a6-4150-46d4-b3ff-9d691312366f",
                "5baba4d1-8747-4d1c-a261-6f74e3cd092e",
                "e99350cf-fa85-4f8f-a0ce-c325fd9d5d20",
                "de2c3026-1d45-4cee-8518-8da81f362502"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b223f0a-ad26-4cff-b6b9-f22590733bd0",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.priority(),null);e.priority(5);assert.strictEqual(e.priority(),5)",
                  "err": {},
                  "uuid": "5a7dcf40-be7e-4440-bd98-3c65fcdc732f",
                  "parentUUID": "9b223f0a-ad26-4cff-b6b9-f22590733bd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.priority(null));assert.deepStrictEqual(e,e.priority(5))",
                  "err": {},
                  "uuid": "b59aa88e-d466-4d98-bca6-a705c53a7530",
                  "parentUUID": "9b223f0a-ad26-4cff-b6b9-f22590733bd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.priority(5);assert.strictEqual(event.priority(),5);assert.ok(event.toString().includes(\"PRIORITY:5\"))",
                  "err": {},
                  "uuid": "2de04dd2-93a8-43b4-9579-b1c28f295d32",
                  "parentUUID": "9b223f0a-ad26-4cff-b6b9-f22590733bd0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a7dcf40-be7e-4440-bd98-3c65fcdc732f",
                "b59aa88e-d466-4d98-bca6-a705c53a7530",
                "2de04dd2-93a8-43b4-9579-b1c28f295d32"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc960684-c0ac-4122-9597-4a456469e7fb",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.url(),null);e.url(\"http://sebbo.net/\");assert.strictEqual(e.url(),\"http://sebbo.net/\")",
                  "err": {},
                  "uuid": "eb5a21e0-0c3f-4a07-a833-3d43467534a6",
                  "parentUUID": "cc960684-c0ac-4122-9597-4a456469e7fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.url(null));assert.deepStrictEqual(e,e.url(\"http://sebbo.net/\"))",
                  "err": {},
                  "uuid": "ea5cc078-70e5-4c18-8785-790d82256bf0",
                  "parentUUID": "cc960684-c0ac-4122-9597-4a456469e7fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.url(\"http://github.com/sebbo2002/ical-generator\");assert.strictEqual(event.url(),\"http://github.com/sebbo2002/ical-generator\")",
                  "err": {},
                  "uuid": "05df4231-606c-4b87-91f4-e8c3bf09e120",
                  "parentUUID": "cc960684-c0ac-4122-9597-4a456469e7fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb5a21e0-0c3f-4a07-a833-3d43467534a6",
                "ea5cc078-70e5-4c18-8785-790d82256bf0",
                "05df4231-606c-4b87-91f4-e8c3bf09e120"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1257ffd7-7182-4fc7-a005-3c62d47dc55f",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event.createAttachment(\"https://files.sebbo.net/calendar/attachments/foo\"),event)",
                  "err": {},
                  "uuid": "c473b419-d2b8-4f8e-a4ef-00faeac3884e",
                  "parentUUID": "1257ffd7-7182-4fc7-a005-3c62d47dc55f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c473b419-d2b8-4f8e-a4ef-00faeac3884e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a632d98-a3c6-4264-8b5d-03ce9e166f82",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.attachments().length,0);event.createAttachment(\"https://files.sebbo.net/calendar/attachments/foo\");assert.strictEqual(event.attachments().length,1);assert.deepStrictEqual(typeof event.attachments()[0],\"string\")",
                  "err": {},
                  "uuid": "1168383a-efc1-4590-8d80-e4df33c76600",
                  "parentUUID": "3a632d98-a3c6-4264-8b5d-03ce9e166f82",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.attachments([\"https://files.sebbo.net/calendar/attachments/foo\",\"https://files.sebbo.net/calendar/attachments/bar\"]);assert.strictEqual(event.attachments().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "5113c14e-8464-48b2-a810-fbfc5bb4fcbe",
                  "parentUUID": "3a632d98-a3c6-4264-8b5d-03ce9e166f82",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1168383a-efc1-4590-8d80-e4df33c76600",
                "5113c14e-8464-48b2-a810-fbfc5bb4fcbe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74d17a68-5102-477c-8a25-fc2b65f064b4",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.created(new Date))",
                  "err": {},
                  "uuid": "63a5e243-c6c9-49fb-956b-ef0891f9ad7f",
                  "parentUUID": "74d17a68-5102-477c-8a25-fc2b65f064b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(moment());assert.ok(moment.isMoment(e.created()))",
                  "err": {},
                  "uuid": "b1a8ca47-9493-4916-b545-de1bb8629869",
                  "parentUUID": "74d17a68-5102-477c-8a25-fc2b65f064b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(new Date);assert.ok(e.created()instanceof Date)",
                  "err": {},
                  "uuid": "722ef78b-dfd8-4d47-834c-f3bf6ba6cf2f",
                  "parentUUID": "74d17a68-5102-477c-8a25-fc2b65f064b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(moment().toJSON());assert.strictEqual(typeof e.created(),\"string\")",
                  "err": {},
                  "uuid": "de1afd22-da15-44c1-a116-8ada76283ef0",
                  "parentUUID": "74d17a68-5102-477c-8a25-fc2b65f064b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(new Date);assert.ok(e.created()instanceof Date)",
                  "err": {},
                  "uuid": "999ba817-b6c0-4961-aa5f-467dc31bf0c5",
                  "parentUUID": "74d17a68-5102-477c-8a25-fc2b65f064b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=new Date;const e=new ICalEvent({start:new Date},new ICalCalendar).created(now);assert.deepStrictEqual(e.created()?.valueOf(),now.getTime())",
                  "err": {},
                  "uuid": "cfc67457-bd10-4854-b03b-f538536654b3",
                  "parentUUID": "74d17a68-5102-477c-8a25-fc2b65f064b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.created(\"hallo\")},/`created`/)",
                  "err": {},
                  "uuid": "3a397484-05f9-4627-8cb0-8dcad91f935c",
                  "parentUUID": "74d17a68-5102-477c-8a25-fc2b65f064b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63a5e243-c6c9-49fb-956b-ef0891f9ad7f",
                "b1a8ca47-9493-4916-b545-de1bb8629869",
                "722ef78b-dfd8-4d47-834c-f3bf6ba6cf2f",
                "de1afd22-da15-44c1-a116-8ada76283ef0",
                "999ba817-b6c0-4961-aa5f-467dc31bf0c5",
                "cfc67457-bd10-4854-b03b-f538536654b3",
                "3a397484-05f9-4627-8cb0-8dcad91f935c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "320f36a7-a4a2-4907-a49f-000594b8ce28",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.lastModified(new Date))",
                  "err": {},
                  "uuid": "2352fd6e-53d2-4ae7-a423-174590cff60f",
                  "parentUUID": "320f36a7-a4a2-4907-a49f-000594b8ce28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(moment());assert.ok(moment.isMoment(e.lastModified()))",
                  "err": {},
                  "uuid": "457c004d-b51b-4503-8c79-60edc52c8f3a",
                  "parentUUID": "320f36a7-a4a2-4907-a49f-000594b8ce28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(new Date);assert.ok(e.lastModified()instanceof Date)",
                  "err": {},
                  "uuid": "a950877b-3fee-4869-b90e-1ccaeadb6b2d",
                  "parentUUID": "320f36a7-a4a2-4907-a49f-000594b8ce28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().toJSON();e.lastModified(date);assert.strictEqual(e.lastModified(),date)",
                  "err": {},
                  "uuid": "47a084a5-2e5e-42aa-a04e-76ec1acb1b4c",
                  "parentUUID": "320f36a7-a4a2-4907-a49f-000594b8ce28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(new Date);assert.ok(e.lastModified()instanceof Date)",
                  "err": {},
                  "uuid": "a81cbf20-8a0e-438c-9e80-47edd5c4ebe8",
                  "parentUUID": "320f36a7-a4a2-4907-a49f-000594b8ce28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=new Date;const e=new ICalEvent({start:new Date},new ICalCalendar).lastModified(now);assert.deepStrictEqual(e.lastModified()?.valueOf(),now.getTime())",
                  "err": {},
                  "uuid": "4a2dedfa-f708-4945-a059-b6c5f60d3e08",
                  "parentUUID": "320f36a7-a4a2-4907-a49f-000594b8ce28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.lastModified(\"hallo\")},/`lastModified`/)",
                  "err": {},
                  "uuid": "2b624b7e-19b6-483d-8ba4-1be6ae7607a9",
                  "parentUUID": "320f36a7-a4a2-4907-a49f-000594b8ce28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2352fd6e-53d2-4ae7-a423-174590cff60f",
                "457c004d-b51b-4503-8c79-60edc52c8f3a",
                "a950877b-3fee-4869-b90e-1ccaeadb6b2d",
                "47a084a5-2e5e-42aa-a04e-76ec1acb1b4c",
                "a81cbf20-8a0e-438c-9e80-47edd5c4ebe8",
                "4a2dedfa-f708-4945-a059-b6c5f60d3e08",
                "2b624b7e-19b6-483d-8ba4-1be6ae7607a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1bad9cd-724e-43de-a867-a1321123b0b6",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.class(),null);event.class(ICalEventClass.PRIVATE);assert.strictEqual(event.class(),\"PRIVATE\");event.class(null);assert.strictEqual(event.class(),null)",
                  "err": {},
                  "uuid": "91b1a379-dad3-489f-811c-8139ab87c211",
                  "parentUUID": "a1bad9cd-724e-43de-a867-a1321123b0b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.class(null));assert.deepStrictEqual(e,e.class(ICalEventClass.PRIVATE))",
                  "err": {},
                  "uuid": "06b1e201-f034-441f-bc15-032eca40e8fa",
                  "parentUUID": "a1bad9cd-724e-43de-a867-a1321123b0b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.class(ICalEventClass.PRIVATE);e.class(null);assert.strictEqual(e.class(),null)",
                  "err": {},
                  "uuid": "2156cb93-0651-44f6-8a4e-4cd030713617",
                  "parentUUID": "a1bad9cd-724e-43de-a867-a1321123b0b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.class(ICalEventClass.PRIVATE);assert.strictEqual(e.class(),\"PRIVATE\");assert.strictEqual(e.class(),ICalEventClass.PRIVATE)",
                  "err": {},
                  "uuid": "4225b34f-6588-4094-837b-06f7def6e3aa",
                  "parentUUID": "a1bad9cd-724e-43de-a867-a1321123b0b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.class(\"COOKING\")},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/);assert.throws(function(){e.class(Infinity)},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/);assert.throws(function(){e.class(NaN)},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/);assert.throws(function(){e.class(-1)},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/)",
                  "err": {},
                  "uuid": "b45726da-da37-4c08-9fc5-4c584ea9d3cb",
                  "parentUUID": "a1bad9cd-724e-43de-a867-a1321123b0b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91b1a379-dad3-489f-811c-8139ab87c211",
                "06b1e201-f034-441f-bc15-032eca40e8fa",
                "2156cb93-0651-44f6-8a4e-4cd030713617",
                "4225b34f-6588-4094-837b-06f7def6e3aa",
                "b45726da-da37-4c08-9fc5-4c584ea9d3cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1e3211af-dc9f-4633-9ac7-ad344a66b386",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "8fb75fd7-852d-42db-9a28-278c9e11d228",
                  "parentUUID": "1e3211af-dc9f-4633-9ac7-ad344a66b386",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8fb75fd7-852d-42db-9a28-278c9e11d228"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bca316ca-2cbe-46f0-9bce-054dae3c2f75",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=moment().add(1,\"month\");const event=new ICalEvent({start:new Date},new ICalCalendar).summary(\"foo\").start(date);assert.strictEqual(event.toJSON().summary,\"foo\",\"summary is okay\");assert.deepStrictEqual(event.toJSON().start,date.toJSON(),\"start is okay\");assert.strictEqual(typeof event.toJSON().start,\"string\",\"start is string\")",
                  "err": {},
                  "uuid": "0ab5d397-5b2c-49fe-bea4-ac7763b03d62",
                  "parentUUID": "bca316ca-2cbe-46f0-9bce-054dae3c2f75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;const rule=new rrule.RRule({byweekday:[rrule.RRule.MO,rrule.RRule.FR],dtstart:date,freq:rrule.RRule.WEEKLY,interval:5,until:new Date(Date.UTC(2012,12,31))});const event=new ICalEvent({start:new Date},new ICalCalendar).summary(\"foo\").start(date).repeating(rule);const json=event.toJSON();const before=event.toString();assert.ok(typeof json.repeating===\"string\");const event2=new ICalEvent(event.toJSON(),new ICalCalendar);const after=event2.toString();assert.strictEqual(after,before)",
                  "err": {},
                  "uuid": "3b79b626-3ae7-488b-b789-1c6f14f74413",
                  "parentUUID": "bca316ca-2cbe-46f0-9bce-054dae3c2f75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalEvent({start:new Date},new ICalCalendar);new ICalEvent(a.toJSON(),new ICalCalendar)",
                  "err": {},
                  "uuid": "baeb9c64-9b3c-491b-893e-38dd8dc47f80",
                  "parentUUID": "bca316ca-2cbe-46f0-9bce-054dae3c2f75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ab5d397-5b2c-49fe-bea4-ac7763b03d62",
                "3b79b626-3ae7-488b-b789-1c6f14f74413",
                "baeb9c64-9b3c-491b-893e-38dd8dc47f80"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "67e495b1-4214-4ca3-b7c6-76acd4890c16",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.transparency(),null);event.transparency(ICalEventTransparency.OPAQUE);assert.strictEqual(event.transparency(),\"OPAQUE\");event.transparency(null);assert.strictEqual(event.transparency(),null)",
                  "err": {},
                  "uuid": "8b27f66a-42c2-43bf-94d6-8979636fb914",
                  "parentUUID": "67e495b1-4214-4ca3-b7c6-76acd4890c16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.transparency(null));assert.deepStrictEqual(e,e.transparency(ICalEventTransparency.TRANSPARENT))",
                  "err": {},
                  "uuid": "5d6cc48c-3275-4268-a9d6-aa3d43658357",
                  "parentUUID": "67e495b1-4214-4ca3-b7c6-76acd4890c16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.transparency(ICalEventTransparency.OPAQUE);e.transparency(null);assert.strictEqual(e.transparency(),null)",
                  "err": {},
                  "uuid": "d0b6f6fe-fa88-4914-a286-f4970ad8394f",
                  "parentUUID": "67e495b1-4214-4ca3-b7c6-76acd4890c16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.transparency(ICalEventTransparency.OPAQUE);assert.strictEqual(e.transparency(),\"OPAQUE\")",
                  "err": {},
                  "uuid": "5b4cfeb7-3904-455e-bbfe-d0ad8eda6505",
                  "parentUUID": "67e495b1-4214-4ca3-b7c6-76acd4890c16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.transparency(\"COOKING\")},/Input must be one of the following: OPAQUE, TRANSPARENT/);assert.throws(function(){e.transparency(Infinity)},/Input must be one of the following: OPAQUE, TRANSPARENT/);assert.throws(function(){e.transparency(-1)},/Input must be one of the following: OPAQUE, TRANSPARENT/)",
                  "err": {},
                  "uuid": "2f5ec28c-79b1-4677-94ab-01a5fd164456",
                  "parentUUID": "67e495b1-4214-4ca3-b7c6-76acd4890c16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b27f66a-42c2-43bf-94d6-8979636fb914",
                "5d6cc48c-3275-4268-a9d6-aa3d43658357",
                "d0b6f6fe-fa88-4914-a286-f4970ad8394f",
                "5b4cfeb7-3904-455e-bbfe-d0ad8eda6505",
                "2f5ec28c-79b1-4677-94ab-01a5fd164456"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4ab3eef-6bc8-4d57-92ca-7a4897168f1b",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Hel\\\\\\\\lo\\nW;orl,d\"},new ICalCalendar);assert.ok(e.toString().indexOf(\"Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d\")>-1)",
                  "err": {},
                  "uuid": "b82bee17-9f55-4ee7-9bc9-70118fa8f268",
                  "parentUUID": "c4ab3eef-6bc8-4d57-92ca-7a4897168f1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const event=new ICalEvent({id:42,start:moment(),summary:\":)\"},cal);assert.ok(event.toString().indexOf(\"UID:42\\r\")>-1)",
                  "err": {},
                  "uuid": "2caeb185-c6a2-461c-bb65-96bee920cb95",
                  "parentUUID": "c4ab3eef-6bc8-4d57-92ca-7a4897168f1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;let event=new ICalEvent({end:moment(),repeating:{freq:ICalEventRepeatingFreq.WEEKLY},start:moment()},cal);assert.ok(!event.toString().includes(\"WKST\"),\"without WKST\");event=new ICalEvent({end:moment(),repeating:{freq:ICalEventRepeatingFreq.WEEKLY,startOfWeek:ICalWeekday.SU},start:moment()},cal);assert.ok(event.toString().includes(\"WKST\"),\"with WKST\")",
                  "err": {},
                  "uuid": "6f12d01a-02b4-47e2-ae81-6aa8e5b533fe",
                  "parentUUID": "c4ab3eef-6bc8-4d57-92ca-7a4897168f1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render allday events for luxon dates with timezone correct",
                  "fullTitle": "ical-generator Event toString() should render allday events for luxon dates with timezone correct",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const luxonStartDate=DateTime.fromISO(\"2024-03-17T00:00:00.000+01:00\",{setZone:true});const luxonEndDate=DateTime.fromISO(\"2024-03-18T00:00:00.000+01:00\",{setZone:true});const event=new ICalEvent({allDay:true,end:luxonEndDate,start:luxonStartDate},cal);const actual=event.toString();assert.match(actual,new RegExp(\"X-MICROSOFT-CDO-ALLDAYEVENT:TRUE\\r\\n\"),\"with Microsoft CDO alldayevent set\");assert.match(actual,new RegExp(\"X-MICROSOFT-MSNCALENDAR-ALLDAYEVENT:TRUE\\r\\n\"),\"with Microsoft MSNCalendar alldayevent flag set\");assert.match(actual,new RegExp(`DTSTART;VALUE=DATE:${luxonStartDate.toFormat(\"yyyyLLdd\")}\\r\n`),\"for DTSTART\");assert.match(actual,new RegExp(`DTEND;VALUE=DATE:${luxonEndDate.toFormat(\"yyyyLLdd\")}\\r\n`),\"for DTEND\")",
                  "err": {},
                  "uuid": "447fffc6-ce2b-496c-a824-9ce98f2eb27b",
                  "parentUUID": "c4ab3eef-6bc8-4d57-92ca-7a4897168f1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b82bee17-9f55-4ee7-9bc9-70118fa8f268",
                "2caeb185-c6a2-461c-bb65-96bee920cb95",
                "6f12d01a-02b4-47e2-ae81-6aa8e5b533fe",
                "447fffc6-ce2b-496c-a824-9ce98f2eb27b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "53c3fe86-6de9-41cf-8304-8cab78b4d27b",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6b2298f3-8fa8-4551-a91f-845cedc2d377",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(typeof ical,\"function\")",
                  "err": {},
                  "uuid": "4f9464d2-67a6-484c-a777-3a184ed66cb3",
                  "parentUUID": "6b2298f3-8fa8-4551-a91f-845cedc2d377",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ical()instanceof ICalCalendar)",
                  "err": {},
                  "uuid": "d7ffeaf8-2245-4b47-916f-d6d47bd243b2",
                  "parentUUID": "6b2298f3-8fa8-4551-a91f-845cedc2d377",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f9464d2-67a6-484c-a777-3a184ed66cb3",
                "d7ffeaf8-2245-4b47-916f-d6d47bd243b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36774d4e-f1d4-4ad3-a738-88ba5a7c4214",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarm)",
                  "err": {},
                  "uuid": "c8a5b517-6da9-4222-9ae7-0fe4118159bc",
                  "parentUUID": "36774d4e-f1d4-4ad3-a738-88ba5a7c4214",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarmType)",
                  "err": {},
                  "uuid": "29049b9a-18ac-4bf5-908a-6121bb87cbb3",
                  "parentUUID": "36774d4e-f1d4-4ad3-a738-88ba5a7c4214",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8a5b517-6da9-4222-9ae7-0fe4118159bc",
                "29049b9a-18ac-4bf5-908a-6121bb87cbb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bbecaa69-5523-42d9-ac05-13b669444330",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendee)",
                  "err": {},
                  "uuid": "49529f57-7aa3-4dda-a63b-8ff1f4c450e2",
                  "parentUUID": "bbecaa69-5523-42d9-ac05-13b669444330",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeType)",
                  "err": {},
                  "uuid": "bb0cf835-380a-452c-a24c-214561bcd265",
                  "parentUUID": "bbecaa69-5523-42d9-ac05-13b669444330",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeRole)",
                  "err": {},
                  "uuid": "759b559f-971d-4422-85b4-d9f193f16dbc",
                  "parentUUID": "bbecaa69-5523-42d9-ac05-13b669444330",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeStatus)",
                  "err": {},
                  "uuid": "0c503109-65d5-4ce1-afa0-5064561da5f4",
                  "parentUUID": "bbecaa69-5523-42d9-ac05-13b669444330",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "49529f57-7aa3-4dda-a63b-8ff1f4c450e2",
                "bb0cf835-380a-452c-a24c-214561bcd265",
                "759b559f-971d-4422-85b4-d9f193f16dbc",
                "0c503109-65d5-4ce1-afa0-5064561da5f4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "834ed703-27ff-4827-b46a-77baefd98429",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendar)",
                  "err": {},
                  "uuid": "b5fb26c8-0581-4882-ba7d-ffe1e4b94115",
                  "parentUUID": "834ed703-27ff-4827-b46a-77baefd98429",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendarMethod)",
                  "err": {},
                  "uuid": "670e8acf-331d-472f-ada1-ab1b1f0ba43e",
                  "parentUUID": "834ed703-27ff-4827-b46a-77baefd98429",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5fb26c8-0581-4882-ba7d-ffe1e4b94115",
                "670e8acf-331d-472f-ada1-ab1b1f0ba43e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c583ceed-94bb-4d94-8453-37efebfaf98b",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCategory)",
                  "err": {},
                  "uuid": "8e885b58-47b4-4d6d-a1d4-b573a8fbc0b7",
                  "parentUUID": "c583ceed-94bb-4d94-8453-37efebfaf98b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e885b58-47b4-4d6d-a1d4-b573a8fbc0b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9e27e12-63d5-416e-868a-1a2e47f9659e",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEvent)",
                  "err": {},
                  "uuid": "94f85b53-cea1-46b0-a7d5-f4bb459663c6",
                  "parentUUID": "a9e27e12-63d5-416e-868a-1a2e47f9659e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventStatus)",
                  "err": {},
                  "uuid": "4a109ca8-e21a-4a9b-b2aa-7865e9b67da6",
                  "parentUUID": "a9e27e12-63d5-416e-868a-1a2e47f9659e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventBusyStatus)",
                  "err": {},
                  "uuid": "d912c10b-10c3-462e-9838-efb0041af9c5",
                  "parentUUID": "a9e27e12-63d5-416e-868a-1a2e47f9659e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventTransparency)",
                  "err": {},
                  "uuid": "48fe0b18-b384-43a9-a140-d6e8f09a5720",
                  "parentUUID": "a9e27e12-63d5-416e-868a-1a2e47f9659e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "94f85b53-cea1-46b0-a7d5-f4bb459663c6",
                "4a109ca8-e21a-4a9b-b2aa-7865e9b67da6",
                "d912c10b-10c3-462e-9838-efb0041af9c5",
                "48fe0b18-b384-43a9-a140-d6e8f09a5720"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8431779a-2d4c-44ff-9dc8-06c6f1912eee",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventRepeatingFreq)",
                  "err": {},
                  "uuid": "47eff803-ed29-41be-8d5e-f99f379121f8",
                  "parentUUID": "8431779a-2d4c-44ff-9dc8-06c6f1912eee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalWeekday)",
                  "err": {},
                  "uuid": "b1ca1781-1039-455d-8719-0bb17e17f4b6",
                  "parentUUID": "8431779a-2d4c-44ff-9dc8-06c6f1912eee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "47eff803-ed29-41be-8d5e-f99f379121f8",
                "b1ca1781-1039-455d-8719-0bb17e17f4b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dbc00907-9a70-4d4a-8ed8-e2864d546a67",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDate===\"function\")",
                  "err": {},
                  "uuid": "d23b1cc9-60ce-4921-b550-99110276e50d",
                  "parentUUID": "dbc00907-9a70-4d4a-8ed8-e2864d546a67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDateTZ===\"function\")",
                  "err": {},
                  "uuid": "42f64405-e97b-4d12-a791-c830b0759401",
                  "parentUUID": "dbc00907-9a70-4d4a-8ed8-e2864d546a67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof escape===\"function\")",
                  "err": {},
                  "uuid": "e9995d6b-7aec-4ea6-8f5b-4b0e4e905dc7",
                  "parentUUID": "dbc00907-9a70-4d4a-8ed8-e2864d546a67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof foldLines===\"function\")",
                  "err": {},
                  "uuid": "6ac21b5d-694b-4dd5-a8f7-3a17e014e6dc",
                  "parentUUID": "dbc00907-9a70-4d4a-8ed8-e2864d546a67",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d23b1cc9-60ce-4921-b550-99110276e50d",
                "42f64405-e97b-4d12-a791-c830b0759401",
                "e9995d6b-7aec-4ea6-8f5b-4b0e4e905dc7",
                "6ac21b5d-694b-4dd5-a8f7-3a17e014e6dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8c017b38-9aa3-42d0-bd36-47bf67613fbe",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9f3ddb25-7dd0-4ef7-8e5f-cefe0ded2d27",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,start:moment(\"2016-04-30T22:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Europe/Berlin\"});const str=calendar.toString();assert.ok(str.indexOf(\"DTSTART;VALUE=DATE:20160501\")>-1)",
                  "err": {},
                  "uuid": "34150697-7536-4db2-b168-2d01597e9477",
                  "parentUUID": "9f3ddb25-7dd0-4ef7-8e5f-cefe0ded2d27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,start:moment(\"2016-05-01T03:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Brazil/East\"});const str=calendar.toString();assert.ok(str.indexOf(\"DTSTART;VALUE=DATE:20160501\")>-1)",
                  "err": {},
                  "uuid": "5a318def-22aa-44f0-ab15-cc68bb338e16",
                  "parentUUID": "9f3ddb25-7dd0-4ef7-8e5f-cefe0ded2d27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34150697-7536-4db2-b168-2d01597e9477",
                "5a318def-22aa-44f0-ab15-cc68bb338e16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de3198aa-c15a-466b-90b0-5cf73cc712a7",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,end:moment(\"2016-05-01T00:00:00.000Z\"),repeating:{byDay:[ICalWeekday.SU],bySetPos:3,count:3,freq:ICalEventRepeatingFreq.MONTHLY,interval:1},start:moment(\"2016-04-30T22:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\"});const str=calendar.toString();assert.ok(str.indexOf(\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3\")>-1)",
                  "err": {},
                  "uuid": "d80f6e2c-1924-4052-a8e8-a88abf59b985",
                  "parentUUID": "de3198aa-c15a-466b-90b0-5cf73cc712a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking all elements of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking all elements of the byDay array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,end:moment(\"2016-05-01T00:00:00.000Z\"),repeating:{byDay:[ICalWeekday.MO,ICalWeekday.FR],bySetPos:3,count:3,freq:ICalEventRepeatingFreq.MONTHLY,interval:1},start:moment(\"2016-04-30T22:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\"});const str=calendar.toString();assert.ok(str.indexOf(\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO,FR;BYSETPOS=3\")>-1)",
                  "err": {},
                  "uuid": "039724ac-a289-4b08-ac45-23151bd0cb2b",
                  "parentUUID": "de3198aa-c15a-466b-90b0-5cf73cc712a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d80f6e2c-1924-4052-a8e8-a88abf59b985",
                "039724ac-a289-4b08-ac45-23151bd0cb2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37314631-8b28-4660-a4dc-49fe8b818f07",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{end:moment(1553219772e3),recurrenceId:moment(1553219772e3),start:moment(1553219772e3),timezone:\"America/La_Paz\"}],timezone:\"America/Buenos_Aires\"});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "b7008336-a625-4e3e-9ca6-4cfc62af47b2",
                  "parentUUID": "37314631-8b28-4660-a4dc-49fe8b818f07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{end:moment(1553219772e3),recurrenceId:moment(1553219772e3),start:moment(1553219772e3),timezone:\"America/La_Paz\"}],timezone:\"America/Buenos_Aires\"});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "77ee58e8-999d-4f8a-b6c8-fe3f002714d1",
                  "parentUUID": "37314631-8b28-4660-a4dc-49fe8b818f07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{end:moment(1553219772e3),recurrenceId:moment(1553219772e3),start:moment(1553219772e3),timezone:\"America/La_Paz\"}],timezone:\"America/Buenos_Aires\"});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "0f1b637d-6c71-4aeb-8c66-f955d12c5cc0",
                  "parentUUID": "37314631-8b28-4660-a4dc-49fe8b818f07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7008336-a625-4e3e-9ca6-4cfc62af47b2",
                "77ee58e8-999d-4f8a-b6c8-fe3f002714d1",
                "0f1b637d-6c71-4aeb-8c66-f955d12c5cc0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a99728c-fe36-431e-a09d-200ad6946002",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{repeating:{count:12,exclude:moment(\"2020-12-13T00:00:00+01:00\"),freq:ICalEventRepeatingFreq.MONTHLY},start:moment(\"2020-08-13T00:00:00+01:00\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Europe/Berlin\"});const str=calendar.toString();assert.ok(str.indexOf(\"EXDATE;TZID=Europe/Berlin:20201213T000000\")>-1)",
                  "err": {},
                  "uuid": "f2688b65-b09e-4971-a09b-09430b18d8c9",
                  "parentUUID": "4a99728c-fe36-431e-a09d-200ad6946002",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{repeating:{count:12,exclude:moment(\"2020-12-13T00:00:00-05:00\"),freq:ICalEventRepeatingFreq.MONTHLY},start:moment(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"America/New_York\"});const str=calendar.toString();assert.ok(str.indexOf(\"EXDATE;TZID=America/New_York:20201213T000000\")>-1)",
                  "err": {},
                  "uuid": "1a9740dc-297f-44dd-8d92-0370354bc926",
                  "parentUUID": "4a99728c-fe36-431e-a09d-200ad6946002",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2688b65-b09e-4971-a09b-09430b18d8c9",
                "1a9740dc-297f-44dd-8d92-0370354bc926"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7e080ad-4218-4124-a523-3a46f3e0759d",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",location:{geo:{lat:34.05223,lon:-118.24368},radius:400,title:\"Los Angeles, California, United States\"},stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"SUMMARY:Example Event\",\"LOCATION:Los Angeles\\\\, California\\\\, United States\",\"X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel\",\" es\\\\, California\\\\, United States:geo:34.05223,-118.24368\",\"GEO:34.05223;-118.24368\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "eea4e2c2-96a4-4d47-aa3c-8711ec7e4f15",
                  "parentUUID": "b7e080ad-4218-4124-a523-3a46f3e0759d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eea4e2c2-96a4-4d47-aa3c-8711ec7e4f15"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e68bca81-d5ab-43f6-8527-b417c4ef5650",
              "title": "Issue #377",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not escape quotes in summary",
                  "fullTitle": "Issues Issue #377 should not escape quotes in summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:'My \"quoted\" string'}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",'SUMMARY:My \"quoted\" string',\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "7c2517cf-d0e2-4be4-bd7c-1147052206b7",
                  "parentUUID": "e68bca81-d5ab-43f6-8527-b417c4ef5650",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c2517cf-d0e2-4be4-bd7c-1147052206b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad82c423-91b1-46d9-998c-22ba9b113e4a",
              "title": "Issue #442",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate floating repeat until value if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat until value if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3f0b207e-d682-4218-9e7b-8f260e6bd15d",
                  "parentUUID": "ad82c423-91b1-46d9-998c-22ba9b113e4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate floating repeat exclusion dates if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat exclusion dates if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "cb5a4f0c-96bf-4198-8c6c-c900181d584e",
                  "parentUUID": "ad82c423-91b1-46d9-998c-22ba9b113e4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "3f0b207e-d682-4218-9e7b-8f260e6bd15d",
                "cb5a4f0c-96bf-4198-8c6c-c900181d584e"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a5139879-5b35-466d-98db-cb305d80aca0",
              "title": "Issue #459",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.repeating should work with `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work with `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",repeating:\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",\"SUMMARY:Example Event\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "483f0ce5-125d-48b4-9cf3-79486d4b3be9",
                  "parentUUID": "a5139879-5b35-466d-98db-cb305d80aca0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "event.repeating should work without `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work without `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",repeating:\"FREQ=MONTHLY;COUNT=3;INTERVAL=1\",stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",\"SUMMARY:Example Event\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "48702fab-f409-47f5-bdcd-300d0eb91adf",
                  "parentUUID": "a5139879-5b35-466d-98db-cb305d80aca0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "483f0ce5-125d-48b4-9cf3-79486d4b3be9",
                "48702fab-f409-47f5-bdcd-300d0eb91adf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "21188869-b215-4de5-af84-2d7eec0e80ed",
              "title": "Issue #569 / 570",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.location should work with `geo` only",
                  "fullTitle": "Issues Issue #569 / 570 event.location should work with `geo` only",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=ical().createEvent({end:new Date(\"2020-06-15T01:00:00Z\"),id:\"12345\",stamp:new Date(\"2020-06-15T00:00:00Z\"),start:new Date(\"2020-06-15T00:00:00Z\"),summary:\"Hello\"});event.location({geo:{lat:52.51147570081018,lon:13.342200696373846}});assert.strictEqual(event.toString(),[\"BEGIN:VEVENT\",\"UID:12345\",\"SEQUENCE:0\",\"DTSTAMP:20200615T000000Z\",\"DTSTART:20200615T000000Z\",\"DTEND:20200615T010000Z\",\"SUMMARY:Hello\",\"GEO:52.51147570081018;13.342200696373846\",\"END:VEVENT\",\"\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "e465ae1e-f1e2-43be-a83e-f78549361a6f",
                  "parentUUID": "21188869-b215-4de5-af84-2d7eec0e80ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e465ae1e-f1e2-43be-a83e-f78549361a6f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "59cd33d7-a674-44a9-a630-06253ac74745",
              "title": "Issue #581",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.start and event.end should be swappable",
                  "fullTitle": "Issues Issue #581 event.start and event.end should be swappable",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical();const event=calendar.createEvent({end:\"2024-02-29T17:20:00.000Z\",start:\"2024-02-29T17:00:00.000Z\",summary:\"Test Event\"});event.start(\"2024-02-29T19:00:00.000Z\");event.end(\"2024-02-29T19:20:00.000Z\");const start=event.start();assert.ok(typeof start===\"string\");assert.strictEqual(start,\"2024-02-29T19:00:00.000Z\");const end=event.end();assert.ok(typeof end===\"string\");assert.strictEqual(end,\"2024-02-29T19:20:00.000Z\")",
                  "err": {},
                  "uuid": "6681238d-d463-4fdb-b2ef-8220712c7912",
                  "parentUUID": "59cd33d7-a674-44a9-a630-06253ac74745",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6681238d-d463-4fdb-b2ef-8220712c7912"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8d98c6a9-7e18-4381-a2c0-20a5043f636f",
              "title": "Issue #618",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should also produce an error",
                  "fullTitle": "Issues Issue #618 should also produce an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(()=>{const calendar=ical();calendar.createEvent({location:{address:null,geo:{lat:null,lon:null},title:\"Empty Venue\"},start:new Date,summary:\"Test Event\"})},/`location` isn't formatted correctly/)",
                  "err": {},
                  "uuid": "c36a17df-a79b-452a-a993-b9e0b46c9d6a",
                  "parentUUID": "8d98c6a9-7e18-4381-a2c0-20a5043f636f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c36a17df-a79b-452a-a993-b9e0b46c9d6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "87d3c3da-7132-485c-af39-cfe43ba1766a",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "739ff481-7b02-45ac-b9ca-1ec5862ed33f",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "c8537bb1-1aaa-424d-ab8e-26e4d707c637",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "18a74cac-bc95-4122-bcfb-472b615438e8",
                      "parentUUID": "c8537bb1-1aaa-424d-ab8e-26e4d707c637",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "7b3f0d03-df21-4c87-bf91-73320ae2de21",
                      "parentUUID": "c8537bb1-1aaa-424d-ab8e-26e4d707c637",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",true,false),\"20180705\")",
                      "err": {},
                      "uuid": "6c1660b1-3789-4653-8e26-b91f6cf8c282",
                      "parentUUID": "c8537bb1-1aaa-424d-ab8e-26e4d707c637",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",true,true),\"20180705\")",
                      "err": {},
                      "uuid": "1814568f-8b22-45b2-b71d-a6a42c3325b3",
                      "parentUUID": "c8537bb1-1aaa-424d-ab8e-26e4d707c637",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "478daa00-f910-4272-9e60-34311b4e03de",
                      "parentUUID": "c8537bb1-1aaa-424d-ab8e-26e4d707c637",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "b84af050-c672-48e9-943e-0902150419ca",
                      "parentUUID": "c8537bb1-1aaa-424d-ab8e-26e4d707c637",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",true,false),\"20180705\")",
                      "err": {},
                      "uuid": "c6a0383e-3c6d-4ed6-91a6-21dbf95f70a0",
                      "parentUUID": "c8537bb1-1aaa-424d-ab8e-26e4d707c637",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",true,true),\"20180705\")",
                      "err": {},
                      "uuid": "0418b9d4-737a-46f8-a426-1f34c7c94a64",
                      "parentUUID": "c8537bb1-1aaa-424d-ab8e-26e4d707c637",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with / prefixed global timezones",
                      "fullTitle": "ICalTools formatDate() Date / String should work with / prefixed global timezones",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"/Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "aea3c9ce-42b7-457f-a0f8-ffa14a993474",
                      "parentUUID": "c8537bb1-1aaa-424d-ab8e-26e4d707c637",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "18a74cac-bc95-4122-bcfb-472b615438e8",
                    "7b3f0d03-df21-4c87-bf91-73320ae2de21",
                    "6c1660b1-3789-4653-8e26-b91f6cf8c282",
                    "1814568f-8b22-45b2-b71d-a6a42c3325b3",
                    "478daa00-f910-4272-9e60-34311b4e03de",
                    "b84af050-c672-48e9-943e-0902150419ca",
                    "c6a0383e-3c6d-4ed6-91a6-21dbf95f70a0",
                    "0418b9d4-737a-46f8-a426-1f34c7c94a64",
                    "aea3c9ce-42b7-457f-a0f8-ffa14a993474"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                  "title": "TZDate",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,new TZDate(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "b0df6b33-3fd0-4a30-8dfe-1f2ace193217",
                      "parentUUID": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,new TZDate(\"2018-07-05T18:24:00.052Z\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "5973e3e2-556f-4dc4-98e1-28893a034b42",
                      "parentUUID": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,new TZDate(\"2018-07-05T18:24:00.052Z\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "9f03b0cf-c579-4032-9781-b93dabd20eae",
                      "parentUUID": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,new TZDate(\"2018-07-05T18:24:00.052Z\"),true,true),\"20180705\")",
                      "err": {},
                      "uuid": "b57a39b7-e3c7-4a93-b407-01d58ccbabc1",
                      "parentUUID": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T202400\")",
                      "err": {},
                      "uuid": "89bbed9c-9e0d-434c-a127-9654e5dec4ef",
                      "parentUUID": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052Z\"),false,true),\"20180705T202400\")",
                      "err": {},
                      "uuid": "b2c959bb-d476-45ab-aefd-c680f3e8ac3c",
                      "parentUUID": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052Z\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "b4129a12-3e03-41a7-843b-3021a5879188",
                      "parentUUID": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052\"),true,true),\"20180705\")",
                      "err": {},
                      "uuid": "9ab44a5a-3faa-47d0-bc7b-4ea28db103e9",
                      "parentUUID": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with / prefixed global timezones",
                      "fullTitle": "ICalTools formatDate() TZDate should work with / prefixed global timezones",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"/Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T202400\")",
                      "err": {},
                      "uuid": "60c2402a-b157-4be9-8be3-e294a06cc01b",
                      "parentUUID": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should ignore TZDate timezone",
                      "fullTitle": "ICalTools formatDate() TZDate should ignore TZDate timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,new TZDate(\"2018-07-05T18:24:00.052+02:00\",\"Europe/Berlin\"),false,false),\"20180705T162400Z\")",
                      "err": {},
                      "uuid": "a84aac6c-820c-478a-9f5d-a3725c794a89",
                      "parentUUID": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work prefer timezone argument over TZDate timezone",
                      "fullTitle": "ICalTools formatDate() TZDate should work prefer timezone argument over TZDate timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052+02:00\",\"Asia/Tokyo\"),false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "c3af424c-21fa-4491-96ad-e0247b75ac42",
                      "parentUUID": "445f10ae-21f9-4cec-b34a-ff6497b56a7a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b0df6b33-3fd0-4a30-8dfe-1f2ace193217",
                    "5973e3e2-556f-4dc4-98e1-28893a034b42",
                    "9f03b0cf-c579-4032-9781-b93dabd20eae",
                    "b57a39b7-e3c7-4a93-b407-01d58ccbabc1",
                    "89bbed9c-9e0d-434c-a127-9654e5dec4ef",
                    "b2c959bb-d476-45ab-aefd-c680f3e8ac3c",
                    "b4129a12-3e03-41a7-843b-3021a5879188",
                    "9ab44a5a-3faa-47d0-bc7b-4ea28db103e9",
                    "60c2402a-b157-4be9-8be3-e294a06cc01b",
                    "a84aac6c-820c-478a-9f5d-a3725c794a89",
                    "c3af424c-21fa-4491-96ad-e0247b75ac42"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "9694f88e-c249-4a32-b76f-575b9fa704e7",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,moment(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "aad20d6f-ddb1-4dd0-82a5-02fe6ccb90ec",
                      "parentUUID": "9694f88e-c249-4a32-b76f-575b9fa704e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",moment(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "cdbedb45-eab2-4b43-a455-948d9e3b7b69",
                      "parentUUID": "9694f88e-c249-4a32-b76f-575b9fa704e7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,moment(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "d01a7376-a5d6-406b-b84d-08158b9a28f7",
                      "parentUUID": "9694f88e-c249-4a32-b76f-575b9fa704e7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "aad20d6f-ddb1-4dd0-82a5-02fe6ccb90ec",
                    "cdbedb45-eab2-4b43-a455-948d9e3b7b69",
                    "d01a7376-a5d6-406b-b84d-08158b9a28f7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fe167c44-fe2c-4fcc-8120-9e3b7e381d18",
                  "title": "moment-timezone.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,momentTz(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "7c415ad7-2503-4e19-a9a5-85a8ace4394f",
                      "parentUUID": "fe167c44-fe2c-4fcc-8120-9e3b7e381d18",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",momentTz(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "967d1204-94d6-4a5b-8453-9519c530a3af",
                      "parentUUID": "fe167c44-fe2c-4fcc-8120-9e3b7e381d18",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,momentTz(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "6a5804dc-a58b-4dfa-8736-b72526b31b2a",
                      "parentUUID": "fe167c44-fe2c-4fcc-8120-9e3b7e381d18",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7c415ad7-2503-4e19-a9a5-85a8ace4394f",
                    "967d1204-94d6-4a5b-8453-9519c530a3af",
                    "6a5804dc-a58b-4dfa-8736-b72526b31b2a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "dc0171b1-5d6b-4a6d-ac08-3818c39e1b49",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "e9ceb810-4e20-4d46-8d01-f2a56b6ef0c2",
                      "parentUUID": "dc0171b1-5d6b-4a6d-ac08-3818c39e1b49",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",DateTime.fromISO(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "e9dc97a4-9ce0-48fd-b116-65b2b6b7a731",
                      "parentUUID": "dc0171b1-5d6b-4a6d-ac08-3818c39e1b49",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "e7b09cd4-8a20-46d9-8ae6-b882f883c596",
                      "parentUUID": "dc0171b1-5d6b-4a6d-ac08-3818c39e1b49",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "0b0d4a24-29d3-436b-9f1c-ace0d4eb0d7c",
                      "parentUUID": "dc0171b1-5d6b-4a6d-ac08-3818c39e1b49",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag, non floating, and date with timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag, non floating, and date with timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2024-03-17T00:00:00.000+01:00\",{setZone:true}),true),\"20240317\")",
                      "err": {},
                      "uuid": "8e9f3a94-3c6d-449b-9c8f-57f77820a6dd",
                      "parentUUID": "dc0171b1-5d6b-4a6d-ac08-3818c39e1b49",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e9ceb810-4e20-4d46-8d01-f2a56b6ef0c2",
                    "e9dc97a4-9ce0-48fd-b116-65b2b6b7a731",
                    "e7b09cd4-8a20-46d9-8ae6-b882f883c596",
                    "0b0d4a24-29d3-436b-9f1c-ace0d4eb0d7c",
                    "8e9f3a94-3c6d-449b-9c8f-57f77820a6dd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "78ac845a-fa01-4bdf-ae50-0126b7a1be8f",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "5f42387c-483c-47e8-8e47-a8b805072836",
                      "parentUUID": "78ac845a-fa01-4bdf-ae50-0126b7a1be8f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",dayjs(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "ec37aad6-6335-4bdb-8da6-14147bf9f139",
                      "parentUUID": "78ac845a-fa01-4bdf-ae50-0126b7a1be8f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "4c24c9c4-23c6-4b3e-8e4d-dfe887800ab9",
                      "parentUUID": "78ac845a-fa01-4bdf-ae50-0126b7a1be8f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "ebc759d3-457b-487c-af75-ec56c7d6d632",
                      "parentUUID": "78ac845a-fa01-4bdf-ae50-0126b7a1be8f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5f42387c-483c-47e8-8e47-a8b805072836",
                    "ec37aad6-6335-4bdb-8da6-14147bf9f139",
                    "4c24c9c4-23c6-4b3e-8e4d-dfe887800ab9",
                    "ebc759d3-457b-487c-af75-ec56c7d6d632"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ce4de573-faac-487d-b94d-f71c77a3b28e",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed={timezone:\"Europe/Berlin\"};assert.strictEqual(formatDateTZ(\"Europe/Berlin\",\"DSTART\",moment(\"2018-07-02T15:48:05.000Z\"),ed),\"DSTART;TZID=Europe/Berlin:20180702T174805\")",
                  "err": {},
                  "uuid": "27a38e15-a32e-4ee7-a6ff-26d81118a821",
                  "parentUUID": "ce4de573-faac-487d-b94d-f71c77a3b28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null,\"DSTART\",\"2018-07-02T15:48:05.000Z\",{}),\"DSTART:20180702T154805Z\")",
                  "err": {},
                  "uuid": "6697ed6d-ad02-4b09-94f8-5f57cf6ac51f",
                  "parentUUID": "ce4de573-faac-487d-b94d-f71c77a3b28e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null,\"DSTART\",\"2018-07-02T15:48:05.000Z\"),\"DSTART:20180702T154805Z\")",
                  "err": {},
                  "uuid": "7a4a6691-6bc3-468c-a2e1-8574c23d9c63",
                  "parentUUID": "ce4de573-faac-487d-b94d-f71c77a3b28e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27a38e15-a32e-4ee7-a6ff-26d81118a821",
                "6697ed6d-ad02-4b09-94f8-5f57cf6ac51f",
                "7a4a6691-6bc3-468c-a2e1-8574c23d9c63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "669a6d2c-9173-4723-9972-cb22bfbf7949",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\\\ipsum\",false),\"Lorem \\\\\\\\ipsum\")",
                  "err": {},
                  "uuid": "f4d546f1-ee7b-4eca-b0e0-8ed5e85101a2",
                  "parentUUID": "669a6d2c-9173-4723-9972-cb22bfbf7949",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem ;ipsum\",false),\"Lorem \\\\;ipsum\")",
                  "err": {},
                  "uuid": "94ef13ac-b230-41f4-90ed-c95c26700318",
                  "parentUUID": "669a6d2c-9173-4723-9972-cb22bfbf7949",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem, ipsum\",false),\"Lorem\\\\, ipsum\")",
                  "err": {},
                  "uuid": "c0167ba4-32fe-4226-8b22-ccdc96c0391c",
                  "parentUUID": "669a6d2c-9173-4723-9972-cb22bfbf7949",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\ripsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "30089bbe-90d5-4dab-9687-85b00a4bb510",
                  "parentUUID": "669a6d2c-9173-4723-9972-cb22bfbf7949",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\nipsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "d67f5d49-ba60-4f6e-ba08-a82234432f86",
                  "parentUUID": "669a6d2c-9173-4723-9972-cb22bfbf7949",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\r\\nipsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "6b467b5f-0158-45c3-be6e-5222341db800",
                  "parentUUID": "669a6d2c-9173-4723-9972-cb22bfbf7949",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \" in text when inQuotes = true",
                  "fullTitle": "ICalTools escape() should escape \" in text when inQuotes = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum',true),'Lorem \\\\\"ipsum')",
                  "err": {},
                  "uuid": "1149cd0f-3c45-4d08-9878-87b13b454858",
                  "parentUUID": "669a6d2c-9173-4723-9972-cb22bfbf7949",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not escape \" in text when inQuotes = false",
                  "fullTitle": "ICalTools escape() should not escape \" in text when inQuotes = false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum',false),'Lorem \"ipsum')",
                  "err": {},
                  "uuid": "876cf4e4-7f26-4c56-b8a6-2983d043f1cc",
                  "parentUUID": "669a6d2c-9173-4723-9972-cb22bfbf7949",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4d546f1-ee7b-4eca-b0e0-8ed5e85101a2",
                "94ef13ac-b230-41f4-90ed-c95c26700318",
                "c0167ba4-32fe-4226-8b22-ccdc96c0391c",
                "30089bbe-90d5-4dab-9687-85b00a4bb510",
                "d67f5d49-ba60-4f6e-ba08-a82234432f86",
                "6b467b5f-0158-45c3-be6e-5222341db800",
                "1149cd0f-3c45-4d08-9878-87b13b454858",
                "876cf4e4-7f26-4c56-b8a6-2983d043f1cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e8a475d5-08b1-40c6-8543-5be63fcae9fd",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines(\"12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981\"),\"12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981\")",
                  "err": {},
                  "uuid": "ba90a078-1652-4121-938c-b23f479282ad",
                  "parentUUID": "e8a475d5-08b1-40c6-8543-5be63fcae9fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines(\"\\u{1F44B}\\u{1F3FC}12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981\"),\"\\u{1F44B}\\u{1F3FC}12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981\")",
                  "err": {},
                  "uuid": "0061ebc7-3764-44a0-9c85-41a98501ed67",
                  "parentUUID": "e8a475d5-08b1-40c6-8543-5be63fcae9fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba90a078-1652-4121-938c-b23f479282ad",
                "0061ebc7-3764-44a0-9c85-41a98501ed67"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2748557b-3956-4a15-beba-3c3f9115030b",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "e2d2ab34-2349-4c40-ba07-f502daa6244f",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=new Date;assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "8faf9254-7aa4-4be5-8de4-cd95ffd0f42f",
                      "parentUUID": "e2d2ab34-2349-4c40-ba07-f502daa6244f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=new Date(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "49333a35-a3be-4de1-8beb-23eab03d17e5",
                      "parentUUID": "e2d2ab34-2349-4c40-ba07-f502daa6244f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8faf9254-7aa4-4be5-8de4-cd95ffd0f42f",
                    "49333a35-a3be-4de1-8beb-23eab03d17e5"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "350ffce3-6c59-4320-96e1-0a99396cd5dd",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=\"2021-03-28T13:15:23.587Z\";assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "0b4182e0-d2e6-4d61-8c23-2ec1dc770171",
                      "parentUUID": "350ffce3-6c59-4320-96e1-0a99396cd5dd",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=\"foo\";assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "c0722301-b69c-44ac-958b-b57c8c93e42f",
                      "parentUUID": "350ffce3-6c59-4320-96e1-0a99396cd5dd",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0b4182e0-d2e6-4d61-8c23-2ec1dc770171",
                    "c0722301-b69c-44ac-958b-b57c8c93e42f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "6388a422-5df8-4217-9963-ee61bbd1d761",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=DateTime.now();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "95f1e75e-91ed-4859-a0f4-a4546167b415",
                      "parentUUID": "6388a422-5df8-4217-9963-ee61bbd1d761",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=DateTime.fromISO(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "349a62b2-33c4-4348-a4ec-e7fc3c2fdb90",
                      "parentUUID": "6388a422-5df8-4217-9963-ee61bbd1d761",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "95f1e75e-91ed-4859-a0f4-a4546167b415",
                    "349a62b2-33c4-4348-a4ec-e7fc3c2fdb90"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "27cea75b-68ce-4ab4-b309-5b4d28fc6b6a",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=moment();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "057d063f-d28a-4155-9e40-cbb42bea9339",
                      "parentUUID": "27cea75b-68ce-4ab4-b309-5b4d28fc6b6a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=moment(\"foo\",\"MM/DD/YYYY\",true);assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "ed0b6475-f4a2-4c70-873b-b5421e0cd7b0",
                      "parentUUID": "27cea75b-68ce-4ab4-b309-5b4d28fc6b6a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "057d063f-d28a-4155-9e40-cbb42bea9339",
                    "ed0b6475-f4a2-4c70-873b-b5421e0cd7b0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8be2518a-c581-4fe5-947b-c1c13f927c6e",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=dayjs();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "97f0c0f2-63b8-49fd-ac39-cbed17d9fbdd",
                      "parentUUID": "8be2518a-c581-4fe5-947b-c1c13f927c6e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=dayjs(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "b5cdd05a-4179-4c00-960a-59a6206de4ae",
                      "parentUUID": "8be2518a-c581-4fe5-947b-c1c13f927c6e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "97f0c0f2-63b8-49fd-ac39-cbed17d9fbdd",
                    "b5cdd05a-4179-4c00-960a-59a6206de4ae"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "688dd72e-5df9-47be-9932-c64166750017",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(date.toJSON()),date)",
                  "err": {},
                  "uuid": "5f3bc4d6-1c25-46d3-9281-4aee440c5b47",
                  "parentUUID": "688dd72e-5df9-47be-9932-c64166750017",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(date),date)",
                  "err": {},
                  "uuid": "cbbf0139-f3a5-400a-961f-1afc97a083f2",
                  "parentUUID": "688dd72e-5df9-47be-9932-c64166750017",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(moment(date)),date)",
                  "err": {},
                  "uuid": "a2206a10-6e02-49a3-bf5a-fa7208b8072c",
                  "parentUUID": "688dd72e-5df9-47be-9932-c64166750017",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment-timezone object",
                  "fullTitle": "ICalTools toDate() should work with moment-timezone object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(momentTz(date)),date)",
                  "err": {},
                  "uuid": "b0b534fd-ee9a-42ef-a039-fe45e0dc1259",
                  "parentUUID": "688dd72e-5df9-47be-9932-c64166750017",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(dayjs(date)),date)",
                  "err": {},
                  "uuid": "e92b25a8-b664-47b3-ad76-a3951cd8d467",
                  "parentUUID": "688dd72e-5df9-47be-9932-c64166750017",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(DateTime.fromJSDate(date)),date)",
                  "err": {},
                  "uuid": "6054fe25-7e79-4378-8af2-c0b21325cc14",
                  "parentUUID": "688dd72e-5df9-47be-9932-c64166750017",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f3bc4d6-1c25-46d3-9281-4aee440c5b47",
                "cbbf0139-f3a5-400a-961f-1afc97a083f2",
                "a2206a10-6e02-49a3-bf5a-fa7208b8072c",
                "b0b534fd-ee9a-42ef-a039-fe45e0dc1259",
                "e92b25a8-b664-47b3-ad76-a3951cd8d467",
                "6054fe25-7e79-4378-8af2-c0b21325cc14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8de5962e-1c63-4a3e-a54d-af1cf3311aae",
              "title": "toDurationString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ICalTools toDurationString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(toDurationString(0),\"PT0S\");assert.strictEqual(toDurationString(1),\"PT1S\");assert.strictEqual(toDurationString(60),\"PT1M\");assert.strictEqual(toDurationString(3600),\"PT1H\");assert.strictEqual(toDurationString(86400),\"P1D\");assert.strictEqual(toDurationString(-3600),\"-PT1H\")",
                  "err": {},
                  "uuid": "17b59039-68be-4ec1-83a3-72777f35098f",
                  "parentUUID": "8de5962e-1c63-4a3e-a54d-af1cf3311aae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17b59039-68be-4ec1-83a3-72777f35098f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b7fc5e75-b5c5-4ba1-bab1-b7f9842972cf",
          "title": "ical-generator Types",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/types.ts",
          "file": "/test/types.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stubs should be compatible with third party libraries",
              "fullTitle": "ical-generator Types stubs should be compatible with third party libraries",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(dayJsTest,\"day.js stub should be compatible\");assert.ok(luxonTest,\"luxon stub should be compatible\");assert.ok(momentTest,\"moment stub should be compatible\");assert.ok(momentTimezoneTest,\"moment-timezone stub should be compatible\");assert.ok(rruleTest,\"rrule stub should be compatible\");assert.ok(dateFnsTzTest,\"date-fns/tz stub should be compatible\")",
              "err": {},
              "uuid": "c60796ac-ed3c-4879-95ec-ee5ae02fec7f",
              "parentUUID": "b7fc5e75-b5c5-4ba1-bab1-b7f9842972cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calendar data should be compatible with calendar json data",
              "fullTitle": "ical-generator Types calendar data should be compatible with calendar json data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(attendeeJson,\"attendee json data should be compatible\");assert.ok(calendarJson,\"calendar json data should be compatible\");assert.ok(categoryJson,\"category json data should be compatible\");assert.ok(eventJson,\"event json data should be compatible\")",
              "err": {},
              "uuid": "1c78aaa1-d17a-44c8-a86b-53c717a65671",
              "parentUUID": "b7fc5e75-b5c5-4ba1-bab1-b7f9842972cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c60796ac-ed3c-4879-95ec-ee5ae02fec7f",
            "1c78aaa1-d17a-44c8-a86b-53c717a65671"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}