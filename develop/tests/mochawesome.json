{
  "stats": {
    "suites": 131,
    "tests": 447,
    "passes": 445,
    "pending": 2,
    "failures": 0,
    "start": "2024-11-19T20:31:33.315Z",
    "end": "2024-11-19T20:31:33.474Z",
    "duration": 159,
    "testsRegistered": 447,
    "passPercent": 100,
    "pendingPercent": 0.44742729306487694,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b958dc0c-08b2-444a-b60c-a16febf4084e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "83318904-b79e-45c9-ad17-fb17a15499f6",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "22b5bbcb-14d6-41b9-abde-525be5b1e502",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({type:ICalAlarmType.display},null)},/`event`/)",
                  "err": {},
                  "uuid": "dfe54ba6-9046-4777-a893-ad20e631cf71",
                  "parentUUID": "22b5bbcb-14d6-41b9-abde-525be5b1e502",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({unknown:true,type:ICalAlarmType.display},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),\"display\")",
                  "err": {},
                  "uuid": "dfb02177-7bb7-4629-968e-29f3f22c547c",
                  "parentUUID": "22b5bbcb-14d6-41b9-abde-525be5b1e502",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dfe54ba6-9046-4777-a893-ad20e631cf71",
                "dfb02177-7bb7-4629-968e-29f3f22c547c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "68e56ada-faf2-49c3-b0b3-7c4e3cf1f541",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.type(ICalAlarmType.display))",
                  "err": {},
                  "uuid": "e953c858-037e-4033-bfc7-782ea7e1be5f",
                  "parentUUID": "68e56ada-faf2-49c3-b0b3-7c4e3cf1f541",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),\"display\");a.type(ICalAlarmType.audio);assert.strictEqual(a.type(),\"audio\")",
                  "err": {},
                  "uuid": "9e47f168-ebda-403b-90a9-dafb3a7fd073",
                  "parentUUID": "68e56ada-faf2-49c3-b0b3-7c4e3cf1f541",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.type(\"BANANA\")},/`type`/);assert.throws(function(){a.type(null)},/`type`/)",
                  "err": {},
                  "uuid": "0b656657-a6d6-4287-9a46-05a37bee150e",
                  "parentUUID": "68e56ada-faf2-49c3-b0b3-7c4e3cf1f541",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"ACTION:DISPLAY\")>-1)",
                  "err": {},
                  "uuid": "fe57417e-f482-48ce-a885-6d542dbec5b7",
                  "parentUUID": "68e56ada-faf2-49c3-b0b3-7c4e3cf1f541",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e953c858-037e-4033-bfc7-782ea7e1be5f",
                "9e47f168-ebda-403b-90a9-dafb3a7fd073",
                "0b656657-a6d6-4287-9a46-05a37bee150e",
                "fe57417e-f482-48ce-a885-6d542dbec5b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d915a8d-9e29-4419-a193-d8ededdfc244",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.trigger(60*10))",
                  "err": {},
                  "uuid": "d555a642-7e59-4b21-8641-65c7677fbc9d",
                  "parentUUID": "4d915a8d-9e29-4419-a193-d8ededdfc244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;assert.strictEqual(a.trigger(),600);assert.strictEqual(a.triggerAfter(),-600);a.trigger(300);assert.strictEqual(a.trigger(),300);assert.strictEqual(a.triggerAfter(),-300);a.trigger(now);const dateResult=a.trigger();assert.deepStrictEqual(dateResult,now)",
                  "err": {},
                  "uuid": "daf49e1b-4013-4725-8d10-a2fe3e4edb12",
                  "parentUUID": "4d915a8d-9e29-4419-a193-d8ededdfc244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.trigger(Infinity)},/`trigger`/);assert.throws(function(){a.trigger(\"hi\")},/`trigger`/);assert.throws(function(){a.trigger(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "344a2481-c4a8-4c57-8d9a-187a18b071d2",
                  "parentUUID": "4d915a8d-9e29-4419-a193-d8ededdfc244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(new Date);assert.ok(a.trigger()instanceof Date)",
                  "err": {},
                  "uuid": "fbbe3925-2f9d-4666-a4ee-0afc2612d4c8",
                  "parentUUID": "4d915a8d-9e29-4419-a193-d8ededdfc244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(moment());assert.ok(moment.isMoment(a.trigger()))",
                  "err": {},
                  "uuid": "81336ae7-ff9d-4a31-8bbf-070de4fa62bb",
                  "parentUUID": "4d915a8d-9e29-4419-a193-d8ededdfc244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(2*60);assert.strictEqual(a.trigger(),120)",
                  "err": {},
                  "uuid": "c3e65da3-4af0-4819-aef7-ba3416965656",
                  "parentUUID": "4d915a8d-9e29-4419-a193-d8ededdfc244",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"2015-02-01T13:38:45.000Z\");const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"TRIGGER:-PT10M\"));a.trigger(trigger);assert.ok(a.toString().includes(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\"))",
                  "err": {},
                  "uuid": "cde3eae1-6a6a-4327-9720-31171366263f",
                  "parentUUID": "4d915a8d-9e29-4419-a193-d8ededdfc244",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d555a642-7e59-4b21-8641-65c7677fbc9d",
                "daf49e1b-4013-4725-8d10-a2fe3e4edb12",
                "344a2481-c4a8-4c57-8d9a-187a18b071d2",
                "fbbe3925-2f9d-4666-a4ee-0afc2612d4c8",
                "81336ae7-ff9d-4a31-8bbf-070de4fa62bb",
                "c3e65da3-4af0-4819-aef7-ba3416965656",
                "cde3eae1-6a6a-4327-9720-31171366263f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2c9ca74-272d-488a-965b-4aef6a0a99f2",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.triggerAfter(60*10))",
                  "err": {},
                  "uuid": "6bf1e82b-3f6c-4cc5-9e4c-93680a703ad1",
                  "parentUUID": "a2c9ca74-272d-488a-965b-4aef6a0a99f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar)).triggerAfter(300);assert.strictEqual(a.triggerAfter(),300);assert.strictEqual(a.trigger(),-300)",
                  "err": {},
                  "uuid": "0e75f453-e4f6-447d-97a2-dbd514dc4ebb",
                  "parentUUID": "a2c9ca74-272d-488a-965b-4aef6a0a99f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.triggerAfter(120);assert.strictEqual(a.trigger(),-120)",
                  "err": {},
                  "uuid": "34c78b50-3981-49bc-9dd1-939047425fc1",
                  "parentUUID": "a2c9ca74-272d-488a-965b-4aef6a0a99f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.triggerAfter(Infinity)},/`trigger`/);assert.throws(function(){a.triggerAfter(\"hi\")},/`trigger`/);assert.throws(function(){a.triggerAfter(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "00495565-b330-47ca-b0da-793be61cf0ea",
                  "parentUUID": "a2c9ca74-272d-488a-965b-4aef6a0a99f2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"20150201T133845Z\");const a=new ICalAlarm({triggerAfter:600},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"TRIGGER;RELATED=END:PT10M\")>-1);a.triggerAfter(trigger);assert.ok(a.toString().indexOf(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\")>-1)",
                  "err": {},
                  "uuid": "65acaf87-1bf6-49d2-8b74-ec1baf4d0867",
                  "parentUUID": "a2c9ca74-272d-488a-965b-4aef6a0a99f2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6bf1e82b-3f6c-4cc5-9e4c-93680a703ad1",
                "0e75f453-e4f6-447d-97a2-dbd514dc4ebb",
                "34c78b50-3981-49bc-9dd1-939047425fc1",
                "00495565-b330-47ca-b0da-793be61cf0ea",
                "65acaf87-1bf6-49d2-8b74-ec1baf4d0867"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "77069ace-0569-4484-9f49-58dbde365911",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.triggerBefore(60*10))",
                  "err": {},
                  "uuid": "5171e059-9cd9-409e-a683-a12a80b432a0",
                  "parentUUID": "77069ace-0569-4484-9f49-58dbde365911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;assert.strictEqual(a.triggerBefore(),600);a.trigger(300);assert.strictEqual(a.triggerBefore(),300);a.trigger(now);const dateResult=a.triggerBefore();assert.deepStrictEqual(dateResult,now)",
                  "err": {},
                  "uuid": "581df793-5e52-4bb4-9cdd-730782013969",
                  "parentUUID": "77069ace-0569-4484-9f49-58dbde365911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.triggerBefore(Infinity)},/`trigger`/);assert.throws(function(){a.triggerBefore(\"hi\")},/`trigger`/);assert.throws(function(){a.triggerBefore(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "c2a07882-6ed5-4ef0-8812-559e7799f002",
                  "parentUUID": "77069ace-0569-4484-9f49-58dbde365911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;a.triggerBefore(now);assert.deepStrictEqual(a.trigger(),now)",
                  "err": {},
                  "uuid": "5e3db835-c917-4f62-8224-21f98bbee4a7",
                  "parentUUID": "77069ace-0569-4484-9f49-58dbde365911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({triggerBefore:moment()},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(moment.isMoment(a.trigger()))",
                  "err": {},
                  "uuid": "00352953-5b06-4075-8575-ae71db9b0162",
                  "parentUUID": "77069ace-0569-4484-9f49-58dbde365911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.triggerBefore(2*60);assert.strictEqual(a.trigger(),120)",
                  "err": {},
                  "uuid": "3a66b937-00bb-48f8-9ea5-40b1e035501a",
                  "parentUUID": "77069ace-0569-4484-9f49-58dbde365911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"2015-02-01T13:38:45.000Z\");const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"TRIGGER:-PT10M\")>-1);a.triggerBefore(trigger);assert.ok(a.toString().indexOf(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\")>-1)",
                  "err": {},
                  "uuid": "ec46b66b-b528-42e7-94a5-3122b2aa7734",
                  "parentUUID": "77069ace-0569-4484-9f49-58dbde365911",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5171e059-9cd9-409e-a683-a12a80b432a0",
                "581df793-5e52-4bb4-9cdd-730782013969",
                "c2a07882-6ed5-4ef0-8812-559e7799f002",
                "5e3db835-c917-4f62-8224-21f98bbee4a7",
                "00352953-5b06-4075-8575-ae71db9b0162",
                "3a66b937-00bb-48f8-9ea5-40b1e035501a",
                "ec46b66b-b528-42e7-94a5-3122b2aa7734"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da65dfcd-5852-41a4-b657-fe6259d96548",
              "title": "relatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm relatesTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.relatesTo(null));assert.deepStrictEqual(a,a.relatesTo(ICalAlarmRelatesTo.end))",
                  "err": {},
                  "uuid": "669cb4ad-1868-4fbf-9aab-224ef3c97b02",
                  "parentUUID": "da65dfcd-5852-41a4-b657-fe6259d96548",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm relatesTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.relatesTo(ICalAlarmRelatesTo.end);assert.strictEqual(a.relatesTo(),ICalAlarmRelatesTo.end);a.relatesTo(null);assert.strictEqual(a.relatesTo(),null)",
                  "err": {},
                  "uuid": "951714e1-3d04-4a38-a549-b8dbe87a7ada",
                  "parentUUID": "da65dfcd-5852-41a4-b657-fe6259d96548",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw if value is not `null`, \"START\" or \"END\"",
                  "fullTitle": "ical-generator Alarm relatesTo() should throw if value is not `null`, \"START\" or \"END\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.relatesTo(\"hi\")},/`relatesTo`/);assert.throws(function(){a.relatesTo(true)},/`relatesTo`/);assert.throws(function(){a.relatesTo(Infinity)},/`relatesTo`/)",
                  "err": {},
                  "uuid": "e17f0e5b-0eb3-4c2a-9c14-b7c1f252bcfb",
                  "parentUUID": "da65dfcd-5852-41a4-b657-fe6259d96548",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change RELATED",
                  "fullTitle": "ical-generator Alarm relatesTo() should change RELATED",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"RELATED=START\")===-1);a.relatesTo(ICalAlarmRelatesTo.start);assert.ok(a.toString().indexOf(\"RELATED=START\")>-1);a.relatesTo(ICalAlarmRelatesTo.end);assert.ok(a.toString().indexOf(\"RELATED=END\")>-1)",
                  "err": {},
                  "uuid": "112d0f61-61d2-411a-b593-9602c21fb4e9",
                  "parentUUID": "da65dfcd-5852-41a4-b657-fe6259d96548",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "669cb4ad-1868-4fbf-9aab-224ef3c97b02",
                "951714e1-3d04-4a38-a549-b8dbe87a7ada",
                "e17f0e5b-0eb3-4c2a-9c14-b7c1f252bcfb",
                "112d0f61-61d2-411a-b593-9602c21fb4e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1555f33-d967-40cc-a2ed-1198ff26f4ee",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.repeat({times:4,interval:60}))",
                  "err": {},
                  "uuid": "446733ab-d0a3-4947-95b6-dc32989ace80",
                  "parentUUID": "a1555f33-d967-40cc-a2ed-1198ff26f4ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.repeat(),null);a.repeat({times:4,interval:60});assert.deepStrictEqual(a.repeat(),{times:4,interval:60})",
                  "err": {},
                  "uuid": "54b2bd39-5e08-42fe-be37-ed005970ab80",
                  "parentUUID": "a1555f33-d967-40cc-a2ed-1198ff26f4ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.repeat({times:Infinity,interval:60})},/`repeat.times`/);assert.throws(function(){a.repeat({times:\"hi\",interval:60})},/`repeat.times`/);assert.throws(function(){a.repeat({times:true,interval:60})},/`repeat.times`/);assert.throws(function(){a.repeat({times:4,interval:Infinity})},/`repeat.interval`/);assert.throws(function(){a.repeat({times:4,interval:\"hi\"})},/`repeat.interval`/);assert.throws(function(){a.repeat({times:4,interval:true})},/`repeat.interval`/)",
                  "err": {},
                  "uuid": "a8b21f52-dd47-4ccd-8b73-184318cfac16",
                  "parentUUID": "a1555f33-d967-40cc-a2ed-1198ff26f4ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({trigger:300,repeat:{times:42,interval:90}},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"REPEAT:42\"));assert.ok(a.toString().includes(\"DURATION:PT1M30S\"));a.repeat(null);assert.ok(!a.toString().includes(\"REPEAT:42\"));assert.ok(!a.toString().includes(\"DURATION:PT1M30S\"))",
                  "err": {},
                  "uuid": "921806e5-078d-4e9e-9349-a0ecf26f9cda",
                  "parentUUID": "a1555f33-d967-40cc-a2ed-1198ff26f4ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({trigger:300,repeat:{times:4,interval:null}},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat.interval`/)",
                  "err": {},
                  "uuid": "83d02508-4ded-4e98-bed4-d46c55e1dae6",
                  "parentUUID": "a1555f33-d967-40cc-a2ed-1198ff26f4ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({trigger:300,repeat:{times:null,interval:60}},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat.times`/)",
                  "err": {},
                  "uuid": "8bc65036-95f3-42c9-92c1-0772464bc170",
                  "parentUUID": "a1555f33-d967-40cc-a2ed-1198ff26f4ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is of wrong type",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is of wrong type",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({trigger:300,repeat:true},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat` is not correct, must be an object!/)",
                  "err": {},
                  "uuid": "5e0776bc-4b6f-4e9d-983d-a7696f55d8c8",
                  "parentUUID": "a1555f33-d967-40cc-a2ed-1198ff26f4ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "446733ab-d0a3-4947-95b6-dc32989ace80",
                "54b2bd39-5e08-42fe-be37-ed005970ab80",
                "a8b21f52-dd47-4ccd-8b73-184318cfac16",
                "921806e5-078d-4e9e-9349-a0ecf26f9cda",
                "83d02508-4ded-4e98-bed4-d46c55e1dae6",
                "8bc65036-95f3-42c9-92c1-0772464bc170",
                "5e0776bc-4b6f-4e9d-983d-a7696f55d8c8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27d46c1a-1949-41ab-a094-cf39ae8b7ba2",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.attach(null));assert.deepStrictEqual(a,a.attach(\"https://sebbo.net/beep.aud\"))",
                  "err": {},
                  "uuid": "c7420c02-1662-4aad-b1bb-91a7b1f2b1c8",
                  "parentUUID": "27d46c1a-1949-41ab-a094-cf39ae8b7ba2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t={uri:\"https://example.com/alarm.aud\",mime:\"audio/basic\"};const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.attach(),null);a.attach(t);assert.deepStrictEqual(a.attach(),t);a.attach(\"https://www.example.com/beep.aud\");assert.deepStrictEqual(a.attach(),{uri:\"https://www.example.com/beep.aud\",mime:null});a.attach({uri:\"https://www.example.com/beep.aud\"});assert.deepStrictEqual(a.attach(),{uri:\"https://www.example.com/beep.aud\",mime:null});a.attach(null);assert.strictEqual(a.attach(),null)",
                  "err": {},
                  "uuid": "4a827928-c133-489f-8171-7698dc410161",
                  "parentUUID": "27d46c1a-1949-41ab-a094-cf39ae8b7ba2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.attach({mime:\"audio/basic\"})},/`attach.uri`/)",
                  "err": {},
                  "uuid": "55b290f2-48f3-4a49-b45c-69133e0b01d5",
                  "parentUUID": "27d46c1a-1949-41ab-a094-cf39ae8b7ba2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.attach(Infinity)},/`attachment`/)",
                  "err": {},
                  "uuid": "8517c5de-b39f-4138-8336-90c5d8c21b49",
                  "parentUUID": "27d46c1a-1949-41ab-a094-cf39ae8b7ba2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.audio},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nATTACH;VALUE=URI:Basso\")>-1);a.attach(\"https://example.com/beep.aud\");assert.ok(a.toString().indexOf(\"\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud\")>-1);a.attach({uri:\"https://example.com/beep.aud\",mime:\"audio/basic\"});assert.ok(a.toString().indexOf(\"\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud\")>-1)",
                  "err": {},
                  "uuid": "fd0354a9-9dff-45af-b8a8-2324920ae7d9",
                  "parentUUID": "27d46c1a-1949-41ab-a094-cf39ae8b7ba2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7420c02-1662-4aad-b1bb-91a7b1f2b1c8",
                "4a827928-c133-489f-8171-7698dc410161",
                "55b290f2-48f3-4a49-b45c-69133e0b01d5",
                "8517c5de-b39f-4138-8336-90c5d8c21b49",
                "fd0354a9-9dff-45af-b8a8-2324920ae7d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7d7bf0ee-f6a5-4e44-9818-ccadf6ad9fa7",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.description(null));assert.deepStrictEqual(a,a.description(\"Hey Ho!\"))",
                  "err": {},
                  "uuid": "843f5be5-0fd1-46ec-aee4-446dc9496ced",
                  "parentUUID": "7d7bf0ee-f6a5-4e44-9818-ccadf6ad9fa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.description(),null);a.description(\"blablabla\");assert.deepStrictEqual(a.description(),\"blablabla\");a.description(null);assert.deepStrictEqual(a.description(),null)",
                  "err": {},
                  "uuid": "961ed7d8-765e-418a-818f-5aad7d96e50e",
                  "parentUUID": "7d7bf0ee-f6a5-4e44-9818-ccadf6ad9fa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({description:\"Huibuh!\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nDESCRIPTION:Huibuh\")>-1)",
                  "err": {},
                  "uuid": "02a695a1-dba5-47c9-b40d-62dd97fbe22a",
                  "parentUUID": "7d7bf0ee-f6a5-4e44-9818-ccadf6ad9fa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({description:\"Example Event\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nDESCRIPTION:Example Event\")>-1)",
                  "err": {},
                  "uuid": "65025686-cd53-46c7-a28a-7ec80acd236e",
                  "parentUUID": "7d7bf0ee-f6a5-4e44-9818-ccadf6ad9fa7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "843f5be5-0fd1-46ec-aee4-446dc9496ced",
                "961ed7d8-765e-418a-818f-5aad7d96e50e",
                "02a695a1-dba5-47c9-b40d-62dd97fbe22a",
                "65025686-cd53-46c7-a28a-7ec80acd236e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b58784e1-a237-457a-91eb-78de57aa02ff",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.summary(null));assert.deepStrictEqual(a,a.summary(\"Hey Ho!\"))",
                  "err": {},
                  "uuid": "dbf0dd0f-2866-4580-bf0e-6666f7ee0e97",
                  "parentUUID": "b58784e1-a237-457a-91eb-78de57aa02ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.summary(),null);a.summary(\"blablabla\");assert.deepStrictEqual(a.summary(),\"blablabla\");a.summary(null);assert.deepStrictEqual(a.summary(),null)",
                  "err": {},
                  "uuid": "4adb6d21-15d1-4b7d-9ed2-0c8ea6e4d54f",
                  "parentUUID": "b58784e1-a237-457a-91eb-78de57aa02ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm summary() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.email,summary:\"Huibuh!\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nSUMMARY:Huibuh\")>-1)",
                  "err": {},
                  "uuid": "d59066ed-c909-43af-b0be-14f6e17a31ea",
                  "parentUUID": "b58784e1-a237-457a-91eb-78de57aa02ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm summary() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.email},new ICalEvent({start:new Date,summary:\"Example Event\"},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nSUMMARY:Example Event\")>-1)",
                  "err": {},
                  "uuid": "f2bdd36e-c42b-4b0c-a70b-076f82deba83",
                  "parentUUID": "b58784e1-a237-457a-91eb-78de57aa02ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbf0dd0f-2866-4580-bf0e-6666f7ee0e97",
                "4adb6d21-15d1-4b7d-9ed2-0c8ea6e4d54f",
                "d59066ed-c909-43af-b0be-14f6e17a31ea",
                "f2bdd36e-c42b-4b0c-a70b-076f82deba83"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "caab30c1-cd6b-4806-a4f5-40e6c5c26fe3",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Alarm createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=new ICalAttendee({email:\"mail@example.com\"},alarm);assert.strictEqual(alarm.createAttendee(attendee),attendee,\"createAttendee returns attendee\");assert.deepStrictEqual(alarm.attendees()[0],attendee,\"attendee pushed\")",
                  "err": {},
                  "uuid": "750a202a-f262-4a58-bb85-3561cfbd2d6a",
                  "parentUUID": "caab30c1-cd6b-4806-a4f5-40e6c5c26fe3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Alarm createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});;assert.ok(alarm.createAttendee({email:\"mail@example.com\"})instanceof ICalAttendee);assert.strictEqual(alarm.attendees.length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "5503914b-a013-497e-86ce-90be387359e8",
                  "parentUUID": "caab30c1-cd6b-4806-a4f5-40e6c5c26fe3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});;const attendee=alarm.createAttendee(\"Zac <zac@example.com>\");assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(alarm.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "2323e785-26ec-42d5-9541-ac0349a6e410",
                  "parentUUID": "caab30c1-cd6b-4806-a4f5-40e6c5c26fe3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Alarm createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});;assert.throws(function(){alarm.createAttendee(\"foo bar\")},/isn't formated correctly/)",
                  "err": {},
                  "uuid": "0174d599-c5d4-4333-99b7-8c203356b4b6",
                  "parentUUID": "caab30c1-cd6b-4806-a4f5-40e6c5c26fe3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=alarm.createAttendee({name:\"Zac\",email:\"zac@example.com\"});assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(alarm.attendees().length,1,\"attendee pushed\");assert.ok(alarm.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;CN=\"Zac\":MAILTO:zac@example.com'))",
                  "err": {},
                  "uuid": "e89c6d7b-d617-448a-85d3-f4bc649beae7",
                  "parentUUID": "caab30c1-cd6b-4806-a4f5-40e6c5c26fe3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "750a202a-f262-4a58-bb85-3561cfbd2d6a",
                "5503914b-a013-497e-86ce-90be387359e8",
                "2323e785-26ec-42d5-9541-ac0349a6e410",
                "0174d599-c5d4-4333-99b7-8c203356b4b6",
                "e89c6d7b-d617-448a-85d3-f4bc649beae7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1de264d6-4a59-482f-a1ea-e645db1ff1e7",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Alarm attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});assert.strictEqual(alarm.attendees().length,0);const attendee=alarm.createAttendee({email:\"mail@example.com\"});assert.strictEqual(alarm.attendees().length,1);assert.deepStrictEqual(alarm.attendees()[0],attendee)",
                  "err": {},
                  "uuid": "2fff51ae-24d8-4b43-aaad-8fa30cd1165b",
                  "parentUUID": "1de264d6-4a59-482f-a1ea-e645db1ff1e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Alarm attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const foo=alarm.attendees([{name:\"Person A\",email:\"a@example.com\"},{name:\"Person B\",email:\"b@example.com\"}]);assert.strictEqual(alarm.attendees().length,2);assert.deepStrictEqual(foo,alarm)",
                  "err": {},
                  "uuid": "36efe97a-51c5-46e3-a540-052530a72a0b",
                  "parentUUID": "1de264d6-4a59-482f-a1ea-e645db1ff1e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fff51ae-24d8-4b43-aaad-8fa30cd1165b",
                "36efe97a-51c5-46e3-a540-052530a72a0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9c97825e-09ad-4794-b460-dc8625e32503",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "78b7cc0c-86c5-4fa9-b6c8-fb27a2d5e387",
                  "parentUUID": "9c97825e-09ad-4794-b460-dc8625e32503",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78b7cc0c-86c5-4fa9-b6c8-fb27a2d5e387"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4fc9d8e5-d150-4c9b-bc08-fae11a5497a9",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.type(ICalAlarmType.display);a.trigger(120);assert.deepStrictEqual(a.toJSON(),{attach:null,attendees:[],description:null,relatesTo:null,interval:null,repeat:null,summary:null,trigger:120,type:\"display\",x:[]})",
                  "err": {},
                  "uuid": "e8192f75-4163-466b-9bce-54e6554163df",
                  "parentUUID": "4fc9d8e5-d150-4c9b-bc08-fae11a5497a9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));new ICalAlarm(a.toJSON(),new ICalEvent({start:new Date},new ICalCalendar))",
                  "err": {},
                  "uuid": "25f2a020-eec6-47fa-a3d8-e9a1caa933e8",
                  "parentUUID": "4fc9d8e5-d150-4c9b-bc08-fae11a5497a9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8192f75-4163-466b-9bce-54e6554163df",
                "25f2a020-eec6-47fa-a3d8-e9a1caa933e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2b829a10-89dd-44e5-8087-247de6841ec4",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1d961d20-e8e7-4922-a8ad-4e49a239870f",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={name:\"John Doe\",email:\"john@example.org\",mailto:\"john+calendar@example.org\",sentBy:null,status:ICalAttendeeStatus.ACCEPTED,role:ICalAttendeeRole.REQ,rsvp:false,type:ICalAttendeeType.INDIVIDUAL,delegatedTo:null,delegatedFrom:null,x:[]};const event=new ICalAttendee(data,new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(event.toJSON(),data)",
                  "err": {},
                  "uuid": "0dcd751d-48f2-436e-832d-d08858c00ceb",
                  "parentUUID": "1d961d20-e8e7-4922-a8ad-4e49a239870f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAttendee({email:\"foo@bar.com\"})},/`event`/)",
                  "err": {},
                  "uuid": "b29b645b-1e7b-4be7-9136-53cb73041774",
                  "parentUUID": "1d961d20-e8e7-4922-a8ad-4e49a239870f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee constructor() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAttendee({name:\"Testuser\"},new ICalEvent({start:new Date},new ICalCalendar))},/`email`/)",
                  "err": {},
                  "uuid": "78829244-8355-4671-b903-eb10adf2acc7",
                  "parentUUID": "1d961d20-e8e7-4922-a8ad-4e49a239870f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0dcd751d-48f2-436e-832d-d08858c00ceb",
                "b29b645b-1e7b-4be7-9136-53cb73041774",
                "78829244-8355-4671-b903-eb10adf2acc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7f6ef61-614a-4e61-a1b1-1b95dc681fc5",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.name(),null);a.name(\"Sebastian\");assert.strictEqual(a.name(),\"Sebastian\")",
                  "err": {},
                  "uuid": "5a63a7b1-ed32-459e-85ff-f4f52f886e06",
                  "parentUUID": "b7f6ef61-614a-4e61-a1b1-1b95dc681fc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.name(null));assert.deepStrictEqual(a,a.name(\"Sebastian\"))",
                  "err": {},
                  "uuid": "653a5b2a-b2bc-4cfb-be9a-05f36aeece27",
                  "parentUUID": "b7f6ef61-614a-4e61-a1b1-1b95dc681fc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.name(\"Sebastian\");assert.strictEqual(a.name(),\"Sebastian\");a.name(null);assert.strictEqual(a.name(),null)",
                  "err": {},
                  "uuid": "14039b1b-a15a-4332-a1dd-ed41fe607ddb",
                  "parentUUID": "b7f6ef61-614a-4e61-a1b1-1b95dc681fc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5a63a7b1-ed32-459e-85ff-f4f52f886e06",
                "653a5b2a-b2bc-4cfb-be9a-05f36aeece27",
                "14039b1b-a15a-4332-a1dd-ed41fe607ddb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "211b9c4c-23d8-4cd5-bc25-c6af19ba3a61",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).email(\"foo@example.com\");assert.strictEqual(a.email(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "a21aabbb-f4dd-4bfd-8ad8-88158a367a7d",
                  "parentUUID": "211b9c4c-23d8-4cd5-bc25-c6af19ba3a61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.email(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "ad3ff8ce-55fa-4121-96b2-f3997011f22b",
                  "parentUUID": "211b9c4c-23d8-4cd5-bc25-c6af19ba3a61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"mail@example.com\")>-1)",
                  "err": {},
                  "uuid": "298efabc-3f8c-4886-8c84-0dc0b37dae2c",
                  "parentUUID": "211b9c4c-23d8-4cd5-bc25-c6af19ba3a61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a21aabbb-f4dd-4bfd-8ad8-88158a367a7d",
                "ad3ff8ce-55fa-4121-96b2-f3997011f22b",
                "298efabc-3f8c-4886-8c84-0dc0b37dae2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "defdea0f-72b9-4868-8ba4-082835358323",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.mailto(),null);a.mailto(\"foo@example.com\");assert.strictEqual(a.mailto(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "eb769bdd-cedc-4a96-a7e6-cef987141a1b",
                  "parentUUID": "defdea0f-72b9-4868-8ba4-082835358323",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.mailto(null));assert.deepStrictEqual(a,a.mailto(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "d0e288c9-9801-43c9-a6ca-1540742f4a7b",
                  "parentUUID": "defdea0f-72b9-4868-8ba4-082835358323",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.mailto(\"mail2@example2.com\");assert.ok(a.toString().indexOf(\"EMAIL=mail@example.com\")>-1&&a.toString().indexOf(\"MAILTO:mail2@example2.com\")>-1)",
                  "err": {},
                  "uuid": "0bc4b474-1416-40f3-b55e-2f8c021f01c2",
                  "parentUUID": "defdea0f-72b9-4868-8ba4-082835358323",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb769bdd-cedc-4a96-a7e6-cef987141a1b",
                "d0e288c9-9801-43c9-a6ca-1540742f4a7b",
                "0bc4b474-1416-40f3-b55e-2f8c021f01c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8380f79b-a490-4866-ba68-4bbfab678ec5",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).sentBy(\"foo@example.com\");assert.strictEqual(a.sentBy(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "c6795bab-747b-4e8c-8a11-fa230d708e7a",
                  "parentUUID": "8380f79b-a490-4866-ba68-4bbfab678ec5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.sentBy(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "52a78924-145c-4094-b86f-338a0baefb1a",
                  "parentUUID": "8380f79b-a490-4866-ba68-4bbfab678ec5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\",sentBy:\"bar@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"bar@example.com\"))",
                  "err": {},
                  "uuid": "c5659a1a-1606-4d81-9a55-849be3245393",
                  "parentUUID": "8380f79b-a490-4866-ba68-4bbfab678ec5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6795bab-747b-4e8c-8a11-fa230d708e7a",
                "52a78924-145c-4094-b86f-338a0baefb1a",
                "c5659a1a-1606-4d81-9a55-849be3245393"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aaff5f74-c57f-47f4-be1e-2144a6fa1dfe",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.role(ICalAttendeeRole.REQ))",
                  "err": {},
                  "uuid": "6e848b1b-efda-42d3-a186-3679525f82eb",
                  "parentUUID": "aaff5f74-c57f-47f4-be1e-2144a6fa1dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).role(ICalAttendeeRole.REQ);assert.strictEqual(a.role(),\"REQ-PARTICIPANT\")",
                  "err": {},
                  "uuid": "c952e063-2562-42bb-8ec1-7a1b0d1afdf4",
                  "parentUUID": "aaff5f74-c57f-47f4-be1e-2144a6fa1dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.role(\"\")},/Input must be one of the following: CHAIR, REQ-PARTICIPANT, OPT-PARTICIPANT, NON-PARTICIPANT/)",
                  "err": {},
                  "uuid": "07124a9e-2bae-4be4-835f-70887ef63a72",
                  "parentUUID": "aaff5f74-c57f-47f4-be1e-2144a6fa1dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.role(\"COOKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "ee58b947-7420-499f-89fc-6c85bd0192a7",
                  "parentUUID": "aaff5f74-c57f-47f4-be1e-2144a6fa1dfe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",role:ICalAttendeeRole.NON},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"NON-PARTICIPANT\")>-1)",
                  "err": {},
                  "uuid": "cc1ce137-564c-4706-aa5c-95eb497c9afd",
                  "parentUUID": "aaff5f74-c57f-47f4-be1e-2144a6fa1dfe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e848b1b-efda-42d3-a186-3679525f82eb",
                "c952e063-2562-42bb-8ec1-7a1b0d1afdf4",
                "07124a9e-2bae-4be4-835f-70887ef63a72",
                "ee58b947-7420-499f-89fc-6c85bd0192a7",
                "cc1ce137-564c-4706-aa5c-95eb497c9afd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5a69660e-5345-4bc4-ada5-3ac7ade8a382",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.rsvp(null));assert.deepStrictEqual(a,a.rsvp(true))",
                  "err": {},
                  "uuid": "7f1f3ded-574d-4e84-850e-4b08222af8ff",
                  "parentUUID": "5a69660e-5345-4bc4-ada5-3ac7ade8a382",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.rsvp(true);assert.strictEqual(a.rsvp(),true);a.rsvp(false);assert.strictEqual(a.rsvp(),false)",
                  "err": {},
                  "uuid": "20a8b025-5185-4b0f-8e8a-fa54a8d57539",
                  "parentUUID": "5a69660e-5345-4bc4-ada5-3ac7ade8a382",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.rsvp(),null);a.rsvp(false);assert.strictEqual(a.rsvp(),false);a.rsvp(null);assert.strictEqual(a.rsvp(),null)",
                  "err": {},
                  "uuid": "fdb71990-e752-4239-957d-387f6777f6fa",
                  "parentUUID": "5a69660e-5345-4bc4-ada5-3ac7ade8a382",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",rsvp:true},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\";RSVP=TRUE\")>-1)",
                  "err": {},
                  "uuid": "0b029f55-14e8-4d63-85e4-64af11c9e677",
                  "parentUUID": "5a69660e-5345-4bc4-ada5-3ac7ade8a382",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f1f3ded-574d-4e84-850e-4b08222af8ff",
                "20a8b025-5185-4b0f-8e8a-fa54a8d57539",
                "fdb71990-e752-4239-957d-387f6777f6fa",
                "0b029f55-14e8-4d63-85e4-64af11c9e677"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9da744b2-2f75-4485-915e-36520ee8cf4d",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.status(null));assert.deepStrictEqual(a,a.status(ICalAttendeeStatus.ACCEPTED))",
                  "err": {},
                  "uuid": "8d7d6ac2-3079-4e4a-ae27-a07d2f6018a8",
                  "parentUUID": "9da744b2-2f75-4485-915e-36520ee8cf4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.status(),null);a.status(ICalAttendeeStatus.ACCEPTED);assert.strictEqual(a.status(),\"ACCEPTED\");a.status(null);assert.strictEqual(a.status(),null)",
                  "err": {},
                  "uuid": "8ed2d19f-60aa-491e-9c16-7f16c4392def",
                  "parentUUID": "9da744b2-2f75-4485-915e-36520ee8cf4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.status(\"DRINKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "f2339a0b-4822-4e25-b462-e3bc1165de77",
                  "parentUUID": "9da744b2-2f75-4485-915e-36520ee8cf4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",status:ICalAttendeeStatus.DECLINED},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"DECLINED\")>-1)",
                  "err": {},
                  "uuid": "7976712b-89f0-4d84-ad98-8b2f15192291",
                  "parentUUID": "9da744b2-2f75-4485-915e-36520ee8cf4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",status:ICalAttendeeStatus.NEEDSACTION},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"NEEDS-ACTION\")>-1)",
                  "err": {},
                  "uuid": "8e489c04-2010-4eda-b877-3aa7bfe28f0d",
                  "parentUUID": "9da744b2-2f75-4485-915e-36520ee8cf4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d7d6ac2-3079-4e4a-ae27-a07d2f6018a8",
                "8ed2d19f-60aa-491e-9c16-7f16c4392def",
                "f2339a0b-4822-4e25-b462-e3bc1165de77",
                "7976712b-89f0-4d84-ad98-8b2f15192291",
                "8e489c04-2010-4eda-b877-3aa7bfe28f0d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e6522e20-b336-4d39-a1f7-b7e5610c3ab2",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.type(null),a);assert.deepStrictEqual(a.type(ICalAttendeeType.INDIVIDUAL),a)",
                  "err": {},
                  "uuid": "8ad74678-fba4-4672-9e23-d71185402de7",
                  "parentUUID": "e6522e20-b336-4d39-a1f7-b7e5610c3ab2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),null);a.type(ICalAttendeeType.ROOM);assert.strictEqual(a.type(),\"ROOM\");a.type(null);assert.strictEqual(a.type(),null)",
                  "err": {},
                  "uuid": "7f215fe9-3e85-430e-b0c0-5af039dcfe67",
                  "parentUUID": "e6522e20-b336-4d39-a1f7-b7e5610c3ab2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.type(\"DRINKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "0192453a-77d8-4a43-82ef-7b9e4c7d100f",
                  "parentUUID": "e6522e20-b336-4d39-a1f7-b7e5610c3ab2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mailing-list@example.com\",type:ICalAttendeeType.GROUP},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"GROUP\")>-1)",
                  "err": {},
                  "uuid": "f2a494c7-b667-4471-920e-de417cc2c895",
                  "parentUUID": "e6522e20-b336-4d39-a1f7-b7e5610c3ab2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ad74678-fba4-4672-9e23-d71185402de7",
                "7f215fe9-3e85-430e-b0c0-5af039dcfe67",
                "0192453a-77d8-4a43-82ef-7b9e4c7d100f",
                "f2a494c7-b667-4471-920e-de417cc2c895"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8502af48-f26a-441e-9e72-3260f990e498",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.delegatedTo(null));assert.deepStrictEqual(a,a.delegatedTo(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "cb7854bc-4f41-4f77-a970-862c79b23703",
                  "parentUUID": "8502af48-f26a-441e-9e72-3260f990e498",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.delegatedTo(),null);a.delegatedTo(\"foo@example.com\");const result=a.delegatedTo();assert.ok(result);assert.strictEqual(result.email(),\"foo@example.com\");a.delegatedTo(null);assert.strictEqual(a.delegatedTo(),null)",
                  "err": {},
                  "uuid": "28542fa5-cebc-4c9a-89d2-ae0423349f4e",
                  "parentUUID": "8502af48-f26a-441e-9e72-3260f990e498",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",delegatedTo:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"foo@example\")>-1)",
                  "err": {},
                  "uuid": "cbe06dfa-ea43-44cf-9b67-37b8db9adbef",
                  "parentUUID": "8502af48-f26a-441e-9e72-3260f990e498",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb7854bc-4f41-4f77-a970-862c79b23703",
                "28542fa5-cebc-4c9a-89d2-ae0423349f4e",
                "cbe06dfa-ea43-44cf-9b67-37b8db9adbef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "44121621-c188-4e97-b55b-237f1a6194fa",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.delegatedFrom(null));assert.deepStrictEqual(a,a.delegatedFrom(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "be0e1962-7dc4-494b-b5b8-6af814a324ff",
                  "parentUUID": "44121621-c188-4e97-b55b-237f1a6194fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.delegatedFrom(),null);a.delegatedFrom(\"foo@example.com\");let result=a.delegatedFrom();assert.ok(result);assert.strictEqual(result.email(),\"foo@example.com\");a.delegatedFrom({name:\"Max Mustermann\",email:\"max.mustermann@example.com\"});result=a.delegatedFrom();assert.ok(result);assert.strictEqual(result.name(),\"Max Mustermann\");assert.strictEqual(result.email(),\"max.mustermann@example.com\");a.delegatedFrom(null);assert.strictEqual(a.delegatedFrom(),null)",
                  "err": {},
                  "uuid": "0f12747e-0444-4047-9b34-bcf100487fab",
                  "parentUUID": "44121621-c188-4e97-b55b-237f1a6194fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",delegatedFrom:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"foo@example.com\")>-1)",
                  "err": {},
                  "uuid": "42532775-28c5-42ac-9401-88c19c4700ec",
                  "parentUUID": "44121621-c188-4e97-b55b-237f1a6194fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be0e1962-7dc4-494b-b5b8-6af814a324ff",
                "0f12747e-0444-4047-9b34-bcf100487fab",
                "42532775-28c5-42ac-9401-88c19c4700ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f9a450c3-1926-491e-a0d9-83c32cc0139d",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.delegatesTo({email:\"mail@example.com\"})instanceof ICalAttendee)",
                  "err": {},
                  "uuid": "75d6e8dc-c0f6-4542-bcf2-ddce7238d229",
                  "parentUUID": "f9a450c3-1926-491e-a0d9-83c32cc0139d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({name:\"Muh\",email:\"muh@example.com\"},event);assert.deepStrictEqual(new ICalAttendee({email:\"foo@example.com\"},event).delegatesTo(attendee),attendee)",
                  "err": {},
                  "uuid": "dd80be43-b664-4fe6-8a85-82b5f316a803",
                  "parentUUID": "f9a450c3-1926-491e-a0d9-83c32cc0139d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee=new ICalAttendee({name:\"Zac\",email:\"zac@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).delegatesTo({name:\"Cody\",email:\"cody@example.com\"});assert.strictEqual(attendee.name(),\"Cody\")",
                  "err": {},
                  "uuid": "6974f7c9-a14a-491b-8501-dbec246469de",
                  "parentUUID": "f9a450c3-1926-491e-a0d9-83c32cc0139d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75d6e8dc-c0f6-4542-bcf2-ddce7238d229",
                "dd80be43-b664-4fe6-8a85-82b5f316a803",
                "6974f7c9-a14a-491b-8501-dbec246469de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3388314-e9c4-419f-b95f-1110b62f0dab",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.delegatesFrom({email:\"bar@example.com\"})instanceof ICalAttendee)",
                  "err": {},
                  "uuid": "6667acf3-d98d-4cd2-8313-5ccae43743b1",
                  "parentUUID": "b3388314-e9c4-419f-b95f-1110b62f0dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({name:\"Muh\",email:\"muh@example.com\"},event);assert.deepStrictEqual(new ICalAttendee({email:\"bar@example.com\"},event).delegatesFrom(attendee),attendee)",
                  "err": {},
                  "uuid": "972700db-5e07-48a3-a453-2b0913a95936",
                  "parentUUID": "b3388314-e9c4-419f-b95f-1110b62f0dab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({name:\"Zac\",email:\"zac@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).delegatesFrom({name:\"Cody\",email:\"cody@example.com\"});assert.strictEqual(a.name(),\"Cody\");const b=new ICalAttendee({name:\"Zac\",email:\"zac@example.com\",delegatesFrom:{name:\"Cody\",email:\"cody@example.com\"}},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(b.name(),\"Zac\")",
                  "err": {},
                  "uuid": "c7131f38-b02f-472e-ac5d-48ed52d3b956",
                  "parentUUID": "b3388314-e9c4-419f-b95f-1110b62f0dab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6667acf3-d98d-4cd2-8313-5ccae43743b1",
                "972700db-5e07-48a3-a453-2b0913a95936",
                "c7131f38-b02f-472e-ac5d-48ed52d3b956"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6163e864-ddb5-4c89-9fab-0c98a87075d8",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.org\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.x(\"X-NUM-GUESTS\",\"5\"));assert.ok(a.toString().includes(\"ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org\"))",
                  "err": {},
                  "uuid": "278e5b1a-c453-4049-8be7-63e5fcde7592",
                  "parentUUID": "6163e864-ddb5-4c89-9fab-0c98a87075d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "278e5b1a-c453-4049-8be7-63e5fcde7592"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e8a7e82-30dd-4deb-8c1a-75721b7bf77f",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({name:\"Max Mustermann\",email:\"max@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.delegatesTo(\"Moritz <moritz@example.com>\");assert.deepStrictEqual(a.toJSON(),{delegatedFrom:null,delegatedTo:\"moritz@example.com\",email:\"max@example.com\",mailto:null,sentBy:null,name:\"Max Mustermann\",role:\"REQ-PARTICIPANT\",rsvp:null,status:\"DELEGATED\",type:null,x:[]})",
                  "err": {},
                  "uuid": "4c517dc4-704f-461d-8a4b-7a927b5d13eb",
                  "parentUUID": "0e8a7e82-30dd-4deb-8c1a-75721b7bf77f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));new ICalAttendee(a.toJSON(),new ICalEvent({start:new Date},new ICalCalendar))",
                  "err": {},
                  "uuid": "816b34c4-c0b2-4714-b5a5-961d935b2666",
                  "parentUUID": "0e8a7e82-30dd-4deb-8c1a-75721b7bf77f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c517dc4-704f-461d-8a4b-7a927b5d13eb",
                "816b34c4-c0b2-4714-b5a5-961d935b2666"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7bbf1a66-9276-483e-b61b-fae2477ed8c6",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6d39de77-1f4e-4b00-8713-416aad241f19",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={prodId:\"//sebbo.net//ical-generator//EN\",method:ICalCalendarMethod.PUBLISH,name:\"Test Calendar\",description:\"Hi, I am the description.\",timezone:null,url:\"https://github.com/sebbo2002/ical-generator\",source:\"http://example.com/my/original_source.ical\",scale:null,ttl:null,events:[],x:[]};const cal=new ICalCalendar(data);assert.deepStrictEqual(cal.toJSON(),data)",
                  "err": {},
                  "uuid": "8a6e6dd4-ae5b-447a-bc10-2a930112b574",
                  "parentUUID": "6d39de77-1f4e-4b00-8713-416aad241f19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a6e6dd4-ae5b-447a-bc10-2a930112b574"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1e588ae-2ee3-434f-b000-257a5c4782c7",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.prodId(\"//loremipsum.de//ical-tests//EN\");assert.strictEqual(cal.prodId(),\"//loremipsum.de//ical-tests//EN\")",
                  "err": {},
                  "uuid": "039418a9-be8e-4cab-a271-d9772fc149ec",
                  "parentUUID": "e1e588ae-2ee3-434f-b000-257a5c4782c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.prodId(\"//loremipsum.de//ical-tests//EN\"))",
                  "err": {},
                  "uuid": "54317f45-ebb5-46c1-912c-c0201b60fb56",
                  "parentUUID": "e1e588ae-2ee3-434f-b000-257a5c4782c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId(256)},/`prodid`/)",
                  "err": {},
                  "uuid": "ecf8cc2b-e89c-4476-88b4-46fa9f30e001",
                  "parentUUID": "e1e588ae-2ee3-434f-b000-257a5c4782c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId({product:\"ical-tests\"})},/`prodid\\.company`/)",
                  "err": {},
                  "uuid": "8606a453-0cbd-444b-bc96-dc703375449a",
                  "parentUUID": "e1e588ae-2ee3-434f-b000-257a5c4782c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId({company:\"sebbo.net\"})},/`prodid\\.product`/)",
                  "err": {},
                  "uuid": "ec827a5e-eba8-437d-9653-bf40a293f2f3",
                  "parentUUID": "e1e588ae-2ee3-434f-b000-257a5c4782c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().prodId({company:\"loremipsum.com\",product:\"awesome-unit-tests\"});assert.strictEqual(cal.prodId(),\"//loremipsum.com//awesome-unit-tests//EN\")",
                  "err": {},
                  "uuid": "cf0bb656-ea80-4e52-8862-b9a4fc4f9822",
                  "parentUUID": "e1e588ae-2ee3-434f-b000-257a5c4782c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().prodId({company:\"loremipsum.com\",product:\"awesome-unit-tests\",language:\"DE\"});assert.strictEqual(cal.prodId(),\"//loremipsum.com//awesome-unit-tests//DE\")",
                  "err": {},
                  "uuid": "8c078202-7330-442c-a963-14c56cc291c1",
                  "parentUUID": "e1e588ae-2ee3-434f-b000-257a5c4782c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "039418a9-be8e-4cab-a271-d9772fc149ec",
                "54317f45-ebb5-46c1-912c-c0201b60fb56",
                "ecf8cc2b-e89c-4476-88b4-46fa9f30e001",
                "8606a453-0cbd-444b-bc96-dc703375449a",
                "ec827a5e-eba8-437d-9653-bf40a293f2f3",
                "cf0bb656-ea80-4e52-8862-b9a4fc4f9822",
                "8c078202-7330-442c-a963-14c56cc291c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c800002d-618b-4973-b93b-aef4a6fec9d5",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.deepStrictEqual(c,c.method(null),\"method(null)\");assert.deepStrictEqual(c,c.method(ICalCalendarMethod.PUBLISH),\"method(enum)\")",
                  "err": {},
                  "uuid": "b5a14c93-6530-4384-97e3-84b3bc11f20f",
                  "parentUUID": "c800002d-618b-4973-b93b-aef4a6fec9d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.strictEqual(c.method(),null);c.method(null);assert.strictEqual(c.method(),null);c.method(ICalCalendarMethod.PUBLISH);assert.strictEqual(c.method(),\"PUBLISH\");c.method(null);assert.strictEqual(c.method(),null)",
                  "err": {},
                  "uuid": "0136b0ca-d5f4-4cc1-8848-e38c11e5f18a",
                  "parentUUID": "c800002d-618b-4973-b93b-aef4a6fec9d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.throws(function(){c.method(\"KICK ASS\")},/Input must be one of the following: PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER/)",
                  "err": {},
                  "uuid": "f4efa180-b780-4521-a4fa-33cb3324f849",
                  "parentUUID": "c800002d-618b-4973-b93b-aef4a6fec9d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar({method:ICalCalendarMethod.PUBLISH});assert.strictEqual(c.method(),\"PUBLISH\");c.method(ICalCalendarMethod.ADD);assert.strictEqual(c.method(),\"ADD\")",
                  "err": {},
                  "uuid": "fc35ad95-4848-4730-915b-cb537b010989",
                  "parentUUID": "c800002d-618b-4973-b93b-aef4a6fec9d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5a14c93-6530-4384-97e3-84b3bc11f20f",
                "0136b0ca-d5f4-4cc1-8848-e38c11e5f18a",
                "f4efa180-b780-4521-a4fa-33cb3324f849",
                "fc35ad95-4848-4730-915b-cb537b010989"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b67c6ab8-4cc8-43de-ab32-4c972aaa806e",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.name(null));assert.deepStrictEqual(cal,cal.name(\"Testevents\"))",
                  "err": {},
                  "uuid": "4832bd14-e10a-4660-b90c-c3cd8c5fb701",
                  "parentUUID": "b67c6ab8-4cc8-43de-ab32-4c972aaa806e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.name(),null);cal.name(\"Testevents\");assert.strictEqual(cal.name(),\"Testevents\");cal.name(null);assert.strictEqual(cal.name(),null)",
                  "err": {},
                  "uuid": "2fa8c9d3-c797-4fba-b4f0-2f29183da7e1",
                  "parentUUID": "b67c6ab8-4cc8-43de-ab32-4c972aaa806e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().name(\"Testevents\");cal.createEvent({start:new Date,summary:\"Example Event\"});assert.strictEqual(cal.name(),\"Testevents\")",
                  "err": {},
                  "uuid": "ff7f3b87-2fc7-4fad-a677-ff462069bda4",
                  "parentUUID": "b67c6ab8-4cc8-43de-ab32-4c972aaa806e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4832bd14-e10a-4660-b90c-c3cd8c5fb701",
                "2fa8c9d3-c797-4fba-b4f0-2f29183da7e1",
                "ff7f3b87-2fc7-4fad-a677-ff462069bda4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff7a2769-3479-4830-9381-67ae948d5852",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.description(null));assert.deepStrictEqual(cal,cal.description(\"Testbeschreibung\"))",
                  "err": {},
                  "uuid": "f837451c-925d-48a7-98de-9a7fc777f4bc",
                  "parentUUID": "ff7a2769-3479-4830-9381-67ae948d5852",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.description(),null);cal.description(\"Testbeschreibung\");assert.strictEqual(cal.description(),\"Testbeschreibung\");cal.description(null);assert.strictEqual(cal.description(),null)",
                  "err": {},
                  "uuid": "826dc426-2da6-4dea-a4b4-457f1745dc0f",
                  "parentUUID": "ff7a2769-3479-4830-9381-67ae948d5852",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().description(\"Testbeschreibung\");cal.createEvent({start:new Date,summary:\"Example Event\"});assert.ok(cal.description(),\"Testbeschreibung\")",
                  "err": {},
                  "uuid": "6ada699e-96d5-4c08-bda0-5020c9f33d9f",
                  "parentUUID": "ff7a2769-3479-4830-9381-67ae948d5852",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f837451c-925d-48a7-98de-9a7fc777f4bc",
                "826dc426-2da6-4dea-a4b4-457f1745dc0f",
                "6ada699e-96d5-4c08-bda0-5020c9f33d9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fcff1934-0129-436a-b426-475a527aa60c",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.timezone(\"Europe/Berlin\"));assert.deepStrictEqual(cal,cal.timezone(null));assert.deepStrictEqual(cal,cal.timezone({name:\"Europe/Berlin\",generator:getVtimezoneComponent}))",
                  "err": {},
                  "uuid": "812c2e11-db36-4833-80f2-7596dc6e540b",
                  "parentUUID": "fcff1934-0129-436a-b426-475a527aa60c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/Berlin\");cal.timezone(null);assert.strictEqual(cal.timezone(),null);cal.timezone({name:\"Europe/Berlin\"});assert.strictEqual(cal.timezone(),\"Europe/Berlin\")",
                  "err": {},
                  "uuid": "a5ef8bfc-0106-4e74-975c-d13c9639cf1e",
                  "parentUUID": "fcff1934-0129-436a-b426-475a527aa60c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/Berlin\");cal.timezone(\"UTC\");assert.strictEqual(cal.timezone(),null)",
                  "err": {},
                  "uuid": "7d27514f-b9fa-4b26-9417-97bbc42bdff7",
                  "parentUUID": "fcff1934-0129-436a-b426-475a527aa60c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "812c2e11-db36-4833-80f2-7596dc6e540b",
                "a5ef8bfc-0106-4e74-975c-d13c9639cf1e",
                "7d27514f-b9fa-4b26-9417-97bbc42bdff7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e3facbfd-80cc-40dd-922b-86271297364f",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal.ttl(60*60*24),cal);assert.deepStrictEqual(cal.ttl(moment.duration(2,\"days\")),cal);assert.deepStrictEqual(cal.ttl(null),cal)",
                  "err": {},
                  "uuid": "ac480e9d-c040-438e-866d-93d6c3b173d4",
                  "parentUUID": "e3facbfd-80cc-40dd-922b-86271297364f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.ttl(),null);cal.ttl(86400);assert.strictEqual(cal.ttl(),86400)",
                  "err": {},
                  "uuid": "69309b0e-1a0c-40aa-8a4d-ffb3a3abeee6",
                  "parentUUID": "e3facbfd-80cc-40dd-922b-86271297364f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().ttl(86400);assert.strictEqual(cal.ttl(),86400)",
                  "err": {},
                  "uuid": "5985e8aa-9673-47d5-9deb-b3d68b6bdbc5",
                  "parentUUID": "e3facbfd-80cc-40dd-922b-86271297364f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac480e9d-c040-438e-866d-93d6c3b173d4",
                "69309b0e-1a0c-40aa-8a4d-ffb3a3abeee6",
                "5985e8aa-9673-47d5-9deb-b3d68b6bdbc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d42fd8d-1025-434a-afb5-862de78c9365",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.source(\"http://example.com/my/original_source.ical\"))",
                  "err": {},
                  "uuid": "2772ba00-1219-4e74-9136-bfca885e02cc",
                  "parentUUID": "2d42fd8d-1025-434a-afb5-862de78c9365",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.source(),null);cal.source(\"http://example.com/my/original_source.ical\");assert.strictEqual(cal.source(),\"http://example.com/my/original_source.ical\");cal.url(null);assert.strictEqual(cal.url(),null)",
                  "err": {},
                  "uuid": "2fc670cd-ea60-476c-96ee-f0bbe42fc820",
                  "parentUUID": "2d42fd8d-1025-434a-afb5-862de78c9365",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2772ba00-1219-4e74-9136-bfca885e02cc",
                "2fc670cd-ea60-476c-96ee-f0bbe42fc820"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "86a329bf-667a-4391-9dd8-2857f7aeec4e",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.url(\"https://example.com/calendar.ical\"))",
                  "err": {},
                  "uuid": "1cab42fb-061e-4781-bc9f-49edda312ce5",
                  "parentUUID": "86a329bf-667a-4391-9dd8-2857f7aeec4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.url(),null);cal.url(\"https://example.com/calendar.ical\");assert.strictEqual(cal.url(),\"https://example.com/calendar.ical\");cal.url(null);assert.strictEqual(cal.url(),null)",
                  "err": {},
                  "uuid": "6b77317b-968f-4103-b7f8-840523bbd7c3",
                  "parentUUID": "86a329bf-667a-4391-9dd8-2857f7aeec4e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().url(\"https://example.com/calendar.ical\");cal.createEvent({start:new Date,end:new Date(new Date().getTime()+36e5),summary:\"Example Event\"});assert.ok(cal.url(),\"https://example.com/calendar.ical\")",
                  "err": {},
                  "uuid": "180bb5b3-6c2b-46f0-a63d-fe77fae6aa22",
                  "parentUUID": "86a329bf-667a-4391-9dd8-2857f7aeec4e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1cab42fb-061e-4781-bc9f-49edda312ce5",
                "6b77317b-968f-4103-b7f8-840523bbd7c3",
                "180bb5b3-6c2b-46f0-a63d-fe77fae6aa22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc5aeccd-0245-43bb-b81d-9c7615b87f0d",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.scale(\"gregorian\"))",
                  "err": {},
                  "uuid": "75b89469-1ae3-44df-aa44-5e2dcb64d9de",
                  "parentUUID": "dc5aeccd-0245-43bb-b81d-9c7615b87f0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.scale(),null);cal.scale(\"GREGORIAN\");assert.strictEqual(cal.scale(),\"GREGORIAN\");cal.scale(null);assert.strictEqual(cal.scale(),null)",
                  "err": {},
                  "uuid": "4d86dd72-5022-4120-9395-b7cedf2ec393",
                  "parentUUID": "dc5aeccd-0245-43bb-b81d-9c7615b87f0d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().scale(\"gregorian\");cal.createEvent({start:new Date,end:new Date(new Date().getTime()+36e5),summary:\"Example Event\"});assert.ok(cal.scale(),\"GREGORIAN\")",
                  "err": {},
                  "uuid": "669579df-aecf-41e8-8aae-af74cc178e66",
                  "parentUUID": "dc5aeccd-0245-43bb-b81d-9c7615b87f0d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75b89469-1ae3-44df-aa44-5e2dcb64d9de",
                "4d86dd72-5022-4120-9395-b7cedf2ec393",
                "669579df-aecf-41e8-8aae-af74cc178e66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4e7799ef-7e6c-4b59-8275-2e02728a597f",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.ok(cal.createEvent({start:new Date})instanceof ICalEvent)",
                  "err": {},
                  "uuid": "d9a4505b-37d6-4b58-b657-eed2bcbcde9b",
                  "parentUUID": "4e7799ef-7e6c-4b59-8275-2e02728a597f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const event=cal.createEvent({start:new Date,summary:\"Patch-Day\"});assert.strictEqual(event.summary(),\"Patch-Day\")",
                  "err": {},
                  "uuid": "729f082e-3c6b-4956-8eb7-fc6859e94a54",
                  "parentUUID": "4e7799ef-7e6c-4b59-8275-2e02728a597f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.doesNotThrow(function(){new ICalCalendar().createEvent({start:new Date,summary:\"Patch-Day\"})},Error)",
                  "err": {},
                  "uuid": "2378c401-8dc9-4173-a197-f9b22b5aeb67",
                  "parentUUID": "4e7799ef-7e6c-4b59-8275-2e02728a597f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d9a4505b-37d6-4b58-b657-eed2bcbcde9b",
                "729f082e-3c6b-4956-8eb7-fc6859e94a54",
                "2378c401-8dc9-4173-a197-f9b22b5aeb67"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a11d02fc-df80-4970-9406-7de941239421",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.events().length,0);const event=cal.createEvent({start:new Date});assert.strictEqual(cal.events().length,1);assert.deepStrictEqual(cal.events()[0],event)",
                  "err": {},
                  "uuid": "9a8dd436-bf6c-466e-beb4-7e90e64c63d6",
                  "parentUUID": "a11d02fc-df80-4970-9406-7de941239421",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.length(),0);const cal2=cal.events([{start:new Date,summary:\"Event A\"},{start:new Date,summary:\"Event B\"}]);assert.strictEqual(cal.length(),2);assert.deepStrictEqual(cal2,cal)",
                  "err": {},
                  "uuid": "5a54cdfd-295a-40b1-999e-a66f30887b1d",
                  "parentUUID": "a11d02fc-df80-4970-9406-7de941239421",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a8dd436-bf6c-466e-beb4-7e90e64c63d6",
                "5a54cdfd-295a-40b1-999e-a66f30887b1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30581a1b-8e8d-4f4e-9d28-e6c6e1a094fa",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.createEvent({start:new Date});assert.strictEqual(cal.events().length,1);assert.deepStrictEqual(cal.clear(),cal);assert.strictEqual(cal.events().length,0)",
                  "err": {},
                  "uuid": "bb3c3936-54ed-40db-94f3-17709be436a0",
                  "parentUUID": "30581a1b-8e8d-4f4e-9d28-e6c6e1a094fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb3c3936-54ed-40db-94f3-17709be436a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d148ac23-d450-4fd5-9537-b1404c15f2b0",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "2b1a4d70-3bf7-44ba-afd0-53f2ad3d7412",
                  "parentUUID": "d148ac23-d450-4fd5-9537-b1404c15f2b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x(\"X-FOO\",\"bar\"));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x(\"X-LOREM\",\"ipsum\"));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x(\"LOREM\",\"ipsum\")});assert.throws(()=>{cal.x(\"X-LOREM\",1337)});assert.throws(()=>{cal.x(5,\"ipsum\")})",
                  "err": {},
                  "uuid": "9b7afef7-854c-4174-a6f8-f0d20c4d7e33",
                  "parentUUID": "d148ac23-d450-4fd5-9537-b1404c15f2b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x([{key:\"X-FOO\",value:\"bar\"}]));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x([{key:\"X-LOREM\",value:\"ipsum\"}]));assert.deepEqual(cal.x(),[{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x([{key:\"LOREM\",value:\"ipsum\"}])});assert.throws(()=>{cal.x([{key:\"X-LOREM\",value:1337}])});assert.throws(()=>{cal.x([{key:5,value:\"ipsum\"}])})",
                  "err": {},
                  "uuid": "5fd605c6-83cc-4dd7-830c-91cb60e54134",
                  "parentUUID": "d148ac23-d450-4fd5-9537-b1404c15f2b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x({\"X-FOO\":\"bar\"}));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x({\"X-LOREM\":\"ipsum\"}));assert.deepEqual(cal.x(),[{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x({\"LOREM\":\"ipsum\"})});assert.throws(()=>{cal.x({\"X-LOREM\":1337})});assert.throws(()=>{cal.x({5:\"ipsum\"})})",
                  "err": {},
                  "uuid": "d93c09ae-53f1-40a8-a14d-ede13721aeae",
                  "parentUUID": "d148ac23-d450-4fd5-9537-b1404c15f2b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepEqual(cal.x(),[]);cal.x(\"X-FOO\",\"BAR\");assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"BAR\"}]);cal.x({});assert.deepEqual(cal.x().length,0)",
                  "err": {},
                  "uuid": "71a8f42c-12d3-4e5d-9c9e-bec57350a0f4",
                  "parentUUID": "d148ac23-d450-4fd5-9537-b1404c15f2b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().x(\"X-FOO\",\"BAR\");cal.createEvent({start:new Date,end:new Date(new Date().getTime()+36e5),summary:\"Example Event\"});assert.ok(cal.toString().includes(\"X-FOO\"))",
                  "err": {},
                  "uuid": "a7f20306-ae79-4f89-9fa3-bc5c3495912b",
                  "parentUUID": "d148ac23-d450-4fd5-9537-b1404c15f2b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b1a4d70-3bf7-44ba-afd0-53f2ad3d7412",
                "9b7afef7-854c-4174-a6f8-f0d20c4d7e33",
                "5fd605c6-83cc-4dd7-830c-91cb60e54134",
                "d93c09ae-53f1-40a8-a14d-ede13721aeae",
                "71a8f42c-12d3-4e5d-9c9e-bec57350a0f4",
                "a7f20306-ae79-4f89-9fa3-bc5c3495912b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "330bf07c-684e-42f6-a8ae-a8a9fa416729",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const prodId=cal.toJSON().prodId;assert.strictEqual(typeof prodId,\"string\");assert.ok(prodId.length>0);assert.strictEqual(cal.toJSON().events?.length,0)",
                  "err": {},
                  "uuid": "3e3f9824-468c-42a6-a31d-a8ace6044b93",
                  "parentUUID": "330bf07c-684e-42f6-a8ae-a8a9fa416729",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.createEvent({start:new Date,end:new Date(new Date().getTime()+1e3*60*60),summary:\"HTTP Calendar Event\",x:[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}]});const prodId=cal.toJSON().prodId;assert.strictEqual(typeof prodId,\"string\");assert.ok(prodId.length>0);const events=cal.toJSON().events;assert.strictEqual(events?.length,1);assert.deepEqual(events[0].x,[{\"key\":\"X-FOO\",\"value\":\"bar\"},{\"key\":\"X-LOREM\",\"value\":\"ipsum\"}])",
                  "err": {},
                  "uuid": "b408fff6-2d6d-44d3-b9f5-9af422681d26",
                  "parentUUID": "330bf07c-684e-42f6-a8ae-a8a9fa416729",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalCalendar;new ICalCalendar(a.toJSON())",
                  "err": {},
                  "uuid": "851a2559-79ba-44e4-b8ad-ebba76246fec",
                  "parentUUID": "330bf07c-684e-42f6-a8ae-a8a9fa416729",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e3f9824-468c-42a6-a31d-a8ace6044b93",
                "b408fff6-2d6d-44d3-b9f5-9af422681d26",
                "851a2559-79ba-44e4-b8ad-ebba76246fec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2324bbf3-2630-4ec0-83a3-6c9d68420992",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.length(),0);cal.createEvent({start:new Date,end:new Date(new Date().getTime()+36e5),summary:\"Example Event\"});assert.strictEqual(cal.length(),1)",
                  "err": {},
                  "uuid": "6dfa6f7b-74ff-4b81-8369-9097de06d4af",
                  "parentUUID": "2324bbf3-2630-4ec0-83a3-6c9d68420992",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6dfa6f7b-74ff-4b81-8369-9097de06d4af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e8e4c6f-073c-4e19-9db7-f04e4c91a3b2",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.url(\"https://sebbo.net/foo\");assert.ok(cal.toString().indexOf(\"URL:https://sebbo.net/foo\")>-1)",
                  "err": {},
                  "uuid": "18f6dd1c-e72b-4d7c-9385-f1030827888f",
                  "parentUUID": "5e8e4c6f-073c-4e19-9db7-f04e4c91a3b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.method(ICalCalendarMethod.REFRESH);assert.ok(cal.toString().indexOf(\"METHOD:REFRESH\")>-1)",
                  "err": {},
                  "uuid": "c5965307-4797-400a-b7c3-f47d6014ba3a",
                  "parentUUID": "5e8e4c6f-073c-4e19-9db7-f04e4c91a3b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.name(\"TEST\");assert.ok(cal.toString().indexOf(\"NAME:TEST\")>-1);assert.ok(cal.toString().indexOf(\"X-WR-CALNAME:TEST\")>-1)",
                  "err": {},
                  "uuid": "52297c3d-6fb8-408c-9443-cee9d9fefe52",
                  "parentUUID": "5e8e4c6f-073c-4e19-9db7-f04e4c91a3b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.description(\"TEST\");assert.ok(cal.toString().indexOf(\"X-WR-CALDESC:TEST\")>-1)",
                  "err": {},
                  "uuid": "66a327c0-dc0e-4733-9ab7-d5c2c94b2a15",
                  "parentUUID": "5e8e4c6f-073c-4e19-9db7-f04e4c91a3b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone(\"TEST\");assert.ok(cal.toString().indexOf(\"TIMEZONE-ID:TEST\")>-1);assert.ok(cal.toString().indexOf(\"X-WR-TIMEZONE:TEST\")>-1)",
                  "err": {},
                  "uuid": "c4fdcc96-07ba-4cfc-9242-ce0c549c7edc",
                  "parentUUID": "5e8e4c6f-073c-4e19-9db7-f04e4c91a3b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.source(\"http://foo.bar.example.com/ical.cal\");assert.ok(cal.toString().includes(\"http://foo.bar.example.com/ical.cal\"))",
                  "err": {},
                  "uuid": "78f9ccb2-70f4-4903-87c5-569c3609a277",
                  "parentUUID": "5e8e4c6f-073c-4e19-9db7-f04e4c91a3b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({name:\"Europe/Berlin\",generator:getVtimezoneComponent});cal.createEvent({start:new Date,timezone:\"Europe/London\"});assert.ok(cal.toString().includes(\"BEGIN:VTIMEZONE\\r\\n\"),\"BEGIN:VTIMEZONE\");assert.ok(cal.toString().includes(\"TZID:Europe/Berlin\\r\\n\"),\"TZID:Europe/Berlin\");assert.ok(cal.toString().includes(\"TZID:Europe/London\\r\\n\"),\"TZID:Europe/London\")",
                  "err": {},
                  "uuid": "48d97c42-c3ef-4cc4-969d-a6c31bcbbf26",
                  "parentUUID": "5e8e4c6f-073c-4e19-9db7-f04e4c91a3b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({name:\"FOO\",generator:getVtimezoneComponent});assert.ok(!cal.toString().includes(\"TZID:Foo\\r\\n\"))",
                  "err": {},
                  "uuid": "e4ee39b2-6509-47d7-b11a-66eefc1e65e3",
                  "parentUUID": "5e8e4c6f-073c-4e19-9db7-f04e4c91a3b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({name:\"/Europe/Berlin\",generator:getVtimezoneComponent});assert.ok(!cal.toString().includes(\"TZID:/Europe/Berlin\\r\\n\"))",
                  "err": {},
                  "uuid": "86a6c31d-b23e-4218-a3ee-27cf71bcb24f",
                  "parentUUID": "5e8e4c6f-073c-4e19-9db7-f04e4c91a3b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.ttl(moment.duration(3,\"days\"));assert.ok(cal.toString().indexOf(\"REFRESH-INTERVAL;VALUE=DURATION:P3D\")>-1);assert.ok(cal.toString().indexOf(\"X-PUBLISHED-TTL:P3D\")>-1)",
                  "err": {},
                  "uuid": "f2648db8-5beb-4a60-a97a-9219cfe4f507",
                  "parentUUID": "5e8e4c6f-073c-4e19-9db7-f04e4c91a3b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18f6dd1c-e72b-4d7c-9385-f1030827888f",
                "c5965307-4797-400a-b7c3-f47d6014ba3a",
                "52297c3d-6fb8-408c-9443-cee9d9fefe52",
                "66a327c0-dc0e-4733-9ab7-d5c2c94b2a15",
                "c4fdcc96-07ba-4cfc-9242-ce0c549c7edc",
                "78f9ccb2-70f4-4903-87c5-569c3609a277",
                "48d97c42-c3ef-4cc4-969d-a6c31bcbbf26",
                "e4ee39b2-6509-47d7-b11a-66eefc1e65e3",
                "86a6c31d-b23e-4218-a3ee-27cf71bcb24f",
                "f2648db8-5beb-4a60-a97a-9219cfe4f507"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4b17cfb3-cfa4-4ad7-af7e-31c1583b30b1",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),created:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),lastModified:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Simple Event\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_01.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "ef3aaf0d-d9a2-4ece-9c5d-a2c8533349f6",
              "parentUUID": "4b17cfb3-cfa4-4ad7-af7e-31c1583b30b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Sample Event\",location:\"localhost\",transparency:ICalEventTransparency.OPAQUE,description:{plain:\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop\",html:\"<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>\"}});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_02.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "aeb20606-0522-4c4a-99e0-716bf1376ab6",
              "parentUUID": "4b17cfb3-cfa4-4ad7-af7e-31c1583b30b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.ADD,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),allDay:true,stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Sample Event\",location:{title:\"Apple Store Kurf\\xFCrstendamm\",address:\"Kurf\\xFCrstendamm 26, 10719 Berlin, Deutschland\",radius:141.1751386318387,geo:{lat:52.50363,lon:13.32865}},organizer:\"Sebastian Pekarek <mail@sebbo.net>\",status:ICalEventStatus.CONFIRMED,categories:[{name:\"WORK\"}],url:\"http://sebbo.net/\",attachments:[\"https://files.sebbo.net/calendar/attachments/foo\"]});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_03.ics\",\"utf8\"),\"toString\");assert.strictEqual(ical(cal.toJSON()).toString(),string,\"toJSON / toString()\")",
              "err": {},
              "uuid": "01cc2db3-4e59-4195-8f07-b4231c247d71",
              "parentUUID": "4b17cfb3-cfa4-4ad7-af7e-31c1583b30b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.timezone({name:null,generator:getVtimezoneComponent});cal.events([{id:\"1\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"repeating by month\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,exclude:new Date(\"Fr Oct 06 2013 23:15:00 UTC\")}},{id:\"2\",start:new Date(\"Fr Oct 04 2013 22:39:30\"),end:new Date(\"Fr Oct 06 2013 23:15:00\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),timezone:\"Europe/Berlin\",summary:\"repeating by day, twice\",repeating:{freq:ICalEventRepeatingFreq.DAILY,count:2}},{id:\"3\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"repeating by 3 weeks, until 2014\",repeating:{freq:ICalEventRepeatingFreq.WEEKLY,interval:3,until:new Date(\"We Jan 01 2014 00:00:00 UTC\")}}]);assert.strictEqual(cal.toString(),await fs.readFile(resultDir+\"/generate_04.ics\",\"utf8\"),\"first check\");cal.timezone(null);assert.strictEqual(ical(cal.toJSON()).toString(),cal.toString(),\"second check\")",
              "err": {},
              "uuid": "2c61d133-86fe-4103-9877-2cbbd0743c14",
              "parentUUID": "4b17cfb3-cfa4-4ad7-af7e-31c1583b30b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"1\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"floating\",floating:true});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_05.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "449834a5-5500-41c8-af7a-90ad7c108836",
              "parentUUID": "4b17cfb3-cfa4-4ad7-af7e-31c1583b30b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\",method:ICalCalendarMethod.PUBLISH});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),allDay:true,stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Sample Event\",organizer:\"Sebastian Pekarek <mail@sebbo.net>\",attendees:[{name:'Smith, Matt; (\"Sales\")',email:\"matt@example.com\",delegatesTo:{name:\"John\",email:\"john@example.com\",status:ICalAttendeeStatus.ACCEPTED}}],alarms:[{type:ICalAlarmType.display,trigger:60*10,repeat:{times:2,interval:60}},{type:ICalAlarmType.display,trigger:60*60,description:\"I'm a reminder :)\"}],status:ICalEventStatus.CONFIRMED,url:\"http://sebbo.net/\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_06.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "e0eb5eb5-19d8-4be9-bcf3-bf192849bc6e",
              "parentUUID": "4b17cfb3-cfa4-4ad7-af7e-31c1583b30b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.events([{id:\"1\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"repeating by month\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,byMonth:[1,4,7,10]}},{id:\"2\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"repeating on Mo/We/Fr, twice\",repeating:{freq:ICalEventRepeatingFreq.DAILY,count:2,byDay:[ICalWeekday.MO,ICalWeekday.WE,ICalWeekday.FR]}},{id:\"3\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"repeating on 1st and 15th\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:1,byMonthDay:[1,15]}}]);const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_07.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "2158eb42-5ab4-4843-bfbe-ebd3d6b315e6",
              "parentUUID": "4b17cfb3-cfa4-4ad7-af7e-31c1583b30b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),created:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),lastModified:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Simple Event\",attendees:[{type:ICalAttendeeType.INDIVIDUAL,role:ICalAttendeeRole.REQ,status:ICalAttendeeStatus.NEEDSACTION,email:\"mail@example.com\",rsvp:true}]});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_08.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "574879bc-233c-4dde-8d53-c4ed0ce7817d",
              "parentUUID": "4b17cfb3-cfa4-4ad7-af7e-31c1583b30b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.REQUEST,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({id:\"123\",start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),summary:\"Sample Event\",organizer:{name:\"Sebastian Pekarek\",email:\"mail@sebbo.net\",mailto:\"mail2@example2.com\"},attendees:[{type:ICalAttendeeType.INDIVIDUAL,role:ICalAttendeeRole.REQ,status:ICalAttendeeStatus.NEEDSACTION,email:\"mail@example.com\",rsvp:true}]});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_09.ics\",\"utf8\"),\"toString\");assert.strictEqual(ical(cal.toJSON()).toString(),string,\"toJSON / toString()\")",
              "err": {},
              "uuid": "fa0cbeab-b6ca-436d-bfc6-1269504d467b",
              "parentUUID": "4b17cfb3-cfa4-4ad7-af7e-31c1583b30b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef3aaf0d-d9a2-4ece-9c5d-a2c8533349f6",
            "aeb20606-0522-4c4a-99e0-716bf1376ab6",
            "01cc2db3-4e59-4195-8f07-b4231c247d71",
            "2c61d133-86fe-4103-9877-2cbbd0743c14",
            "449834a5-5500-41c8-af7a-90ad7c108836",
            "e0eb5eb5-19d8-4be9-bcf3-bf192849bc6e",
            "2158eb42-5ab4-4843-bfbe-ebd3d6b315e6",
            "574879bc-233c-4dde-8d53-c4ed0ce7817d",
            "fa0cbeab-b6ca-436d-bfc6-1269504d467b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9613de58-1a2f-4b31-9908-e29a03acb815",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1b62d302-2657-473b-b588-a0172fe62679",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalCategory({unknown:true,name:\"FOO\"});assert.strictEqual(a.name(),\"FOO\")",
                  "err": {},
                  "uuid": "a4656392-21fb-4238-a946-20cf989fba2e",
                  "parentUUID": "1b62d302-2657-473b-b588-a0172fe62679",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category constructor() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalCategory({})},/`name`/)",
                  "err": {},
                  "uuid": "a0bc592f-1d94-4241-b753-85800c07dd31",
                  "parentUUID": "1b62d302-2657-473b-b588-a0172fe62679",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4656392-21fb-4238-a946-20cf989fba2e",
                "a0bc592f-1d94-4241-b753-85800c07dd31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "12a36ee3-bed5-48d3-9c22-543f198167b3",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"foo\"});assert.deepStrictEqual(c,c.name(\"FOO\"))",
                  "err": {},
                  "uuid": "b61a686e-3ea6-4c23-ac3f-0b1a2b098d76",
                  "parentUUID": "12a36ee3-bed5-48d3-9c22-543f198167b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"foo\"});assert.strictEqual(c.name(),\"foo\");c.name(\"HELLO-WORLD\");assert.strictEqual(c.name(),\"HELLO-WORLD\")",
                  "err": {},
                  "uuid": "9ba4d205-c651-46b0-b1b3-0bf4e603f7e4",
                  "parentUUID": "12a36ee3-bed5-48d3-9c22-543f198167b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"BANANA\"});assert.ok(c.toString().includes(\"BANANA\"))",
                  "err": {},
                  "uuid": "dec3a264-246a-4137-b502-34dacec58ce5",
                  "parentUUID": "12a36ee3-bed5-48d3-9c22-543f198167b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b61a686e-3ea6-4c23-ac3f-0b1a2b098d76",
                "9ba4d205-c651-46b0-b1b3-0bf4e603f7e4",
                "dec3a264-246a-4137-b502-34dacec58ce5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "163d40c2-55d5-474e-8411-4beba57f05f0",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"FOOBAR\"});assert.deepStrictEqual(c.toJSON(),{name:\"FOOBAR\"})",
                  "err": {},
                  "uuid": "884b55b4-8a29-448c-becf-4cbbadd5ea3a",
                  "parentUUID": "163d40c2-55d5-474e-8411-4beba57f05f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "884b55b4-8a29-448c-becf-4cbbadd5ea3a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8fd39281-5801-487f-878f-3f124cb3efa6",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "91eb2c02-6bb9-4c88-b108-6202b92006bb",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={id:\"FOO\",sequence:1,start:new Date().toJSON(),end:new Date().toJSON(),recurrenceId:new Date().toJSON(),timezone:\"Europe/Berlin\",stamp:new Date().toJSON(),allDay:true,floating:false,repeating:null,summary:\"Hello.\",location:null,description:null,organizer:null,attendees:[],alarms:[],categories:[],status:null,busystatus:ICalEventBusyStatus.BUSY,priority:5,url:\"https://github.com/sebbo2002/ical-generator\",attachments:[\"https://files.sebbo.net/calendar/attachments/foo\"],transparency:ICalEventTransparency.TRANSPARENT,created:new Date().toJSON(),lastModified:new Date().toJSON(),class:null,x:[]};const event=new ICalEvent(data,new ICalCalendar);assert.deepStrictEqual(event.toJSON(),data)",
                  "err": {},
                  "uuid": "53ded085-2e64-49ad-a3c2-b39c40805d82",
                  "parentUUID": "91eb2c02-6bb9-4c88-b108-6202b92006bb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({summary:\"Testevent\"},null)},/`calendar`/)",
                  "err": {},
                  "uuid": "ecf16122-f81d-4667-9d07-b8c63543fc00",
                  "parentUUID": "91eb2c02-6bb9-4c88-b108-6202b92006bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53ded085-2e64-49ad-a3c2-b39c40805d82",
                "ecf16122-f81d-4667-9d07-b8c63543fc00"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a5de6b61-4b2f-4be2-bb4b-1e26f7e844cb",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.id(1048))",
                  "err": {},
                  "uuid": "7ccf0b71-eb6e-4838-9bc8-98f60ed18df9",
                  "parentUUID": "a5de6b61-4b2f-4be2-bb4b-1e26f7e844cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).id(512);assert.strictEqual(event.id(),\"512\");event.id(\"xyz\");assert.strictEqual(event.id(),\"xyz\")",
                  "err": {},
                  "uuid": "5af7d67f-1930-4868-a873-d5593740ea2c",
                  "parentUUID": "a5de6b61-4b2f-4be2-bb4b-1e26f7e844cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7ccf0b71-eb6e-4838-9bc8-98f60ed18df9",
                "5af7d67f-1930-4868-a873-d5593740ea2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2686685-3cab-40f9-a59d-c4c999f4b170",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.uid(1048))",
                  "err": {},
                  "uuid": "e4a8eac9-1410-426a-ae83-c3ab06b816f8",
                  "parentUUID": "b2686685-3cab-40f9-a59d-c4c999f4b170",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).uid(512);assert.strictEqual(event.uid(),\"512\");event.id(\"xyz\");assert.strictEqual(event.uid(),\"xyz\")",
                  "err": {},
                  "uuid": "8931538d-aa03-4c00-ac0a-c87322349cc3",
                  "parentUUID": "b2686685-3cab-40f9-a59d-c4c999f4b170",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4a8eac9-1410-426a-ae83-c3ab06b816f8",
                "8931538d-aa03-4c00-ac0a-c87322349cc3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b053ac16-1163-4078-bd5c-5517e197a45e",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.sequence(1))",
                  "err": {},
                  "uuid": "2d4d8135-279a-4a79-b72d-549c28e94e82",
                  "parentUUID": "b053ac16-1163-4078-bd5c-5517e197a45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).sequence(1048);assert.strictEqual(event.sequence(),1048)",
                  "err": {},
                  "uuid": "d15b8e47-6035-495e-b605-5254d32b9a15",
                  "parentUUID": "b053ac16-1163-4078-bd5c-5517e197a45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.sequence(\"hello\")},/`sequence`/)",
                  "err": {},
                  "uuid": "e9d98cb7-2ff0-4732-8965-4f112a9e1a5a",
                  "parentUUID": "b053ac16-1163-4078-bd5c-5517e197a45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).sequence(12);assert.strictEqual(event.sequence(),12);event.sequence(0);assert.strictEqual(event.sequence(),0)",
                  "err": {},
                  "uuid": "8ac40064-1421-4fdc-a5aa-bb7e62d4b4bc",
                  "parentUUID": "b053ac16-1163-4078-bd5c-5517e197a45e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d4d8135-279a-4a79-b72d-549c28e94e82",
                "d15b8e47-6035-495e-b605-5254d32b9a15",
                "e9d98cb7-2ff0-4732-8965-4f112a9e1a5a",
                "8ac40064-1421-4fdc-a5aa-bb7e62d4b4bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd8cf9fd-9b05-48dc-967e-9365565b587e",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:new Date},new ICalCalendar);event.start(now);assert.strictEqual(event.start(),now)",
                  "err": {},
                  "uuid": "2e721616-19f2-4c79-9140-dedf11c99743",
                  "parentUUID": "cd8cf9fd-9b05-48dc-967e-9365565b587e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.start(date));assert.deepStrictEqual(event.start(),date)",
                  "err": {},
                  "uuid": "16a4cce2-fced-4215-82d4-16f214d0db51",
                  "parentUUID": "cd8cf9fd-9b05-48dc-967e-9365565b587e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.start(date));assert.deepStrictEqual(event.start(),date)",
                  "err": {},
                  "uuid": "2b9e905d-8eeb-49ff-bf2d-4205259f7277",
                  "parentUUID": "cd8cf9fd-9b05-48dc-967e-9365565b587e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.start(3)},/`start`/,\"Number\");assert.throws(function(){event.start(null)},/`start`/,\"null\");assert.throws(function(){event.start(NaN)},/`start`/,\"NaN\");assert.throws(function(){event.start(new Date(\"hallo\"))},/`start`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "dd7bdc6a-919e-419e-bf16-4cfef761247a",
                  "parentUUID": "cd8cf9fd-9b05-48dc-967e-9365565b587e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=moment().add(5,\"minutes\");const end=moment();const event=new ICalEvent({start:new Date},new ICalCalendar).end(end).start(start);assert.deepStrictEqual(event.start(),end);assert.deepStrictEqual(event.end(),start)",
                  "err": {},
                  "uuid": "608872c6-6c54-4b0b-92d1-31207fe7d94d",
                  "parentUUID": "cd8cf9fd-9b05-48dc-967e-9365565b587e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.start(moment()));assert.deepStrictEqual(event,event.start(new Date))",
                  "err": {},
                  "uuid": "e2be2643-2946-49f7-830a-64aac73d58a3",
                  "parentUUID": "cd8cf9fd-9b05-48dc-967e-9365565b587e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e721616-19f2-4c79-9140-dedf11c99743",
                "16a4cce2-fced-4215-82d4-16f214d0db51",
                "2b9e905d-8eeb-49ff-bf2d-4205259f7277",
                "dd7bdc6a-919e-419e-bf16-4cfef761247a",
                "608872c6-6c54-4b0b-92d1-31207fe7d94d",
                "e2be2643-2946-49f7-830a-64aac73d58a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "374f42d6-d96c-49b8-a2db-ca0845e8febf",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:moment().subtract({minute:1})},new ICalCalendar);event.end(now);assert.deepStrictEqual(event.end(),now)",
                  "err": {},
                  "uuid": "3c42b0e4-38c8-46ff-bbdb-7e06d87c6e88",
                  "parentUUID": "374f42d6-d96c-49b8-a2db-ca0845e8febf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.end(date));assert.deepStrictEqual(event.end(),date)",
                  "err": {},
                  "uuid": "078400a1-90b4-468f-a6b6-b9601a2560a1",
                  "parentUUID": "374f42d6-d96c-49b8-a2db-ca0845e8febf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.end(date));assert.deepStrictEqual(event.end(),date)",
                  "err": {},
                  "uuid": "6a6c4203-5458-4943-b98b-3b77f1ac1357",
                  "parentUUID": "374f42d6-d96c-49b8-a2db-ca0845e8febf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.end(3)},/`end`/,\"Number\");assert.throws(function(){event.end(NaN)},/`end`/,\"NaN\");assert.throws(function(){event.end(new Date(\"hallo\"))},/`end`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "31e4224a-f699-407d-badf-f2a166127106",
                  "parentUUID": "374f42d6-d96c-49b8-a2db-ca0845e8febf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=moment().add(5,\"minutes\");const end=moment();const event=new ICalEvent({start:new Date},new ICalCalendar).start(start).end(end);assert.deepStrictEqual(event.start(),end);assert.deepStrictEqual(event.end(),start)",
                  "err": {},
                  "uuid": "e20444a7-58a6-4a9c-8580-9aa08a8ff353",
                  "parentUUID": "374f42d6-d96c-49b8-a2db-ca0845e8febf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.end(moment()));assert.deepStrictEqual(event,event.end(new Date))",
                  "err": {},
                  "uuid": "3ce30a00-72d9-4cd6-a739-0d75d355e566",
                  "parentUUID": "374f42d6-d96c-49b8-a2db-ca0845e8febf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3c42b0e4-38c8-46ff-bbdb-7e06d87c6e88",
                "078400a1-90b4-468f-a6b6-b9601a2560a1",
                "6a6c4203-5458-4943-b98b-3b77f1ac1357",
                "31e4224a-f699-407d-badf-f2a166127106",
                "e20444a7-58a6-4a9c-8580-9aa08a8ff353",
                "3ce30a00-72d9-4cd6-a739-0d75d355e566"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c57fa345-1883-471e-90fc-fa2fcee194c0",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:new Date},new ICalCalendar);event.recurrenceId(now);assert.deepStrictEqual(event.recurrenceId(),now)",
                  "err": {},
                  "uuid": "122055cc-1f03-4f46-b049-b382084816e1",
                  "parentUUID": "c57fa345-1883-471e-90fc-fa2fcee194c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.recurrenceId(date));assert.deepStrictEqual(event.recurrenceId(),date)",
                  "err": {},
                  "uuid": "0b3a3ca2-5cc7-4de6-b8ef-eceb917874c0",
                  "parentUUID": "c57fa345-1883-471e-90fc-fa2fcee194c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.recurrenceId(date));assert.deepStrictEqual(event.recurrenceId(),date)",
                  "err": {},
                  "uuid": "faedcfbb-df52-4ad0-80a0-c6aa66a591b7",
                  "parentUUID": "c57fa345-1883-471e-90fc-fa2fcee194c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.recurrenceId(3)},/`recurrenceId`/,\"Number\");assert.throws(function(){event.recurrenceId(NaN)},/`recurrenceId`/,\"NaN\");assert.throws(function(){event.recurrenceId(new Date(\"hallo\"))},/`recurrenceId`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "b9540a88-eb48-4d3f-8bd8-da2d0c2b4c8c",
                  "parentUUID": "c57fa345-1883-471e-90fc-fa2fcee194c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.recurrenceId(moment()));assert.deepStrictEqual(event,event.recurrenceId(new Date))",
                  "err": {},
                  "uuid": "a61073c8-6850-42dc-b77f-7efb4bdca9e5",
                  "parentUUID": "c57fa345-1883-471e-90fc-fa2fcee194c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "122055cc-1f03-4f46-b049-b382084816e1",
                "0b3a3ca2-5cc7-4de6-b8ef-eceb917874c0",
                "faedcfbb-df52-4ad0-80a0-c6aa66a591b7",
                "b9540a88-eb48-4d3f-8bd8-da2d0c2b4c8c",
                "a61073c8-6850-42dc-b77f-7efb4bdca9e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "adbcbdd0-b2c6-4855-bdde-f7a1a503ba6f",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar).timezone(\"Europe/Berlin\");assert.strictEqual(e.timezone(),\"Europe/Berlin\")",
                  "err": {},
                  "uuid": "0fdc0bf9-a1df-4e41-b9c0-a4c225168ab9",
                  "parentUUID": "adbcbdd0-b2c6-4855-bdde-f7a1a503ba6f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const e=new ICalEvent({start:moment(),summary:\"Example Event\"},cal);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),null);cal.timezone(\"Europe/London\");assert.strictEqual(cal.timezone(),\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/London\");e.timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/Berlin\");cal.timezone(null);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),\"Europe/Berlin\");e.timezone(null);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "ab5fd54a-8300-489c-a75f-2752d818c75a",
                  "parentUUID": "adbcbdd0-b2c6-4855-bdde-f7a1a503ba6f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.timezone(\"Europe/Berlin\"))",
                  "err": {},
                  "uuid": "2b831721-85b3-4209-b58e-90d25d0faba3",
                  "parentUUID": "adbcbdd0-b2c6-4855-bdde-f7a1a503ba6f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),end:new Date(new Date().getTime()+36e5),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/London\")",
                  "err": {},
                  "uuid": "83019e54-f839-4a45-9af6-1dbc5f211731",
                  "parentUUID": "adbcbdd0-b2c6-4855-bdde-f7a1a503ba6f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.floating(true);e.timezone(\"Europe/London\");assert.strictEqual(e.floating(),false)",
                  "err": {},
                  "uuid": "e9b499ab-0dac-41c8-8648-06b09281a46c",
                  "parentUUID": "adbcbdd0-b2c6-4855-bdde-f7a1a503ba6f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.floating(true);e.timezone(null);assert.strictEqual(e.floating(),true)",
                  "err": {},
                  "uuid": "3441dcf4-7da7-4515-8ed9-c50810837b36",
                  "parentUUID": "adbcbdd0-b2c6-4855-bdde-f7a1a503ba6f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),timezone:\"Europe/Berlin\",summary:\"Example Event\"},new ICalCalendar);assert.strictEqual(e.timezone(),\"Europe/Berlin\");e.timezone(\"UTC\");assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "a828b4be-e884-4c37-95d5-0ef938969df4",
                  "parentUUID": "adbcbdd0-b2c6-4855-bdde-f7a1a503ba6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fdc0bf9-a1df-4e41-b9c0-a4c225168ab9",
                "ab5fd54a-8300-489c-a75f-2752d818c75a",
                "2b831721-85b3-4209-b58e-90d25d0faba3",
                "83019e54-f839-4a45-9af6-1dbc5f211731",
                "e9b499ab-0dac-41c8-8648-06b09281a46c",
                "3441dcf4-7da7-4515-8ed9-c50810837b36",
                "a828b4be-e884-4c37-95d5-0ef938969df4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b630d815-5c3e-4046-b851-f49dd0a91734",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment().add(1,\"day\");const e=new ICalEvent({start:new Date},new ICalCalendar).stamp(now);assert.deepStrictEqual(e.stamp(),now)",
                  "err": {},
                  "uuid": "9d35d5b3-1d86-4049-b15e-453333827cb1",
                  "parentUUID": "b630d815-5c3e-4046-b851-f49dd0a91734",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.stamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "2a40aaa9-9722-43ed-838b-c26c0b734718",
                  "parentUUID": "b630d815-5c3e-4046-b851-f49dd0a91734",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.stamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "66849c32-592c-491c-91f3-c392f6916074",
                  "parentUUID": "b630d815-5c3e-4046-b851-f49dd0a91734",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.stamp(3)},/`stamp`/,\"Number\");assert.throws(function(){event.stamp(null)},/`stamp`/,\"null\");assert.throws(function(){event.stamp(NaN)},/`stamp`/,\"NaN\");assert.throws(function(){event.stamp(new Date(\"hallo\"))},/`stamp`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "3b8998c1-8d14-48b3-afa6-a1796d88c9f0",
                  "parentUUID": "b630d815-5c3e-4046-b851-f49dd0a91734",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.stamp(new Date))",
                  "err": {},
                  "uuid": "697e484a-cf5f-4f1c-b09c-23644c3458bd",
                  "parentUUID": "b630d815-5c3e-4046-b851-f49dd0a91734",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d35d5b3-1d86-4049-b15e-453333827cb1",
                "2a40aaa9-9722-43ed-838b-c26c0b734718",
                "66849c32-592c-491c-91f3-c392f6916074",
                "3b8998c1-8d14-48b3-afa6-a1796d88c9f0",
                "697e484a-cf5f-4f1c-b09c-23644c3458bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "80b7eb02-294a-4021-883c-b1bbdaa31b97",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment().add(1,\"day\");const e=new ICalEvent({start:new Date},new ICalCalendar).timestamp(now);assert.deepStrictEqual(e.timestamp(),now)",
                  "err": {},
                  "uuid": "a36e8cdd-6945-43df-a3c1-34ad88c23de4",
                  "parentUUID": "80b7eb02-294a-4021-883c-b1bbdaa31b97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.timestamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "1fa4bbc3-74cc-45de-b40f-3297832c7dfc",
                  "parentUUID": "80b7eb02-294a-4021-883c-b1bbdaa31b97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.timestamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "c0d009b3-5f1c-41b5-9773-0c3582f0013e",
                  "parentUUID": "80b7eb02-294a-4021-883c-b1bbdaa31b97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.timestamp(3)},/`stamp`/,\"Number\");assert.throws(function(){event.timestamp(null)},/`stamp`/,\"null\");assert.throws(function(){event.timestamp(NaN)},/`stamp`/,\"NaN\");assert.throws(function(){event.timestamp(new Date(\"hallo\"))},/`stamp`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "17efed1a-acc2-4898-a307-fa373bd553dc",
                  "parentUUID": "80b7eb02-294a-4021-883c-b1bbdaa31b97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.timestamp(new Date))",
                  "err": {},
                  "uuid": "07d7fcd5-f255-4c6c-a011-3069a440ab48",
                  "parentUUID": "80b7eb02-294a-4021-883c-b1bbdaa31b97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a36e8cdd-6945-43df-a3c1-34ad88c23de4",
                "1fa4bbc3-74cc-45de-b40f-3297832c7dfc",
                "c0d009b3-5f1c-41b5-9773-0c3582f0013e",
                "17efed1a-acc2-4898-a307-fa373bd553dc",
                "07d7fcd5-f255-4c6c-a011-3069a440ab48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dd7f5e56-60c1-4536-8624-b7f22b862588",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.allDay(true);assert.strictEqual(e.allDay(),true)",
                  "err": {},
                  "uuid": "e3f457b8-4e1b-4103-b451-c18fddf93fa4",
                  "parentUUID": "dd7f5e56-60c1-4536-8624-b7f22b862588",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.allDay(true))",
                  "err": {},
                  "uuid": "a4f649eb-2d4b-4aa4-b9fa-5587457836af",
                  "parentUUID": "dd7f5e56-60c1-4536-8624-b7f22b862588",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.allDay(true);assert.strictEqual(event.allDay(),true)",
                  "err": {},
                  "uuid": "df3e80fa-59fc-42ce-8530-d21e6d06e787",
                  "parentUUID": "dd7f5e56-60c1-4536-8624-b7f22b862588",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3f457b8-4e1b-4103-b451-c18fddf93fa4",
                "a4f649eb-2d4b-4aa4-b9fa-5587457836af",
                "df3e80fa-59fc-42ce-8530-d21e6d06e787"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8981646a-a3e0-44df-9ed2-e8019be37aa4",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar).floating(true);assert.strictEqual(e.floating(),true)",
                  "err": {},
                  "uuid": "190a6d2c-767c-4ea5-ae37-42303958739e",
                  "parentUUID": "8981646a-a3e0-44df-9ed2-e8019be37aa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.floating(false));assert.deepStrictEqual(e,e.floating(true))",
                  "err": {},
                  "uuid": "480bc489-a578-4566-8e5a-db726064188b",
                  "parentUUID": "8981646a-a3e0-44df-9ed2-e8019be37aa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.floating(true);assert.strictEqual(event.floating(),true)",
                  "err": {},
                  "uuid": "456e35db-1775-46c6-bba1-a8cac90cd4c1",
                  "parentUUID": "8981646a-a3e0-44df-9ed2-e8019be37aa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");e.floating(true);assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "2e08ce71-bf6c-4f33-b0e1-260f0b3e4fb8",
                  "parentUUID": "8981646a-a3e0-44df-9ed2-e8019be37aa4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");e.floating(false);assert.strictEqual(e.timezone(),\"Europe/London\")",
                  "err": {},
                  "uuid": "25ae4a54-6619-42c2-85a9-c24bed9d0167",
                  "parentUUID": "8981646a-a3e0-44df-9ed2-e8019be37aa4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "190a6d2c-767c-4ea5-ae37-42303958739e",
                "480bc489-a578-4566-8e5a-db726064188b",
                "456e35db-1775-46c6-bba1-a8cac90cd4c1",
                "2e08ce71-bf6c-4f33-b0e1-260f0b3e4fb8",
                "25ae4a54-6619-42c2-85a9-c24bed9d0167"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options={freq:ICalEventRepeatingFreq.MONTHLY,count:5,interval:2,until:moment(),exclude:[moment()]};const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e.repeating(),null);e.repeating(options);assert.strictEqual(JSON.stringify(e.repeating(),null,\"  \"),JSON.stringify(options,null,\"  \"));e.repeating(null);assert.deepStrictEqual(e.repeating(),null)",
                  "err": {},
                  "uuid": "f60c3ff8-72c4-46c0-b8f5-409e6a47aad6",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.repeating(null));assert.deepStrictEqual(e.repeating(),null)",
                  "err": {},
                  "uuid": "cb2b77f9-dc04-496d-8112-af7c459fe594",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.repeating(null),\"repeating(null)\");assert.deepStrictEqual(e,e.repeating({freq:ICalEventRepeatingFreq.MONTHLY}),\"repeating({freq: 'MONTHLY'})\")",
                  "err": {},
                  "uuid": "b85330c6-b2bf-4030-a32e-f444d8d51eca",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{}},new ICalCalendar)},/Input must be one of the following: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY/)",
                  "err": {},
                  "uuid": "6d18ce87-3623-4220-8113-cea22b6d7d19",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:\"hello\"}},new ICalCalendar)},/must be one of the following/)",
                  "err": {},
                  "uuid": "83943aad-7f74-48bb-ae3a-02b373d9461a",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.freq,\"MONTHLY\")",
                  "err": {},
                  "uuid": "713a0941-a5c7-4ad7-88c7-961d07de0805",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,count:Infinity}},new ICalCalendar)},/`repeating.count` must be a finite number!/);assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,count:\"abc\"}},new ICalCalendar)},/`repeating\\.count` must be a finite number!/)",
                  "err": {},
                  "uuid": "f6b72993-f684-47bc-a8d7-9777597ea9ba",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,count:5});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.count,5)",
                  "err": {},
                  "uuid": "7dc69d22-fe4c-4604-ae92-3ec9adc6d26a",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:Infinity}},new ICalCalendar)},/`repeating.interval` must be a finite number!/);assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:\"abc\"}},new ICalCalendar)},/`repeating.interval` must be a finite number!/)",
                  "err": {},
                  "uuid": "74f08cd7-7812-4b97-9c18-9f35f8f09a93",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,interval:5});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.interval,5)",
                  "err": {},
                  "uuid": "af927526-fb60-4dc3-9bba-079afa25db91",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,until:null}},new ICalCalendar)},/Error: `repeating\\.until` has to be a valid date!/)",
                  "err": {},
                  "uuid": "653bcb7a-c359-4bf0-b440-c6aaa4a30c14",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "c9a6290f-a809-4d75-bc36-782ca103220a",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "d5b5ce1d-6be4-4d9f-b123-b4a4c7939eda",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\");event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "19839131-652b-479b-99e8-e73b9e948072",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:3})},/`repeating.until`/,\"Number\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:null})},/`repeating.until`/,\"null\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:NaN})},/`repeating.until`/,\"NaN\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:new Date(\"foo\")})},/`repeating.until`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "81d493c9-c9c4-494b-a206-623b86670c0e",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:\"FOO\"}},new ICalCalendar)},/Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:[\"SU\",\"BAR\",\"th\"]}},new ICalCalendar)},/Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:[\"SU\",Infinity,\"th\"]}},new ICalCalendar)},/Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/)",
                  "err": {},
                  "uuid": "32a5858a-f880-459c-8ee2-de30403d0809",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,byDay:[ICalWeekday.SU,ICalWeekday.WE,ICalWeekday.TH]});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byDay,[\"SU\",\"WE\",\"TH\"])",
                  "err": {},
                  "uuid": "a1595253-f201-48a6-aebf-c49e6a1596b2",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonth:\"FOO\"}},new ICalCalendar)},/`repeating\\.byMonth` contains invalid value `FOO`/);assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonth:[1,14,7]}},new ICalCalendar)},/`repeating\\.byMonth` contains invalid value `14`/)",
                  "err": {},
                  "uuid": "40fa07e6-1ac2-4280-8f03-d072edb7e052",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,byMonth:[1,12,7]});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byMonth,[1,12,7])",
                  "err": {},
                  "uuid": "2527fc34-babc-4c45-8bcc-178bc036df6f",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonthDay:\"FOO\"}},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `FOO`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonthDay:[1,32,-15]}},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `32`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonthDay:[-1,-32,15]}},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `-32`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byMonthDay:[1,0,15]}},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `0`/)",
                  "err": {},
                  "uuid": "4d25152a-07f6-4c86-85b2-72d4e3ba7d16",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,byMonthDay:[1,15]});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byMonthDay,[1,15])",
                  "err": {},
                  "uuid": "6e5da972-b51e-41d7-aba7-dc3226169763",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,interval:2,byDay:[ICalWeekday.SU],bySetPos:[367]}},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `367`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,interval:2,byDay:[ICalWeekday.SU],bySetPos:[-367]}},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `-367`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,interval:2,byDay:[ICalWeekday.SU],bySetPos:[0]}},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `0`/);assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,interval:2,byDay:[ICalWeekday.SU],bySetPos:[\"FOO\"]}},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `FOO`/)",
                  "err": {},
                  "uuid": "a54641e5-d178-489b-9393-379586c9790b",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,interval:2,bySetPos:6}},new ICalCalendar)},/`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/)",
                  "err": {},
                  "uuid": "682dc79d-aba5-44c8-ad27-fec72d4532ab",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,byDay:[ICalWeekday.SU],bySetPos:[2]});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.byDay?.length,1);assert.strictEqual(result.bySetPos?.length,1)",
                  "err": {},
                  "uuid": "a895fc27-602b-4cbd-9226-d4cca3c0a370",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:[ICalWeekday.SU],exclude:new Date(\"FOO\")}},new ICalCalendar)},/has to be a valid date/)",
                  "err": {},
                  "uuid": "78f45720-d1ff-4fbd-9c73-010f467f0b6e",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:[ICalWeekday.SU],exclude:[moment(),new Date(\"BAR\"),\"FOO\"]}},new ICalCalendar)},/has to be a valid date/)",
                  "err": {},
                  "uuid": "93977696-28ad-4ead-9558-30b506210068",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),end:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,byDay:[ICalWeekday.SU],exclude:42}},new ICalCalendar)},/`repeating.exclude\\[0\\]` has to be a valid date!/)",
                  "err": {},
                  "uuid": "4dacee9b-ec67-4ebd-a3b8-2264c1aea5db",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\");e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,exclude:[date.toJSON(),date.toDate(),date]});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.ok(Array.isArray(result.exclude));assert.strictEqual(result.exclude.length,3);assert.deepStrictEqual(result.exclude[0],date.toJSON(),\"String\");assert.deepStrictEqual(result.exclude[1],date.toDate(),\"Date\");assert.deepStrictEqual(result.exclude[2],date,\"Moment\")",
                  "err": {},
                  "uuid": "1b34c028-161d-4db5-badc-215878c6c958",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({start:moment(),summary:\"test\",repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,startOfWeek:\"FOO\"}},new ICalCalendar)},/Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/)",
                  "err": {},
                  "uuid": "972694ec-c56a-4798-a4d6-934159c2c2ae",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,startOfWeek:ICalWeekday.SU});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.startOfWeek,\"SU\")",
                  "err": {},
                  "uuid": "62cf3340-852e-4260-94b5-edb68176ece5",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=new Date(Date.UTC(2012,1,1,10,30));const e=new ICalEvent({start},new ICalCalendar);const rule=new rrule.RRule({freq:rrule.RRule.WEEKLY,interval:5,byweekday:[rrule.RRule.MO,rrule.RRule.FR],dtstart:start,until:new Date(Date.UTC(2012,12,31))});e.repeating(rule);const result=e.repeating();assert.ok(isRRule(result));assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "42a8038a-8da7-4a31-92b4-fcb5e05579e6",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const rule=\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\";e.repeating(rule);const result=e.repeating();assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "07b00bd8-1b09-49bc-8a75-40429a997f56",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add RRULE: prefix for single line string if not already there",
                  "fullTitle": "ical-generator Event repeating() should add RRULE: prefix for single line string if not already there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const rule=\"FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\";e.repeating(rule);const result=e.repeating();assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "a13aa40c-7c08-4d34-adf3-3ea03be08423",
                  "parentUUID": "62d2f8a5-db9a-40e3-8d27-77fde0470ae0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f60c3ff8-72c4-46c0-b8f5-409e6a47aad6",
                "cb2b77f9-dc04-496d-8112-af7c459fe594",
                "b85330c6-b2bf-4030-a32e-f444d8d51eca",
                "6d18ce87-3623-4220-8113-cea22b6d7d19",
                "83943aad-7f74-48bb-ae3a-02b373d9461a",
                "713a0941-a5c7-4ad7-88c7-961d07de0805",
                "f6b72993-f684-47bc-a8d7-9777597ea9ba",
                "7dc69d22-fe4c-4604-ae92-3ec9adc6d26a",
                "74f08cd7-7812-4b97-9c18-9f35f8f09a93",
                "af927526-fb60-4dc3-9bba-079afa25db91",
                "653bcb7a-c359-4bf0-b440-c6aaa4a30c14",
                "c9a6290f-a809-4d75-bc36-782ca103220a",
                "d5b5ce1d-6be4-4d9f-b123-b4a4c7939eda",
                "19839131-652b-479b-99e8-e73b9e948072",
                "81d493c9-c9c4-494b-a206-623b86670c0e",
                "32a5858a-f880-459c-8ee2-de30403d0809",
                "a1595253-f201-48a6-aebf-c49e6a1596b2",
                "40fa07e6-1ac2-4280-8f03-d072edb7e052",
                "2527fc34-babc-4c45-8bcc-178bc036df6f",
                "4d25152a-07f6-4c86-85b2-72d4e3ba7d16",
                "6e5da972-b51e-41d7-aba7-dc3226169763",
                "a54641e5-d178-489b-9393-379586c9790b",
                "682dc79d-aba5-44c8-ad27-fec72d4532ab",
                "a895fc27-602b-4cbd-9226-d4cca3c0a370",
                "78f45720-d1ff-4fbd-9c73-010f467f0b6e",
                "93977696-28ad-4ead-9558-30b506210068",
                "4dacee9b-ec67-4ebd-a3b8-2264c1aea5db",
                "1b34c028-161d-4db5-badc-215878c6c958",
                "972694ec-c56a-4798-a4d6-934159c2c2ae",
                "62cf3340-852e-4260-94b5-edb68176ece5",
                "42a8038a-8da7-4a31-92b4-fcb5e05579e6",
                "07b00bd8-1b09-49bc-8a75-40429a997f56",
                "a13aa40c-7c08-4d34-adf3-3ea03be08423"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "21cb01e1-a378-4f94-8ce8-c1473650b47a",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.summary(),\"\");e.summary(\"Testevent\");assert.strictEqual(e.summary(),\"Testevent\")",
                  "err": {},
                  "uuid": "b49db75b-a4ce-4941-bdd3-02c3d511b039",
                  "parentUUID": "21cb01e1-a378-4f94-8ce8-c1473650b47a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.summary(\"\"));assert.deepStrictEqual(e,e.summary(\"Testevent\"))",
                  "err": {},
                  "uuid": "a2289d1d-16c9-4970-b75c-424b718dc855",
                  "parentUUID": "21cb01e1-a378-4f94-8ce8-c1473650b47a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.summary(\"Example Event II\");assert.strictEqual(event.summary(),\"Example Event II\");event.summary(\"\");assert.strictEqual(event.summary(),\"\")",
                  "err": {},
                  "uuid": "0f6f2535-39b1-4fa2-86b1-b4d15beb6139",
                  "parentUUID": "21cb01e1-a378-4f94-8ce8-c1473650b47a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b49db75b-a4ce-4941-bdd3-02c3d511b039",
                "a2289d1d-16c9-4970-b75c-424b718dc855",
                "0f6f2535-39b1-4fa2-86b1-b4d15beb6139"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1fe199f5-2552-440b-b7d9-bb512b6e4bfd",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.location(),null);e.location(\"Test Location\");assert.deepStrictEqual(e.location(),{title:\"Test Location\"});e.location(null);assert.strictEqual(e.location(),null)",
                  "err": {},
                  "uuid": "a85a16d6-1446-477e-8193-825d39c8ebd3",
                  "parentUUID": "1fe199f5-2552-440b-b7d9-bb512b6e4bfd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.location(),null);e.location({title:\"Foo\",geo:{lat:44.5,lon:-3.4}});const location=e.location();assert.ok(location);assert.ok(\"title\"in location);assert.deepStrictEqual(location?.title,\"Foo\");assert.deepStrictEqual(location?.geo,{lat:44.5,lon:-3.4});e.location(null);assert.strictEqual(e.location(),null)",
                  "err": {},
                  "uuid": "a1b120e5-aa82-4919-8946-d3e8d1da35dd",
                  "parentUUID": "1fe199f5-2552-440b-b7d9-bb512b6e4bfd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.location(null));assert.deepStrictEqual(e,e.location(\"Test Location\"))",
                  "err": {},
                  "uuid": "b8458970-27ad-427b-8681-6c6fa2bf17cf",
                  "parentUUID": "1fe199f5-2552-440b-b7d9-bb512b6e4bfd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.location(\"Europa-Park\");const location=event.location();assert.ok(location);assert.ok(\"title\"in location);assert.strictEqual(location?.title,\"Europa-Park\")",
                  "err": {},
                  "uuid": "e2ebc071-4e8c-4ae8-873d-42bbad27b609",
                  "parentUUID": "1fe199f5-2552-440b-b7d9-bb512b6e4bfd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);assert.throws(()=>event.location({geo:3}),/`location` isn't formatted correctly/i);assert.throws(()=>event.location({}),/`location` isn't formatted correctly/i)",
                  "err": {},
                  "uuid": "4514bec6-7f6c-4c17-90b4-8d24257b1406",
                  "parentUUID": "1fe199f5-2552-440b-b7d9-bb512b6e4bfd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a85a16d6-1446-477e-8193-825d39c8ebd3",
                "a1b120e5-aa82-4919-8946-d3e8d1da35dd",
                "b8458970-27ad-427b-8681-6c6fa2bf17cf",
                "e2ebc071-4e8c-4ae8-873d-42bbad27b609",
                "4514bec6-7f6c-4c17-90b4-8d24257b1406"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50f1760f-027c-413e-ad42-2acc920a487c",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.description(),null);e.description(\"I don't need a description. I'm far to awesome for descriptions\\u2026\");assert.deepStrictEqual(e.description(),{plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\"});e.description({plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\",html:\"I don't need a description.<br />I'm far to awesome for descriptions\\u2026\"});assert.deepStrictEqual(e.description(),{plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\",html:\"I don't need a description.<br />I'm far to awesome for descriptions\\u2026\"});e.description(null);assert.strictEqual(e.description(),null)",
                  "err": {},
                  "uuid": "5087f038-325e-4827-b128-241956c1226e",
                  "parentUUID": "50f1760f-027c-413e-ad42-2acc920a487c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.description(null));assert.deepStrictEqual(e,e.description(\"I don't need a description. I'm far to awesome for descriptions\\u2026\"))",
                  "err": {},
                  "uuid": "96f92d6b-29e8-4e6b-9b92-e19dba2c27d5",
                  "parentUUID": "50f1760f-027c-413e-ad42-2acc920a487c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.description(\"Well. But other people need descriptions\\u2026 :/\");assert.deepStrictEqual(event.description(),{plain:\"Well. But other people need descriptions\\u2026 :/\"});event.description({plain:\"I am uncool text.\",html:\"<marquee>I'm the best HTML tag in this universe!</marquee>\"});assert.ok(event.toString().includes(\"<marquee>I'm the best HTML tag in this universe!</marquee>\"))",
                  "err": {},
                  "uuid": "0be13960-9d50-48d6-add7-950b8bf5c770",
                  "parentUUID": "50f1760f-027c-413e-ad42-2acc920a487c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5087f038-325e-4827-b128-241956c1226e",
                "96f92d6b-29e8-4e6b-9b92-e19dba2c27d5",
                "0be13960-9d50-48d6-add7-950b8bf5c770"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d4ea409-5902-4b2a-8bcf-fdcc23fe2665",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.organizer(),null);e.organizer(null);assert.strictEqual(e.organizer(),null);e.organizer({name:\"Sebastian Pekarek\",email:\"mail@example.com\"});assert.strictEqual(\"Sebastian Pekarek\",e.organizer()?.name);assert.strictEqual(\"mail@example.com\",e.organizer()?.email);e.organizer({name:\"Sebastian Pekarek\",email:\"mail@example.com\",mailto:\"mail2@example2.com\"});assert.strictEqual(\"Sebastian Pekarek\",e.organizer()?.name);assert.strictEqual(\"mail@example.com\",e.organizer()?.email);assert.strictEqual(\"mail2@example2.com\",e.organizer()?.mailto)",
                  "err": {},
                  "uuid": "22cac91e-8a77-4edd-b0a3-e09ff464acff",
                  "parentUUID": "6d4ea409-5902-4b2a-8bcf-fdcc23fe2665",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.organizer(null));assert.deepStrictEqual(e,e.organizer(\"Sebastian Pekarek <mail@example.com>\"))",
                  "err": {},
                  "uuid": "5add6f21-7201-4493-9b81-be37a8656b5b",
                  "parentUUID": "6d4ea409-5902-4b2a-8bcf-fdcc23fe2665",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({name:\"Sebastian Pekarek\",email:\"mail@example.com\"});assert.deepStrictEqual(event.organizer(),{name:\"Sebastian Pekarek\",email:\"mail@example.com\",mailto:void 0,sentBy:void 0});event.organizer({name:\"Sebastian Pekarek\",email:\"mail@example.com\",mailto:\"mail2@example2.com\"});assert.deepStrictEqual(event.organizer(),{name:\"Sebastian Pekarek\",email:\"mail@example.com\",mailto:\"mail2@example2.com\",sentBy:void 0})",
                  "err": {},
                  "uuid": "1adcf177-670a-4e20-b86e-cea2f28bba2e",
                  "parentUUID": "6d4ea409-5902-4b2a-8bcf-fdcc23fe2665",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({name:\"Sebastian Pekarek\",email:\"mail@example.com\",sentBy:\"bot@example.com\"});assert.deepStrictEqual(event.organizer(),{name:\"Sebastian Pekarek\",email:\"mail@example.com\",mailto:void 0,sentBy:\"bot@example.com\"})",
                  "err": {},
                  "uuid": "8ff912ba-2465-4e25-b01a-edbc0dffd703",
                  "parentUUID": "6d4ea409-5902-4b2a-8bcf-fdcc23fe2665",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer(\"Sebastian Pekarek <mail@example.com>\");assert.deepStrictEqual(event.organizer(),{name:\"Sebastian Pekarek\",email:\"mail@example.com\"})",
                  "err": {},
                  "uuid": "34387899-82fe-418e-b8cc-c5b0414e2102",
                  "parentUUID": "6d4ea409-5902-4b2a-8bcf-fdcc23fe2665",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer(\"foo bar\")},/`organizer`/)",
                  "err": {},
                  "uuid": "760a1913-460f-4bc4-bf42-5c1c9ccab8bc",
                  "parentUUID": "6d4ea409-5902-4b2a-8bcf-fdcc23fe2665",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer({email:\"foo\"})},/`organizer\\.name`/)",
                  "err": {},
                  "uuid": "4581f66c-80c6-4122-ad7f-deca9006c525",
                  "parentUUID": "6d4ea409-5902-4b2a-8bcf-fdcc23fe2665",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer(Infinity)},/`organizer`/);assert.throws(function(){e.organizer(NaN)},/`organizer`/)",
                  "err": {},
                  "uuid": "034ca00c-8410-4c4b-982b-25dfafd7e1f4",
                  "parentUUID": "6d4ea409-5902-4b2a-8bcf-fdcc23fe2665",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({name:\"Sebastian Pekarek\"});assert.deepStrictEqual(event.organizer(),{name:\"Sebastian Pekarek\",email:void 0,mailto:void 0,sentBy:void 0})",
                  "err": {},
                  "uuid": "e2e2a9d8-2f1a-45d6-8061-6f5927c9a70e",
                  "parentUUID": "6d4ea409-5902-4b2a-8bcf-fdcc23fe2665",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include a : (PR #610)",
                  "fullTitle": "ical-generator Event organizer() should include a : (PR #610)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\",organizer:{name:\"Some Guy\"}},new ICalCalendar);assert.ok(event.toString().includes('ORGANIZER;CN=\"Some Guy\":'))",
                  "err": {},
                  "uuid": "f7a12869-d99c-4863-b9d3-25f9444f03d4",
                  "parentUUID": "6d4ea409-5902-4b2a-8bcf-fdcc23fe2665",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22cac91e-8a77-4edd-b0a3-e09ff464acff",
                "5add6f21-7201-4493-9b81-be37a8656b5b",
                "1adcf177-670a-4e20-b86e-cea2f28bba2e",
                "8ff912ba-2465-4e25-b01a-edbc0dffd703",
                "34387899-82fe-418e-b8cc-c5b0414e2102",
                "760a1913-460f-4bc4-bf42-5c1c9ccab8bc",
                "4581f66c-80c6-4122-ad7f-deca9006c525",
                "034ca00c-8410-4c4b-982b-25dfafd7e1f4",
                "e2e2a9d8-2f1a-45d6-8061-6f5927c9a70e",
                "f7a12869-d99c-4863-b9d3-25f9444f03d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9486d039-292b-4909-a6ed-da2003af1384",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({email:\"mail@example.com\"},event);assert.strictEqual(event.createAttendee(attendee),attendee,\"createAttendee returns attendee\");assert.deepStrictEqual(event.attendees()[0],attendee,\"attendee pushed\")",
                  "err": {},
                  "uuid": "f6fbff83-1faa-41bb-af76-9d4f5c840280",
                  "parentUUID": "9486d039-292b-4909-a6ed-da2003af1384",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createAttendee({email:\"mail@example.com\"})instanceof ICalAttendee);assert.strictEqual(event.attendees.length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "f994b696-a2c7-402a-84be-dc05c83cfcdd",
                  "parentUUID": "9486d039-292b-4909-a6ed-da2003af1384",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=event.createAttendee(\"Zac <zac@example.com>\");assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(event.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "951a01a8-5287-4990-9545-e163c22fcdc4",
                  "parentUUID": "9486d039-292b-4909-a6ed-da2003af1384",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.createAttendee(\"foo bar\")},/isn't formated correctly/)",
                  "err": {},
                  "uuid": "02e2ed2c-a956-4f2d-a2d8-7c15acab635c",
                  "parentUUID": "9486d039-292b-4909-a6ed-da2003af1384",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=event.createAttendee({name:\"Zac\",email:\"zac@example.com\"});assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(event.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "2479f820-b893-47ca-a2c9-87928d7e270b",
                  "parentUUID": "9486d039-292b-4909-a6ed-da2003af1384",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6fbff83-1faa-41bb-af76-9d4f5c840280",
                "f994b696-a2c7-402a-84be-dc05c83cfcdd",
                "951a01a8-5287-4990-9545-e163c22fcdc4",
                "02e2ed2c-a956-4f2d-a2d8-7c15acab635c",
                "2479f820-b893-47ca-a2c9-87928d7e270b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df11d24d-9f92-4f1d-ab4c-681409166f5e",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.attendees().length,0);const attendee=event.createAttendee({email:\"mail@example.com\"});assert.strictEqual(event.attendees().length,1);assert.deepStrictEqual(event.attendees()[0],attendee)",
                  "err": {},
                  "uuid": "a38a373d-703b-4d6b-a052-0e57e634b906",
                  "parentUUID": "df11d24d-9f92-4f1d-ab4c-681409166f5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.attendees([{name:\"Person A\",email:\"a@example.com\"},{name:\"Person B\",email:\"b@example.com\"}]);assert.strictEqual(event.attendees().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "b21627ec-484d-4a02-b2fe-5a5e7808e4dd",
                  "parentUUID": "df11d24d-9f92-4f1d-ab4c-681409166f5e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a38a373d-703b-4d6b-a052-0e57e634b906",
                "b21627ec-484d-4a02-b2fe-5a5e7808e4dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f35b2379-ea5a-4b4a-9af3-563919f26b3c",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createAlarm({type:ICalAlarmType.display,trigger:60*10})instanceof ICalAlarm)",
                  "err": {},
                  "uuid": "52e8f3f8-65aa-4835-a9b1-3d18788d53f3",
                  "parentUUID": "f35b2379-ea5a-4b4a-9af3-563919f26b3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const alarm=event.createAlarm({type:ICalAlarmType.audio,trigger:60*10});assert.strictEqual(alarm.type(),\"audio\")",
                  "err": {},
                  "uuid": "63446d2d-9476-49a5-8a98-a99326490819",
                  "parentUUID": "f35b2379-ea5a-4b4a-9af3-563919f26b3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52e8f3f8-65aa-4835-a9b1-3d18788d53f3",
                "63446d2d-9476-49a5-8a98-a99326490819"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84963090-db51-4b6d-9a2f-9242abdf6048",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.alarms().length,0);const alarm=event.createAlarm({type:ICalAlarmType.display,trigger:600});assert.strictEqual(event.alarms().length,1);assert.deepStrictEqual(event.alarms()[0],alarm)",
                  "err": {},
                  "uuid": "2ce7c917-7a86-47bb-a55f-ef915b75ca20",
                  "parentUUID": "84963090-db51-4b6d-9a2f-9242abdf6048",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.alarms([{type:ICalAlarmType.audio,trigger:60},{type:ICalAlarmType.display,trigger:600}]);assert.strictEqual(event.alarms().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "4c5338b3-f2d9-4a19-a7dc-097049ddcd1f",
                  "parentUUID": "84963090-db51-4b6d-9a2f-9242abdf6048",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ce7c917-7a86-47bb-a55f-ef915b75ca20",
                "4c5338b3-f2d9-4a19-a7dc-097049ddcd1f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "00c938e1-a12d-4cc6-a2f2-d2263c9847e3",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createCategory({name:\"Test\"})instanceof ICalCategory)",
                  "err": {},
                  "uuid": "60a29cdf-a77f-4ca5-b760-833e6d9b7174",
                  "parentUUID": "00c938e1-a12d-4cc6-a2f2-d2263c9847e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const category=event.createCategory({name:\"foo\"});assert.strictEqual(category.name(),\"foo\")",
                  "err": {},
                  "uuid": "8d37b8b6-fa7a-4111-8c19-31d8152c33eb",
                  "parentUUID": "00c938e1-a12d-4cc6-a2f2-d2263c9847e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60a29cdf-a77f-4ca5-b760-833e6d9b7174",
                "8d37b8b6-fa7a-4111-8c19-31d8152c33eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fdf7610a-9e00-4036-af06-18a4cbb6e9b8",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.categories().length,0);const category=event.createCategory({name:\"Test\"});assert.strictEqual(event.categories().length,1);assert.deepStrictEqual(event.categories()[0],category)",
                  "err": {},
                  "uuid": "a2f3bc81-7cac-4dfd-8c53-a9d518f77384",
                  "parentUUID": "fdf7610a-9e00-4036-af06-18a4cbb6e9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.categories([{name:\"foo\"},{name:\"bar\"}]);assert.strictEqual(event.categories().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "772687a7-896f-477b-8c8d-dbeea4296a59",
                  "parentUUID": "fdf7610a-9e00-4036-af06-18a4cbb6e9b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2f3bc81-7cac-4dfd-8c53-a9d518f77384",
                "772687a7-896f-477b-8c8d-dbeea4296a59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65009883-a2a7-4efa-b340-abfcf567d859",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.status(),null);event.status(ICalEventStatus.CONFIRMED);assert.strictEqual(event.status(),\"CONFIRMED\");event.status(null);assert.strictEqual(event.status(),null)",
                  "err": {},
                  "uuid": "c09137a9-c965-488b-8aff-23bdaa94fedb",
                  "parentUUID": "65009883-a2a7-4efa-b340-abfcf567d859",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.status(null));assert.deepStrictEqual(e,e.status(ICalEventStatus.CONFIRMED))",
                  "err": {},
                  "uuid": "91d2de33-4cf4-4142-85ee-141111f77ca3",
                  "parentUUID": "65009883-a2a7-4efa-b340-abfcf567d859",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.status(ICalEventStatus.CONFIRMED);e.status(null);assert.strictEqual(e.status(),null)",
                  "err": {},
                  "uuid": "3685e482-24b9-46df-861b-e52327a99a1e",
                  "parentUUID": "65009883-a2a7-4efa-b340-abfcf567d859",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.status(ICalEventStatus.CONFIRMED);assert.strictEqual(e.status(),\"CONFIRMED\");assert.strictEqual(e.status(),ICalEventStatus.CONFIRMED)",
                  "err": {},
                  "uuid": "46674cdb-7aed-4337-a8b0-a79724fe3709",
                  "parentUUID": "65009883-a2a7-4efa-b340-abfcf567d859",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.status(\"COOKING\")},/Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);assert.throws(function(){e.status(Infinity)},/Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);assert.throws(function(){e.status(NaN)},/Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);assert.throws(function(){e.status(-1)},/Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/)",
                  "err": {},
                  "uuid": "29f1e9d3-c443-4c80-8eab-a74b2924e5de",
                  "parentUUID": "65009883-a2a7-4efa-b340-abfcf567d859",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c09137a9-c965-488b-8aff-23bdaa94fedb",
                "91d2de33-4cf4-4142-85ee-141111f77ca3",
                "3685e482-24b9-46df-861b-e52327a99a1e",
                "46674cdb-7aed-4337-a8b0-a79724fe3709",
                "29f1e9d3-c443-4c80-8eab-a74b2924e5de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30626d32-187a-428e-a394-b3cc9451df4b",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.busystatus(),null);event.busystatus(ICalEventBusyStatus.BUSY);assert.strictEqual(event.busystatus(),\"BUSY\");event.busystatus(null);assert.strictEqual(event.busystatus(),null)",
                  "err": {},
                  "uuid": "ea9dbbbe-7010-4eb4-8770-2d63d0e7d451",
                  "parentUUID": "30626d32-187a-428e-a394-b3cc9451df4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.busystatus(null));assert.deepStrictEqual(e,e.busystatus(ICalEventBusyStatus.BUSY))",
                  "err": {},
                  "uuid": "950ebdc0-3799-4ae6-942e-d3b5608570f6",
                  "parentUUID": "30626d32-187a-428e-a394-b3cc9451df4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.busystatus(ICalEventBusyStatus.BUSY);e.busystatus(null);assert.strictEqual(e.busystatus(),null)",
                  "err": {},
                  "uuid": "c22c2060-ba86-43b9-8b85-d806509b02eb",
                  "parentUUID": "30626d32-187a-428e-a394-b3cc9451df4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.busystatus(ICalEventBusyStatus.BUSY);assert.strictEqual(e.busystatus(),\"BUSY\")",
                  "err": {},
                  "uuid": "7c736359-f42b-4dde-9f5b-31e7537de481",
                  "parentUUID": "30626d32-187a-428e-a394-b3cc9451df4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.busystatus(\"COOKING\")},/FREE, TENTATIVE, BUSY, OOF/);assert.throws(function(){e.busystatus(Infinity)},/FREE, TENTATIVE, BUSY, OOF/);assert.throws(function(){e.busystatus(NaN)},/FREE, TENTATIVE, BUSY, OOF/);assert.throws(function(){e.busystatus(-1)},/FREE, TENTATIVE, BUSY, OOF/)",
                  "err": {},
                  "uuid": "0de7953b-9371-4d26-afee-0b81d2c014e5",
                  "parentUUID": "30626d32-187a-428e-a394-b3cc9451df4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ea9dbbbe-7010-4eb4-8770-2d63d0e7d451",
                "950ebdc0-3799-4ae6-942e-d3b5608570f6",
                "c22c2060-ba86-43b9-8b85-d806509b02eb",
                "7c736359-f42b-4dde-9f5b-31e7537de481",
                "0de7953b-9371-4d26-afee-0b81d2c014e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "564f736d-c950-40e6-abac-a5d87b30255f",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.priority(),null);e.priority(5);assert.strictEqual(e.priority(),5)",
                  "err": {},
                  "uuid": "e46d0c31-bf1d-4e5b-8faa-4be23d6b07f8",
                  "parentUUID": "564f736d-c950-40e6-abac-a5d87b30255f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.priority(null));assert.deepStrictEqual(e,e.priority(5))",
                  "err": {},
                  "uuid": "2aa10a65-a1f1-425c-a9e8-78d1abcd45a5",
                  "parentUUID": "564f736d-c950-40e6-abac-a5d87b30255f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.priority(5);assert.strictEqual(event.priority(),5);assert.ok(event.toString().includes(\"PRIORITY:5\"))",
                  "err": {},
                  "uuid": "a840ecf7-fc95-4a79-9a95-f0f2aacd60dc",
                  "parentUUID": "564f736d-c950-40e6-abac-a5d87b30255f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e46d0c31-bf1d-4e5b-8faa-4be23d6b07f8",
                "2aa10a65-a1f1-425c-a9e8-78d1abcd45a5",
                "a840ecf7-fc95-4a79-9a95-f0f2aacd60dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a769a97-22fd-42c6-bf9c-77a8bfbaefe5",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.url(),null);e.url(\"http://sebbo.net/\");assert.strictEqual(e.url(),\"http://sebbo.net/\")",
                  "err": {},
                  "uuid": "e64923c7-d7a9-41da-8363-b0b24760a27b",
                  "parentUUID": "0a769a97-22fd-42c6-bf9c-77a8bfbaefe5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.url(null));assert.deepStrictEqual(e,e.url(\"http://sebbo.net/\"))",
                  "err": {},
                  "uuid": "314d9c17-4609-490a-bda3-6ee6ef77618c",
                  "parentUUID": "0a769a97-22fd-42c6-bf9c-77a8bfbaefe5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.url(\"http://github.com/sebbo2002/ical-generator\");assert.strictEqual(event.url(),\"http://github.com/sebbo2002/ical-generator\")",
                  "err": {},
                  "uuid": "cee1f968-4727-4b69-84f2-533d6cb033bd",
                  "parentUUID": "0a769a97-22fd-42c6-bf9c-77a8bfbaefe5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e64923c7-d7a9-41da-8363-b0b24760a27b",
                "314d9c17-4609-490a-bda3-6ee6ef77618c",
                "cee1f968-4727-4b69-84f2-533d6cb033bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5bf24d1f-e012-4034-9e05-f0d1e93d1996",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event.createAttachment(\"https://files.sebbo.net/calendar/attachments/foo\"),event)",
                  "err": {},
                  "uuid": "3d93c24e-f6fe-4f6c-97b3-471d6ccf1e8f",
                  "parentUUID": "5bf24d1f-e012-4034-9e05-f0d1e93d1996",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d93c24e-f6fe-4f6c-97b3-471d6ccf1e8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7473be2-bbe4-4fca-ad6b-f3e4bd8cf5d1",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.attachments().length,0);event.createAttachment(\"https://files.sebbo.net/calendar/attachments/foo\");assert.strictEqual(event.attachments().length,1);assert.deepStrictEqual(typeof event.attachments()[0],\"string\")",
                  "err": {},
                  "uuid": "1b8bb7e9-9ab3-444b-b223-e510490b81c9",
                  "parentUUID": "a7473be2-bbe4-4fca-ad6b-f3e4bd8cf5d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.attachments([\"https://files.sebbo.net/calendar/attachments/foo\",\"https://files.sebbo.net/calendar/attachments/bar\"]);assert.strictEqual(event.attachments().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "6d7c890c-a9c2-4f6c-9359-a73da033c95f",
                  "parentUUID": "a7473be2-bbe4-4fca-ad6b-f3e4bd8cf5d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b8bb7e9-9ab3-444b-b223-e510490b81c9",
                "6d7c890c-a9c2-4f6c-9359-a73da033c95f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "68f26f30-5dda-4e46-9949-a0b30e5f37dd",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.created(new Date))",
                  "err": {},
                  "uuid": "5b7dee7f-d4fc-4c43-92f7-228f73f261d0",
                  "parentUUID": "68f26f30-5dda-4e46-9949-a0b30e5f37dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(moment());assert.ok(moment.isMoment(e.created()))",
                  "err": {},
                  "uuid": "f4354038-bb78-45b9-8c7f-6064062802a8",
                  "parentUUID": "68f26f30-5dda-4e46-9949-a0b30e5f37dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(new Date);assert.ok(e.created()instanceof Date)",
                  "err": {},
                  "uuid": "f0fe8622-91a7-4e42-9750-cc56cc675936",
                  "parentUUID": "68f26f30-5dda-4e46-9949-a0b30e5f37dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(moment().toJSON());assert.strictEqual(typeof e.created(),\"string\")",
                  "err": {},
                  "uuid": "76b37d82-e281-41a3-a646-eab356752513",
                  "parentUUID": "68f26f30-5dda-4e46-9949-a0b30e5f37dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(new Date);assert.ok(e.created()instanceof Date)",
                  "err": {},
                  "uuid": "2775094a-00ef-4684-be81-0c6ca36d2187",
                  "parentUUID": "68f26f30-5dda-4e46-9949-a0b30e5f37dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=new Date;const e=new ICalEvent({start:new Date},new ICalCalendar).created(now);assert.deepStrictEqual(e.created()?.valueOf(),now.getTime())",
                  "err": {},
                  "uuid": "81a839d2-9268-41c1-b125-c95e475e23df",
                  "parentUUID": "68f26f30-5dda-4e46-9949-a0b30e5f37dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.created(\"hallo\")},/`created`/)",
                  "err": {},
                  "uuid": "aee74533-9d50-4cba-9e2b-11c2be6bf073",
                  "parentUUID": "68f26f30-5dda-4e46-9949-a0b30e5f37dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b7dee7f-d4fc-4c43-92f7-228f73f261d0",
                "f4354038-bb78-45b9-8c7f-6064062802a8",
                "f0fe8622-91a7-4e42-9750-cc56cc675936",
                "76b37d82-e281-41a3-a646-eab356752513",
                "2775094a-00ef-4684-be81-0c6ca36d2187",
                "81a839d2-9268-41c1-b125-c95e475e23df",
                "aee74533-9d50-4cba-9e2b-11c2be6bf073"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8456703c-7562-44f8-a105-b40f1c4b1991",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.lastModified(new Date))",
                  "err": {},
                  "uuid": "85726c01-5396-487f-931a-ef1f0bebfb3e",
                  "parentUUID": "8456703c-7562-44f8-a105-b40f1c4b1991",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(moment());assert.ok(moment.isMoment(e.lastModified()))",
                  "err": {},
                  "uuid": "75c6708d-0136-4de8-bd2e-fc731a0fc873",
                  "parentUUID": "8456703c-7562-44f8-a105-b40f1c4b1991",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(new Date);assert.ok(e.lastModified()instanceof Date)",
                  "err": {},
                  "uuid": "ae3e151f-915d-4db9-9bd0-8ec8d93cfc35",
                  "parentUUID": "8456703c-7562-44f8-a105-b40f1c4b1991",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().toJSON();e.lastModified(date);assert.strictEqual(e.lastModified(),date)",
                  "err": {},
                  "uuid": "b5d48ac4-aba1-4870-b6be-4d8b5238974f",
                  "parentUUID": "8456703c-7562-44f8-a105-b40f1c4b1991",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(new Date);assert.ok(e.lastModified()instanceof Date)",
                  "err": {},
                  "uuid": "e7686ff0-ae5a-4d12-a409-57766807b0a9",
                  "parentUUID": "8456703c-7562-44f8-a105-b40f1c4b1991",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=new Date;const e=new ICalEvent({start:new Date},new ICalCalendar).lastModified(now);assert.deepStrictEqual(e.lastModified()?.valueOf(),now.getTime())",
                  "err": {},
                  "uuid": "3c342aa6-db76-4ed4-8174-1393339568e2",
                  "parentUUID": "8456703c-7562-44f8-a105-b40f1c4b1991",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.lastModified(\"hallo\")},/`lastModified`/)",
                  "err": {},
                  "uuid": "c3794881-66b5-4d49-a586-4846c00ef8e3",
                  "parentUUID": "8456703c-7562-44f8-a105-b40f1c4b1991",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85726c01-5396-487f-931a-ef1f0bebfb3e",
                "75c6708d-0136-4de8-bd2e-fc731a0fc873",
                "ae3e151f-915d-4db9-9bd0-8ec8d93cfc35",
                "b5d48ac4-aba1-4870-b6be-4d8b5238974f",
                "e7686ff0-ae5a-4d12-a409-57766807b0a9",
                "3c342aa6-db76-4ed4-8174-1393339568e2",
                "c3794881-66b5-4d49-a586-4846c00ef8e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7581904c-fd4c-4aa7-924a-159a74842328",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.class(),null);event.class(ICalEventClass.PRIVATE);assert.strictEqual(event.class(),\"PRIVATE\");event.class(null);assert.strictEqual(event.class(),null)",
                  "err": {},
                  "uuid": "9659a60f-5f7a-4872-835d-e0d8c797b6bd",
                  "parentUUID": "7581904c-fd4c-4aa7-924a-159a74842328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.class(null));assert.deepStrictEqual(e,e.class(ICalEventClass.PRIVATE))",
                  "err": {},
                  "uuid": "703ee7f8-5364-4dce-ac62-eed5e78dc7c1",
                  "parentUUID": "7581904c-fd4c-4aa7-924a-159a74842328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.class(ICalEventClass.PRIVATE);e.class(null);assert.strictEqual(e.class(),null)",
                  "err": {},
                  "uuid": "637ab169-726b-4f16-9fca-617dbdcc2977",
                  "parentUUID": "7581904c-fd4c-4aa7-924a-159a74842328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.class(ICalEventClass.PRIVATE);assert.strictEqual(e.class(),\"PRIVATE\");assert.strictEqual(e.class(),ICalEventClass.PRIVATE)",
                  "err": {},
                  "uuid": "075a7097-5339-4da5-9632-82dcc081fc8b",
                  "parentUUID": "7581904c-fd4c-4aa7-924a-159a74842328",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.class(\"COOKING\")},/Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);assert.throws(function(){e.class(Infinity)},/Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);assert.throws(function(){e.class(NaN)},/Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);assert.throws(function(){e.class(-1)},/Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/)",
                  "err": {},
                  "uuid": "2371972c-1e5c-44e5-94e7-923e5a725d06",
                  "parentUUID": "7581904c-fd4c-4aa7-924a-159a74842328",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9659a60f-5f7a-4872-835d-e0d8c797b6bd",
                "703ee7f8-5364-4dce-ac62-eed5e78dc7c1",
                "637ab169-726b-4f16-9fca-617dbdcc2977",
                "075a7097-5339-4da5-9632-82dcc081fc8b",
                "2371972c-1e5c-44e5-94e7-923e5a725d06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "551bbb62-1b70-43e4-a949-014a57a42c32",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "70474488-6446-45d5-8d2f-ee1f90e49593",
                  "parentUUID": "551bbb62-1b70-43e4-a949-014a57a42c32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70474488-6446-45d5-8d2f-ee1f90e49593"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5783bf8-8bc1-408f-bcde-dbe85621c87f",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=moment().add(1,\"month\");const event=new ICalEvent({start:new Date},new ICalCalendar).summary(\"foo\").start(date);assert.strictEqual(event.toJSON().summary,\"foo\",\"summary is okay\");assert.deepStrictEqual(event.toJSON().start,date.toJSON(),\"start is okay\");assert.strictEqual(typeof event.toJSON().start,\"string\",\"start is string\")",
                  "err": {},
                  "uuid": "86138fa0-5322-4132-b30f-a134bad20f0e",
                  "parentUUID": "d5783bf8-8bc1-408f-bcde-dbe85621c87f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;const rule=new rrule.RRule({freq:rrule.RRule.WEEKLY,interval:5,byweekday:[rrule.RRule.MO,rrule.RRule.FR],dtstart:date,until:new Date(Date.UTC(2012,12,31))});const event=new ICalEvent({start:new Date},new ICalCalendar).summary(\"foo\").start(date).repeating(rule);const json=event.toJSON();const before=event.toString();assert.ok(typeof json.repeating===\"string\");const event2=new ICalEvent(event.toJSON(),new ICalCalendar);const after=event2.toString();assert.strictEqual(after,before)",
                  "err": {},
                  "uuid": "9316afb4-1232-402b-b76a-f28a8bc18ccc",
                  "parentUUID": "d5783bf8-8bc1-408f-bcde-dbe85621c87f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalEvent({start:new Date},new ICalCalendar);new ICalEvent(a.toJSON(),new ICalCalendar)",
                  "err": {},
                  "uuid": "51c858f3-3f6e-4c48-8d5a-d8e23fcb6538",
                  "parentUUID": "d5783bf8-8bc1-408f-bcde-dbe85621c87f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86138fa0-5322-4132-b30f-a134bad20f0e",
                "9316afb4-1232-402b-b76a-f28a8bc18ccc",
                "51c858f3-3f6e-4c48-8d5a-d8e23fcb6538"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81cc1a4e-0c5c-427b-9f7f-7a78a19ca04b",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.transparency(),null);event.transparency(ICalEventTransparency.OPAQUE);assert.strictEqual(event.transparency(),\"OPAQUE\");event.transparency(null);assert.strictEqual(event.transparency(),null)",
                  "err": {},
                  "uuid": "408cad71-4d8d-48de-9769-056de2746974",
                  "parentUUID": "81cc1a4e-0c5c-427b-9f7f-7a78a19ca04b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.transparency(null));assert.deepStrictEqual(e,e.transparency(ICalEventTransparency.TRANSPARENT))",
                  "err": {},
                  "uuid": "a88632f6-2c98-4d1b-b7f5-38b941c72513",
                  "parentUUID": "81cc1a4e-0c5c-427b-9f7f-7a78a19ca04b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.transparency(ICalEventTransparency.OPAQUE);e.transparency(null);assert.strictEqual(e.transparency(),null)",
                  "err": {},
                  "uuid": "9d1dd85b-538d-435c-b2f7-38ef9c1e58a7",
                  "parentUUID": "81cc1a4e-0c5c-427b-9f7f-7a78a19ca04b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.transparency(ICalEventTransparency.OPAQUE);assert.strictEqual(e.transparency(),\"OPAQUE\")",
                  "err": {},
                  "uuid": "86862afc-0b7b-438d-b6b1-a2dd1db04fd0",
                  "parentUUID": "81cc1a4e-0c5c-427b-9f7f-7a78a19ca04b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.transparency(\"COOKING\")},/TRANSPARENT, OPAQUE/);assert.throws(function(){e.transparency(Infinity)},/TRANSPARENT, OPAQUE/);assert.throws(function(){e.transparency(-1)},/TRANSPARENT, OPAQUE/)",
                  "err": {},
                  "uuid": "f22a777f-a77c-4e9c-9d88-df30987e5608",
                  "parentUUID": "81cc1a4e-0c5c-427b-9f7f-7a78a19ca04b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "408cad71-4d8d-48de-9769-056de2746974",
                "a88632f6-2c98-4d1b-b7f5-38b941c72513",
                "9d1dd85b-538d-435c-b2f7-38ef9c1e58a7",
                "86862afc-0b7b-438d-b6b1-a2dd1db04fd0",
                "f22a777f-a77c-4e9c-9d88-df30987e5608"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "66ee6b2d-82bf-4f28-9da8-a57fc8a08b46",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date,end:new Date(new Date().getTime()+36e5),summary:\"Hel\\\\\\\\lo\\nW;orl,d\"},new ICalCalendar);assert.ok(e.toString().indexOf(\"Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d\")>-1)",
                  "err": {},
                  "uuid": "ebc511ff-7903-4724-a07b-b3d07f8a7ec6",
                  "parentUUID": "66ee6b2d-82bf-4f28-9da8-a57fc8a08b46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const event=new ICalEvent({id:42,start:moment(),summary:\":)\"},cal);assert.ok(event.toString().indexOf(\"UID:42\\r\")>-1)",
                  "err": {},
                  "uuid": "a55e4982-1803-455a-8f70-478554c38bce",
                  "parentUUID": "66ee6b2d-82bf-4f28-9da8-a57fc8a08b46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;let event=new ICalEvent({start:moment(),end:moment(),repeating:{freq:ICalEventRepeatingFreq.WEEKLY}},cal);assert.ok(!event.toString().includes(\"WKST\"),\"without WKST\");event=new ICalEvent({start:moment(),end:moment(),repeating:{freq:ICalEventRepeatingFreq.WEEKLY,startOfWeek:ICalWeekday.SU}},cal);assert.ok(event.toString().includes(\"WKST\"),\"with WKST\")",
                  "err": {},
                  "uuid": "b8e9dd7a-63bc-40ae-809f-23f470ccad9f",
                  "parentUUID": "66ee6b2d-82bf-4f28-9da8-a57fc8a08b46",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render allday events for luxon dates with timezone correct",
                  "fullTitle": "ical-generator Event toString() should render allday events for luxon dates with timezone correct",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const luxonStartDate=DateTime.fromISO(\"2024-03-17T00:00:00.000+01:00\",{setZone:true});const luxonEndDate=DateTime.fromISO(\"2024-03-18T00:00:00.000+01:00\",{setZone:true});const event=new ICalEvent({allDay:true,start:luxonStartDate,end:luxonEndDate},cal);const actual=event.toString();assert.match(actual,new RegExp(\"X-MICROSOFT-CDO-ALLDAYEVENT:TRUE\\r\\n\"),\"with Microsoft CDO alldayevent set\");assert.match(actual,new RegExp(\"X-MICROSOFT-MSNCALENDAR-ALLDAYEVENT:TRUE\\r\\n\"),\"with Microsoft MSNCalendar alldayevent flag set\");assert.match(actual,new RegExp(`DTSTART;VALUE=DATE:${luxonStartDate.toFormat(\"yyyyLLdd\")}\\r\n`),\"for DTSTART\");assert.match(actual,new RegExp(`DTEND;VALUE=DATE:${luxonEndDate.toFormat(\"yyyyLLdd\")}\\r\n`),\"for DTEND\")",
                  "err": {},
                  "uuid": "1cbb3451-fbb8-4787-b235-0f61c7ccec47",
                  "parentUUID": "66ee6b2d-82bf-4f28-9da8-a57fc8a08b46",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ebc511ff-7903-4724-a07b-b3d07f8a7ec6",
                "a55e4982-1803-455a-8f70-478554c38bce",
                "b8e9dd7a-63bc-40ae-809f-23f470ccad9f",
                "1cbb3451-fbb8-4787-b235-0f61c7ccec47"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bfdfb95a-d5d3-48cb-af39-38babd7106b0",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2b65db8d-72e5-46a3-a47c-2c366f667a44",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(typeof ical,\"function\")",
                  "err": {},
                  "uuid": "23bd867c-e025-4387-b4a6-2a4865b0c030",
                  "parentUUID": "2b65db8d-72e5-46a3-a47c-2c366f667a44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ical()instanceof ICalCalendar)",
                  "err": {},
                  "uuid": "c34aa603-d932-4d92-b3a2-bb69a7faa03b",
                  "parentUUID": "2b65db8d-72e5-46a3-a47c-2c366f667a44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "23bd867c-e025-4387-b4a6-2a4865b0c030",
                "c34aa603-d932-4d92-b3a2-bb69a7faa03b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58524a35-ef95-4490-9abd-e17c088351d7",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarm)",
                  "err": {},
                  "uuid": "2c81120c-dad9-4288-9222-39060650ed70",
                  "parentUUID": "58524a35-ef95-4490-9abd-e17c088351d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarmType)",
                  "err": {},
                  "uuid": "a53402e4-f74a-4421-9e97-f80ada04ddda",
                  "parentUUID": "58524a35-ef95-4490-9abd-e17c088351d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c81120c-dad9-4288-9222-39060650ed70",
                "a53402e4-f74a-4421-9e97-f80ada04ddda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e41fd52b-4565-4529-b40b-459829ab137e",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendee)",
                  "err": {},
                  "uuid": "2e689496-5650-4872-b021-0522464a7beb",
                  "parentUUID": "e41fd52b-4565-4529-b40b-459829ab137e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeType)",
                  "err": {},
                  "uuid": "e398308e-82e1-4cd6-b16c-ac3750a1ea5f",
                  "parentUUID": "e41fd52b-4565-4529-b40b-459829ab137e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeRole)",
                  "err": {},
                  "uuid": "b8df70d2-9661-4505-976b-55aa026ab1ae",
                  "parentUUID": "e41fd52b-4565-4529-b40b-459829ab137e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeStatus)",
                  "err": {},
                  "uuid": "5a653e30-8183-436b-9569-b6e740a7b7ba",
                  "parentUUID": "e41fd52b-4565-4529-b40b-459829ab137e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e689496-5650-4872-b021-0522464a7beb",
                "e398308e-82e1-4cd6-b16c-ac3750a1ea5f",
                "b8df70d2-9661-4505-976b-55aa026ab1ae",
                "5a653e30-8183-436b-9569-b6e740a7b7ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd5f0c8f-2c80-4819-893f-d40df5a32a7a",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendar)",
                  "err": {},
                  "uuid": "137884ea-c52f-4651-bcaa-8c90a2ba518a",
                  "parentUUID": "cd5f0c8f-2c80-4819-893f-d40df5a32a7a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendarMethod)",
                  "err": {},
                  "uuid": "17ffb396-ba26-4cc2-96e8-03dc9eef9291",
                  "parentUUID": "cd5f0c8f-2c80-4819-893f-d40df5a32a7a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "137884ea-c52f-4651-bcaa-8c90a2ba518a",
                "17ffb396-ba26-4cc2-96e8-03dc9eef9291"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ecb4e1ff-0ba8-436e-89d1-4f5fd7f2627f",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCategory)",
                  "err": {},
                  "uuid": "f32c1a27-75bf-429e-b8a6-554fc2b18a91",
                  "parentUUID": "ecb4e1ff-0ba8-436e-89d1-4f5fd7f2627f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f32c1a27-75bf-429e-b8a6-554fc2b18a91"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c2a34d9-4cdf-4e81-8276-d6ada1392382",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEvent)",
                  "err": {},
                  "uuid": "f1d1c989-3669-4e71-b02f-4d29536c3319",
                  "parentUUID": "8c2a34d9-4cdf-4e81-8276-d6ada1392382",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventStatus)",
                  "err": {},
                  "uuid": "3c10e54a-90ef-4c8c-8fb9-0f7841c1f769",
                  "parentUUID": "8c2a34d9-4cdf-4e81-8276-d6ada1392382",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventBusyStatus)",
                  "err": {},
                  "uuid": "45fb5a3f-a08c-43cb-8687-fbe4233618cb",
                  "parentUUID": "8c2a34d9-4cdf-4e81-8276-d6ada1392382",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventTransparency)",
                  "err": {},
                  "uuid": "47f01d49-331f-405b-a647-b6c96bb64747",
                  "parentUUID": "8c2a34d9-4cdf-4e81-8276-d6ada1392382",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1d1c989-3669-4e71-b02f-4d29536c3319",
                "3c10e54a-90ef-4c8c-8fb9-0f7841c1f769",
                "45fb5a3f-a08c-43cb-8687-fbe4233618cb",
                "47f01d49-331f-405b-a647-b6c96bb64747"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aca729a3-cf57-429f-af56-e61c13915b40",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventRepeatingFreq)",
                  "err": {},
                  "uuid": "39214519-8f0b-4be7-b608-4a93ba29fc44",
                  "parentUUID": "aca729a3-cf57-429f-af56-e61c13915b40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalWeekday)",
                  "err": {},
                  "uuid": "4a65d259-b435-47fc-8988-00cc43cd0178",
                  "parentUUID": "aca729a3-cf57-429f-af56-e61c13915b40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39214519-8f0b-4be7-b608-4a93ba29fc44",
                "4a65d259-b435-47fc-8988-00cc43cd0178"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9fef7f2b-bc98-4424-b316-dcae2e659eb7",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDate===\"function\")",
                  "err": {},
                  "uuid": "fac6d3fb-eb93-4883-94a7-db12691379af",
                  "parentUUID": "9fef7f2b-bc98-4424-b316-dcae2e659eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDateTZ===\"function\")",
                  "err": {},
                  "uuid": "0ca63834-d44b-45f4-bc1f-5fa9816d0a4d",
                  "parentUUID": "9fef7f2b-bc98-4424-b316-dcae2e659eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof escape===\"function\")",
                  "err": {},
                  "uuid": "f2a72359-ca06-41b0-ad7f-c021a612658d",
                  "parentUUID": "9fef7f2b-bc98-4424-b316-dcae2e659eb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof foldLines===\"function\")",
                  "err": {},
                  "uuid": "a6d0be22-2d32-4fc2-bb9f-79c1dfac9141",
                  "parentUUID": "9fef7f2b-bc98-4424-b316-dcae2e659eb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fac6d3fb-eb93-4883-94a7-db12691379af",
                "0ca63834-d44b-45f4-bc1f-5fa9816d0a4d",
                "f2a72359-ca06-41b0-ad7f-c021a612658d",
                "a6d0be22-2d32-4fc2-bb9f-79c1dfac9141"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e69f92f8-cec8-4971-8261-608145234133",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "067fbf7f-96d1-44bd-a4d9-9147dcdacceb",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Europe/Berlin\",events:[{start:moment(\"2016-04-30T22:00:00.000Z\"),summary:\"Example Event\",allDay:true}]});const str=calendar.toString();assert.ok(str.indexOf(\"DTSTART;VALUE=DATE:20160501\")>-1)",
                  "err": {},
                  "uuid": "7c55bccd-0696-4277-8e3b-ac4034742e43",
                  "parentUUID": "067fbf7f-96d1-44bd-a4d9-9147dcdacceb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Brazil/East\",events:[{start:moment(\"2016-05-01T03:00:00.000Z\"),summary:\"Example Event\",allDay:true}]});const str=calendar.toString();assert.ok(str.indexOf(\"DTSTART;VALUE=DATE:20160501\")>-1)",
                  "err": {},
                  "uuid": "fa16ca03-0a12-49e4-b545-af1bcd25b8c7",
                  "parentUUID": "067fbf7f-96d1-44bd-a4d9-9147dcdacceb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c55bccd-0696-4277-8e3b-ac4034742e43",
                "fa16ca03-0a12-49e4-b545-af1bcd25b8c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "640f5d85-c185-473f-9363-1f79d4280ca0",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",events:[{start:moment(\"2016-04-30T22:00:00.000Z\"),end:moment(\"2016-05-01T00:00:00.000Z\"),summary:\"Example Event\",allDay:true,repeating:{freq:ICalEventRepeatingFreq.MONTHLY,count:3,interval:1,byDay:[ICalWeekday.SU],bySetPos:3}}]});const str=calendar.toString();assert.ok(str.indexOf(\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3\")>-1)",
                  "err": {},
                  "uuid": "a801ff1c-9589-4b38-91b1-fe8e13ccdc61",
                  "parentUUID": "640f5d85-c185-473f-9363-1f79d4280ca0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking all elements of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking all elements of the byDay array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",events:[{start:moment(\"2016-04-30T22:00:00.000Z\"),end:moment(\"2016-05-01T00:00:00.000Z\"),summary:\"Example Event\",allDay:true,repeating:{freq:ICalEventRepeatingFreq.MONTHLY,count:3,interval:1,byDay:[ICalWeekday.MO,ICalWeekday.FR],bySetPos:3}}]});const str=calendar.toString();assert.ok(str.indexOf(\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO,FR;BYSETPOS=3\")>-1)",
                  "err": {},
                  "uuid": "f7aca063-167b-48f6-9a8d-4a4cfeda8c81",
                  "parentUUID": "640f5d85-c185-473f-9363-1f79d4280ca0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a801ff1c-9589-4b38-91b1-fe8e13ccdc61",
                "f7aca063-167b-48f6-9a8d-4a4cfeda8c81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b899442b-2da2-4156-89dc-71c008f0ab84",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({timezone:\"America/Buenos_Aires\",events:[{start:moment(1553219772e3),end:moment(1553219772e3),recurrenceId:moment(1553219772e3),timezone:\"America/La_Paz\"}]});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "acc097c9-623d-4fd5-aeed-30cd33795e74",
                  "parentUUID": "b899442b-2da2-4156-89dc-71c008f0ab84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({timezone:\"America/Buenos_Aires\",events:[{start:moment(1553219772e3),end:moment(1553219772e3),recurrenceId:moment(1553219772e3),timezone:\"America/La_Paz\"}]});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "10b8e154-50ff-425e-9ae6-e3cce9425d3c",
                  "parentUUID": "b899442b-2da2-4156-89dc-71c008f0ab84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({timezone:\"America/Buenos_Aires\",events:[{start:moment(1553219772e3),end:moment(1553219772e3),recurrenceId:moment(1553219772e3),timezone:\"America/La_Paz\"}]});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "81976d01-1fdc-455c-b695-0ff4109f4f02",
                  "parentUUID": "b899442b-2da2-4156-89dc-71c008f0ab84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "acc097c9-623d-4fd5-aeed-30cd33795e74",
                "10b8e154-50ff-425e-9ae6-e3cce9425d3c",
                "81976d01-1fdc-455c-b695-0ff4109f4f02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8737f279-f434-4023-87d5-a5dfb4fdbd97",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Europe/Berlin\",events:[{start:moment(\"2020-08-13T00:00:00+01:00\"),summary:\"Example Event\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,count:12,exclude:moment(\"2020-12-13T00:00:00+01:00\")}}]});const str=calendar.toString();assert.ok(str.indexOf(\"EXDATE;TZID=Europe/Berlin:20201213T000000\")>-1)",
                  "err": {},
                  "uuid": "95453c34-c40f-4f89-acff-3226df747bf8",
                  "parentUUID": "8737f279-f434-4023-87d5-a5dfb4fdbd97",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"America/New_York\",events:[{start:moment(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\",repeating:{freq:ICalEventRepeatingFreq.MONTHLY,count:12,exclude:moment(\"2020-12-13T00:00:00-05:00\")}}]});const str=calendar.toString();assert.ok(str.indexOf(\"EXDATE;TZID=America/New_York:20201213T000000\")>-1)",
                  "err": {},
                  "uuid": "79b4dd1c-4f79-4605-a302-28d0ae5b380c",
                  "parentUUID": "8737f279-f434-4023-87d5-a5dfb4fdbd97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95453c34-c40f-4f89-acff-3226df747bf8",
                "79b4dd1c-4f79-4605-a302-28d0ae5b380c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "de9bf399-325f-4558-9da4-5c4110d4e635",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",start:new Date(\"2020-08-13T00:00:00-05:00\"),stamp:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\",location:{title:\"Los Angeles, California, United States\",geo:{lon:-118.24368,lat:34.05223},radius:400}}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"SUMMARY:Example Event\",\"LOCATION:Los Angeles\\\\, California\\\\, United States\",\"X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel\",\" es\\\\, California\\\\, United States:geo:34.05223,-118.24368\",\"GEO:34.05223;-118.24368\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "29fe4170-f288-43d6-9f7e-4fdcd2f5b190",
                  "parentUUID": "de9bf399-325f-4558-9da4-5c4110d4e635",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29fe4170-f288-43d6-9f7e-4fdcd2f5b190"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "06521372-6c72-4d03-9f14-727d4c2c4f44",
              "title": "Issue #377",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not escape quotes in summary",
                  "fullTitle": "Issues Issue #377 should not escape quotes in summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",start:new Date(\"2020-08-13T00:00:00-05:00\"),stamp:new Date(\"2020-08-13T00:00:00-05:00\"),summary:'My \"quoted\" string'}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",'SUMMARY:My \"quoted\" string',\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "b989d239-5bde-43da-b5c7-168a3094999a",
                  "parentUUID": "06521372-6c72-4d03-9f14-727d4c2c4f44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b989d239-5bde-43da-b5c7-168a3094999a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "498e0f48-e54f-41f4-a3f4-1d59c30e9a33",
              "title": "Issue #442",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate floating repeat until value if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat until value if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5b006b76-d30b-4d49-a0c0-d7ff9e2d0f5a",
                  "parentUUID": "498e0f48-e54f-41f4-a3f4-1d59c30e9a33",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate floating repeat exclusion dates if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat exclusion dates if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5e5cdb92-2795-4ef2-a8cf-b314dbdd7ff5",
                  "parentUUID": "498e0f48-e54f-41f4-a3f4-1d59c30e9a33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "5b006b76-d30b-4d49-a0c0-d7ff9e2d0f5a",
                "5e5cdb92-2795-4ef2-a8cf-b314dbdd7ff5"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d95a9e0-f958-49f5-825f-49cb78ec5599",
              "title": "Issue #459",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.repeating should work with `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work with `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",start:new Date(\"2020-08-13T00:00:00-05:00\"),stamp:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\",repeating:\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",\"SUMMARY:Example Event\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "856d090a-f1e5-4177-be47-f9f004d7881c",
                  "parentUUID": "6d95a9e0-f958-49f5-825f-49cb78ec5599",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "event.repeating should work without `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work without `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",start:new Date(\"2020-08-13T00:00:00-05:00\"),stamp:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\",repeating:\"FREQ=MONTHLY;COUNT=3;INTERVAL=1\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",\"SUMMARY:Example Event\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "87582821-8029-4080-b7bc-8a93f87bd9cf",
                  "parentUUID": "6d95a9e0-f958-49f5-825f-49cb78ec5599",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "856d090a-f1e5-4177-be47-f9f004d7881c",
                "87582821-8029-4080-b7bc-8a93f87bd9cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84ce355a-7c35-43f8-ace4-8ec1be51cdc5",
              "title": "Issue #569 / 570",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.location should work with `geo` only",
                  "fullTitle": "Issues Issue #569 / 570 event.location should work with `geo` only",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=ical().createEvent({id:\"12345\",summary:\"Hello\",start:new Date(\"2020-06-15T00:00:00Z\"),end:new Date(\"2020-06-15T01:00:00Z\"),stamp:new Date(\"2020-06-15T00:00:00Z\")});event.location({geo:{lat:52.51147570081018,lon:13.342200696373846}});assert.strictEqual(event.toString(),[\"BEGIN:VEVENT\",\"UID:12345\",\"SEQUENCE:0\",\"DTSTAMP:20200615T000000Z\",\"DTSTART:20200615T000000Z\",\"DTEND:20200615T010000Z\",\"SUMMARY:Hello\",\"GEO:52.51147570081018;13.342200696373846\",\"END:VEVENT\",\"\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "fa42f060-d82a-4f33-8c93-8bac49cf88e5",
                  "parentUUID": "84ce355a-7c35-43f8-ace4-8ec1be51cdc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa42f060-d82a-4f33-8c93-8bac49cf88e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "502fff91-c755-4b31-82c1-9ea4208df6f6",
              "title": "Issue #581",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.start and event.end should be swappable",
                  "fullTitle": "Issues Issue #581 event.start and event.end should be swappable",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical();const event=calendar.createEvent({summary:\"Test Event\",start:\"2024-02-29T17:00:00.000Z\",end:\"2024-02-29T17:20:00.000Z\"});event.start(\"2024-02-29T19:00:00.000Z\");event.end(\"2024-02-29T19:20:00.000Z\");const start=event.start();assert.ok(typeof start===\"string\");assert.strictEqual(start,\"2024-02-29T19:00:00.000Z\");const end=event.end();assert.ok(typeof end===\"string\");assert.strictEqual(end,\"2024-02-29T19:20:00.000Z\")",
                  "err": {},
                  "uuid": "78fc6228-9c78-4023-b3cc-43fc3faec5bb",
                  "parentUUID": "502fff91-c755-4b31-82c1-9ea4208df6f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78fc6228-9c78-4023-b3cc-43fc3faec5bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d543205-7e67-423e-9273-3a2059bb2469",
              "title": "Issue #618",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should also produce an error",
                  "fullTitle": "Issues Issue #618 should also produce an error",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(()=>{const calendar=ical();calendar.createEvent({summary:\"Test Event\",start:new Date,location:{title:\"Empty Venue\",address:null,geo:{lat:null,lon:null}}})},/`location` isn't formatted correctly/)",
                  "err": {},
                  "uuid": "21c05ee2-5bc8-4f35-a4f9-e0f4fe1263a4",
                  "parentUUID": "2d543205-7e67-423e-9273-3a2059bb2469",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "21c05ee2-5bc8-4f35-a4f9-e0f4fe1263a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ff4928bb-c2a8-42ea-8c80-678312b58325",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f678cab7-87e6-4a20-a0eb-106541840716",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "dec1010e-15aa-4ac5-9a4a-8877965114a0",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "d0355c3f-7bd0-4aaf-ac65-ade8484ae28e",
                      "parentUUID": "dec1010e-15aa-4ac5-9a4a-8877965114a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "7cdfbb4a-1f20-4a08-8088-9a2c2f9c73b6",
                      "parentUUID": "dec1010e-15aa-4ac5-9a4a-8877965114a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",true,false),\"20180705\")",
                      "err": {},
                      "uuid": "335ef116-96cd-4a93-9b0b-932d44980a77",
                      "parentUUID": "dec1010e-15aa-4ac5-9a4a-8877965114a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",true,true),\"20180705\")",
                      "err": {},
                      "uuid": "76cdb2cc-a6db-42a4-a78d-5cb0a7316874",
                      "parentUUID": "dec1010e-15aa-4ac5-9a4a-8877965114a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "6801bf20-2bcf-4844-a62b-88e41bfe62a0",
                      "parentUUID": "dec1010e-15aa-4ac5-9a4a-8877965114a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "d4b274e2-6dbf-40a2-b85f-5661d6766a9b",
                      "parentUUID": "dec1010e-15aa-4ac5-9a4a-8877965114a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",true,false),\"20180705\")",
                      "err": {},
                      "uuid": "f8a45057-75bb-4add-b343-b0a77874246f",
                      "parentUUID": "dec1010e-15aa-4ac5-9a4a-8877965114a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",true,true),\"20180705\")",
                      "err": {},
                      "uuid": "74977450-d54e-455b-b877-29baac7502af",
                      "parentUUID": "dec1010e-15aa-4ac5-9a4a-8877965114a0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with / prefixed global timezones",
                      "fullTitle": "ICalTools formatDate() Date / String should work with / prefixed global timezones",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"/Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "1f9ebfe9-ee9c-40f7-b503-7ea2bedc8c5e",
                      "parentUUID": "dec1010e-15aa-4ac5-9a4a-8877965114a0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d0355c3f-7bd0-4aaf-ac65-ade8484ae28e",
                    "7cdfbb4a-1f20-4a08-8088-9a2c2f9c73b6",
                    "335ef116-96cd-4a93-9b0b-932d44980a77",
                    "76cdb2cc-a6db-42a4-a78d-5cb0a7316874",
                    "6801bf20-2bcf-4844-a62b-88e41bfe62a0",
                    "d4b274e2-6dbf-40a2-b85f-5661d6766a9b",
                    "f8a45057-75bb-4add-b343-b0a77874246f",
                    "74977450-d54e-455b-b877-29baac7502af",
                    "1f9ebfe9-ee9c-40f7-b503-7ea2bedc8c5e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "711cb0b3-325a-4f7c-a13e-865a117ace02",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,moment(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "40bafc15-ac0b-4dfd-89a6-5ad7b0a00649",
                      "parentUUID": "711cb0b3-325a-4f7c-a13e-865a117ace02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",moment(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "71d6ca18-8b5b-49f0-8c8f-f141cfc32715",
                      "parentUUID": "711cb0b3-325a-4f7c-a13e-865a117ace02",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,moment(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "c46223cc-9d91-4ef9-8c4f-5af80c459089",
                      "parentUUID": "711cb0b3-325a-4f7c-a13e-865a117ace02",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "40bafc15-ac0b-4dfd-89a6-5ad7b0a00649",
                    "71d6ca18-8b5b-49f0-8c8f-f141cfc32715",
                    "c46223cc-9d91-4ef9-8c4f-5af80c459089"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8b11ea11-558e-4bc3-83ed-c49c52e440b0",
                  "title": "moment-timezone.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,momentTz(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "adfe75d4-243a-47ac-af2d-e77eeba057e9",
                      "parentUUID": "8b11ea11-558e-4bc3-83ed-c49c52e440b0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",momentTz(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "1e486e09-b177-467d-b623-6c89a57965cb",
                      "parentUUID": "8b11ea11-558e-4bc3-83ed-c49c52e440b0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,momentTz(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "a435c947-a7d1-4d2b-8fdd-356896f0fb22",
                      "parentUUID": "8b11ea11-558e-4bc3-83ed-c49c52e440b0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "adfe75d4-243a-47ac-af2d-e77eeba057e9",
                    "1e486e09-b177-467d-b623-6c89a57965cb",
                    "a435c947-a7d1-4d2b-8fdd-356896f0fb22"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "2ccd3586-ded9-475b-bd83-28908e82505d",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "08af6efc-7178-4061-ba1c-7ae748d6945d",
                      "parentUUID": "2ccd3586-ded9-475b-bd83-28908e82505d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",DateTime.fromISO(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "20adc630-4dac-42bf-bba8-03ae01d09ac8",
                      "parentUUID": "2ccd3586-ded9-475b-bd83-28908e82505d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "58642f6e-1d08-4bb3-ad15-2fe43c16af08",
                      "parentUUID": "2ccd3586-ded9-475b-bd83-28908e82505d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "af75759a-e4c9-4e93-b8a4-f29c735055ac",
                      "parentUUID": "2ccd3586-ded9-475b-bd83-28908e82505d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag, non floating, and date with timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag, non floating, and date with timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2024-03-17T00:00:00.000+01:00\",{setZone:true}),true),\"20240317\")",
                      "err": {},
                      "uuid": "2b1b12c3-e637-460b-94c0-74bb45ec5aaa",
                      "parentUUID": "2ccd3586-ded9-475b-bd83-28908e82505d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "08af6efc-7178-4061-ba1c-7ae748d6945d",
                    "20adc630-4dac-42bf-bba8-03ae01d09ac8",
                    "58642f6e-1d08-4bb3-ad15-2fe43c16af08",
                    "af75759a-e4c9-4e93-b8a4-f29c735055ac",
                    "2b1b12c3-e637-460b-94c0-74bb45ec5aaa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "d7c7903d-4f41-4574-94fd-73041aee54f6",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "63ab55b3-2425-4822-b8c8-05544c9d1f3e",
                      "parentUUID": "d7c7903d-4f41-4574-94fd-73041aee54f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",dayjs(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "beba384f-415e-445b-a5f5-8f95edc2ecd2",
                      "parentUUID": "d7c7903d-4f41-4574-94fd-73041aee54f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "e3fb06f5-db10-4575-ad5f-4b4465d31c8f",
                      "parentUUID": "d7c7903d-4f41-4574-94fd-73041aee54f6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "040a9439-9ada-4054-acbd-e7ca0d587bc6",
                      "parentUUID": "d7c7903d-4f41-4574-94fd-73041aee54f6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "63ab55b3-2425-4822-b8c8-05544c9d1f3e",
                    "beba384f-415e-445b-a5f5-8f95edc2ecd2",
                    "e3fb06f5-db10-4575-ad5f-4b4465d31c8f",
                    "040a9439-9ada-4054-acbd-e7ca0d587bc6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c8b98168-9e8f-4692-a03d-e002f6633571",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed={timezone:\"Europe/Berlin\"};assert.strictEqual(formatDateTZ(\"Europe/Berlin\",\"DSTART\",moment(\"2018-07-02T15:48:05.000Z\"),ed),\"DSTART;TZID=Europe/Berlin:20180702T174805\")",
                  "err": {},
                  "uuid": "e6b88697-6a6c-43ae-8b7b-f8c07dc9ae0f",
                  "parentUUID": "c8b98168-9e8f-4692-a03d-e002f6633571",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null,\"DSTART\",\"2018-07-02T15:48:05.000Z\",{}),\"DSTART:20180702T154805Z\")",
                  "err": {},
                  "uuid": "b7c6844d-dc01-480f-a60a-c207809a2aa9",
                  "parentUUID": "c8b98168-9e8f-4692-a03d-e002f6633571",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null,\"DSTART\",\"2018-07-02T15:48:05.000Z\"),\"DSTART:20180702T154805Z\")",
                  "err": {},
                  "uuid": "d271c47b-d69a-4cde-ada6-a210adc6d4fe",
                  "parentUUID": "c8b98168-9e8f-4692-a03d-e002f6633571",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6b88697-6a6c-43ae-8b7b-f8c07dc9ae0f",
                "b7c6844d-dc01-480f-a60a-c207809a2aa9",
                "d271c47b-d69a-4cde-ada6-a210adc6d4fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da5cd2aa-a79e-4d9b-a7a7-983105d9a60c",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\\\ipsum\",false),\"Lorem \\\\\\\\ipsum\")",
                  "err": {},
                  "uuid": "67523d47-935f-41f5-b833-851dc5113231",
                  "parentUUID": "da5cd2aa-a79e-4d9b-a7a7-983105d9a60c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem ;ipsum\",false),\"Lorem \\\\;ipsum\")",
                  "err": {},
                  "uuid": "a26266dc-d688-4c24-9b61-4d97b451d3f9",
                  "parentUUID": "da5cd2aa-a79e-4d9b-a7a7-983105d9a60c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem, ipsum\",false),\"Lorem\\\\, ipsum\")",
                  "err": {},
                  "uuid": "08c73033-345f-41a2-966b-dc883aa1d2d3",
                  "parentUUID": "da5cd2aa-a79e-4d9b-a7a7-983105d9a60c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\ripsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "b2ef4518-e9ac-4afb-bdf6-036e3d749dd4",
                  "parentUUID": "da5cd2aa-a79e-4d9b-a7a7-983105d9a60c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\nipsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "cc038d3c-264f-4d20-9022-73e562193a21",
                  "parentUUID": "da5cd2aa-a79e-4d9b-a7a7-983105d9a60c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\r\\nipsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "059f3511-a71d-40b4-99c2-00dc86c521b6",
                  "parentUUID": "da5cd2aa-a79e-4d9b-a7a7-983105d9a60c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \" in text when inQuotes = true",
                  "fullTitle": "ICalTools escape() should escape \" in text when inQuotes = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum',true),'Lorem \\\\\"ipsum')",
                  "err": {},
                  "uuid": "e7d0e5c4-5c55-46ce-9bc1-e83073eb1f06",
                  "parentUUID": "da5cd2aa-a79e-4d9b-a7a7-983105d9a60c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not escape \" in text when inQuotes = false",
                  "fullTitle": "ICalTools escape() should not escape \" in text when inQuotes = false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum',false),'Lorem \"ipsum')",
                  "err": {},
                  "uuid": "ac7c9dc1-394c-40ca-9293-2a79ebe08863",
                  "parentUUID": "da5cd2aa-a79e-4d9b-a7a7-983105d9a60c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67523d47-935f-41f5-b833-851dc5113231",
                "a26266dc-d688-4c24-9b61-4d97b451d3f9",
                "08c73033-345f-41a2-966b-dc883aa1d2d3",
                "b2ef4518-e9ac-4afb-bdf6-036e3d749dd4",
                "cc038d3c-264f-4d20-9022-73e562193a21",
                "059f3511-a71d-40b4-99c2-00dc86c521b6",
                "e7d0e5c4-5c55-46ce-9bc1-e83073eb1f06",
                "ac7c9dc1-394c-40ca-9293-2a79ebe08863"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a8a415e8-2af5-4237-893f-34b99a044fc0",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines(\"12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981\"),\"12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981\")",
                  "err": {},
                  "uuid": "2c0bdb97-3b6a-4b96-9213-56256b8ea5b2",
                  "parentUUID": "a8a415e8-2af5-4237-893f-34b99a044fc0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines(\"\\u{1F44B}\\u{1F3FC}12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981\"),\"\\u{1F44B}\\u{1F3FC}12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981\")",
                  "err": {},
                  "uuid": "2f8070c0-75fd-4015-9404-692a9d966911",
                  "parentUUID": "a8a415e8-2af5-4237-893f-34b99a044fc0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c0bdb97-3b6a-4b96-9213-56256b8ea5b2",
                "2f8070c0-75fd-4015-9404-692a9d966911"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "340c6acd-95fd-4bd9-a1e0-4e722aa1a5d2",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "334f9d9b-2cbd-482b-a739-4175eec83099",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=new Date;assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "21ae95eb-5dec-46b3-a2ef-a5e1915ce200",
                      "parentUUID": "334f9d9b-2cbd-482b-a739-4175eec83099",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=new Date(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "bef64b35-5cca-4830-9d2a-5512fa47e5dd",
                      "parentUUID": "334f9d9b-2cbd-482b-a739-4175eec83099",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "21ae95eb-5dec-46b3-a2ef-a5e1915ce200",
                    "bef64b35-5cca-4830-9d2a-5512fa47e5dd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fd89e3a0-e808-455e-a51b-b8c377491c85",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=\"2021-03-28T13:15:23.587Z\";assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "9d731720-7f41-44d9-9f5b-cf8d4b9828a7",
                      "parentUUID": "fd89e3a0-e808-455e-a51b-b8c377491c85",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=\"foo\";assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "0544476e-c391-41c9-bd95-10c1f9efb7d2",
                      "parentUUID": "fd89e3a0-e808-455e-a51b-b8c377491c85",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9d731720-7f41-44d9-9f5b-cf8d4b9828a7",
                    "0544476e-c391-41c9-bd95-10c1f9efb7d2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a64bb8f7-5c54-4005-9c6b-46b5b96d8f6b",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=DateTime.now();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "3b7d5557-b1a0-43af-ad4e-4822e8a33d44",
                      "parentUUID": "a64bb8f7-5c54-4005-9c6b-46b5b96d8f6b",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=DateTime.fromISO(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "5c9e57b9-3163-4a81-a4f3-fe8d93e7648d",
                      "parentUUID": "a64bb8f7-5c54-4005-9c6b-46b5b96d8f6b",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3b7d5557-b1a0-43af-ad4e-4822e8a33d44",
                    "5c9e57b9-3163-4a81-a4f3-fe8d93e7648d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8a7ee1dd-32d4-4478-99de-d7d86a060bd6",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=moment();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "3ac170f9-46db-43c2-9b05-9fee521f9053",
                      "parentUUID": "8a7ee1dd-32d4-4478-99de-d7d86a060bd6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=moment(\"foo\",\"MM/DD/YYYY\",true);assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "92358a2d-c4e5-46f2-8394-76c1bb52e6c6",
                      "parentUUID": "8a7ee1dd-32d4-4478-99de-d7d86a060bd6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3ac170f9-46db-43c2-9b05-9fee521f9053",
                    "92358a2d-c4e5-46f2-8394-76c1bb52e6c6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8ffa8b06-a92f-4001-9af5-8f70164b82a7",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=dayjs();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "37b0f915-5f69-4b6c-93c9-7a7f6f31746e",
                      "parentUUID": "8ffa8b06-a92f-4001-9af5-8f70164b82a7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=dayjs(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "b110e907-1460-46c9-92d3-eb41a7179ff9",
                      "parentUUID": "8ffa8b06-a92f-4001-9af5-8f70164b82a7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "37b0f915-5f69-4b6c-93c9-7a7f6f31746e",
                    "b110e907-1460-46c9-92d3-eb41a7179ff9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "576f29aa-565a-4597-954b-34c17c1b4588",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(date.toJSON()),date)",
                  "err": {},
                  "uuid": "032a5432-f22b-444c-b197-e3d663c76ad1",
                  "parentUUID": "576f29aa-565a-4597-954b-34c17c1b4588",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(date),date)",
                  "err": {},
                  "uuid": "44d055ff-e3ff-4137-a4db-33807cb6f62b",
                  "parentUUID": "576f29aa-565a-4597-954b-34c17c1b4588",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(moment(date)),date)",
                  "err": {},
                  "uuid": "8f6f2b48-4ca3-41d7-a308-ee977924ed36",
                  "parentUUID": "576f29aa-565a-4597-954b-34c17c1b4588",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment-timezone object",
                  "fullTitle": "ICalTools toDate() should work with moment-timezone object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(momentTz(date)),date)",
                  "err": {},
                  "uuid": "5cb8a060-56db-4fd5-904f-196f5f78fb4c",
                  "parentUUID": "576f29aa-565a-4597-954b-34c17c1b4588",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(dayjs(date)),date)",
                  "err": {},
                  "uuid": "711fdf66-107e-44f1-a10a-a48eaf9d0a4b",
                  "parentUUID": "576f29aa-565a-4597-954b-34c17c1b4588",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(DateTime.fromJSDate(date)),date)",
                  "err": {},
                  "uuid": "aa2d9af6-55c4-4afa-b767-3b8f746a83bb",
                  "parentUUID": "576f29aa-565a-4597-954b-34c17c1b4588",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "032a5432-f22b-444c-b197-e3d663c76ad1",
                "44d055ff-e3ff-4137-a4db-33807cb6f62b",
                "8f6f2b48-4ca3-41d7-a308-ee977924ed36",
                "5cb8a060-56db-4fd5-904f-196f5f78fb4c",
                "711fdf66-107e-44f1-a10a-a48eaf9d0a4b",
                "aa2d9af6-55c4-4afa-b767-3b8f746a83bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c907ebe-1de4-4987-bc14-ee8fc72c318c",
              "title": "toDurationString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ICalTools toDurationString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(toDurationString(0),\"PT0S\");assert.strictEqual(toDurationString(1),\"PT1S\");assert.strictEqual(toDurationString(60),\"PT1M\");assert.strictEqual(toDurationString(3600),\"PT1H\");assert.strictEqual(toDurationString(86400),\"P1D\");assert.strictEqual(toDurationString(-3600),\"-PT1H\")",
                  "err": {},
                  "uuid": "f9f6abee-c73f-4174-aeb7-92b7bc41bd30",
                  "parentUUID": "7c907ebe-1de4-4987-bc14-ee8fc72c318c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9f6abee-c73f-4174-aeb7-92b7bc41bd30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6c64af4b-4516-4b6a-9081-5a2c37696387",
          "title": "ical-generator Types",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/types.ts",
          "file": "/test/types.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stubs should be compatible with third party libraries",
              "fullTitle": "ical-generator Types stubs should be compatible with third party libraries",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(dayJsTest,\"day.js stub should be compatible\");assert.ok(luxonTest,\"luxon stub should be compatible\");assert.ok(momentTest,\"moment stub should be compatible\");assert.ok(momentTimezoneTest,\"moment-timezone stub should be compatible\");assert.ok(rruleTest,\"rrule stub should be compatible\")",
              "err": {},
              "uuid": "842e0fd8-5ac0-46d6-acf0-cf23d5763e32",
              "parentUUID": "6c64af4b-4516-4b6a-9081-5a2c37696387",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calendar data should be compatible with calendar json data",
              "fullTitle": "ical-generator Types calendar data should be compatible with calendar json data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(attendeeJson,\"attendee json data should be compatible\");assert.ok(calendarJson,\"calendar json data should be compatible\");assert.ok(categoryJson,\"category json data should be compatible\");assert.ok(eventJson,\"event json data should be compatible\")",
              "err": {},
              "uuid": "cd7beb04-8e9b-4232-95e0-8f061e515acc",
              "parentUUID": "6c64af4b-4516-4b6a-9081-5a2c37696387",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "842e0fd8-5ac0-46d6-acf0-cf23d5763e32",
            "cd7beb04-8e9b-4232-95e0-8f061e515acc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}