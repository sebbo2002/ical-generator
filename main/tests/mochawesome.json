{
  "stats": {
    "suites": 133,
    "tests": 464,
    "passes": 462,
    "pending": 2,
    "failures": 0,
    "start": "2025-05-12T16:35:42.546Z",
    "end": "2025-05-12T16:35:42.708Z",
    "duration": 162,
    "testsRegistered": 464,
    "passPercent": 100,
    "pendingPercent": 0.43103448275862066,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1940570c-49b6-4b36-bbfc-1dd0d861d7ad",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bab5647c-4639-40ca-8d93-9496352e2da0",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2bed2c5c-37f9-462d-98fd-9b1c332bed19",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({type:ICalAlarmType.display},null)},/`event`/)",
                  "err": {},
                  "uuid": "ecef645e-0460-43b7-82cd-4b4ff9b8a9c6",
                  "parentUUID": "2bed2c5c-37f9-462d-98fd-9b1c332bed19",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.display,unknown:true},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),\"display\")",
                  "err": {},
                  "uuid": "7cdd1a26-733a-4839-ac8a-ede0dd2d7995",
                  "parentUUID": "2bed2c5c-37f9-462d-98fd-9b1c332bed19",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecef645e-0460-43b7-82cd-4b4ff9b8a9c6",
                "7cdd1a26-733a-4839-ac8a-ede0dd2d7995"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3881bcb2-b5b6-4991-ada0-c86f8564e490",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.type(ICalAlarmType.display))",
                  "err": {},
                  "uuid": "229bf7ff-de1b-4f46-bf47-f1861a08c361",
                  "parentUUID": "3881bcb2-b5b6-4991-ada0-c86f8564e490",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),\"display\");a.type(ICalAlarmType.audio);assert.strictEqual(a.type(),\"audio\")",
                  "err": {},
                  "uuid": "76f0144b-0a84-4a8d-86f9-84347caaac5c",
                  "parentUUID": "3881bcb2-b5b6-4991-ada0-c86f8564e490",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.type(\"BANANA\")},/`type`/);assert.throws(function(){a.type(null)},/`type`/)",
                  "err": {},
                  "uuid": "55cbc409-e02b-480c-a960-cd4e0ac2a0ed",
                  "parentUUID": "3881bcb2-b5b6-4991-ada0-c86f8564e490",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"ACTION:DISPLAY\")>-1)",
                  "err": {},
                  "uuid": "d264fe7e-9273-4ea4-93e9-280b2df0ffec",
                  "parentUUID": "3881bcb2-b5b6-4991-ada0-c86f8564e490",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "229bf7ff-de1b-4f46-bf47-f1861a08c361",
                "76f0144b-0a84-4a8d-86f9-84347caaac5c",
                "55cbc409-e02b-480c-a960-cd4e0ac2a0ed",
                "d264fe7e-9273-4ea4-93e9-280b2df0ffec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39ba2cda-e2c9-41b9-9964-7268e4d588d6",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.trigger(60*10))",
                  "err": {},
                  "uuid": "f7265aa5-e08b-4583-bd80-dd09c38676e7",
                  "parentUUID": "39ba2cda-e2c9-41b9-9964-7268e4d588d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;assert.strictEqual(a.trigger(),600);assert.strictEqual(a.triggerAfter(),-600);a.trigger(300);assert.strictEqual(a.trigger(),300);assert.strictEqual(a.triggerAfter(),-300);a.trigger(now);const dateResult=a.trigger();assert.deepStrictEqual(dateResult,now)",
                  "err": {},
                  "uuid": "f7ace81f-e67f-4541-913d-88b9b545c9f6",
                  "parentUUID": "39ba2cda-e2c9-41b9-9964-7268e4d588d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.trigger(Infinity)},/`trigger`/);assert.throws(function(){a.trigger(\"hi\")},/`trigger`/);assert.throws(function(){a.trigger(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "ddbfa22e-160e-41c4-9f45-4e0bff6d3000",
                  "parentUUID": "39ba2cda-e2c9-41b9-9964-7268e4d588d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(new Date);assert.ok(a.trigger()instanceof Date)",
                  "err": {},
                  "uuid": "bbf7704f-428b-4e08-9038-dede9a7957d7",
                  "parentUUID": "39ba2cda-e2c9-41b9-9964-7268e4d588d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(moment());assert.ok(moment.isMoment(a.trigger()))",
                  "err": {},
                  "uuid": "934f4933-ad6b-4c68-86d3-5e072d6bad01",
                  "parentUUID": "39ba2cda-e2c9-41b9-9964-7268e4d588d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.trigger(2*60);assert.strictEqual(a.trigger(),120)",
                  "err": {},
                  "uuid": "3b1adfb0-aa03-409f-8e57-e64919fddeba",
                  "parentUUID": "39ba2cda-e2c9-41b9-9964-7268e4d588d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"2015-02-01T13:38:45.000Z\");const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"TRIGGER:-PT10M\"));a.trigger(trigger);assert.ok(a.toString().includes(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\"))",
                  "err": {},
                  "uuid": "58d470c8-ca98-4f32-8810-6e04c17a5335",
                  "parentUUID": "39ba2cda-e2c9-41b9-9964-7268e4d588d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7265aa5-e08b-4583-bd80-dd09c38676e7",
                "f7ace81f-e67f-4541-913d-88b9b545c9f6",
                "ddbfa22e-160e-41c4-9f45-4e0bff6d3000",
                "bbf7704f-428b-4e08-9038-dede9a7957d7",
                "934f4933-ad6b-4c68-86d3-5e072d6bad01",
                "3b1adfb0-aa03-409f-8e57-e64919fddeba",
                "58d470c8-ca98-4f32-8810-6e04c17a5335"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4c3cd6b6-0385-4eca-869f-3816adfcb172",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.triggerAfter(60*10))",
                  "err": {},
                  "uuid": "8dc35ce9-f048-4984-88ce-cffd6d046777",
                  "parentUUID": "4c3cd6b6-0385-4eca-869f-3816adfcb172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar)).triggerAfter(300);assert.strictEqual(a.triggerAfter(),300);assert.strictEqual(a.trigger(),-300)",
                  "err": {},
                  "uuid": "68d215f5-a72c-4d28-8822-64dc5e448b20",
                  "parentUUID": "4c3cd6b6-0385-4eca-869f-3816adfcb172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.triggerAfter(120);assert.strictEqual(a.trigger(),-120)",
                  "err": {},
                  "uuid": "d18499ac-5900-4ff4-b390-8e73d5c0a333",
                  "parentUUID": "4c3cd6b6-0385-4eca-869f-3816adfcb172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.triggerAfter(Infinity)},/`trigger`/);assert.throws(function(){a.triggerAfter(\"hi\")},/`trigger`/);assert.throws(function(){a.triggerAfter(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "b36201c5-01d3-4d4f-a089-80404f95b690",
                  "parentUUID": "4c3cd6b6-0385-4eca-869f-3816adfcb172",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"20150201T133845Z\");const a=new ICalAlarm({triggerAfter:600},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"TRIGGER;RELATED=END:PT10M\")>-1);a.triggerAfter(trigger);assert.ok(a.toString().indexOf(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\")>-1)",
                  "err": {},
                  "uuid": "7093af06-ba19-4b0d-93f3-a26292114887",
                  "parentUUID": "4c3cd6b6-0385-4eca-869f-3816adfcb172",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8dc35ce9-f048-4984-88ce-cffd6d046777",
                "68d215f5-a72c-4d28-8822-64dc5e448b20",
                "d18499ac-5900-4ff4-b390-8e73d5c0a333",
                "b36201c5-01d3-4d4f-a089-80404f95b690",
                "7093af06-ba19-4b0d-93f3-a26292114887"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "028fa063-131a-4c64-9172-ef69309721a6",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.triggerBefore(60*10))",
                  "err": {},
                  "uuid": "1dc23e3a-253a-411d-9e5e-72958d67d88f",
                  "parentUUID": "028fa063-131a-4c64-9172-ef69309721a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;assert.strictEqual(a.triggerBefore(),600);a.trigger(300);assert.strictEqual(a.triggerBefore(),300);a.trigger(now);const dateResult=a.triggerBefore();assert.deepStrictEqual(dateResult,now)",
                  "err": {},
                  "uuid": "9a585500-c927-492c-91c1-7c4d7592a60b",
                  "parentUUID": "028fa063-131a-4c64-9172-ef69309721a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.triggerBefore(Infinity)},/`trigger`/);assert.throws(function(){a.triggerBefore(\"hi\")},/`trigger`/);assert.throws(function(){a.triggerBefore(true)},/`trigger`/)",
                  "err": {},
                  "uuid": "cc32223e-b365-439b-8adb-173da5537d90",
                  "parentUUID": "028fa063-131a-4c64-9172-ef69309721a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));const now=new Date;a.triggerBefore(now);assert.deepStrictEqual(a.trigger(),now)",
                  "err": {},
                  "uuid": "36469a0e-1125-4ffd-aab0-2b2f31e18e6a",
                  "parentUUID": "028fa063-131a-4c64-9172-ef69309721a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({triggerBefore:moment()},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(moment.isMoment(a.trigger()))",
                  "err": {},
                  "uuid": "92a23e79-f815-4d8a-a7d3-a323018fcb3d",
                  "parentUUID": "028fa063-131a-4c64-9172-ef69309721a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.triggerBefore(2*60);assert.strictEqual(a.trigger(),120)",
                  "err": {},
                  "uuid": "361960da-4fbf-4718-8384-e6b9c3373d59",
                  "parentUUID": "028fa063-131a-4c64-9172-ef69309721a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger=moment(\"2015-02-01T13:38:45.000Z\");const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"TRIGGER:-PT10M\")>-1);a.triggerBefore(trigger);assert.ok(a.toString().indexOf(\"TRIGGER;VALUE=DATE-TIME:20150201T133845Z\")>-1)",
                  "err": {},
                  "uuid": "7e349f17-51e8-4a8f-963f-aa80f5db78bf",
                  "parentUUID": "028fa063-131a-4c64-9172-ef69309721a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1dc23e3a-253a-411d-9e5e-72958d67d88f",
                "9a585500-c927-492c-91c1-7c4d7592a60b",
                "cc32223e-b365-439b-8adb-173da5537d90",
                "36469a0e-1125-4ffd-aab0-2b2f31e18e6a",
                "92a23e79-f815-4d8a-a7d3-a323018fcb3d",
                "361960da-4fbf-4718-8384-e6b9c3373d59",
                "7e349f17-51e8-4a8f-963f-aa80f5db78bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "641ccea9-e4e7-4bd4-a67d-f64f091d4b18",
              "title": "relatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm relatesTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.relatesTo(null));assert.deepStrictEqual(a,a.relatesTo(ICalAlarmRelatesTo.end))",
                  "err": {},
                  "uuid": "d7713c71-45c2-4977-a097-0f5c4b3e3c55",
                  "parentUUID": "641ccea9-e4e7-4bd4-a67d-f64f091d4b18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm relatesTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.relatesTo(ICalAlarmRelatesTo.end);assert.strictEqual(a.relatesTo(),ICalAlarmRelatesTo.end);a.relatesTo(null);assert.strictEqual(a.relatesTo(),null)",
                  "err": {},
                  "uuid": "19642029-5d8b-4bba-8bb6-7d0519026bb9",
                  "parentUUID": "641ccea9-e4e7-4bd4-a67d-f64f091d4b18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw if value is not `null`, \"START\" or \"END\"",
                  "fullTitle": "ical-generator Alarm relatesTo() should throw if value is not `null`, \"START\" or \"END\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.relatesTo(\"hi\")},/`relatesTo`/);assert.throws(function(){a.relatesTo(true)},/`relatesTo`/);assert.throws(function(){a.relatesTo(Infinity)},/`relatesTo`/)",
                  "err": {},
                  "uuid": "d4ac9ff7-89cd-4406-952b-2414ecc47838",
                  "parentUUID": "641ccea9-e4e7-4bd4-a67d-f64f091d4b18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change RELATED",
                  "fullTitle": "ical-generator Alarm relatesTo() should change RELATED",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"RELATED=START\")===-1);a.relatesTo(ICalAlarmRelatesTo.start);assert.ok(a.toString().indexOf(\"RELATED=START\")>-1);a.relatesTo(ICalAlarmRelatesTo.end);assert.ok(a.toString().indexOf(\"RELATED=END\")>-1)",
                  "err": {},
                  "uuid": "948167bf-b748-4aa5-b92b-751a671471d8",
                  "parentUUID": "641ccea9-e4e7-4bd4-a67d-f64f091d4b18",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7713c71-45c2-4977-a097-0f5c4b3e3c55",
                "19642029-5d8b-4bba-8bb6-7d0519026bb9",
                "d4ac9ff7-89cd-4406-952b-2414ecc47838",
                "948167bf-b748-4aa5-b92b-751a671471d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "286c3987-03ee-477f-b5f0-ec6b1826e79c",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.repeat({interval:60,times:4}))",
                  "err": {},
                  "uuid": "5b2b2fe6-227e-4ba9-9e77-2106ad9b0ec6",
                  "parentUUID": "286c3987-03ee-477f-b5f0-ec6b1826e79c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.repeat(),null);a.repeat({interval:60,times:4});assert.deepStrictEqual(a.repeat(),{interval:60,times:4})",
                  "err": {},
                  "uuid": "57e95f7c-b00a-434e-8f17-177477f4fbbd",
                  "parentUUID": "286c3987-03ee-477f-b5f0-ec6b1826e79c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.repeat({interval:60,times:Infinity})},/`repeat.times`/);assert.throws(function(){a.repeat({interval:60,times:\"hi\"})},/`repeat.times`/);assert.throws(function(){a.repeat({interval:60,times:true})},/`repeat.times`/);assert.throws(function(){a.repeat({interval:Infinity,times:4})},/`repeat.interval`/);assert.throws(function(){a.repeat({interval:\"hi\",times:4})},/`repeat.interval`/);assert.throws(function(){a.repeat({interval:true,times:4})},/`repeat.interval`/)",
                  "err": {},
                  "uuid": "81d23755-e615-44aa-9d5b-36c79f7d0f9d",
                  "parentUUID": "286c3987-03ee-477f-b5f0-ec6b1826e79c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({repeat:{interval:90,times:42},trigger:300},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"REPEAT:42\"));assert.ok(a.toString().includes(\"DURATION:PT1M30S\"));a.repeat(null);assert.ok(!a.toString().includes(\"REPEAT:42\"));assert.ok(!a.toString().includes(\"DURATION:PT1M30S\"))",
                  "err": {},
                  "uuid": "61250a34-a5b6-4c20-a260-5c2e1377a85c",
                  "parentUUID": "286c3987-03ee-477f-b5f0-ec6b1826e79c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({repeat:{interval:null,times:4},trigger:300},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat.interval`/)",
                  "err": {},
                  "uuid": "b968067b-5d73-482b-b326-cc8c216ed875",
                  "parentUUID": "286c3987-03ee-477f-b5f0-ec6b1826e79c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({repeat:{interval:60,times:null},trigger:300},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat.times`/)",
                  "err": {},
                  "uuid": "8d4ca65b-abed-48f8-b6a7-da4b4d7acb71",
                  "parentUUID": "286c3987-03ee-477f-b5f0-ec6b1826e79c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error if interval is of wrong type",
                  "fullTitle": "ical-generator Alarm repeat() should throw an error if interval is of wrong type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAlarm({repeat:true,trigger:300},new ICalEvent({start:new Date},new ICalCalendar))},/`repeat` is not correct, must be an object!/)",
                  "err": {},
                  "uuid": "44240de0-c7d9-48ac-a113-ce7043426bff",
                  "parentUUID": "286c3987-03ee-477f-b5f0-ec6b1826e79c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b2b2fe6-227e-4ba9-9e77-2106ad9b0ec6",
                "57e95f7c-b00a-434e-8f17-177477f4fbbd",
                "81d23755-e615-44aa-9d5b-36c79f7d0f9d",
                "61250a34-a5b6-4c20-a260-5c2e1377a85c",
                "b968067b-5d73-482b-b326-cc8c216ed875",
                "8d4ca65b-abed-48f8-b6a7-da4b4d7acb71",
                "44240de0-c7d9-48ac-a113-ce7043426bff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e537d44b-e86a-4efe-9cb9-0e31837b7691",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.attach(null));assert.deepStrictEqual(a,a.attach(\"https://sebbo.net/beep.aud\"))",
                  "err": {},
                  "uuid": "0d6c3a96-6c5b-4403-9a6b-64d976b98b24",
                  "parentUUID": "e537d44b-e86a-4efe-9cb9-0e31837b7691",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t={mime:\"audio/basic\",uri:\"https://example.com/alarm.aud\"};const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.attach(),null);a.attach(t);assert.deepStrictEqual(a.attach(),t);a.attach(\"https://www.example.com/beep.aud\");assert.deepStrictEqual(a.attach(),{mime:null,uri:\"https://www.example.com/beep.aud\"});a.attach({uri:\"https://www.example.com/beep.aud\"});assert.deepStrictEqual(a.attach(),{mime:null,uri:\"https://www.example.com/beep.aud\"});a.attach(null);assert.strictEqual(a.attach(),null)",
                  "err": {},
                  "uuid": "f6d7e345-ca00-4339-95f9-97c5734e793a",
                  "parentUUID": "e537d44b-e86a-4efe-9cb9-0e31837b7691",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.attach({mime:\"audio/basic\"})},/`attach.uri`/)",
                  "err": {},
                  "uuid": "43065db9-feec-4159-9239-33e4ca65c7b5",
                  "parentUUID": "e537d44b-e86a-4efe-9cb9-0e31837b7691",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.attach(Infinity)},/`attachment`/)",
                  "err": {},
                  "uuid": "8c70e32b-58a1-4eee-81f6-191e700cfe33",
                  "parentUUID": "e537d44b-e86a-4efe-9cb9-0e31837b7691",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.audio},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nATTACH;VALUE=URI:Basso\")>-1);a.attach(\"https://example.com/beep.aud\");assert.ok(a.toString().indexOf(\"\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud\")>-1);a.attach({mime:\"audio/basic\",uri:\"https://example.com/beep.aud\"});assert.ok(a.toString().indexOf(\"\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud\")>-1)",
                  "err": {},
                  "uuid": "3545e61b-8010-4878-b74a-93b0edc68a8c",
                  "parentUUID": "e537d44b-e86a-4efe-9cb9-0e31837b7691",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d6c3a96-6c5b-4403-9a6b-64d976b98b24",
                "f6d7e345-ca00-4339-95f9-97c5734e793a",
                "43065db9-feec-4159-9239-33e4ca65c7b5",
                "8c70e32b-58a1-4eee-81f6-191e700cfe33",
                "3545e61b-8010-4878-b74a-93b0edc68a8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8616c353-ba3a-4904-8c52-d90877ba7af2",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.description(null));assert.deepStrictEqual(a,a.description(\"Hey Ho!\"))",
                  "err": {},
                  "uuid": "9dd69acf-c3ca-4964-afd1-ee31450b788c",
                  "parentUUID": "8616c353-ba3a-4904-8c52-d90877ba7af2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.description(),null);a.description(\"blablabla\");assert.deepStrictEqual(a.description(),\"blablabla\");a.description(null);assert.deepStrictEqual(a.description(),null)",
                  "err": {},
                  "uuid": "d61ae6cf-3684-4a43-9ed1-1109ad976c43",
                  "parentUUID": "8616c353-ba3a-4904-8c52-d90877ba7af2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({description:\"Huibuh!\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nDESCRIPTION:Huibuh\")>-1)",
                  "err": {},
                  "uuid": "cb9de8df-5eb9-48e8-bfee-aaa5f4f559a1",
                  "parentUUID": "8616c353-ba3a-4904-8c52-d90877ba7af2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({description:\"Example Event\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nDESCRIPTION:Example Event\")>-1)",
                  "err": {},
                  "uuid": "2dca6604-473d-475e-900d-91b519f22b5e",
                  "parentUUID": "8616c353-ba3a-4904-8c52-d90877ba7af2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9dd69acf-c3ca-4964-afd1-ee31450b788c",
                "d61ae6cf-3684-4a43-9ed1-1109ad976c43",
                "cb9de8df-5eb9-48e8-bfee-aaa5f4f559a1",
                "2dca6604-473d-475e-900d-91b519f22b5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0b661d75-2cd6-4183-80cb-4333ea2c85d0",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.summary(null));assert.deepStrictEqual(a,a.summary(\"Hey Ho!\"))",
                  "err": {},
                  "uuid": "f8a8e612-6315-4575-b827-ae0388c575fd",
                  "parentUUID": "0b661d75-2cd6-4183-80cb-4333ea2c85d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.summary(),null);a.summary(\"blablabla\");assert.deepStrictEqual(a.summary(),\"blablabla\");a.summary(null);assert.deepStrictEqual(a.summary(),null)",
                  "err": {},
                  "uuid": "9a8b8658-b36a-4747-b589-23175d9466af",
                  "parentUUID": "0b661d75-2cd6-4183-80cb-4333ea2c85d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm summary() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({summary:\"Huibuh!\",type:ICalAlarmType.email},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nSUMMARY:Huibuh\")>-1)",
                  "err": {},
                  "uuid": "b3077987-45a3-4fd5-bdd3-c6c114d881a3",
                  "parentUUID": "0b661d75-2cd6-4183-80cb-4333ea2c85d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm summary() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({type:ICalAlarmType.email},new ICalEvent({start:new Date,summary:\"Example Event\"},new ICalCalendar));assert.ok(a.toString().indexOf(\"\\r\\nSUMMARY:Example Event\")>-1)",
                  "err": {},
                  "uuid": "1bbfe197-2396-420d-827d-2223cf4764eb",
                  "parentUUID": "0b661d75-2cd6-4183-80cb-4333ea2c85d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8a8e612-6315-4575-b827-ae0388c575fd",
                "9a8b8658-b36a-4747-b589-23175d9466af",
                "b3077987-45a3-4fd5-bdd3-c6c114d881a3",
                "1bbfe197-2396-420d-827d-2223cf4764eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "704f68c4-ce83-478e-bd20-08f7ae16bfd6",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Alarm createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=new ICalAttendee({email:\"mail@example.com\"},alarm);assert.strictEqual(alarm.createAttendee(attendee),attendee,\"createAttendee returns attendee\");assert.deepStrictEqual(alarm.attendees()[0],attendee,\"attendee pushed\")",
                  "err": {},
                  "uuid": "782e629d-ae2a-4198-9445-4796aaf2fef0",
                  "parentUUID": "704f68c4-ce83-478e-bd20-08f7ae16bfd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Alarm createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});assert.ok(alarm.createAttendee({email:\"mail@example.com\"})instanceof ICalAttendee);assert.strictEqual(alarm.attendees.length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "1b003ea9-0c16-44b7-9c0b-4d6ea17a36ac",
                  "parentUUID": "704f68c4-ce83-478e-bd20-08f7ae16bfd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=alarm.createAttendee(\"Zac <zac@example.com>\");assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(alarm.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "1b452f6f-56ed-461c-945a-2e16e30253e6",
                  "parentUUID": "704f68c4-ce83-478e-bd20-08f7ae16bfd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Alarm createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});assert.throws(function(){alarm.createAttendee(\"foo bar\")},/isn't formated correctly/)",
                  "err": {},
                  "uuid": "f9f80198-9d54-438e-919d-c7df662c4a98",
                  "parentUUID": "704f68c4-ce83-478e-bd20-08f7ae16bfd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Alarm createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const attendee=alarm.createAttendee({email:\"zac@example.com\",name:\"Zac\"});assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(alarm.attendees().length,1,\"attendee pushed\");assert.ok(alarm.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;CN=\"Zac\":MAILTO:zac@example.com'))",
                  "err": {},
                  "uuid": "6fc66597-2e20-4271-b5b3-b097aa1d8ba8",
                  "parentUUID": "704f68c4-ce83-478e-bd20-08f7ae16bfd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "782e629d-ae2a-4198-9445-4796aaf2fef0",
                "1b003ea9-0c16-44b7-9c0b-4d6ea17a36ac",
                "1b452f6f-56ed-461c-945a-2e16e30253e6",
                "f9f80198-9d54-438e-919d-c7df662c4a98",
                "6fc66597-2e20-4271-b5b3-b097aa1d8ba8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f8e71d8-cf5a-4042-a685-915e49488baa",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Alarm attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});assert.strictEqual(alarm.attendees().length,0);const attendee=alarm.createAttendee({email:\"mail@example.com\"});assert.strictEqual(alarm.attendees().length,1);assert.deepStrictEqual(alarm.attendees()[0],attendee)",
                  "err": {},
                  "uuid": "caf2296f-e56a-420f-b2ab-2f77cca97976",
                  "parentUUID": "6f8e71d8-cf5a-4042-a685-915e49488baa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Alarm attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const alarm=new ICalEvent({start:new Date},new ICalCalendar).createAlarm({type:ICalAlarmType.email});const foo=alarm.attendees([{email:\"a@example.com\",name:\"Person A\"},{email:\"b@example.com\",name:\"Person B\"}]);assert.strictEqual(alarm.attendees().length,2);assert.deepStrictEqual(foo,alarm)",
                  "err": {},
                  "uuid": "97aaa282-731b-480e-8e34-282a474160b9",
                  "parentUUID": "6f8e71d8-cf5a-4042-a685-915e49488baa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "caf2296f-e56a-420f-b2ab-2f77cca97976",
                "97aaa282-731b-480e-8e34-282a474160b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39142764-373d-452a-ad7f-a75b6fa5a9c5",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "8c2193bf-7a58-4b83-8e94-ee6c82f500e5",
                  "parentUUID": "39142764-373d-452a-ad7f-a75b6fa5a9c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c2193bf-7a58-4b83-8e94-ee6c82f500e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc2bf11e-8a72-444f-9dae-e3ef873da581",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));a.type(ICalAlarmType.display);a.trigger(120);assert.deepStrictEqual(a.toJSON(),{attach:null,attendees:[],description:null,interval:null,relatesTo:null,repeat:null,summary:null,trigger:120,type:\"display\",x:[]})",
                  "err": {},
                  "uuid": "668e9a75-a152-46b7-9571-e8b85d815f31",
                  "parentUUID": "cc2bf11e-8a72-444f-9dae-e3ef873da581",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAlarm({},new ICalEvent({start:new Date},new ICalCalendar));new ICalAlarm(a.toJSON(),new ICalEvent({start:new Date},new ICalCalendar))",
                  "err": {},
                  "uuid": "bc44ec41-7418-4bdc-8a46-9c48df54957c",
                  "parentUUID": "cc2bf11e-8a72-444f-9dae-e3ef873da581",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "668e9a75-a152-46b7-9571-e8b85d815f31",
                "bc44ec41-7418-4bdc-8a46-9c48df54957c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a310c0d2-97bf-4634-92b1-a6130d08c3bb",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "51c587d2-3c57-4b03-b5c9-f78a00bc6cd7",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={delegatedFrom:null,delegatedTo:null,email:\"john@example.org\",mailto:\"john+calendar@example.org\",name:\"John Doe\",role:ICalAttendeeRole.REQ,rsvp:false,scheduleAgent:ICalAttendeeScheduleAgent.CLIENT,sentBy:null,status:ICalAttendeeStatus.ACCEPTED,type:ICalAttendeeType.INDIVIDUAL,x:[]};const event=new ICalAttendee(data,new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(event.toJSON(),data)",
                  "err": {},
                  "uuid": "1fb3421b-45b6-4ede-a7e5-64474c8d89ab",
                  "parentUUID": "51c587d2-3c57-4b03-b5c9-f78a00bc6cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAttendee({email:\"foo@bar.com\"})},/`event`/)",
                  "err": {},
                  "uuid": "1740129b-3a54-451d-86b5-8798ebe56cf2",
                  "parentUUID": "51c587d2-3c57-4b03-b5c9-f78a00bc6cd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee constructor() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalAttendee({name:\"Testuser\"},new ICalEvent({start:new Date},new ICalCalendar))},/`email`/)",
                  "err": {},
                  "uuid": "2b20204c-18f8-409b-9373-2f7dc59f1527",
                  "parentUUID": "51c587d2-3c57-4b03-b5c9-f78a00bc6cd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1fb3421b-45b6-4ede-a7e5-64474c8d89ab",
                "1740129b-3a54-451d-86b5-8798ebe56cf2",
                "2b20204c-18f8-409b-9373-2f7dc59f1527"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f21792de-312a-406d-815b-91e74fe15051",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.name(),null);a.name(\"Sebastian\");assert.strictEqual(a.name(),\"Sebastian\")",
                  "err": {},
                  "uuid": "f2bbfccf-216b-434a-8d65-27b7cc19f708",
                  "parentUUID": "f21792de-312a-406d-815b-91e74fe15051",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.name(null));assert.deepStrictEqual(a,a.name(\"Sebastian\"))",
                  "err": {},
                  "uuid": "b6e67b43-d5c2-4bb9-8b02-3e05b085f55b",
                  "parentUUID": "f21792de-312a-406d-815b-91e74fe15051",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.name(\"Sebastian\");assert.strictEqual(a.name(),\"Sebastian\");a.name(null);assert.strictEqual(a.name(),null)",
                  "err": {},
                  "uuid": "baa63b78-fa35-4adf-a4c3-e54bbbea507c",
                  "parentUUID": "f21792de-312a-406d-815b-91e74fe15051",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2bbfccf-216b-434a-8d65-27b7cc19f708",
                "b6e67b43-d5c2-4bb9-8b02-3e05b085f55b",
                "baa63b78-fa35-4adf-a4c3-e54bbbea507c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "88d66b6e-1226-4379-82fd-1e6d90f5809f",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).email(\"foo@example.com\");assert.strictEqual(a.email(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "851ae64b-e4ac-4224-942c-876279ba27d6",
                  "parentUUID": "88d66b6e-1226-4379-82fd-1e6d90f5809f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.email(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "14dc502d-6ba8-4386-95c5-ca0fffb0b968",
                  "parentUUID": "88d66b6e-1226-4379-82fd-1e6d90f5809f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"mail@example.com\")>-1)",
                  "err": {},
                  "uuid": "523313ea-883b-4aba-ae44-206ff3adc183",
                  "parentUUID": "88d66b6e-1226-4379-82fd-1e6d90f5809f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "851ae64b-e4ac-4224-942c-876279ba27d6",
                "14dc502d-6ba8-4386-95c5-ca0fffb0b968",
                "523313ea-883b-4aba-ae44-206ff3adc183"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e000a88b-f173-48f3-9aec-4abcbef3f7b4",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.mailto(),null);a.mailto(\"foo@example.com\");assert.strictEqual(a.mailto(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "96ba4752-d077-4299-87c4-2e4ced5a99f2",
                  "parentUUID": "e000a88b-f173-48f3-9aec-4abcbef3f7b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.mailto(null));assert.deepStrictEqual(a,a.mailto(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "82267f19-c1a4-4b6d-907d-505b63807a0d",
                  "parentUUID": "e000a88b-f173-48f3-9aec-4abcbef3f7b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.mailto(\"mail2@example2.com\");assert.ok(a.toString().indexOf(\"EMAIL=mail@example.com\")>-1&&a.toString().indexOf(\"MAILTO:mail2@example2.com\")>-1)",
                  "err": {},
                  "uuid": "61444cbe-5730-4c7d-a90b-cf7524e881d9",
                  "parentUUID": "e000a88b-f173-48f3-9aec-4abcbef3f7b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96ba4752-d077-4299-87c4-2e4ced5a99f2",
                "82267f19-c1a4-4b6d-907d-505b63807a0d",
                "61444cbe-5730-4c7d-a90b-cf7524e881d9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4da33a21-2503-423d-966a-29356acacc3f",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).sentBy(\"foo@example.com\");assert.strictEqual(a.sentBy(),\"foo@example.com\")",
                  "err": {},
                  "uuid": "b7112a1f-6e8c-47d3-a46e-94dbba6c9230",
                  "parentUUID": "4da33a21-2503-423d-966a-29356acacc3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.sentBy(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "7b8953ca-1902-4a13-bc9c-3bade07a9b37",
                  "parentUUID": "4da33a21-2503-423d-966a-29356acacc3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\",sentBy:\"bar@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().includes(\"bar@example.com\"))",
                  "err": {},
                  "uuid": "1b94a533-f861-424f-8007-30ea3ed29f99",
                  "parentUUID": "4da33a21-2503-423d-966a-29356acacc3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7112a1f-6e8c-47d3-a46e-94dbba6c9230",
                "7b8953ca-1902-4a13-bc9c-3bade07a9b37",
                "1b94a533-f861-424f-8007-30ea3ed29f99"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e33e62e4-6c34-40fa-9ff4-0fb0c41de189",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.role(ICalAttendeeRole.REQ))",
                  "err": {},
                  "uuid": "9df67e67-98eb-4f4e-aa56-cb464fe4e5f6",
                  "parentUUID": "e33e62e4-6c34-40fa-9ff4-0fb0c41de189",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar)).role(ICalAttendeeRole.REQ);assert.strictEqual(a.role(),\"REQ-PARTICIPANT\")",
                  "err": {},
                  "uuid": "12b5ff96-b75d-496f-9348-a28752f64254",
                  "parentUUID": "e33e62e4-6c34-40fa-9ff4-0fb0c41de189",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.role(\"\")},/Input must be one of the following: CHAIR, NON-PARTICIPANT, OPT-PARTICIPANT, REQ-PARTICIPANT/)",
                  "err": {},
                  "uuid": "bbfd13d0-5aae-4c70-83d1-7b430b56165c",
                  "parentUUID": "e33e62e4-6c34-40fa-9ff4-0fb0c41de189",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.role(\"COOKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "0dc7228d-72ff-46ff-a19a-728347889f00",
                  "parentUUID": "e33e62e4-6c34-40fa-9ff4-0fb0c41de189",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",role:ICalAttendeeRole.NON},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"NON-PARTICIPANT\")>-1)",
                  "err": {},
                  "uuid": "ffe5df7b-6f8c-4cc3-a159-451f655fed27",
                  "parentUUID": "e33e62e4-6c34-40fa-9ff4-0fb0c41de189",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9df67e67-98eb-4f4e-aa56-cb464fe4e5f6",
                "12b5ff96-b75d-496f-9348-a28752f64254",
                "bbfd13d0-5aae-4c70-83d1-7b430b56165c",
                "0dc7228d-72ff-46ff-a19a-728347889f00",
                "ffe5df7b-6f8c-4cc3-a159-451f655fed27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c9c6bc02-f1d4-4f82-b12b-73ca78fc3ecc",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.rsvp(null));assert.deepStrictEqual(a,a.rsvp(true))",
                  "err": {},
                  "uuid": "bf1b2b42-22e9-44c1-93af-a78d2a7462aa",
                  "parentUUID": "c9c6bc02-f1d4-4f82-b12b-73ca78fc3ecc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));a.rsvp(true);assert.strictEqual(a.rsvp(),true);a.rsvp(false);assert.strictEqual(a.rsvp(),false)",
                  "err": {},
                  "uuid": "43c4f87c-d6d7-46e7-8dc2-5d002242e5bb",
                  "parentUUID": "c9c6bc02-f1d4-4f82-b12b-73ca78fc3ecc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.rsvp(),null);a.rsvp(false);assert.strictEqual(a.rsvp(),false);a.rsvp(null);assert.strictEqual(a.rsvp(),null)",
                  "err": {},
                  "uuid": "d91bd717-0ae7-4bbf-888a-01ef8d94eb87",
                  "parentUUID": "c9c6bc02-f1d4-4f82-b12b-73ca78fc3ecc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",rsvp:true},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\";RSVP=TRUE\")>-1)",
                  "err": {},
                  "uuid": "bb12f252-bccf-4040-a415-1898fbdea58c",
                  "parentUUID": "c9c6bc02-f1d4-4f82-b12b-73ca78fc3ecc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf1b2b42-22e9-44c1-93af-a78d2a7462aa",
                "43c4f87c-d6d7-46e7-8dc2-5d002242e5bb",
                "d91bd717-0ae7-4bbf-888a-01ef8d94eb87",
                "bb12f252-bccf-4040-a415-1898fbdea58c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc50203a-3b5c-4d02-998f-5326cd9da86b",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.status(null));assert.deepStrictEqual(a,a.status(ICalAttendeeStatus.ACCEPTED))",
                  "err": {},
                  "uuid": "6b591c35-2032-4455-9345-daf00ad0ea4f",
                  "parentUUID": "dc50203a-3b5c-4d02-998f-5326cd9da86b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.status(),null);a.status(ICalAttendeeStatus.ACCEPTED);assert.strictEqual(a.status(),\"ACCEPTED\");a.status(null);assert.strictEqual(a.status(),null)",
                  "err": {},
                  "uuid": "13d05406-3cf8-45a2-be19-bd79aa63c600",
                  "parentUUID": "dc50203a-3b5c-4d02-998f-5326cd9da86b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.status(\"DRINKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "58b6677a-b80a-4a6f-8e3c-ef072ec1a8e2",
                  "parentUUID": "dc50203a-3b5c-4d02-998f-5326cd9da86b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",status:ICalAttendeeStatus.DECLINED},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"DECLINED\")>-1)",
                  "err": {},
                  "uuid": "99ffb330-e4b8-4ad8-b23a-7b534b571939",
                  "parentUUID": "dc50203a-3b5c-4d02-998f-5326cd9da86b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mail@example.com\",status:ICalAttendeeStatus.NEEDSACTION},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"NEEDS-ACTION\")>-1)",
                  "err": {},
                  "uuid": "bdea5a12-6179-4086-89f7-940b1dd60880",
                  "parentUUID": "dc50203a-3b5c-4d02-998f-5326cd9da86b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6b591c35-2032-4455-9345-daf00ad0ea4f",
                "13d05406-3cf8-45a2-be19-bd79aa63c600",
                "58b6677a-b80a-4a6f-8e3c-ef072ec1a8e2",
                "99ffb330-e4b8-4ad8-b23a-7b534b571939",
                "bdea5a12-6179-4086-89f7-940b1dd60880"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f67ca84-d91b-4deb-8faa-c7f82e7e53ad",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.type(null),a);assert.deepStrictEqual(a.type(ICalAttendeeType.INDIVIDUAL),a)",
                  "err": {},
                  "uuid": "41e7514e-9e04-412b-b69c-b33584fc49db",
                  "parentUUID": "0f67ca84-d91b-4deb-8faa-c7f82e7e53ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.type(),null);a.type(ICalAttendeeType.ROOM);assert.strictEqual(a.type(),\"ROOM\");a.type(null);assert.strictEqual(a.type(),null)",
                  "err": {},
                  "uuid": "e98c4d44-3ca0-457c-bbbc-1a18c7d20c57",
                  "parentUUID": "0f67ca84-d91b-4deb-8faa-c7f82e7e53ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.type(\"DRINKING\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "14171c50-fbed-4189-9fcd-400dd59460f5",
                  "parentUUID": "0f67ca84-d91b-4deb-8faa-c7f82e7e53ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mailing-list@example.com\",type:ICalAttendeeType.GROUP},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"GROUP\")>-1)",
                  "err": {},
                  "uuid": "114a213d-2f74-434c-823b-43e438becb9d",
                  "parentUUID": "0f67ca84-d91b-4deb-8faa-c7f82e7e53ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41e7514e-9e04-412b-b69c-b33584fc49db",
                "e98c4d44-3ca0-457c-bbbc-1a18c7d20c57",
                "14171c50-fbed-4189-9fcd-400dd59460f5",
                "114a213d-2f74-434c-823b-43e438becb9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e9a8001b-f780-4ca5-9206-08c5f2c8584a",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.delegatedTo(null));assert.deepStrictEqual(a,a.delegatedTo(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "d0ba90d4-2f41-46fe-8b52-f9d544690016",
                  "parentUUID": "e9a8001b-f780-4ca5-9206-08c5f2c8584a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.delegatedTo(),null);a.delegatedTo(\"foo@example.com\");const result=a.delegatedTo();assert.ok(result);assert.strictEqual(result.email(),\"foo@example.com\");a.delegatedTo(null);assert.strictEqual(a.delegatedTo(),null)",
                  "err": {},
                  "uuid": "2af067a3-a4c8-4d9f-b805-e4fd516c9797",
                  "parentUUID": "e9a8001b-f780-4ca5-9206-08c5f2c8584a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({delegatedTo:\"foo@example.com\",email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"foo@example\")>-1)",
                  "err": {},
                  "uuid": "274b4ebd-4153-4a7f-b3db-e65e215f00a5",
                  "parentUUID": "e9a8001b-f780-4ca5-9206-08c5f2c8584a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0ba90d4-2f41-46fe-8b52-f9d544690016",
                "2af067a3-a4c8-4d9f-b805-e4fd516c9797",
                "274b4ebd-4153-4a7f-b3db-e65e215f00a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dcb51152-b64d-4e52-9a03-782865bcefe9",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.delegatedFrom(null));assert.deepStrictEqual(a,a.delegatedFrom(\"foo@example.com\"))",
                  "err": {},
                  "uuid": "2e554436-66da-4d3e-9be9-f92a78a4958c",
                  "parentUUID": "dcb51152-b64d-4e52-9a03-782865bcefe9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.delegatedFrom(),null);a.delegatedFrom(\"foo@example.com\");let result=a.delegatedFrom();assert.ok(result);assert.strictEqual(result.email(),\"foo@example.com\");a.delegatedFrom({email:\"max.mustermann@example.com\",name:\"Max Mustermann\"});result=a.delegatedFrom();assert.ok(result);assert.strictEqual(result.name(),\"Max Mustermann\");assert.strictEqual(result.email(),\"max.mustermann@example.com\");a.delegatedFrom(null);assert.strictEqual(a.delegatedFrom(),null)",
                  "err": {},
                  "uuid": "5a2c6510-3a67-4588-811a-13d42b73daba",
                  "parentUUID": "dcb51152-b64d-4e52-9a03-782865bcefe9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({delegatedFrom:\"foo@example.com\",email:\"mail@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"foo@example.com\")>-1)",
                  "err": {},
                  "uuid": "a2746389-1fec-4f51-beb7-05be77e3b1d4",
                  "parentUUID": "dcb51152-b64d-4e52-9a03-782865bcefe9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2e554436-66da-4d3e-9be9-f92a78a4958c",
                "5a2c6510-3a67-4588-811a-13d42b73daba",
                "a2746389-1fec-4f51-beb7-05be77e3b1d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9f7b12d5-397a-4fe6-a642-669fbaf7af74",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.delegatesTo({email:\"mail@example.com\"})instanceof ICalAttendee)",
                  "err": {},
                  "uuid": "1d29794f-cc64-4c55-b4ba-afdc2cc80a4c",
                  "parentUUID": "9f7b12d5-397a-4fe6-a642-669fbaf7af74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({email:\"muh@example.com\",name:\"Muh\"},event);assert.deepStrictEqual(new ICalAttendee({email:\"foo@example.com\"},event).delegatesTo(attendee),attendee)",
                  "err": {},
                  "uuid": "e315499e-92e2-462a-9bbe-771e3e22eb4f",
                  "parentUUID": "9f7b12d5-397a-4fe6-a642-669fbaf7af74",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee=new ICalAttendee({email:\"zac@example.com\",name:\"Zac\"},new ICalEvent({start:new Date},new ICalCalendar)).delegatesTo({email:\"cody@example.com\",name:\"Cody\"});assert.strictEqual(attendee.name(),\"Cody\")",
                  "err": {},
                  "uuid": "f65af3b7-a9a7-4033-93f5-f2d7d71d3214",
                  "parentUUID": "9f7b12d5-397a-4fe6-a642-669fbaf7af74",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d29794f-cc64-4c55-b4ba-afdc2cc80a4c",
                "e315499e-92e2-462a-9bbe-771e3e22eb4f",
                "f65af3b7-a9a7-4033-93f5-f2d7d71d3214"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d98e647d-0e90-4f70-8aec-e438a03544f1",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.delegatesFrom({email:\"bar@example.com\"})instanceof ICalAttendee)",
                  "err": {},
                  "uuid": "aeb46def-b35b-4729-94b3-02f1cc50b192",
                  "parentUUID": "d98e647d-0e90-4f70-8aec-e438a03544f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({email:\"muh@example.com\",name:\"Muh\"},event);assert.deepStrictEqual(new ICalAttendee({email:\"bar@example.com\"},event).delegatesFrom(attendee),attendee)",
                  "err": {},
                  "uuid": "28662e86-cf18-4ba2-afcf-da194ee9fa7f",
                  "parentUUID": "d98e647d-0e90-4f70-8aec-e438a03544f1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"zac@example.com\",name:\"Zac\"},new ICalEvent({start:new Date},new ICalCalendar)).delegatesFrom({email:\"cody@example.com\",name:\"Cody\"});assert.strictEqual(a.name(),\"Cody\");const b=new ICalAttendee({delegatesFrom:{email:\"cody@example.com\",name:\"Cody\"},email:\"zac@example.com\",name:\"Zac\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(b.name(),\"Zac\")",
                  "err": {},
                  "uuid": "040efe9b-ba1c-4dee-85cc-fb9781a3a81b",
                  "parentUUID": "d98e647d-0e90-4f70-8aec-e438a03544f1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aeb46def-b35b-4729-94b3-02f1cc50b192",
                "28662e86-cf18-4ba2-afcf-da194ee9fa7f",
                "040efe9b-ba1c-4dee-85cc-fb9781a3a81b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "96dd40f1-1e4b-49c7-a5ba-7950211db50b",
              "title": "scheduleAgent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee scheduleAgent() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a.scheduleAgent(null),a);assert.deepStrictEqual(a.scheduleAgent(ICalAttendeeScheduleAgent.CLIENT),a)",
                  "err": {},
                  "uuid": "6189db33-20c7-4776-819b-dea4bdcfa737",
                  "parentUUID": "96dd40f1-1e4b-49c7-a5ba-7950211db50b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee scheduleAgent() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.strictEqual(a.scheduleAgent(),null);a.scheduleAgent(ICalAttendeeScheduleAgent.CLIENT);assert.strictEqual(a.scheduleAgent(),\"CLIENT\");a.scheduleAgent(null);assert.strictEqual(a.scheduleAgent(),null)",
                  "err": {},
                  "uuid": "dc11de6e-1462-48c6-9786-88cb43b54594",
                  "parentUUID": "96dd40f1-1e4b-49c7-a5ba-7950211db50b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show in the toString() output",
                  "fullTitle": "ical-generator Attendee scheduleAgent() should show in the toString() output",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mailing-list@example.com\",scheduleAgent:ICalAttendeeScheduleAgent.CLIENT},new ICalEvent({start:new Date},new ICalCalendar));assert.ok(a.toString().indexOf(\"SCHEDULE-AGENT=CLIENT\")>-1)",
                  "err": {},
                  "uuid": "c459a43c-4912-4287-8bce-5b386fe4f186",
                  "parentUUID": "96dd40f1-1e4b-49c7-a5ba-7950211db50b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept X- prefixed custom values",
                  "fullTitle": "ical-generator Attendee scheduleAgent() should accept X- prefixed custom values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"mailing-list@example.com\",scheduleAgent:\"X-CUSTOM-VALUE\"},new ICalEvent({start:new Date},new ICalCalendar));assert.equal(a.scheduleAgent(),\"X-CUSTOM-VALUE\");a.scheduleAgent(\"X-CUSTOM-VALUE-2\");assert.equal(a.scheduleAgent(),\"X-CUSTOM-VALUE-2\")",
                  "err": {},
                  "uuid": "17d977c2-5095-434e-b072-7968b936d5fd",
                  "parentUUID": "96dd40f1-1e4b-49c7-a5ba-7950211db50b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when using non-X- prefixed custom values",
                  "fullTitle": "ical-generator Attendee scheduleAgent() should throw error when using non-X- prefixed custom values",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));assert.throws(function(){a.scheduleAgent(\"NON-X-CUSTOM-VALUE\")},/must be one of the following/)",
                  "err": {},
                  "uuid": "129f4be8-08bf-4f5b-bbcf-f9dafe794605",
                  "parentUUID": "96dd40f1-1e4b-49c7-a5ba-7950211db50b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6189db33-20c7-4776-819b-dea4bdcfa737",
                "dc11de6e-1462-48c6-9786-88cb43b54594",
                "c459a43c-4912-4287-8bce-5b386fe4f186",
                "17d977c2-5095-434e-b072-7968b936d5fd",
                "129f4be8-08bf-4f5b-bbcf-f9dafe794605"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "697b06ea-ec28-4e12-a378-33fed2477d75",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.org\"},new ICalEvent({start:new Date},new ICalCalendar));assert.deepStrictEqual(a,a.x(\"X-NUM-GUESTS\",\"5\"));assert.ok(a.toString().includes(\"ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org\"))",
                  "err": {},
                  "uuid": "384243fa-90f7-43bd-ba61-d46232500920",
                  "parentUUID": "697b06ea-ec28-4e12-a378-33fed2477d75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "384243fa-90f7-43bd-ba61-d46232500920"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cad4c699-e187-4c7a-a5fc-fb8857464c44",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"max@example.com\",name:\"Max Mustermann\"},new ICalEvent({start:new Date},new ICalCalendar));a.delegatesTo(\"Moritz <moritz@example.com>\");assert.deepStrictEqual(a.toJSON(),{delegatedFrom:null,delegatedTo:\"moritz@example.com\",email:\"max@example.com\",mailto:null,name:\"Max Mustermann\",role:\"REQ-PARTICIPANT\",rsvp:null,scheduleAgent:null,sentBy:null,status:\"DELEGATED\",type:null,x:[]})",
                  "err": {},
                  "uuid": "584b37c6-47ba-465f-93ac-fa00c56d7173",
                  "parentUUID": "cad4c699-e187-4c7a-a5fc-fb8857464c44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalAttendee({email:\"foo@example.com\"},new ICalEvent({start:new Date},new ICalCalendar));new ICalAttendee(a.toJSON(),new ICalEvent({start:new Date},new ICalCalendar))",
                  "err": {},
                  "uuid": "6d3ee62a-789c-47ac-96e3-bf4ef98cee25",
                  "parentUUID": "cad4c699-e187-4c7a-a5fc-fb8857464c44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "584b37c6-47ba-465f-93ac-fa00c56d7173",
                "6d3ee62a-789c-47ac-96e3-bf4ef98cee25"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b4012c95-dbce-4db8-b616-91744c343cfc",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1d71fd28-4a22-48a2-ba39-d9514b8439eb",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={description:\"Hi, I am the description.\",events:[],method:ICalCalendarMethod.PUBLISH,name:\"Test Calendar\",prodId:\"//sebbo.net//ical-generator//EN\",scale:null,source:\"http://example.com/my/original_source.ical\",timezone:null,ttl:null,url:\"https://github.com/sebbo2002/ical-generator\",x:[]};const cal=new ICalCalendar(data);assert.deepStrictEqual(cal.toJSON(),data)",
                  "err": {},
                  "uuid": "615fccbd-1696-47d5-b799-5b751817a189",
                  "parentUUID": "1d71fd28-4a22-48a2-ba39-d9514b8439eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "615fccbd-1696-47d5-b799-5b751817a189"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "85ca537b-382b-40ef-81b8-56aa9ab4deca",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.prodId(\"//loremipsum.de//ical-tests//EN\");assert.strictEqual(cal.prodId(),\"//loremipsum.de//ical-tests//EN\")",
                  "err": {},
                  "uuid": "bde5c792-61c1-431e-a4b3-8af9b152db30",
                  "parentUUID": "85ca537b-382b-40ef-81b8-56aa9ab4deca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.prodId(\"//loremipsum.de//ical-tests//EN\"))",
                  "err": {},
                  "uuid": "0865e6a4-caf2-483a-a376-a3f132c5d6a1",
                  "parentUUID": "85ca537b-382b-40ef-81b8-56aa9ab4deca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId(256)},/`prodid`/)",
                  "err": {},
                  "uuid": "e9d45e9a-b19c-4534-8058-127b42c5f314",
                  "parentUUID": "85ca537b-382b-40ef-81b8-56aa9ab4deca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId({product:\"ical-tests\"})},/`prodid\\.company`/)",
                  "err": {},
                  "uuid": "c0cf0512-db38-4e74-92fd-e0e7e0c3d334",
                  "parentUUID": "85ca537b-382b-40ef-81b8-56aa9ab4deca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.throws(function(){cal.prodId({company:\"sebbo.net\"})},/`prodid\\.product`/)",
                  "err": {},
                  "uuid": "6d381b6a-e258-46f8-b8a1-c1d2b8a07018",
                  "parentUUID": "85ca537b-382b-40ef-81b8-56aa9ab4deca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().prodId({company:\"loremipsum.com\",product:\"awesome-unit-tests\"});assert.strictEqual(cal.prodId(),\"//loremipsum.com//awesome-unit-tests//EN\")",
                  "err": {},
                  "uuid": "255a7231-493d-483f-bd68-56a2e00c1578",
                  "parentUUID": "85ca537b-382b-40ef-81b8-56aa9ab4deca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().prodId({company:\"loremipsum.com\",language:\"DE\",product:\"awesome-unit-tests\"});assert.strictEqual(cal.prodId(),\"//loremipsum.com//awesome-unit-tests//DE\")",
                  "err": {},
                  "uuid": "9103ae00-b022-464e-a7b1-3b66308c40b2",
                  "parentUUID": "85ca537b-382b-40ef-81b8-56aa9ab4deca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bde5c792-61c1-431e-a4b3-8af9b152db30",
                "0865e6a4-caf2-483a-a376-a3f132c5d6a1",
                "e9d45e9a-b19c-4534-8058-127b42c5f314",
                "c0cf0512-db38-4e74-92fd-e0e7e0c3d334",
                "6d381b6a-e258-46f8-b8a1-c1d2b8a07018",
                "255a7231-493d-483f-bd68-56a2e00c1578",
                "9103ae00-b022-464e-a7b1-3b66308c40b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "467b434b-5fd2-4057-baef-b8c23e6d37d0",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.deepStrictEqual(c,c.method(null),\"method(null)\");assert.deepStrictEqual(c,c.method(ICalCalendarMethod.PUBLISH),\"method(enum)\")",
                  "err": {},
                  "uuid": "995ff9bf-6b5e-4b9a-8c63-4e6aab0f1273",
                  "parentUUID": "467b434b-5fd2-4057-baef-b8c23e6d37d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.strictEqual(c.method(),null);c.method(null);assert.strictEqual(c.method(),null);c.method(ICalCalendarMethod.PUBLISH);assert.strictEqual(c.method(),\"PUBLISH\");c.method(null);assert.strictEqual(c.method(),null)",
                  "err": {},
                  "uuid": "f4769ff8-9dcd-44b9-87aa-d81f08a34f6e",
                  "parentUUID": "467b434b-5fd2-4057-baef-b8c23e6d37d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar;assert.throws(function(){c.method(\"KICK ASS\")},/Input must be one of the following: ADD, CANCEL, COUNTER, DECLINECOUNTER, PUBLISH, REFRESH, REPLY, REQUEST/)",
                  "err": {},
                  "uuid": "880b9ce7-a3fd-4468-88a8-a6acadb8d47f",
                  "parentUUID": "467b434b-5fd2-4057-baef-b8c23e6d37d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCalendar({method:ICalCalendarMethod.PUBLISH});assert.strictEqual(c.method(),\"PUBLISH\");c.method(ICalCalendarMethod.ADD);assert.strictEqual(c.method(),\"ADD\")",
                  "err": {},
                  "uuid": "6dd34550-f48f-4d21-a521-592d329a287e",
                  "parentUUID": "467b434b-5fd2-4057-baef-b8c23e6d37d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "995ff9bf-6b5e-4b9a-8c63-4e6aab0f1273",
                "f4769ff8-9dcd-44b9-87aa-d81f08a34f6e",
                "880b9ce7-a3fd-4468-88a8-a6acadb8d47f",
                "6dd34550-f48f-4d21-a521-592d329a287e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50094d73-4753-4131-9da0-336f2440b71a",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.name(null));assert.deepStrictEqual(cal,cal.name(\"Testevents\"))",
                  "err": {},
                  "uuid": "35d4b303-122f-4e7c-bf03-78b20b81ac0b",
                  "parentUUID": "50094d73-4753-4131-9da0-336f2440b71a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.name(),null);cal.name(\"Testevents\");assert.strictEqual(cal.name(),\"Testevents\");cal.name(null);assert.strictEqual(cal.name(),null)",
                  "err": {},
                  "uuid": "45d809ee-fcfb-429e-abda-0923cc6b0567",
                  "parentUUID": "50094d73-4753-4131-9da0-336f2440b71a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().name(\"Testevents\");cal.createEvent({start:new Date,summary:\"Example Event\"});assert.strictEqual(cal.name(),\"Testevents\")",
                  "err": {},
                  "uuid": "2544e4df-0f50-4ce3-8339-acc3cde86cc4",
                  "parentUUID": "50094d73-4753-4131-9da0-336f2440b71a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35d4b303-122f-4e7c-bf03-78b20b81ac0b",
                "45d809ee-fcfb-429e-abda-0923cc6b0567",
                "2544e4df-0f50-4ce3-8339-acc3cde86cc4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7dcc102f-2c23-431c-abed-de556b573db3",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.description(null));assert.deepStrictEqual(cal,cal.description(\"Testbeschreibung\"))",
                  "err": {},
                  "uuid": "839fe583-fcbb-4e9e-8dde-9047eabc29f0",
                  "parentUUID": "7dcc102f-2c23-431c-abed-de556b573db3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.description(),null);cal.description(\"Testbeschreibung\");assert.strictEqual(cal.description(),\"Testbeschreibung\");cal.description(null);assert.strictEqual(cal.description(),null)",
                  "err": {},
                  "uuid": "fbcec1ac-4022-4dd2-a2e3-0a78dd6111f8",
                  "parentUUID": "7dcc102f-2c23-431c-abed-de556b573db3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().description(\"Testbeschreibung\");cal.createEvent({start:new Date,summary:\"Example Event\"});assert.ok(cal.description(),\"Testbeschreibung\")",
                  "err": {},
                  "uuid": "de814bdc-278e-4469-87a3-ca0465c8b8eb",
                  "parentUUID": "7dcc102f-2c23-431c-abed-de556b573db3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "839fe583-fcbb-4e9e-8dde-9047eabc29f0",
                "fbcec1ac-4022-4dd2-a2e3-0a78dd6111f8",
                "de814bdc-278e-4469-87a3-ca0465c8b8eb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8ad59937-530f-4865-a663-42c8bb069096",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.timezone(\"Europe/Berlin\"));assert.deepStrictEqual(cal,cal.timezone(null));assert.deepStrictEqual(cal,cal.timezone({generator:getVtimezoneComponent,name:\"Europe/Berlin\"}))",
                  "err": {},
                  "uuid": "66d0d704-038f-40a3-bb27-a9521446a538",
                  "parentUUID": "8ad59937-530f-4865-a663-42c8bb069096",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/Berlin\");cal.timezone(null);assert.strictEqual(cal.timezone(),null);cal.timezone({name:\"Europe/Berlin\"});assert.strictEqual(cal.timezone(),\"Europe/Berlin\")",
                  "err": {},
                  "uuid": "6cec512a-a76e-4f16-bfc1-e57d12439b1f",
                  "parentUUID": "8ad59937-530f-4865-a663-42c8bb069096",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/Berlin\");cal.timezone(\"UTC\");assert.strictEqual(cal.timezone(),null)",
                  "err": {},
                  "uuid": "b70989eb-3676-4adf-8208-84be3d9f5ce7",
                  "parentUUID": "8ad59937-530f-4865-a663-42c8bb069096",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66d0d704-038f-40a3-bb27-a9521446a538",
                "6cec512a-a76e-4f16-bfc1-e57d12439b1f",
                "b70989eb-3676-4adf-8208-84be3d9f5ce7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "718e5405-a098-4141-80ff-e7149b523ff8",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal.ttl(60*60*24),cal);assert.deepStrictEqual(cal.ttl(moment.duration(2,\"days\")),cal);assert.deepStrictEqual(cal.ttl(null),cal)",
                  "err": {},
                  "uuid": "5c61c150-ce4e-497f-aede-b3577d301fb9",
                  "parentUUID": "718e5405-a098-4141-80ff-e7149b523ff8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.ttl(),null);cal.ttl(86400);assert.strictEqual(cal.ttl(),86400)",
                  "err": {},
                  "uuid": "33b0b95a-9275-45da-822a-5edf1013a8c9",
                  "parentUUID": "718e5405-a098-4141-80ff-e7149b523ff8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().ttl(86400);assert.strictEqual(cal.ttl(),86400)",
                  "err": {},
                  "uuid": "df56c9f5-2452-4c82-b2e2-329b5e37f775",
                  "parentUUID": "718e5405-a098-4141-80ff-e7149b523ff8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c61c150-ce4e-497f-aede-b3577d301fb9",
                "33b0b95a-9275-45da-822a-5edf1013a8c9",
                "df56c9f5-2452-4c82-b2e2-329b5e37f775"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f9d680ba-cd6d-4b8e-b2ab-01cfa9d41fe0",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.source(\"http://example.com/my/original_source.ical\"))",
                  "err": {},
                  "uuid": "ee9dd75e-bb78-4ecf-94bd-b0cdba8e944b",
                  "parentUUID": "f9d680ba-cd6d-4b8e-b2ab-01cfa9d41fe0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.source(),null);cal.source(\"http://example.com/my/original_source.ical\");assert.strictEqual(cal.source(),\"http://example.com/my/original_source.ical\");cal.url(null);assert.strictEqual(cal.url(),null)",
                  "err": {},
                  "uuid": "6f0063a9-14bb-4c99-b56b-a07dd9e3e8c1",
                  "parentUUID": "f9d680ba-cd6d-4b8e-b2ab-01cfa9d41fe0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee9dd75e-bb78-4ecf-94bd-b0cdba8e944b",
                "6f0063a9-14bb-4c99-b56b-a07dd9e3e8c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2babe71-c20b-46b0-b4c8-e5e74ab73db5",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.url(\"https://example.com/calendar.ical\"))",
                  "err": {},
                  "uuid": "698d96d4-c1cc-45d4-ae89-55f0e19d0f65",
                  "parentUUID": "a2babe71-c20b-46b0-b4c8-e5e74ab73db5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.url(),null);cal.url(\"https://example.com/calendar.ical\");assert.strictEqual(cal.url(),\"https://example.com/calendar.ical\");cal.url(null);assert.strictEqual(cal.url(),null)",
                  "err": {},
                  "uuid": "6b5f7faf-99b5-4fee-b53e-fce64072db77",
                  "parentUUID": "a2babe71-c20b-46b0-b4c8-e5e74ab73db5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().url(\"https://example.com/calendar.ical\");cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.ok(cal.url(),\"https://example.com/calendar.ical\")",
                  "err": {},
                  "uuid": "8be0b1cf-f343-4cdd-9a1f-4d9b054a0ee3",
                  "parentUUID": "a2babe71-c20b-46b0-b4c8-e5e74ab73db5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "698d96d4-c1cc-45d4-ae89-55f0e19d0f65",
                "6b5f7faf-99b5-4fee-b53e-fce64072db77",
                "8be0b1cf-f343-4cdd-9a1f-4d9b054a0ee3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa2d1f23-e6f3-4d3a-aaf0-bd1f580ce577",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.scale(\"gregorian\"))",
                  "err": {},
                  "uuid": "687058a2-aade-4fdc-aa35-0d263c6309fd",
                  "parentUUID": "fa2d1f23-e6f3-4d3a-aaf0-bd1f580ce577",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.scale(),null);cal.scale(\"GREGORIAN\");assert.strictEqual(cal.scale(),\"GREGORIAN\");cal.scale(null);assert.strictEqual(cal.scale(),null)",
                  "err": {},
                  "uuid": "8966446a-6ffb-479c-9cb4-9ee99112bd72",
                  "parentUUID": "fa2d1f23-e6f3-4d3a-aaf0-bd1f580ce577",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().scale(\"gregorian\");cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.ok(cal.scale(),\"GREGORIAN\")",
                  "err": {},
                  "uuid": "ef2cfe54-c6c1-4e32-9d6f-29b590f870fd",
                  "parentUUID": "fa2d1f23-e6f3-4d3a-aaf0-bd1f580ce577",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "687058a2-aade-4fdc-aa35-0d263c6309fd",
                "8966446a-6ffb-479c-9cb4-9ee99112bd72",
                "ef2cfe54-c6c1-4e32-9d6f-29b590f870fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4257c5a3-044f-4759-b269-7fbcb3277297",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.ok(cal.createEvent({start:new Date})instanceof ICalEvent)",
                  "err": {},
                  "uuid": "827b272c-ceb3-46de-976c-27fd4efacf00",
                  "parentUUID": "4257c5a3-044f-4759-b269-7fbcb3277297",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const event=cal.createEvent({start:new Date,summary:\"Patch-Day\"});assert.strictEqual(event.summary(),\"Patch-Day\")",
                  "err": {},
                  "uuid": "60aed78e-becf-454a-82df-d2ac2c763bd6",
                  "parentUUID": "4257c5a3-044f-4759-b269-7fbcb3277297",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.doesNotThrow(function(){new ICalCalendar().createEvent({start:new Date,summary:\"Patch-Day\"})},Error)",
                  "err": {},
                  "uuid": "e9d387c8-8206-4ee9-a3ba-913711f45ce1",
                  "parentUUID": "4257c5a3-044f-4759-b269-7fbcb3277297",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "827b272c-ceb3-46de-976c-27fd4efacf00",
                "60aed78e-becf-454a-82df-d2ac2c763bd6",
                "e9d387c8-8206-4ee9-a3ba-913711f45ce1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "59458947-5ee8-4d5b-a3fd-4d5cd3bcf308",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.events().length,0);const event=cal.createEvent({start:new Date});assert.strictEqual(cal.events().length,1);assert.deepStrictEqual(cal.events()[0],event)",
                  "err": {},
                  "uuid": "587abda7-c539-493f-92bc-dc554d5658df",
                  "parentUUID": "59458947-5ee8-4d5b-a3fd-4d5cd3bcf308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.length(),0);const cal2=cal.events([{start:new Date,summary:\"Event A\"},{start:new Date,summary:\"Event B\"}]);assert.strictEqual(cal.length(),2);assert.deepStrictEqual(cal2,cal)",
                  "err": {},
                  "uuid": "ae8819ab-04f1-4e97-b457-7c61044a05c7",
                  "parentUUID": "59458947-5ee8-4d5b-a3fd-4d5cd3bcf308",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "587abda7-c539-493f-92bc-dc554d5658df",
                "ae8819ab-04f1-4e97-b457-7c61044a05c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99a0c0f9-56f4-463a-845d-66b578a5303d",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.createEvent({start:new Date});assert.strictEqual(cal.events().length,1);assert.deepStrictEqual(cal.clear(),cal);assert.strictEqual(cal.events().length,0)",
                  "err": {},
                  "uuid": "6ae2b721-3a43-46cc-bbf4-8e8f8e7d4edd",
                  "parentUUID": "99a0c0f9-56f4-463a-845d-66b578a5303d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ae2b721-3a43-46cc-bbf4-8e8f8e7d4edd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b438bab1-6481-4dcb-bb23-3a51204401c0",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "87660b3b-3ff7-43b5-96ce-199c34194eed",
                  "parentUUID": "b438bab1-6481-4dcb-bb23-3a51204401c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x(\"X-FOO\",\"bar\"));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x(\"X-LOREM\",\"ipsum\"));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x(\"LOREM\",\"ipsum\")});assert.throws(()=>{cal.x(\"X-LOREM\",1337)});assert.throws(()=>{cal.x(5,\"ipsum\")})",
                  "err": {},
                  "uuid": "a37f1def-6a50-4642-aa29-fb4b256312c4",
                  "parentUUID": "b438bab1-6481-4dcb-bb23-3a51204401c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x([{key:\"X-FOO\",value:\"bar\"}]));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x([{key:\"X-LOREM\",value:\"ipsum\"}]));assert.deepEqual(cal.x(),[{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x([{key:\"LOREM\",value:\"ipsum\"}])});assert.throws(()=>{cal.x([{key:\"X-LOREM\",value:1337}])});assert.throws(()=>{cal.x([{key:5,value:\"ipsum\"}])})",
                  "err": {},
                  "uuid": "e91ba967-0905-4584-ae16-15ac702ef3d3",
                  "parentUUID": "b438bab1-6481-4dcb-bb23-3a51204401c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepStrictEqual(cal,cal.x({\"X-FOO\":\"bar\"}));assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"bar\"}]);assert.deepStrictEqual(cal,cal.x({\"X-LOREM\":\"ipsum\"}));assert.deepEqual(cal.x(),[{key:\"X-LOREM\",value:\"ipsum\"}]);assert.throws(()=>{cal.x({LOREM:\"ipsum\"})});assert.throws(()=>{cal.x({\"X-LOREM\":1337})});assert.throws(()=>{cal.x({5:\"ipsum\"})})",
                  "err": {},
                  "uuid": "f5d0ab51-069c-4f7b-9a44-edefe9afccd8",
                  "parentUUID": "b438bab1-6481-4dcb-bb23-3a51204401c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.deepEqual(cal.x(),[]);cal.x(\"X-FOO\",\"BAR\");assert.deepEqual(cal.x(),[{key:\"X-FOO\",value:\"BAR\"}]);cal.x({});assert.deepEqual(cal.x().length,0)",
                  "err": {},
                  "uuid": "5cf87523-3713-4e81-8df8-fe9f23d54526",
                  "parentUUID": "b438bab1-6481-4dcb-bb23-3a51204401c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar().x(\"X-FOO\",\"BAR\");cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.ok(cal.toString().includes(\"X-FOO\"))",
                  "err": {},
                  "uuid": "81d576ec-8340-4d78-92df-512bd9a4e562",
                  "parentUUID": "b438bab1-6481-4dcb-bb23-3a51204401c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87660b3b-3ff7-43b5-96ce-199c34194eed",
                "a37f1def-6a50-4642-aa29-fb4b256312c4",
                "e91ba967-0905-4584-ae16-15ac702ef3d3",
                "f5d0ab51-069c-4f7b-9a44-edefe9afccd8",
                "5cf87523-3713-4e81-8df8-fe9f23d54526",
                "81d576ec-8340-4d78-92df-512bd9a4e562"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad1e611c-9544-4e1d-8e2f-a8a85d8ee9f9",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const prodId=cal.toJSON().prodId;assert.strictEqual(typeof prodId,\"string\");assert.ok(prodId.length>0);assert.strictEqual(cal.toJSON().events?.length,0)",
                  "err": {},
                  "uuid": "c9be6910-3d40-4f78-a20a-2024484b3361",
                  "parentUUID": "ad1e611c-9544-4e1d-8e2f-a8a85d8ee9f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.createEvent({end:new Date(new Date().getTime()+1e3*60*60),start:new Date,summary:\"HTTP Calendar Event\",x:[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}]});const prodId=cal.toJSON().prodId;assert.strictEqual(typeof prodId,\"string\");assert.ok(prodId.length>0);const events=cal.toJSON().events;assert.strictEqual(events?.length,1);assert.deepEqual(events[0].x,[{key:\"X-FOO\",value:\"bar\"},{key:\"X-LOREM\",value:\"ipsum\"}])",
                  "err": {},
                  "uuid": "d8cee8ff-65ea-4f65-b2e7-8be705ec33a7",
                  "parentUUID": "ad1e611c-9544-4e1d-8e2f-a8a85d8ee9f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalCalendar;new ICalCalendar(a.toJSON())",
                  "err": {},
                  "uuid": "d8714ab7-ec5f-4c75-855f-04661154973c",
                  "parentUUID": "ad1e611c-9544-4e1d-8e2f-a8a85d8ee9f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9be6910-3d40-4f78-a20a-2024484b3361",
                "d8cee8ff-65ea-4f65-b2e7-8be705ec33a7",
                "d8714ab7-ec5f-4c75-855f-04661154973c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "afd3560d-3ada-42e6-b5cc-5fd1d89e7ca2",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;assert.strictEqual(cal.length(),0);cal.createEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Example Event\"});assert.strictEqual(cal.length(),1)",
                  "err": {},
                  "uuid": "18b97c25-c5d2-478b-abb2-f2e7a7126a75",
                  "parentUUID": "afd3560d-3ada-42e6-b5cc-5fd1d89e7ca2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18b97c25-c5d2-478b-abb2-f2e7a7126a75"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ba4e0ad7-ce65-4226-b9f3-212b632836c7",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.url(\"https://sebbo.net/foo\");assert.ok(cal.toString().indexOf(\"URL:https://sebbo.net/foo\")>-1)",
                  "err": {},
                  "uuid": "c9bb3372-e21a-41dd-bba5-40c0741a8856",
                  "parentUUID": "ba4e0ad7-ce65-4226-b9f3-212b632836c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.method(ICalCalendarMethod.REFRESH);assert.ok(cal.toString().indexOf(\"METHOD:REFRESH\")>-1)",
                  "err": {},
                  "uuid": "264a5d3c-4078-4a0e-a8ce-d207beb9b1ad",
                  "parentUUID": "ba4e0ad7-ce65-4226-b9f3-212b632836c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.name(\"TEST\");assert.ok(cal.toString().indexOf(\"NAME:TEST\")>-1);assert.ok(cal.toString().indexOf(\"X-WR-CALNAME:TEST\")>-1)",
                  "err": {},
                  "uuid": "f2b16032-6c1b-44b1-a3b9-041690015109",
                  "parentUUID": "ba4e0ad7-ce65-4226-b9f3-212b632836c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.description(\"TEST\");assert.ok(cal.toString().indexOf(\"X-WR-CALDESC:TEST\")>-1)",
                  "err": {},
                  "uuid": "fa4fe7a9-4517-490b-9ba1-0b229883e4f3",
                  "parentUUID": "ba4e0ad7-ce65-4226-b9f3-212b632836c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone(\"TEST\");assert.ok(cal.toString().indexOf(\"TIMEZONE-ID:TEST\")>-1);assert.ok(cal.toString().indexOf(\"X-WR-TIMEZONE:TEST\")>-1)",
                  "err": {},
                  "uuid": "5dca1304-2e4d-4635-aea3-6c5b20b46ee6",
                  "parentUUID": "ba4e0ad7-ce65-4226-b9f3-212b632836c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.source(\"http://foo.bar.example.com/ical.cal\");assert.ok(cal.toString().includes(\"http://foo.bar.example.com/ical.cal\"))",
                  "err": {},
                  "uuid": "b7572c8a-f0c4-46cc-9de0-7601d8c4a547",
                  "parentUUID": "ba4e0ad7-ce65-4226-b9f3-212b632836c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({generator:getVtimezoneComponent,name:\"Europe/Berlin\"});cal.createEvent({start:new Date,timezone:\"Europe/London\"});assert.ok(cal.toString().includes(\"BEGIN:VTIMEZONE\\r\\n\"),\"BEGIN:VTIMEZONE\");assert.ok(cal.toString().includes(\"TZID:Europe/Berlin\\r\\n\"),\"TZID:Europe/Berlin\");assert.ok(cal.toString().includes(\"TZID:Europe/London\\r\\n\"),\"TZID:Europe/London\")",
                  "err": {},
                  "uuid": "83ba370c-6fdc-43f5-9f0e-e6c4f2ab7738",
                  "parentUUID": "ba4e0ad7-ce65-4226-b9f3-212b632836c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({generator:getVtimezoneComponent,name:\"FOO\"});assert.ok(!cal.toString().includes(\"TZID:Foo\\r\\n\"))",
                  "err": {},
                  "uuid": "9a8e53ca-4957-4a42-ad98-cc59081e9eda",
                  "parentUUID": "ba4e0ad7-ce65-4226-b9f3-212b632836c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.timezone({generator:getVtimezoneComponent,name:\"/Europe/Berlin\"});assert.ok(!cal.toString().includes(\"TZID:/Europe/Berlin\\r\\n\"))",
                  "err": {},
                  "uuid": "1c3eba96-23fb-4e63-a34f-ba7ea91570ff",
                  "parentUUID": "ba4e0ad7-ce65-4226-b9f3-212b632836c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;cal.ttl(moment.duration(3,\"days\"));assert.ok(cal.toString().indexOf(\"REFRESH-INTERVAL;VALUE=DURATION:P3D\")>-1);assert.ok(cal.toString().indexOf(\"X-PUBLISHED-TTL:P3D\")>-1)",
                  "err": {},
                  "uuid": "74321cc0-16c9-4bbd-91f0-253b7ebe72f8",
                  "parentUUID": "ba4e0ad7-ce65-4226-b9f3-212b632836c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9bb3372-e21a-41dd-bba5-40c0741a8856",
                "264a5d3c-4078-4a0e-a8ce-d207beb9b1ad",
                "f2b16032-6c1b-44b1-a3b9-041690015109",
                "fa4fe7a9-4517-490b-9ba1-0b229883e4f3",
                "5dca1304-2e4d-4635-aea3-6c5b20b46ee6",
                "b7572c8a-f0c4-46cc-9de0-7601d8c4a547",
                "83ba370c-6fdc-43f5-9f0e-e6c4f2ab7738",
                "9a8e53ca-4957-4a42-ad98-cc59081e9eda",
                "1c3eba96-23fb-4e63-a34f-ba7ea91570ff",
                "74321cc0-16c9-4bbd-91f0-253b7ebe72f8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aff1d8c1-f4da-40db-8d2e-c0dd99a64f78",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({created:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",lastModified:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Simple Event\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_01.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "4e0c5037-eb65-4796-98a8-bf1aca9b3f59",
              "parentUUID": "aff1d8c1-f4da-40db-8d2e-c0dd99a64f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({description:{html:\"<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>\",plain:\"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop\"},end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",location:\"localhost\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Sample Event\",transparency:ICalEventTransparency.OPAQUE});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_02.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "52f0c339-202e-4444-96ee-3977ed56a2a1",
              "parentUUID": "aff1d8c1-f4da-40db-8d2e-c0dd99a64f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.ADD,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({allDay:true,attachments:[\"https://files.sebbo.net/calendar/attachments/foo\"],categories:[{name:\"WORK\"}],end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"123\",location:{address:\"Kurf\\xFCrstendamm 26, 10719 Berlin, Deutschland\",geo:{lat:52.50363,lon:13.32865},radius:141.1751386318387,title:\"Apple Store Kurf\\xFCrstendamm\"},organizer:\"Sebastian Pekarek <mail@sebbo.net>\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),status:ICalEventStatus.CONFIRMED,summary:\"Sample Event\",url:\"http://sebbo.net/\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_03.ics\",\"utf8\"),\"toString\");assert.strictEqual(ical(cal.toJSON()).toString(),string,\"toJSON / toString()\")",
              "err": {},
              "uuid": "aec235bc-bd29-48d0-a00c-f86c2082164e",
              "parentUUID": "aff1d8c1-f4da-40db-8d2e-c0dd99a64f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.timezone({generator:getVtimezoneComponent,name:null});cal.events([{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"1\",repeating:{exclude:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),freq:ICalEventRepeatingFreq.MONTHLY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating by month\"},{end:new Date(\"Fr Oct 06 2013 23:15:00\"),id:\"2\",repeating:{count:2,freq:ICalEventRepeatingFreq.DAILY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30\"),summary:\"repeating by day, twice\",timezone:\"Europe/Berlin\"},{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"3\",repeating:{freq:ICalEventRepeatingFreq.WEEKLY,interval:3,until:new Date(\"We Jan 01 2014 00:00:00 UTC\")},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating by 3 weeks, until 2014\"}]);assert.strictEqual(cal.toString(),await fs.readFile(resultDir+\"/generate_04.ics\",\"utf8\"),\"first check\");cal.timezone(null);assert.strictEqual(ical(cal.toJSON()).toString(),cal.toString(),\"second check\")",
              "err": {},
              "uuid": "04e4c358-4561-4030-b056-c5b0aec2c0e3",
              "parentUUID": "aff1d8c1-f4da-40db-8d2e-c0dd99a64f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),floating:true,id:\"1\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"floating\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_05.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "e9bebf0e-05f9-46c3-b167-23e096e16599",
              "parentUUID": "aff1d8c1-f4da-40db-8d2e-c0dd99a64f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.PUBLISH,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({alarms:[{repeat:{interval:60,times:2},trigger:60*10,type:ICalAlarmType.display},{description:\"I'm a reminder :)\",trigger:60*60,type:ICalAlarmType.display}],allDay:true,attendees:[{delegatesTo:{email:\"john@example.com\",name:\"John\",status:ICalAttendeeStatus.ACCEPTED},email:\"matt@example.com\",name:'Smith, Matt; (\"Sales\")'}],id:\"123\",organizer:\"Sebastian Pekarek <mail@sebbo.net>\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),status:ICalEventStatus.CONFIRMED,summary:\"Sample Event\",url:\"http://sebbo.net/\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_06.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "1454813d-e90b-4ec4-bca9-ce2e69ee6177",
              "parentUUID": "aff1d8c1-f4da-40db-8d2e-c0dd99a64f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.events([{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"1\",repeating:{byMonth:[1,4,7,10],freq:ICalEventRepeatingFreq.MONTHLY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating by month\"},{id:\"2\",repeating:{byDay:[ICalWeekday.MO,ICalWeekday.WE,ICalWeekday.FR],count:2,freq:ICalEventRepeatingFreq.DAILY},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating on Mo/We/Fr, twice\"},{end:new Date(\"Fr Oct 06 2013 23:15:00 UTC\"),id:\"3\",repeating:{byMonthDay:[1,15],freq:ICalEventRepeatingFreq.DAILY,interval:1},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"repeating on 1st and 15th\"}]);const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_07.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "a60d62a5-7e07-441e-a6e5-07973addbfbf",
              "parentUUID": "aff1d8c1-f4da-40db-8d2e-c0dd99a64f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({attendees:[{email:\"mail@example.com\",role:ICalAttendeeRole.REQ,rsvp:true,status:ICalAttendeeStatus.NEEDSACTION,type:ICalAttendeeType.INDIVIDUAL}],created:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",lastModified:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Simple Event\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_08.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "ea92f105-a86b-4d77-807f-961c13bf24c3",
              "parentUUID": "aff1d8c1-f4da-40db-8d2e-c0dd99a64f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.REQUEST,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({attendees:[{email:\"mail@example.com\",role:ICalAttendeeRole.REQ,rsvp:true,status:ICalAttendeeStatus.NEEDSACTION,type:ICalAttendeeType.INDIVIDUAL}],end:new Date(\"Fr Oct 04 2013 23:15:00 UTC\"),id:\"123\",organizer:{email:\"mail@sebbo.net\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\"},stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),summary:\"Sample Event\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_09.ics\",\"utf8\"),\"toString\");assert.strictEqual(ical(cal.toJSON()).toString(),string,\"toJSON / toString()\")",
              "err": {},
              "uuid": "5e2d60ea-b023-4d42-92e0-3898e6deb9d9",
              "parentUUID": "aff1d8c1-f4da-40db-8d2e-c0dd99a64f78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #10 (SCHEDULE-AGENT=CLIENT for custom invitation emails)",
              "fullTitle": "ical-generator Cases case #10 (SCHEDULE-AGENT=CLIENT for custom invitation emails)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cal=ical({method:ICalCalendarMethod.PUBLISH,prodId:\"//sebbo.net//ical-generator.tests//EN\"});cal.createEvent({allDay:true,attendees:[{delegatesTo:{email:\"john@example.com\",name:\"John\",status:ICalAttendeeStatus.ACCEPTED},email:\"matt@example.com\",name:'Smith, Matt; (\"Sales\")',scheduleAgent:ICalAttendeeScheduleAgent.CLIENT}],id:\"123\",organizer:\"Sebastian Pekarek <mail@sebbo.net>\",stamp:new Date(\"Fr Oct 04 2013 23:34:53 UTC\"),start:new Date(\"Fr Oct 04 2013 22:39:30 UTC\"),status:ICalEventStatus.CONFIRMED,summary:\"Sample Event\",url:\"http://sebbo.net/\"});const string=cal.toString();assert.strictEqual(string,await fs.readFile(resultDir+\"/generate_10.ics\",\"utf8\"));assert.strictEqual(ical(cal.toJSON()).toString(),string)",
              "err": {},
              "uuid": "90c3ae40-2aa5-4f8e-8695-6aa07841772c",
              "parentUUID": "aff1d8c1-f4da-40db-8d2e-c0dd99a64f78",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e0c5037-eb65-4796-98a8-bf1aca9b3f59",
            "52f0c339-202e-4444-96ee-3977ed56a2a1",
            "aec235bc-bd29-48d0-a00c-f86c2082164e",
            "04e4c358-4561-4030-b056-c5b0aec2c0e3",
            "e9bebf0e-05f9-46c3-b167-23e096e16599",
            "1454813d-e90b-4ec4-bca9-ce2e69ee6177",
            "a60d62a5-7e07-441e-a6e5-07973addbfbf",
            "ea92f105-a86b-4d77-807f-961c13bf24c3",
            "5e2d60ea-b023-4d42-92e0-3898e6deb9d9",
            "90c3ae40-2aa5-4f8e-8695-6aa07841772c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ef4f2b51-70cc-423d-83a7-be8c9b31c98b",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "958ab806-cc96-4d05-96b1-8f65175c9f32",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalCategory({name:\"FOO\",unknown:true});assert.strictEqual(a.name(),\"FOO\")",
                  "err": {},
                  "uuid": "3e76ad8f-8e31-4a2b-9683-ed6f6e747e33",
                  "parentUUID": "958ab806-cc96-4d05-96b1-8f65175c9f32",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category constructor() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalCategory({})},/`name`/)",
                  "err": {},
                  "uuid": "0b1165c5-b3f1-4b9f-ab98-8555895d90a6",
                  "parentUUID": "958ab806-cc96-4d05-96b1-8f65175c9f32",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e76ad8f-8e31-4a2b-9683-ed6f6e747e33",
                "0b1165c5-b3f1-4b9f-ab98-8555895d90a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "98d8547b-a65e-4edf-b3d8-531152bc2e5d",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"foo\"});assert.deepStrictEqual(c,c.name(\"FOO\"))",
                  "err": {},
                  "uuid": "9a1af7ca-3d67-425d-89f1-b839c4fb5285",
                  "parentUUID": "98d8547b-a65e-4edf-b3d8-531152bc2e5d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"foo\"});assert.strictEqual(c.name(),\"foo\");c.name(\"HELLO-WORLD\");assert.strictEqual(c.name(),\"HELLO-WORLD\")",
                  "err": {},
                  "uuid": "5fa880c6-4b87-4c9a-943e-ffb912ce205f",
                  "parentUUID": "98d8547b-a65e-4edf-b3d8-531152bc2e5d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"BANANA\"});assert.ok(c.toString().includes(\"BANANA\"))",
                  "err": {},
                  "uuid": "82e1633d-3eca-43ca-8864-88f36f1c6ee5",
                  "parentUUID": "98d8547b-a65e-4edf-b3d8-531152bc2e5d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a1af7ca-3d67-425d-89f1-b839c4fb5285",
                "5fa880c6-4b87-4c9a-943e-ffb912ce205f",
                "82e1633d-3eca-43ca-8864-88f36f1c6ee5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b9a93f10-46eb-4328-b154-e331b9fcdf6b",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c=new ICalCategory({name:\"FOOBAR\"});assert.deepStrictEqual(c.toJSON(),{name:\"FOOBAR\"})",
                  "err": {},
                  "uuid": "402edaeb-4ab7-40cc-9999-2ba6394eecd6",
                  "parentUUID": "b9a93f10-46eb-4328-b154-e331b9fcdf6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "402edaeb-4ab7-40cc-9999-2ba6394eecd6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "290fb3a7-4ba8-4111-a4a4-d03ff1dd28e7",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3255063b-0fa8-4197-804a-db8fd4b2edf0",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data={alarms:[],allDay:true,attachments:[\"https://files.sebbo.net/calendar/attachments/foo\"],attendees:[],busystatus:ICalEventBusyStatus.BUSY,categories:[],class:null,created:new Date().toJSON(),description:null,end:new Date().toJSON(),floating:false,id:\"FOO\",lastModified:new Date().toJSON(),location:null,organizer:null,priority:5,recurrenceId:new Date().toJSON(),repeating:null,sequence:1,stamp:new Date().toJSON(),start:new Date().toJSON(),status:null,summary:\"Hello.\",timezone:\"Europe/Berlin\",transparency:ICalEventTransparency.TRANSPARENT,url:\"https://github.com/sebbo2002/ical-generator\",x:[]};const event=new ICalEvent(data,new ICalCalendar);assert.deepStrictEqual(event.toJSON(),data)",
                  "err": {},
                  "uuid": "6c7e0cd8-1cc8-4a8c-831c-c1e767342113",
                  "parentUUID": "3255063b-0fa8-4197-804a-db8fd4b2edf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({summary:\"Testevent\"},null)},/`calendar`/)",
                  "err": {},
                  "uuid": "1cc4283c-0f67-4e49-8a92-8a4b4a449a55",
                  "parentUUID": "3255063b-0fa8-4197-804a-db8fd4b2edf0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c7e0cd8-1cc8-4a8c-831c-c1e767342113",
                "1cc4283c-0f67-4e49-8a92-8a4b4a449a55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "226e0a4c-dd3a-4738-83f5-b024c61f9395",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.id(1048))",
                  "err": {},
                  "uuid": "07a4e537-4735-452d-bab7-df30988e116b",
                  "parentUUID": "226e0a4c-dd3a-4738-83f5-b024c61f9395",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).id(512);assert.strictEqual(event.id(),\"512\");event.id(\"xyz\");assert.strictEqual(event.id(),\"xyz\")",
                  "err": {},
                  "uuid": "42dbfba0-69ae-427c-acaf-e43394e6ab01",
                  "parentUUID": "226e0a4c-dd3a-4738-83f5-b024c61f9395",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07a4e537-4735-452d-bab7-df30988e116b",
                "42dbfba0-69ae-427c-acaf-e43394e6ab01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1f15b660-e973-474f-b3a3-f98435a0b3d0",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.uid(1048))",
                  "err": {},
                  "uuid": "fb65f1dc-f93d-4a11-bc31-2b869e2184bc",
                  "parentUUID": "1f15b660-e973-474f-b3a3-f98435a0b3d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).uid(512);assert.strictEqual(event.uid(),\"512\");event.id(\"xyz\");assert.strictEqual(event.uid(),\"xyz\")",
                  "err": {},
                  "uuid": "8e96e153-0a84-4693-9477-dc2f3bac41b9",
                  "parentUUID": "1f15b660-e973-474f-b3a3-f98435a0b3d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb65f1dc-f93d-4a11-bc31-2b869e2184bc",
                "8e96e153-0a84-4693-9477-dc2f3bac41b9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d26e7eb-85b7-4c0d-be8e-4a635116c58e",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.sequence(1))",
                  "err": {},
                  "uuid": "523617fb-18d5-48a6-a161-3a3e410b0997",
                  "parentUUID": "6d26e7eb-85b7-4c0d-be8e-4a635116c58e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).sequence(1048);assert.strictEqual(event.sequence(),1048)",
                  "err": {},
                  "uuid": "853c2c36-4398-4a7e-ae07-5747bf9788be",
                  "parentUUID": "6d26e7eb-85b7-4c0d-be8e-4a635116c58e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.sequence(\"hello\")},/`sequence`/)",
                  "err": {},
                  "uuid": "18ba2dfe-0ec1-43a5-8681-915fa5e7a0b9",
                  "parentUUID": "6d26e7eb-85b7-4c0d-be8e-4a635116c58e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar).sequence(12);assert.strictEqual(event.sequence(),12);event.sequence(0);assert.strictEqual(event.sequence(),0)",
                  "err": {},
                  "uuid": "d9116e7e-a78e-4015-a7ef-56f6fc067c4b",
                  "parentUUID": "6d26e7eb-85b7-4c0d-be8e-4a635116c58e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "523617fb-18d5-48a6-a161-3a3e410b0997",
                "853c2c36-4398-4a7e-ae07-5747bf9788be",
                "18ba2dfe-0ec1-43a5-8681-915fa5e7a0b9",
                "d9116e7e-a78e-4015-a7ef-56f6fc067c4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e88b5168-9dde-4328-9e6f-39788706b464",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:new Date},new ICalCalendar);event.start(now);assert.strictEqual(event.start(),now)",
                  "err": {},
                  "uuid": "2720deba-587a-4551-8b56-e51e8c775da3",
                  "parentUUID": "e88b5168-9dde-4328-9e6f-39788706b464",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.start(date));assert.deepStrictEqual(event.start(),date)",
                  "err": {},
                  "uuid": "44350003-aa8a-4928-977b-1fd3ea7c996a",
                  "parentUUID": "e88b5168-9dde-4328-9e6f-39788706b464",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.start(date));assert.deepStrictEqual(event.start(),date)",
                  "err": {},
                  "uuid": "3bd7d861-dcb2-43e6-b233-8fc6087eb8e5",
                  "parentUUID": "e88b5168-9dde-4328-9e6f-39788706b464",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.start(3)},/`start`/,\"Number\");assert.throws(function(){event.start(null)},/`start`/,\"null\");assert.throws(function(){event.start(NaN)},/`start`/,\"NaN\");assert.throws(function(){event.start(new Date(\"hallo\"))},/`start`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "08f9b589-12dd-4df3-a5c3-65f2beba095f",
                  "parentUUID": "e88b5168-9dde-4328-9e6f-39788706b464",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=moment().add(5,\"minutes\");const end=moment();const event=new ICalEvent({start:new Date},new ICalCalendar).end(end).start(start);assert.deepStrictEqual(event.start(),end);assert.deepStrictEqual(event.end(),start)",
                  "err": {},
                  "uuid": "41196f43-4a90-4307-9f68-c26cf10e8a21",
                  "parentUUID": "e88b5168-9dde-4328-9e6f-39788706b464",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.start(moment()));assert.deepStrictEqual(event,event.start(new Date))",
                  "err": {},
                  "uuid": "a4b3cfcb-13e4-48e3-853c-0061fbc3ae07",
                  "parentUUID": "e88b5168-9dde-4328-9e6f-39788706b464",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2720deba-587a-4551-8b56-e51e8c775da3",
                "44350003-aa8a-4928-977b-1fd3ea7c996a",
                "3bd7d861-dcb2-43e6-b233-8fc6087eb8e5",
                "08f9b589-12dd-4df3-a5c3-65f2beba095f",
                "41196f43-4a90-4307-9f68-c26cf10e8a21",
                "a4b3cfcb-13e4-48e3-853c-0061fbc3ae07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d00fd9a5-2fdd-4a7f-a84c-0d7720d8c06b",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:moment().subtract({minute:1})},new ICalCalendar);event.end(now);assert.deepStrictEqual(event.end(),now)",
                  "err": {},
                  "uuid": "19aea6ba-7b9c-4a5b-abda-63008b91a57b",
                  "parentUUID": "d00fd9a5-2fdd-4a7f-a84c-0d7720d8c06b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.end(date));assert.deepStrictEqual(event.end(),date)",
                  "err": {},
                  "uuid": "58e04d6a-3eda-412b-bacd-8974ef2262e6",
                  "parentUUID": "d00fd9a5-2fdd-4a7f-a84c-0d7720d8c06b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.end(date));assert.deepStrictEqual(event.end(),date)",
                  "err": {},
                  "uuid": "16584062-60ce-42ee-8694-818f1bd44f6f",
                  "parentUUID": "d00fd9a5-2fdd-4a7f-a84c-0d7720d8c06b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.end(3)},/`end`/,\"Number\");assert.throws(function(){event.end(NaN)},/`end`/,\"NaN\");assert.throws(function(){event.end(new Date(\"hallo\"))},/`end`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "0b87cd86-1ce9-4948-a94a-1b11b367f56d",
                  "parentUUID": "d00fd9a5-2fdd-4a7f-a84c-0d7720d8c06b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=moment().add(5,\"minutes\");const end=moment();const event=new ICalEvent({start:new Date},new ICalCalendar).start(start).end(end);assert.deepStrictEqual(event.start(),end);assert.deepStrictEqual(event.end(),start)",
                  "err": {},
                  "uuid": "fae772ba-fdc2-4824-8f3f-fefbf62cb0ce",
                  "parentUUID": "d00fd9a5-2fdd-4a7f-a84c-0d7720d8c06b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.end(moment()));assert.deepStrictEqual(event,event.end(new Date))",
                  "err": {},
                  "uuid": "89c6eab2-c05a-4404-ac02-6e72596b6a2f",
                  "parentUUID": "d00fd9a5-2fdd-4a7f-a84c-0d7720d8c06b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19aea6ba-7b9c-4a5b-abda-63008b91a57b",
                "58e04d6a-3eda-412b-bacd-8974ef2262e6",
                "16584062-60ce-42ee-8694-818f1bd44f6f",
                "0b87cd86-1ce9-4948-a94a-1b11b367f56d",
                "fae772ba-fdc2-4824-8f3f-fefbf62cb0ce",
                "89c6eab2-c05a-4404-ac02-6e72596b6a2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b6d9744-bee8-4024-ab62-674cbe4b4447",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment();const event=new ICalEvent({start:new Date},new ICalCalendar);event.recurrenceId(now);assert.deepStrictEqual(event.recurrenceId(),now)",
                  "err": {},
                  "uuid": "d5bc9d3e-1c18-47c1-a28f-974eb2738cc9",
                  "parentUUID": "4b6d9744-bee8-4024-ab62-674cbe4b4447",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.recurrenceId(date));assert.deepStrictEqual(event.recurrenceId(),date)",
                  "err": {},
                  "uuid": "3e6d0376-1c7a-4c3b-b94c-9b9b4f17cf47",
                  "parentUUID": "4b6d9744-bee8-4024-ab62-674cbe4b4447",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.recurrenceId(date));assert.deepStrictEqual(event.recurrenceId(),date)",
                  "err": {},
                  "uuid": "8fc4116a-d112-4d9b-8cb4-7131fa3fa0a9",
                  "parentUUID": "4b6d9744-bee8-4024-ab62-674cbe4b4447",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.recurrenceId(3)},/`recurrenceId`/,\"Number\");assert.throws(function(){event.recurrenceId(NaN)},/`recurrenceId`/,\"NaN\");assert.throws(function(){event.recurrenceId(new Date(\"hallo\"))},/`recurrenceId`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "a8c6b1a0-8583-4348-883b-c813f57a0acd",
                  "parentUUID": "4b6d9744-bee8-4024-ab62-674cbe4b4447",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event,event.recurrenceId(moment()));assert.deepStrictEqual(event,event.recurrenceId(new Date))",
                  "err": {},
                  "uuid": "d24a8389-d3f0-4717-8b10-0c386efb9588",
                  "parentUUID": "4b6d9744-bee8-4024-ab62-674cbe4b4447",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5bc9d3e-1c18-47c1-a28f-974eb2738cc9",
                "3e6d0376-1c7a-4c3b-b94c-9b9b4f17cf47",
                "8fc4116a-d112-4d9b-8cb4-7131fa3fa0a9",
                "a8c6b1a0-8583-4348-883b-c813f57a0acd",
                "d24a8389-d3f0-4717-8b10-0c386efb9588"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad576c8d-8eff-4f61-aa0f-8a8bdf7c9885",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar).timezone(\"Europe/Berlin\");assert.strictEqual(e.timezone(),\"Europe/Berlin\")",
                  "err": {},
                  "uuid": "1e0dac90-b6b4-4c97-8ddb-20e352469f0b",
                  "parentUUID": "ad576c8d-8eff-4f61-aa0f-8a8bdf7c9885",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const e=new ICalEvent({start:moment(),summary:\"Example Event\"},cal);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),null);cal.timezone(\"Europe/London\");assert.strictEqual(cal.timezone(),\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/London\");e.timezone(\"Europe/Berlin\");assert.strictEqual(cal.timezone(),\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/Berlin\");cal.timezone(null);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),\"Europe/Berlin\");e.timezone(null);assert.strictEqual(cal.timezone(),null);assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "5bc3e067-0a92-459d-a335-c1ceb647ef13",
                  "parentUUID": "ad576c8d-8eff-4f61-aa0f-8a8bdf7c9885",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.timezone(\"Europe/Berlin\"))",
                  "err": {},
                  "uuid": "6aa29654-0285-4450-a8b3-0d63dcff9315",
                  "parentUUID": "ad576c8d-8eff-4f61-aa0f-8a8bdf7c9885",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({end:new Date(new Date().getTime()+36e5),start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");assert.strictEqual(e.timezone(),\"Europe/London\")",
                  "err": {},
                  "uuid": "612be1b1-5e0a-426b-ad18-a35f04a99fd0",
                  "parentUUID": "ad576c8d-8eff-4f61-aa0f-8a8bdf7c9885",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.floating(true);e.timezone(\"Europe/London\");assert.strictEqual(e.floating(),false)",
                  "err": {},
                  "uuid": "9f588b0d-79f3-48fe-be74-aa4c0092bb26",
                  "parentUUID": "ad576c8d-8eff-4f61-aa0f-8a8bdf7c9885",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.floating(true);e.timezone(null);assert.strictEqual(e.floating(),true)",
                  "err": {},
                  "uuid": "ce6eaa05-8a9b-496b-9ad1-73396e175aa6",
                  "parentUUID": "ad576c8d-8eff-4f61-aa0f-8a8bdf7c9885",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\",timezone:\"Europe/Berlin\"},new ICalCalendar);assert.strictEqual(e.timezone(),\"Europe/Berlin\");e.timezone(\"UTC\");assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "95e61882-aee1-4d17-9cd0-ee615572dedb",
                  "parentUUID": "ad576c8d-8eff-4f61-aa0f-8a8bdf7c9885",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1e0dac90-b6b4-4c97-8ddb-20e352469f0b",
                "5bc3e067-0a92-459d-a335-c1ceb647ef13",
                "6aa29654-0285-4450-a8b3-0d63dcff9315",
                "612be1b1-5e0a-426b-ad18-a35f04a99fd0",
                "9f588b0d-79f3-48fe-be74-aa4c0092bb26",
                "ce6eaa05-8a9b-496b-9ad1-73396e175aa6",
                "95e61882-aee1-4d17-9cd0-ee615572dedb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "31d448b1-4fba-413f-8b6d-6fbc8b122f8e",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment().add(1,\"day\");const e=new ICalEvent({start:new Date},new ICalCalendar).stamp(now);assert.deepStrictEqual(e.stamp(),now)",
                  "err": {},
                  "uuid": "0ca495b9-b5f4-4d85-bdac-4ff9b7f3d0bd",
                  "parentUUID": "31d448b1-4fba-413f-8b6d-6fbc8b122f8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.stamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "1ef7e703-bb09-4db0-b53a-bde89fbf9b6b",
                  "parentUUID": "31d448b1-4fba-413f-8b6d-6fbc8b122f8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.stamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "c3556d56-e54c-4c17-8083-d3af4193d192",
                  "parentUUID": "31d448b1-4fba-413f-8b6d-6fbc8b122f8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.stamp(3)},/`stamp`/,\"Number\");assert.throws(function(){event.stamp(null)},/`stamp`/,\"null\");assert.throws(function(){event.stamp(NaN)},/`stamp`/,\"NaN\");assert.throws(function(){event.stamp(new Date(\"hallo\"))},/`stamp`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "ba90857f-ce06-4ab0-b11c-467cf160e8aa",
                  "parentUUID": "31d448b1-4fba-413f-8b6d-6fbc8b122f8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.stamp(new Date))",
                  "err": {},
                  "uuid": "e40142f8-c778-43eb-841b-ade2ec6cf6b5",
                  "parentUUID": "31d448b1-4fba-413f-8b6d-6fbc8b122f8e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ca495b9-b5f4-4d85-bdac-4ff9b7f3d0bd",
                "1ef7e703-bb09-4db0-b53a-bde89fbf9b6b",
                "c3556d56-e54c-4c17-8083-d3af4193d192",
                "ba90857f-ce06-4ab0-b11c-467cf160e8aa",
                "e40142f8-c778-43eb-841b-ade2ec6cf6b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9fe04851-8897-461c-87c5-e077b7504eeb",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=moment().add(1,\"day\");const e=new ICalEvent({start:new Date},new ICalCalendar).timestamp(now);assert.deepStrictEqual(e.timestamp(),now)",
                  "err": {},
                  "uuid": "5166e43f-b970-497e-b7cc-5c41692d56dd",
                  "parentUUID": "9fe04851-8897-461c-87c5-e077b7504eeb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();assert.deepStrictEqual(event,event.timestamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "14ed297d-fd95-4da5-9881-c191c73fd27a",
                  "parentUUID": "9fe04851-8897-461c-87c5-e077b7504eeb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();assert.deepStrictEqual(event,event.timestamp(date));assert.deepStrictEqual(event.stamp(),date)",
                  "err": {},
                  "uuid": "c3e9d61d-fbe8-4018-a3c9-78ca78f0c4f0",
                  "parentUUID": "9fe04851-8897-461c-87c5-e077b7504eeb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.timestamp(3)},/`stamp`/,\"Number\");assert.throws(function(){event.timestamp(null)},/`stamp`/,\"null\");assert.throws(function(){event.timestamp(NaN)},/`stamp`/,\"NaN\");assert.throws(function(){event.timestamp(new Date(\"hallo\"))},/`stamp`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "47fabe16-dfc4-49de-aa6a-bb7f169e1b01",
                  "parentUUID": "9fe04851-8897-461c-87c5-e077b7504eeb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.timestamp(new Date))",
                  "err": {},
                  "uuid": "5c43e6a7-ec48-4a7d-902c-e708792a30ba",
                  "parentUUID": "9fe04851-8897-461c-87c5-e077b7504eeb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5166e43f-b970-497e-b7cc-5c41692d56dd",
                "14ed297d-fd95-4da5-9881-c191c73fd27a",
                "c3e9d61d-fbe8-4018-a3c9-78ca78f0c4f0",
                "47fabe16-dfc4-49de-aa6a-bb7f169e1b01",
                "5c43e6a7-ec48-4a7d-902c-e708792a30ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39aaf840-9985-427a-8f6d-45e354a54675",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.allDay(true);assert.strictEqual(e.allDay(),true)",
                  "err": {},
                  "uuid": "9e78a3c2-b193-4c8a-bab3-55340f436509",
                  "parentUUID": "39aaf840-9985-427a-8f6d-45e354a54675",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.allDay(true))",
                  "err": {},
                  "uuid": "450d538a-f933-424f-a29b-6f58aa99da35",
                  "parentUUID": "39aaf840-9985-427a-8f6d-45e354a54675",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.allDay(true);assert.strictEqual(event.allDay(),true)",
                  "err": {},
                  "uuid": "05f30ed5-f443-47df-8a1b-4853200e7128",
                  "parentUUID": "39aaf840-9985-427a-8f6d-45e354a54675",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9e78a3c2-b193-4c8a-bab3-55340f436509",
                "450d538a-f933-424f-a29b-6f58aa99da35",
                "05f30ed5-f443-47df-8a1b-4853200e7128"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ceed68a4-c71b-4b43-b52f-8f5717fba92a",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar).floating(true);assert.strictEqual(e.floating(),true)",
                  "err": {},
                  "uuid": "3b21c868-3916-4d49-9a8d-e99be058baf7",
                  "parentUUID": "ceed68a4-c71b-4b43-b52f-8f5717fba92a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.floating(false));assert.deepStrictEqual(e,e.floating(true))",
                  "err": {},
                  "uuid": "7cd2d4ae-5fd6-48eb-954b-a46fd106c0c3",
                  "parentUUID": "ceed68a4-c71b-4b43-b52f-8f5717fba92a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.floating(true);assert.strictEqual(event.floating(),true)",
                  "err": {},
                  "uuid": "81724cb1-31ba-4d7f-9570-9ff70b2b5bb8",
                  "parentUUID": "ceed68a4-c71b-4b43-b52f-8f5717fba92a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");e.floating(true);assert.strictEqual(e.timezone(),null)",
                  "err": {},
                  "uuid": "2985e81c-56f3-43f1-b571-731eb5a656ac",
                  "parentUUID": "ceed68a4-c71b-4b43-b52f-8f5717fba92a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);e.timezone(\"Europe/London\");e.floating(false);assert.strictEqual(e.timezone(),\"Europe/London\")",
                  "err": {},
                  "uuid": "a2912ece-c493-4df2-8cc8-0df374ead898",
                  "parentUUID": "ceed68a4-c71b-4b43-b52f-8f5717fba92a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b21c868-3916-4d49-9a8d-e99be058baf7",
                "7cd2d4ae-5fd6-48eb-954b-a46fd106c0c3",
                "81724cb1-31ba-4d7f-9570-9ff70b2b5bb8",
                "2985e81c-56f3-43f1-b571-731eb5a656ac",
                "a2912ece-c493-4df2-8cc8-0df374ead898"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd0d0288-a492-441c-b4a3-654979ce69ea",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options={count:5,exclude:[moment()],freq:ICalEventRepeatingFreq.MONTHLY,interval:2,until:moment()};const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e.repeating(),null);e.repeating(options);assert.deepStrictEqual(e.repeating(),options);e.repeating(null);assert.deepStrictEqual(e.repeating(),null)",
                  "err": {},
                  "uuid": "c0055cb2-5dfd-430e-9bd9-60f5ad58f08a",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.repeating(null));assert.deepStrictEqual(e.repeating(),null)",
                  "err": {},
                  "uuid": "10576fca-c1a5-4b42-be6f-09ede884e609",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.repeating(null),\"repeating(null)\");assert.deepStrictEqual(e,e.repeating({freq:ICalEventRepeatingFreq.MONTHLY}),\"repeating({freq: 'MONTHLY'})\")",
                  "err": {},
                  "uuid": "99f0de32-1c14-4079-907f-f9671e774035",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: DAILY, HOURLY, MINUTELY, MONTHLY, SECONDLY, WEEKLY, YEARLY/)",
                  "err": {},
                  "uuid": "d43928ef-488d-440b-b551-34db88a49d18",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:\"hello\"},start:moment(),summary:\"test\"},new ICalCalendar)},/must be one of the following/)",
                  "err": {},
                  "uuid": "532ded41-369b-4924-b84e-934807d9dc12",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.freq,\"MONTHLY\")",
                  "err": {},
                  "uuid": "8f113d62-8583-4d75-b21b-f44835d1b5a6",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{count:Infinity,freq:ICalEventRepeatingFreq.DAILY},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.count` must be a finite number!/);assert.throws(function(){new ICalEvent({repeating:{count:\"abc\",freq:ICalEventRepeatingFreq.DAILY},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.count` must be a finite number!/)",
                  "err": {},
                  "uuid": "cf47df60-6751-4047-89ca-9ab9ac725434",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({count:5,freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.count,5)",
                  "err": {},
                  "uuid": "29c195d5-cd1d-4310-84c4-0291e6864768",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:Infinity},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.interval` must be a finite number!/);assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:\"abc\"},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.interval` must be a finite number!/)",
                  "err": {},
                  "uuid": "3890aa56-751f-4c59-8712-ce65f22f0357",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,interval:5});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.interval,5)",
                  "err": {},
                  "uuid": "89d8a12a-f93f-4ba6-a665-ec0d14056aeb",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,until:null},start:moment(),summary:\"test\"},new ICalCalendar)},/Error: `repeating\\.until` has to be a valid date!/)",
                  "err": {},
                  "uuid": "d53ac467-2f64-4880-b2ad-c81c2fd6efe7",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toJSON();event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "6da1f068-5db5-4fe1-af3b-4a50459dd74a",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\").toDate();event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "21860797-fe3c-4f20-ad48-ccc00b989097",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\");event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:date});const result=event.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.until,date)",
                  "err": {},
                  "uuid": "7c68a39a-f317-4d2d-9deb-950761be27de",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:3})},/`repeating.until`/,\"Number\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:null})},/`repeating.until`/,\"null\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:NaN})},/`repeating.until`/,\"NaN\");assert.throws(function(){event.repeating({freq:ICalEventRepeatingFreq.MONTHLY,until:new Date(\"foo\")})},/`repeating.until`/,\"Invalid Date\")",
                  "err": {},
                  "uuid": "7cb17d1e-3bbe-4bca-9a00-865437b8b44d",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{byDay:\"FOO\",freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/);assert.throws(function(){new ICalEvent({repeating:{byDay:[\"SU\",\"BAR\",\"th\"],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/);assert.throws(function(){new ICalEvent({repeating:{byDay:[\"SU\",Infinity,\"th\"],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/)",
                  "err": {},
                  "uuid": "ea64951c-2e80-4933-a2c8-0533776cacc7",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byDay:[ICalWeekday.SU,ICalWeekday.WE,ICalWeekday.TH],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byDay,[\"SU\",\"WE\",\"TH\"])",
                  "err": {},
                  "uuid": "11867e61-a94b-49b1-b654-48e0226d84eb",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{byMonth:\"FOO\",freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonth` contains invalid value `FOO`/);assert.throws(function(){new ICalEvent({repeating:{byMonth:[1,14,7],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonth` contains invalid value `14`/)",
                  "err": {},
                  "uuid": "98070658-7666-407c-8f55-ede77e366777",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byMonth:[1,12,7],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byMonth,[1,12,7])",
                  "err": {},
                  "uuid": "541fc6d8-b75f-4f66-97c2-551f48d8f63f",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:\"FOO\",freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `FOO`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:[1,32,-15],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `32`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:[-1,-32,15],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `-32`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byMonthDay:[1,0,15],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.byMonthDay` contains invalid value `0`/)",
                  "err": {},
                  "uuid": "7c74a791-f5db-40f0-a75b-f138e538cf8f",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byMonthDay:[1,15],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.byMonthDay,[1,15])",
                  "err": {},
                  "uuid": "b3974043-8382-4812-8c41-631b521aabdb",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[367],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `367`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[-367],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `-367`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[0],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `0`/);assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],bySetPos:[\"FOO\"],freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` contains invalid value `FOO`/)",
                  "err": {},
                  "uuid": "26d1e9cf-9e3d-41f1-815a-e3da3d0d1e21",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{bySetPos:6,freq:ICalEventRepeatingFreq.MONTHLY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/)",
                  "err": {},
                  "uuid": "bcc67902-60fc-483b-9eb3-4b3bd8a0c9a1",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({byDay:[ICalWeekday.SU],bySetPos:[2],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.strictEqual(result.byDay?.length,1);assert.strictEqual(result.bySetPos?.length,1)",
                  "err": {},
                  "uuid": "0ed462a6-7c1a-4d24-a56f-c60189b086e4",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],exclude:new Date(\"FOO\"),freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/has to be a valid date/)",
                  "err": {},
                  "uuid": "41622b3c-4074-4e74-9bfb-30de7572c382",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],exclude:[moment(),new Date(\"BAR\"),\"FOO\"],freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/has to be a valid date/)",
                  "err": {},
                  "uuid": "23d45844-d4c7-4a57-b456-a3f25d84d9f6",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({end:moment(),repeating:{byDay:[ICalWeekday.SU],exclude:42,freq:ICalEventRepeatingFreq.DAILY,interval:2},start:moment(),summary:\"test\"},new ICalCalendar)},/`repeating.exclude\\[0\\]` has to be a valid date!/)",
                  "err": {},
                  "uuid": "fc0722df-738a-4122-af20-013ca1f26945",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().add(1,\"week\");e.repeating({exclude:[date.toJSON(),date.toDate(),date],freq:ICalEventRepeatingFreq.MONTHLY});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.ok(Array.isArray(result.exclude));assert.strictEqual(result.exclude.length,3);assert.deepStrictEqual(result.exclude[0],date.toJSON(),\"String\");assert.deepStrictEqual(result.exclude[1],date.toDate(),\"Date\");assert.deepStrictEqual(result.exclude[2],date,\"Moment\")",
                  "err": {},
                  "uuid": "0493552d-98e4-4e69-98fa-1fe051fb56b1",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function(){new ICalEvent({repeating:{freq:ICalEventRepeatingFreq.DAILY,interval:2,startOfWeek:\"FOO\"},start:moment(),summary:\"test\"},new ICalCalendar)},/Input must be one of the following: FR, MO, SA, SU, TH, TU, WE/)",
                  "err": {},
                  "uuid": "204a2cd4-0f48-4770-b897-42a02a502e0c",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.repeating({freq:ICalEventRepeatingFreq.MONTHLY,startOfWeek:ICalWeekday.SU});const result=e.repeating();assert.ok(result);assert.ok(!isRRule(result));assert.ok(typeof result!==\"string\");assert.deepStrictEqual(result.startOfWeek,\"SU\")",
                  "err": {},
                  "uuid": "7c0c0306-7241-4f73-acb4-7da21b091677",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start=new Date(Date.UTC(2012,1,1,10,30));const e=new ICalEvent({start},new ICalCalendar);const rule=new rrule.RRule({byweekday:[rrule.RRule.MO,rrule.RRule.FR],dtstart:start,freq:rrule.RRule.WEEKLY,interval:5,until:new Date(Date.UTC(2012,12,31))});e.repeating(rule);const result=e.repeating();assert.ok(isRRule(result));assert.deepStrictEqual(result,rule);console.log(e.toString());assert.ok(e.toString().includes(\"RRULE:BYDAY=MO,FR;FREQ=WEEKLY;INTERVAL=5;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "8fcc1fa3-8f1f-41b1-b8e3-5d0da0e9bc35",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const rule=\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\";e.repeating(rule);const result=e.repeating();assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "f7fb4d61-2837-45ad-954e-583027e744bf",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add RRULE: prefix for single line string if not already there",
                  "fullTitle": "ical-generator Event repeating() should add RRULE: prefix for single line string if not already there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const rule=\"FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\";e.repeating(rule);const result=e.repeating();assert.deepStrictEqual(result,rule);assert.ok(e.toString().includes(\"RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z\"))",
                  "err": {},
                  "uuid": "9cbb4023-fd29-47fe-8022-e974d533c913",
                  "parentUUID": "cd0d0288-a492-441c-b4a3-654979ce69ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0055cb2-5dfd-430e-9bd9-60f5ad58f08a",
                "10576fca-c1a5-4b42-be6f-09ede884e609",
                "99f0de32-1c14-4079-907f-f9671e774035",
                "d43928ef-488d-440b-b551-34db88a49d18",
                "532ded41-369b-4924-b84e-934807d9dc12",
                "8f113d62-8583-4d75-b21b-f44835d1b5a6",
                "cf47df60-6751-4047-89ca-9ab9ac725434",
                "29c195d5-cd1d-4310-84c4-0291e6864768",
                "3890aa56-751f-4c59-8712-ce65f22f0357",
                "89d8a12a-f93f-4ba6-a665-ec0d14056aeb",
                "d53ac467-2f64-4880-b2ad-c81c2fd6efe7",
                "6da1f068-5db5-4fe1-af3b-4a50459dd74a",
                "21860797-fe3c-4f20-ad48-ccc00b989097",
                "7c68a39a-f317-4d2d-9deb-950761be27de",
                "7cb17d1e-3bbe-4bca-9a00-865437b8b44d",
                "ea64951c-2e80-4933-a2c8-0533776cacc7",
                "11867e61-a94b-49b1-b654-48e0226d84eb",
                "98070658-7666-407c-8f55-ede77e366777",
                "541fc6d8-b75f-4f66-97c2-551f48d8f63f",
                "7c74a791-f5db-40f0-a75b-f138e538cf8f",
                "b3974043-8382-4812-8c41-631b521aabdb",
                "26d1e9cf-9e3d-41f1-815a-e3da3d0d1e21",
                "bcc67902-60fc-483b-9eb3-4b3bd8a0c9a1",
                "0ed462a6-7c1a-4d24-a56f-c60189b086e4",
                "41622b3c-4074-4e74-9bfb-30de7572c382",
                "23d45844-d4c7-4a57-b456-a3f25d84d9f6",
                "fc0722df-738a-4122-af20-013ca1f26945",
                "0493552d-98e4-4e69-98fa-1fe051fb56b1",
                "204a2cd4-0f48-4770-b897-42a02a502e0c",
                "7c0c0306-7241-4f73-acb4-7da21b091677",
                "8fcc1fa3-8f1f-41b1-b8e3-5d0da0e9bc35",
                "f7fb4d61-2837-45ad-954e-583027e744bf",
                "9cbb4023-fd29-47fe-8022-e974d533c913"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a20ab2a2-4438-4918-be9f-f6277e3a40ba",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.summary(),\"\");e.summary(\"Testevent\");assert.strictEqual(e.summary(),\"Testevent\")",
                  "err": {},
                  "uuid": "073245d4-e750-49b0-af32-6fde1cbc26c7",
                  "parentUUID": "a20ab2a2-4438-4918-be9f-f6277e3a40ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.summary(\"\"));assert.deepStrictEqual(e,e.summary(\"Testevent\"))",
                  "err": {},
                  "uuid": "41316086-3003-457c-a16e-5cd73c03bee9",
                  "parentUUID": "a20ab2a2-4438-4918-be9f-f6277e3a40ba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.summary(\"Example Event II\");assert.strictEqual(event.summary(),\"Example Event II\");event.summary(\"\");assert.strictEqual(event.summary(),\"\")",
                  "err": {},
                  "uuid": "5d85d778-9143-4858-99ac-1790704fd010",
                  "parentUUID": "a20ab2a2-4438-4918-be9f-f6277e3a40ba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "073245d4-e750-49b0-af32-6fde1cbc26c7",
                "41316086-3003-457c-a16e-5cd73c03bee9",
                "5d85d778-9143-4858-99ac-1790704fd010"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "076b163e-bc27-47b0-a235-85128ce89065",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.location(),null);e.location(\"Test Location\");assert.deepStrictEqual(e.location(),{title:\"Test Location\"});e.location(null);assert.strictEqual(e.location(),null)",
                  "err": {},
                  "uuid": "cdb7c420-7eaf-4167-950b-31b2249bb0dc",
                  "parentUUID": "076b163e-bc27-47b0-a235-85128ce89065",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.location(),null);e.location({geo:{lat:44.5,lon:-3.4},title:\"Foo\"});const location=e.location();assert.ok(location);assert.ok(\"title\"in location);assert.deepStrictEqual(location?.title,\"Foo\");assert.deepStrictEqual(location?.geo,{lat:44.5,lon:-3.4});e.location(null);assert.strictEqual(e.location(),null)",
                  "err": {},
                  "uuid": "82c5b5c0-ca88-40f9-866d-d34107665fd6",
                  "parentUUID": "076b163e-bc27-47b0-a235-85128ce89065",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.location(null));assert.deepStrictEqual(e,e.location(\"Test Location\"))",
                  "err": {},
                  "uuid": "4be79879-ecca-423c-ae4b-34c5fef6cd6a",
                  "parentUUID": "076b163e-bc27-47b0-a235-85128ce89065",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.location(\"Europa-Park\");const location=event.location();assert.ok(location);assert.ok(\"title\"in location);assert.strictEqual(location?.title,\"Europa-Park\")",
                  "err": {},
                  "uuid": "227d4bfe-5743-47df-afa9-4cbf947c4f8a",
                  "parentUUID": "076b163e-bc27-47b0-a235-85128ce89065",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);assert.throws(()=>event.location({geo:3}),/`location` isn't formatted correctly/i);assert.throws(()=>event.location({}),/`location` isn't formatted correctly/i)",
                  "err": {},
                  "uuid": "365e1195-5598-4d16-9fee-fd4054e74a7a",
                  "parentUUID": "076b163e-bc27-47b0-a235-85128ce89065",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cdb7c420-7eaf-4167-950b-31b2249bb0dc",
                "82c5b5c0-ca88-40f9-866d-d34107665fd6",
                "4be79879-ecca-423c-ae4b-34c5fef6cd6a",
                "227d4bfe-5743-47df-afa9-4cbf947c4f8a",
                "365e1195-5598-4d16-9fee-fd4054e74a7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bca67f4f-a380-459d-9a01-291f70428210",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.description(),null);e.description(\"I don't need a description. I'm far to awesome for descriptions\\u2026\");assert.deepStrictEqual(e.description(),{plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\"});e.description({html:\"I don't need a description.<br />I'm far to awesome for descriptions\\u2026\",plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\"});assert.deepStrictEqual(e.description(),{html:\"I don't need a description.<br />I'm far to awesome for descriptions\\u2026\",plain:\"I don't need a description. I'm far to awesome for descriptions\\u2026\"});e.description(null);assert.strictEqual(e.description(),null)",
                  "err": {},
                  "uuid": "531e1ae1-f70b-4cce-82d6-8b087ed24d4e",
                  "parentUUID": "bca67f4f-a380-459d-9a01-291f70428210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.description(null));assert.deepStrictEqual(e,e.description(\"I don't need a description. I'm far to awesome for descriptions\\u2026\"))",
                  "err": {},
                  "uuid": "c0f3cab2-193f-4f20-839f-39d91e16298c",
                  "parentUUID": "bca67f4f-a380-459d-9a01-291f70428210",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.description(\"Well. But other people need descriptions\\u2026 :/\");assert.deepStrictEqual(event.description(),{plain:\"Well. But other people need descriptions\\u2026 :/\"});event.description({html:\"<marquee>I'm the best HTML tag in this universe!</marquee>\",plain:\"I am uncool text.\"});assert.ok(event.toString().includes(\"<marquee>I'm the best HTML tag in this universe!</marquee>\"))",
                  "err": {},
                  "uuid": "e4355be6-ea81-494a-9c86-e1abaa02b7cc",
                  "parentUUID": "bca67f4f-a380-459d-9a01-291f70428210",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "531e1ae1-f70b-4cce-82d6-8b087ed24d4e",
                "c0f3cab2-193f-4f20-839f-39d91e16298c",
                "e4355be6-ea81-494a-9c86-e1abaa02b7cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d62f235-8e15-4533-b065-77329f109911",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.organizer(),null);e.organizer(null);assert.strictEqual(e.organizer(),null);e.organizer({email:\"mail@example.com\",name:\"Sebastian Pekarek\"});assert.strictEqual(\"Sebastian Pekarek\",e.organizer()?.name);assert.strictEqual(\"mail@example.com\",e.organizer()?.email);e.organizer({email:\"mail@example.com\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\"});assert.strictEqual(\"Sebastian Pekarek\",e.organizer()?.name);assert.strictEqual(\"mail@example.com\",e.organizer()?.email);assert.strictEqual(\"mail2@example2.com\",e.organizer()?.mailto)",
                  "err": {},
                  "uuid": "d174f796-c9bc-4041-8b0c-e1225376b39c",
                  "parentUUID": "0d62f235-8e15-4533-b065-77329f109911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.organizer(null));assert.deepStrictEqual(e,e.organizer(\"Sebastian Pekarek <mail@example.com>\"))",
                  "err": {},
                  "uuid": "fdd13618-018e-49e1-b627-f0d69755c826",
                  "parentUUID": "0d62f235-8e15-4533-b065-77329f109911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({email:\"mail@example.com\",name:\"Sebastian Pekarek\"});assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",mailto:void 0,name:\"Sebastian Pekarek\",sentBy:void 0});event.organizer({email:\"mail@example.com\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\"});assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",mailto:\"mail2@example2.com\",name:\"Sebastian Pekarek\",sentBy:void 0})",
                  "err": {},
                  "uuid": "6fb9905a-2b9a-4fcb-8c21-51056694db9c",
                  "parentUUID": "0d62f235-8e15-4533-b065-77329f109911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({email:\"mail@example.com\",name:\"Sebastian Pekarek\",sentBy:\"bot@example.com\"});assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",mailto:void 0,name:\"Sebastian Pekarek\",sentBy:\"bot@example.com\"})",
                  "err": {},
                  "uuid": "9faec4c7-887a-4fce-abf8-b6bb7811df70",
                  "parentUUID": "0d62f235-8e15-4533-b065-77329f109911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer(\"Sebastian Pekarek <mail@example.com>\");assert.deepStrictEqual(event.organizer(),{email:\"mail@example.com\",name:\"Sebastian Pekarek\"})",
                  "err": {},
                  "uuid": "b8679589-53c2-44a5-bc3c-bc4e0930f3e9",
                  "parentUUID": "0d62f235-8e15-4533-b065-77329f109911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer(\"foo bar\")},/`organizer`/)",
                  "err": {},
                  "uuid": "0741328b-05b9-4c23-a6b4-c8dfb5626a3a",
                  "parentUUID": "0d62f235-8e15-4533-b065-77329f109911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer({email:\"foo\"})},/`organizer\\.name`/)",
                  "err": {},
                  "uuid": "24b785db-bb7b-4999-95e1-c9b2e8c27c2d",
                  "parentUUID": "0d62f235-8e15-4533-b065-77329f109911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.organizer(Infinity)},/`organizer`/);assert.throws(function(){e.organizer(NaN)},/`organizer`/)",
                  "err": {},
                  "uuid": "a93440d1-985b-41c4-beb9-d7c63bb5b20e",
                  "parentUUID": "0d62f235-8e15-4533-b065-77329f109911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.organizer({name:\"Sebastian Pekarek\"});assert.deepStrictEqual(event.organizer(),{email:void 0,mailto:void 0,name:\"Sebastian Pekarek\",sentBy:void 0})",
                  "err": {},
                  "uuid": "3fce351d-59df-4396-99cc-8d8b73aa17a7",
                  "parentUUID": "0d62f235-8e15-4533-b065-77329f109911",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include a : (PR #610)",
                  "fullTitle": "ical-generator Event organizer() should include a : (PR #610)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({organizer:{name:\"Some Guy\"},start:moment(),summary:\"Example Event\"},new ICalCalendar);assert.ok(event.toString().includes('ORGANIZER;CN=\"Some Guy\":'))",
                  "err": {},
                  "uuid": "41adebb4-24d8-4fe9-8695-c3ee350ddc08",
                  "parentUUID": "0d62f235-8e15-4533-b065-77329f109911",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d174f796-c9bc-4041-8b0c-e1225376b39c",
                "fdd13618-018e-49e1-b627-f0d69755c826",
                "6fb9905a-2b9a-4fcb-8c21-51056694db9c",
                "9faec4c7-887a-4fce-abf8-b6bb7811df70",
                "b8679589-53c2-44a5-bc3c-bc4e0930f3e9",
                "0741328b-05b9-4c23-a6b4-c8dfb5626a3a",
                "24b785db-bb7b-4999-95e1-c9b2e8c27c2d",
                "a93440d1-985b-41c4-beb9-d7c63bb5b20e",
                "3fce351d-59df-4396-99cc-8d8b73aa17a7",
                "41adebb4-24d8-4fe9-8695-c3ee350ddc08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27b21b7c-b3dc-454b-8ce4-07121ed0e416",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=new ICalAttendee({email:\"mail@example.com\"},event);assert.strictEqual(event.createAttendee(attendee),attendee,\"createAttendee returns attendee\");assert.deepStrictEqual(event.attendees()[0],attendee,\"attendee pushed\")",
                  "err": {},
                  "uuid": "98d133d0-e422-4f5a-aee0-6b58b6e4a274",
                  "parentUUID": "27b21b7c-b3dc-454b-8ce4-07121ed0e416",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createAttendee({email:\"mail@example.com\"})instanceof ICalAttendee);assert.strictEqual(event.attendees.length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "618777ad-007a-49e9-ab00-f0cbccd742fe",
                  "parentUUID": "27b21b7c-b3dc-454b-8ce4-07121ed0e416",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=event.createAttendee(\"Zac <zac@example.com>\");assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(event.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "4eb7b7d1-0030-4198-a72f-206954ac25ed",
                  "parentUUID": "27b21b7c-b3dc-454b-8ce4-07121ed0e416",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.createAttendee(\"foo bar\")},/isn't formated correctly/)",
                  "err": {},
                  "uuid": "a0b04ffb-10f8-41d8-b48e-2eafc5a31219",
                  "parentUUID": "27b21b7c-b3dc-454b-8ce4-07121ed0e416",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const attendee=event.createAttendee({email:\"zac@example.com\",name:\"Zac\"});assert.strictEqual(attendee.name(),\"Zac\");assert.strictEqual(attendee.email(),\"zac@example.com\");assert.strictEqual(event.attendees().length,1,\"attendee pushed\")",
                  "err": {},
                  "uuid": "39e63d80-945f-4b92-b84b-6de067a948cd",
                  "parentUUID": "27b21b7c-b3dc-454b-8ce4-07121ed0e416",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98d133d0-e422-4f5a-aee0-6b58b6e4a274",
                "618777ad-007a-49e9-ab00-f0cbccd742fe",
                "4eb7b7d1-0030-4198-a72f-206954ac25ed",
                "a0b04ffb-10f8-41d8-b48e-2eafc5a31219",
                "39e63d80-945f-4b92-b84b-6de067a948cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "71a97f30-0c52-49e7-8fa9-bcdb39d0aee1",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.attendees().length,0);const attendee=event.createAttendee({email:\"mail@example.com\"});assert.strictEqual(event.attendees().length,1);assert.deepStrictEqual(event.attendees()[0],attendee)",
                  "err": {},
                  "uuid": "af91db11-ff5a-4b6e-b92a-ed7bda71af20",
                  "parentUUID": "71a97f30-0c52-49e7-8fa9-bcdb39d0aee1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.attendees([{email:\"a@example.com\",name:\"Person A\"},{email:\"b@example.com\",name:\"Person B\"}]);assert.strictEqual(event.attendees().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "3c4ea70e-6f37-4709-ab31-e65df403efe0",
                  "parentUUID": "71a97f30-0c52-49e7-8fa9-bcdb39d0aee1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af91db11-ff5a-4b6e-b92a-ed7bda71af20",
                "3c4ea70e-6f37-4709-ab31-e65df403efe0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4c017832-09d3-4bed-b50d-7d5ee717adee",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createAlarm({trigger:60*10,type:ICalAlarmType.display})instanceof ICalAlarm)",
                  "err": {},
                  "uuid": "2b44e041-3072-472f-a485-2738b1c53d10",
                  "parentUUID": "4c017832-09d3-4bed-b50d-7d5ee717adee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const alarm=event.createAlarm({trigger:60*10,type:ICalAlarmType.audio});assert.strictEqual(alarm.type(),\"audio\")",
                  "err": {},
                  "uuid": "7883863a-9e5b-4836-91fb-c945791dc1bc",
                  "parentUUID": "4c017832-09d3-4bed-b50d-7d5ee717adee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b44e041-3072-472f-a485-2738b1c53d10",
                "7883863a-9e5b-4836-91fb-c945791dc1bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "92117201-76cf-436b-b5e3-e49b1e45ebbb",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.alarms().length,0);const alarm=event.createAlarm({trigger:600,type:ICalAlarmType.display});assert.strictEqual(event.alarms().length,1);assert.deepStrictEqual(event.alarms()[0],alarm)",
                  "err": {},
                  "uuid": "07c62021-38c8-4887-ac4d-56490d887dca",
                  "parentUUID": "92117201-76cf-436b-b5e3-e49b1e45ebbb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.alarms([{trigger:60,type:ICalAlarmType.audio},{trigger:600,type:ICalAlarmType.display}]);assert.strictEqual(event.alarms().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "c87da55d-d5d0-4701-9833-4c9797a87e4a",
                  "parentUUID": "92117201-76cf-436b-b5e3-e49b1e45ebbb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "07c62021-38c8-4887-ac4d-56490d887dca",
                "c87da55d-d5d0-4701-9833-4c9797a87e4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f9af0f38-0c51-4a75-8a98-20e20f556605",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.ok(event.createCategory({name:\"Test\"})instanceof ICalCategory)",
                  "err": {},
                  "uuid": "dab6d436-86bb-4176-96df-e2756c46d45b",
                  "parentUUID": "f9af0f38-0c51-4a75-8a98-20e20f556605",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const category=event.createCategory({name:\"foo\"});assert.strictEqual(category.name(),\"foo\")",
                  "err": {},
                  "uuid": "c264e309-6f21-4e19-a4ea-4776e119a060",
                  "parentUUID": "f9af0f38-0c51-4a75-8a98-20e20f556605",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dab6d436-86bb-4176-96df-e2756c46d45b",
                "c264e309-6f21-4e19-a4ea-4776e119a060"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "db18cef3-d403-4fc6-ac88-340747fdfd42",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.categories().length,0);const category=event.createCategory({name:\"Test\"});assert.strictEqual(event.categories().length,1);assert.deepStrictEqual(event.categories()[0],category)",
                  "err": {},
                  "uuid": "ed73ef58-7402-4794-a1b9-8cad52284ae3",
                  "parentUUID": "db18cef3-d403-4fc6-ac88-340747fdfd42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.categories([{name:\"foo\"},{name:\"bar\"}]);assert.strictEqual(event.categories().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "1afae05a-ff25-41df-9031-b9a74ece28c7",
                  "parentUUID": "db18cef3-d403-4fc6-ac88-340747fdfd42",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ed73ef58-7402-4794-a1b9-8cad52284ae3",
                "1afae05a-ff25-41df-9031-b9a74ece28c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "93988393-ee75-4a12-b5a3-0dc12c7de268",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.status(),null);event.status(ICalEventStatus.CONFIRMED);assert.strictEqual(event.status(),\"CONFIRMED\");event.status(null);assert.strictEqual(event.status(),null)",
                  "err": {},
                  "uuid": "f139ab6a-7fe2-4f5e-9de5-c9896ebf23ca",
                  "parentUUID": "93988393-ee75-4a12-b5a3-0dc12c7de268",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.status(null));assert.deepStrictEqual(e,e.status(ICalEventStatus.CONFIRMED))",
                  "err": {},
                  "uuid": "e4b6036c-58ee-41f7-b2c6-03f7d2c66c1e",
                  "parentUUID": "93988393-ee75-4a12-b5a3-0dc12c7de268",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.status(ICalEventStatus.CONFIRMED);e.status(null);assert.strictEqual(e.status(),null)",
                  "err": {},
                  "uuid": "78db2823-4f88-4e6f-8ef9-c2688c744b12",
                  "parentUUID": "93988393-ee75-4a12-b5a3-0dc12c7de268",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.status(ICalEventStatus.CONFIRMED);assert.strictEqual(e.status(),\"CONFIRMED\");assert.strictEqual(e.status(),ICalEventStatus.CONFIRMED)",
                  "err": {},
                  "uuid": "8c908fb8-1157-43b3-88de-bdcad1416d67",
                  "parentUUID": "93988393-ee75-4a12-b5a3-0dc12c7de268",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.status(\"COOKING\")},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/);assert.throws(function(){e.status(Infinity)},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/);assert.throws(function(){e.status(NaN)},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/);assert.throws(function(){e.status(-1)},/Input must be one of the following: CANCELLED, CONFIRMED, TENTATIVE/)",
                  "err": {},
                  "uuid": "2ab1af1e-e089-4757-9d6b-0087a3cc47cc",
                  "parentUUID": "93988393-ee75-4a12-b5a3-0dc12c7de268",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f139ab6a-7fe2-4f5e-9de5-c9896ebf23ca",
                "e4b6036c-58ee-41f7-b2c6-03f7d2c66c1e",
                "78db2823-4f88-4e6f-8ef9-c2688c744b12",
                "8c908fb8-1157-43b3-88de-bdcad1416d67",
                "2ab1af1e-e089-4757-9d6b-0087a3cc47cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1dd52df1-40c8-42b8-81d0-be5c08d87c2d",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.busystatus(),null);event.busystatus(ICalEventBusyStatus.BUSY);assert.strictEqual(event.busystatus(),\"BUSY\");event.busystatus(null);assert.strictEqual(event.busystatus(),null)",
                  "err": {},
                  "uuid": "89393472-91f3-4f75-b380-3bcbef2fe304",
                  "parentUUID": "1dd52df1-40c8-42b8-81d0-be5c08d87c2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.busystatus(null));assert.deepStrictEqual(e,e.busystatus(ICalEventBusyStatus.BUSY))",
                  "err": {},
                  "uuid": "05ac5818-9045-4ad7-9385-26f74a0a77d2",
                  "parentUUID": "1dd52df1-40c8-42b8-81d0-be5c08d87c2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.busystatus(ICalEventBusyStatus.BUSY);e.busystatus(null);assert.strictEqual(e.busystatus(),null)",
                  "err": {},
                  "uuid": "afcfed4c-8e04-4a04-90c2-143a8712c1af",
                  "parentUUID": "1dd52df1-40c8-42b8-81d0-be5c08d87c2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.busystatus(ICalEventBusyStatus.BUSY);assert.strictEqual(e.busystatus(),\"BUSY\")",
                  "err": {},
                  "uuid": "dfc9a215-0733-46e3-b0ed-b7980f9d3e10",
                  "parentUUID": "1dd52df1-40c8-42b8-81d0-be5c08d87c2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.busystatus(\"COOKING\")},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/);assert.throws(function(){e.busystatus(Infinity)},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/);assert.throws(function(){e.busystatus(NaN)},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/);assert.throws(function(){e.busystatus(-1)},/Input must be one of the following: BUSY, FREE, OOF, TENTATIVE/)",
                  "err": {},
                  "uuid": "b47c8059-adc3-4a6c-a5a6-c825e9dd2bb6",
                  "parentUUID": "1dd52df1-40c8-42b8-81d0-be5c08d87c2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89393472-91f3-4f75-b380-3bcbef2fe304",
                "05ac5818-9045-4ad7-9385-26f74a0a77d2",
                "afcfed4c-8e04-4a04-90c2-143a8712c1af",
                "dfc9a215-0733-46e3-b0ed-b7980f9d3e10",
                "b47c8059-adc3-4a6c-a5a6-c825e9dd2bb6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52bff171-d489-4891-b333-3c264becaa1b",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.priority(),null);e.priority(5);assert.strictEqual(e.priority(),5)",
                  "err": {},
                  "uuid": "e7a50439-da79-43d0-bfc6-ff9167875a98",
                  "parentUUID": "52bff171-d489-4891-b333-3c264becaa1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.priority(null));assert.deepStrictEqual(e,e.priority(5))",
                  "err": {},
                  "uuid": "ad21f06d-fd67-4a96-a793-a64a2448c6f8",
                  "parentUUID": "52bff171-d489-4891-b333-3c264becaa1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.priority(5);assert.strictEqual(event.priority(),5);assert.ok(event.toString().includes(\"PRIORITY:5\"))",
                  "err": {},
                  "uuid": "398cf9ec-314c-471b-a557-36c6c83caf87",
                  "parentUUID": "52bff171-d489-4891-b333-3c264becaa1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e7a50439-da79-43d0-bfc6-ff9167875a98",
                "ad21f06d-fd67-4a96-a793-a64a2448c6f8",
                "398cf9ec-314c-471b-a557-36c6c83caf87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "80d86696-fe58-4bc8-a0e1-3f5da3fc7893",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(e.url(),null);e.url(\"http://sebbo.net/\");assert.strictEqual(e.url(),\"http://sebbo.net/\")",
                  "err": {},
                  "uuid": "ca8636e1-8c49-4cff-8856-5d314bf7814d",
                  "parentUUID": "80d86696-fe58-4bc8-a0e1-3f5da3fc7893",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.url(null));assert.deepStrictEqual(e,e.url(\"http://sebbo.net/\"))",
                  "err": {},
                  "uuid": "4fdc6db7-3f92-4935-a11e-6715aea74dca",
                  "parentUUID": "80d86696-fe58-4bc8-a0e1-3f5da3fc7893",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:moment(),summary:\"Example Event\"},new ICalCalendar);event.url(\"http://github.com/sebbo2002/ical-generator\");assert.strictEqual(event.url(),\"http://github.com/sebbo2002/ical-generator\")",
                  "err": {},
                  "uuid": "444e4e95-c543-42c9-a0a4-fda1f263a916",
                  "parentUUID": "80d86696-fe58-4bc8-a0e1-3f5da3fc7893",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca8636e1-8c49-4cff-8856-5d314bf7814d",
                "4fdc6db7-3f92-4935-a11e-6715aea74dca",
                "444e4e95-c543-42c9-a0a4-fda1f263a916"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc32525f-58a8-4445-a65f-731354f7aba0",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(event.createAttachment(\"https://files.sebbo.net/calendar/attachments/foo\"),event)",
                  "err": {},
                  "uuid": "5943220d-7064-4918-9aa0-443717346703",
                  "parentUUID": "dc32525f-58a8-4445-a65f-731354f7aba0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5943220d-7064-4918-9aa0-443717346703"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "119687d0-2941-49bd-be8e-e934b332a06b",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.attachments().length,0);event.createAttachment(\"https://files.sebbo.net/calendar/attachments/foo\");assert.strictEqual(event.attachments().length,1);assert.deepStrictEqual(typeof event.attachments()[0],\"string\")",
                  "err": {},
                  "uuid": "5956bde8-44d5-448d-a389-04f47abfb2f1",
                  "parentUUID": "119687d0-2941-49bd-be8e-e934b332a06b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);const foo=event.attachments([\"https://files.sebbo.net/calendar/attachments/foo\",\"https://files.sebbo.net/calendar/attachments/bar\"]);assert.strictEqual(event.attachments().length,2);assert.deepStrictEqual(foo,event)",
                  "err": {},
                  "uuid": "edd10530-6f42-46a9-9f61-74b2fa5f65f6",
                  "parentUUID": "119687d0-2941-49bd-be8e-e934b332a06b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5956bde8-44d5-448d-a389-04f47abfb2f1",
                "edd10530-6f42-46a9-9f61-74b2fa5f65f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b11afdd-adf1-4664-9e11-1c2b3b1d7955",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.created(new Date))",
                  "err": {},
                  "uuid": "59563472-64bc-450b-918b-7a51896e357e",
                  "parentUUID": "8b11afdd-adf1-4664-9e11-1c2b3b1d7955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(moment());assert.ok(moment.isMoment(e.created()))",
                  "err": {},
                  "uuid": "2245e480-51e2-4b6e-bd5b-e728db483069",
                  "parentUUID": "8b11afdd-adf1-4664-9e11-1c2b3b1d7955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(new Date);assert.ok(e.created()instanceof Date)",
                  "err": {},
                  "uuid": "2c791265-fea7-4fd7-abc2-c1ffeffd09bf",
                  "parentUUID": "8b11afdd-adf1-4664-9e11-1c2b3b1d7955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(moment().toJSON());assert.strictEqual(typeof e.created(),\"string\")",
                  "err": {},
                  "uuid": "11dc38ab-47fa-452c-825f-5e66a367ffea",
                  "parentUUID": "8b11afdd-adf1-4664-9e11-1c2b3b1d7955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.created(new Date);assert.ok(e.created()instanceof Date)",
                  "err": {},
                  "uuid": "b19c0e12-a1d5-4d84-b8bf-2f70a29fc78f",
                  "parentUUID": "8b11afdd-adf1-4664-9e11-1c2b3b1d7955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=new Date;const e=new ICalEvent({start:new Date},new ICalCalendar).created(now);assert.deepStrictEqual(e.created()?.valueOf(),now.getTime())",
                  "err": {},
                  "uuid": "a32861bd-af8b-428b-a9c6-faf3c6347014",
                  "parentUUID": "8b11afdd-adf1-4664-9e11-1c2b3b1d7955",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.created(\"hallo\")},/`created`/)",
                  "err": {},
                  "uuid": "43afb834-5bb5-4d77-80ea-4d78efceb2e5",
                  "parentUUID": "8b11afdd-adf1-4664-9e11-1c2b3b1d7955",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59563472-64bc-450b-918b-7a51896e357e",
                "2245e480-51e2-4b6e-bd5b-e728db483069",
                "2c791265-fea7-4fd7-abc2-c1ffeffd09bf",
                "11dc38ab-47fa-452c-825f-5e66a367ffea",
                "b19c0e12-a1d5-4d84-b8bf-2f70a29fc78f",
                "a32861bd-af8b-428b-a9c6-faf3c6347014",
                "43afb834-5bb5-4d77-80ea-4d78efceb2e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "469f4987-157e-4a8f-ac1f-9ab81a96e371",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.lastModified(new Date))",
                  "err": {},
                  "uuid": "c4eb2952-8850-41bb-aef9-4863e75991a9",
                  "parentUUID": "469f4987-157e-4a8f-ac1f-9ab81a96e371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(moment());assert.ok(moment.isMoment(e.lastModified()))",
                  "err": {},
                  "uuid": "b867db71-24cc-47e5-b2cb-88365218ee10",
                  "parentUUID": "469f4987-157e-4a8f-ac1f-9ab81a96e371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(new Date);assert.ok(e.lastModified()instanceof Date)",
                  "err": {},
                  "uuid": "13d66de2-6eda-4270-ae0a-54e28a3c7e0b",
                  "parentUUID": "469f4987-157e-4a8f-ac1f-9ab81a96e371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);const date=moment().toJSON();e.lastModified(date);assert.strictEqual(e.lastModified(),date)",
                  "err": {},
                  "uuid": "5455fc96-7d42-4e24-8cf1-6968b9c04217",
                  "parentUUID": "469f4987-157e-4a8f-ac1f-9ab81a96e371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.lastModified(new Date);assert.ok(e.lastModified()instanceof Date)",
                  "err": {},
                  "uuid": "ab78039c-1a5a-43aa-be3c-f988ee14e600",
                  "parentUUID": "469f4987-157e-4a8f-ac1f-9ab81a96e371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now=new Date;const e=new ICalEvent({start:new Date},new ICalCalendar).lastModified(now);assert.deepStrictEqual(e.lastModified()?.valueOf(),now.getTime())",
                  "err": {},
                  "uuid": "c6849578-30c4-4667-b288-13b5f9c434da",
                  "parentUUID": "469f4987-157e-4a8f-ac1f-9ab81a96e371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.lastModified(\"hallo\")},/`lastModified`/)",
                  "err": {},
                  "uuid": "62be2946-065b-4afd-94e7-71ec8d2acf61",
                  "parentUUID": "469f4987-157e-4a8f-ac1f-9ab81a96e371",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4eb2952-8850-41bb-aef9-4863e75991a9",
                "b867db71-24cc-47e5-b2cb-88365218ee10",
                "13d66de2-6eda-4270-ae0a-54e28a3c7e0b",
                "5455fc96-7d42-4e24-8cf1-6968b9c04217",
                "ab78039c-1a5a-43aa-be3c-f988ee14e600",
                "c6849578-30c4-4667-b288-13b5f9c434da",
                "62be2946-065b-4afd-94e7-71ec8d2acf61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7826becd-78ab-42bc-8e45-8cf94c59034a",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.class(),null);event.class(ICalEventClass.PRIVATE);assert.strictEqual(event.class(),\"PRIVATE\");event.class(null);assert.strictEqual(event.class(),null)",
                  "err": {},
                  "uuid": "3a160fa9-d01e-421f-a6ee-166ab48dbc71",
                  "parentUUID": "7826becd-78ab-42bc-8e45-8cf94c59034a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.class(null));assert.deepStrictEqual(e,e.class(ICalEventClass.PRIVATE))",
                  "err": {},
                  "uuid": "580b9ffe-774d-4dcb-8b84-d06317578023",
                  "parentUUID": "7826becd-78ab-42bc-8e45-8cf94c59034a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.class(ICalEventClass.PRIVATE);e.class(null);assert.strictEqual(e.class(),null)",
                  "err": {},
                  "uuid": "524c2d0b-5ca2-432a-9d7b-3d5fd73ee59d",
                  "parentUUID": "7826becd-78ab-42bc-8e45-8cf94c59034a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.class(ICalEventClass.PRIVATE);assert.strictEqual(e.class(),\"PRIVATE\");assert.strictEqual(e.class(),ICalEventClass.PRIVATE)",
                  "err": {},
                  "uuid": "63dca72f-255a-490e-8161-27fe552374e6",
                  "parentUUID": "7826becd-78ab-42bc-8e45-8cf94c59034a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.class(\"COOKING\")},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/);assert.throws(function(){e.class(Infinity)},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/);assert.throws(function(){e.class(NaN)},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/);assert.throws(function(){e.class(-1)},/Input must be one of the following: CONFIDENTIAL, PRIVATE, PUBLIC/)",
                  "err": {},
                  "uuid": "75aa7044-f821-4f72-8c01-afef7b438ae3",
                  "parentUUID": "7826becd-78ab-42bc-8e45-8cf94c59034a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3a160fa9-d01e-421f-a6ee-166ab48dbc71",
                "580b9ffe-774d-4dcb-8b84-d06317578023",
                "524c2d0b-5ca2-432a-9d7b-3d5fd73ee59d",
                "63dca72f-255a-490e-8161-27fe552374e6",
                "75aa7044-f821-4f72-8c01-afef7b438ae3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "807fde87-1a0b-446d-be58-12d5aae91e5f",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.x(\"X-FOO\",\"bar\"))",
                  "err": {},
                  "uuid": "652a7327-878b-42fb-807c-c67dca2381bf",
                  "parentUUID": "807fde87-1a0b-446d-be58-12d5aae91e5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "652a7327-878b-42fb-807c-c67dca2381bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb5e51b5-25d1-4a0e-b59e-86c14668220c",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=moment().add(1,\"month\");const event=new ICalEvent({start:new Date},new ICalCalendar).summary(\"foo\").start(date);assert.strictEqual(event.toJSON().summary,\"foo\",\"summary is okay\");assert.deepStrictEqual(event.toJSON().start,date.toJSON(),\"start is okay\");assert.strictEqual(typeof event.toJSON().start,\"string\",\"start is string\")",
                  "err": {},
                  "uuid": "66ff176b-a543-4953-a1b3-f9f58aabe51c",
                  "parentUUID": "bb5e51b5-25d1-4a0e-b59e-86c14668220c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;const rule=new rrule.RRule({byweekday:[rrule.RRule.MO,rrule.RRule.FR],dtstart:date,freq:rrule.RRule.WEEKLY,interval:5,until:new Date(Date.UTC(2012,12,31))});const event=new ICalEvent({start:new Date},new ICalCalendar).summary(\"foo\").start(date).repeating(rule);const json=event.toJSON();const before=event.toString();assert.ok(typeof json.repeating===\"string\");const event2=new ICalEvent(event.toJSON(),new ICalCalendar);const after=event2.toString();assert.strictEqual(after,before)",
                  "err": {},
                  "uuid": "b8c2c7d1-e580-45ee-a030-bb99ff389a54",
                  "parentUUID": "bb5e51b5-25d1-4a0e-b59e-86c14668220c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a=new ICalEvent({start:new Date},new ICalCalendar);new ICalEvent(a.toJSON(),new ICalCalendar)",
                  "err": {},
                  "uuid": "a17de868-b1c9-457d-97dd-a53660dcb435",
                  "parentUUID": "bb5e51b5-25d1-4a0e-b59e-86c14668220c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66ff176b-a543-4953-a1b3-f9f58aabe51c",
                "b8c2c7d1-e580-45ee-a030-bb99ff389a54",
                "a17de868-b1c9-457d-97dd-a53660dcb435"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0ee7c77b-97b2-4c2e-bf68-0cc553aea736",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=new ICalEvent({start:new Date},new ICalCalendar);assert.strictEqual(event.transparency(),null);event.transparency(ICalEventTransparency.OPAQUE);assert.strictEqual(event.transparency(),\"OPAQUE\");event.transparency(null);assert.strictEqual(event.transparency(),null)",
                  "err": {},
                  "uuid": "1fb018a8-9936-44d8-8824-46e3cdea71ff",
                  "parentUUID": "0ee7c77b-97b2-4c2e-bf68-0cc553aea736",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.deepStrictEqual(e,e.transparency(null));assert.deepStrictEqual(e,e.transparency(ICalEventTransparency.TRANSPARENT))",
                  "err": {},
                  "uuid": "73036334-7b23-4613-b3f5-549d47575ff2",
                  "parentUUID": "0ee7c77b-97b2-4c2e-bf68-0cc553aea736",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.transparency(ICalEventTransparency.OPAQUE);e.transparency(null);assert.strictEqual(e.transparency(),null)",
                  "err": {},
                  "uuid": "3fef2648-68ca-475c-b749-c25fc43b94e5",
                  "parentUUID": "0ee7c77b-97b2-4c2e-bf68-0cc553aea736",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);e.transparency(ICalEventTransparency.OPAQUE);assert.strictEqual(e.transparency(),\"OPAQUE\")",
                  "err": {},
                  "uuid": "cc81f514-ae2a-4eed-8052-f705ebae7712",
                  "parentUUID": "0ee7c77b-97b2-4c2e-bf68-0cc553aea736",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({start:new Date},new ICalCalendar);assert.throws(function(){e.transparency(\"COOKING\")},/Input must be one of the following: OPAQUE, TRANSPARENT/);assert.throws(function(){e.transparency(Infinity)},/Input must be one of the following: OPAQUE, TRANSPARENT/);assert.throws(function(){e.transparency(-1)},/Input must be one of the following: OPAQUE, TRANSPARENT/)",
                  "err": {},
                  "uuid": "44686dbd-8fe3-441e-b69a-d11e29b9ef60",
                  "parentUUID": "0ee7c77b-97b2-4c2e-bf68-0cc553aea736",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1fb018a8-9936-44d8-8824-46e3cdea71ff",
                "73036334-7b23-4613-b3f5-549d47575ff2",
                "3fef2648-68ca-475c-b749-c25fc43b94e5",
                "cc81f514-ae2a-4eed-8052-f705ebae7712",
                "44686dbd-8fe3-441e-b69a-d11e29b9ef60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c26823a-6397-46f6-9cd7-ca24f8f44caa",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e=new ICalEvent({end:new Date(new Date().getTime()+36e5),start:new Date,summary:\"Hel\\\\\\\\lo\\nW;orl,d\"},new ICalCalendar);assert.ok(e.toString().indexOf(\"Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d\")>-1)",
                  "err": {},
                  "uuid": "8c6020f1-e72a-4558-a586-590d07e9a95b",
                  "parentUUID": "6c26823a-6397-46f6-9cd7-ca24f8f44caa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const event=new ICalEvent({id:42,start:moment(),summary:\":)\"},cal);assert.ok(event.toString().indexOf(\"UID:42\\r\")>-1)",
                  "err": {},
                  "uuid": "ef1212ee-e098-4ec0-b8f0-afa69ab5ef8b",
                  "parentUUID": "6c26823a-6397-46f6-9cd7-ca24f8f44caa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;let event=new ICalEvent({end:moment(),repeating:{freq:ICalEventRepeatingFreq.WEEKLY},start:moment()},cal);assert.ok(!event.toString().includes(\"WKST\"),\"without WKST\");event=new ICalEvent({end:moment(),repeating:{freq:ICalEventRepeatingFreq.WEEKLY,startOfWeek:ICalWeekday.SU},start:moment()},cal);assert.ok(event.toString().includes(\"WKST\"),\"with WKST\")",
                  "err": {},
                  "uuid": "be7e7849-ac7a-4909-982d-1152adc369af",
                  "parentUUID": "6c26823a-6397-46f6-9cd7-ca24f8f44caa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render allday events for luxon dates with timezone correct",
                  "fullTitle": "ical-generator Event toString() should render allday events for luxon dates with timezone correct",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal=new ICalCalendar;const luxonStartDate=DateTime.fromISO(\"2024-03-17T00:00:00.000+01:00\",{setZone:true});const luxonEndDate=DateTime.fromISO(\"2024-03-18T00:00:00.000+01:00\",{setZone:true});const event=new ICalEvent({allDay:true,end:luxonEndDate,start:luxonStartDate},cal);const actual=event.toString();assert.match(actual,new RegExp(\"X-MICROSOFT-CDO-ALLDAYEVENT:TRUE\\r\\n\"),\"with Microsoft CDO alldayevent set\");assert.match(actual,new RegExp(\"X-MICROSOFT-MSNCALENDAR-ALLDAYEVENT:TRUE\\r\\n\"),\"with Microsoft MSNCalendar alldayevent flag set\");assert.match(actual,new RegExp(`DTSTART;VALUE=DATE:${luxonStartDate.toFormat(\"yyyyLLdd\")}\\r\n`),\"for DTSTART\");assert.match(actual,new RegExp(`DTEND;VALUE=DATE:${luxonEndDate.toFormat(\"yyyyLLdd\")}\\r\n`),\"for DTEND\")",
                  "err": {},
                  "uuid": "ece8a58b-75e5-4e9b-a166-fe7dbd819d5c",
                  "parentUUID": "6c26823a-6397-46f6-9cd7-ca24f8f44caa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c6020f1-e72a-4558-a586-590d07e9a95b",
                "ef1212ee-e098-4ec0-b8f0-afa69ab5ef8b",
                "be7e7849-ac7a-4909-982d-1152adc369af",
                "ece8a58b-75e5-4e9b-a166-fe7dbd819d5c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0bcf6f1b-f129-4c46-8521-e3a8abc8575a",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a8407ee6-d5df-4204-bdb2-27db70e0806e",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(typeof ical,\"function\")",
                  "err": {},
                  "uuid": "4db52594-d111-4777-98af-3820baef60dd",
                  "parentUUID": "a8407ee6-d5df-4204-bdb2-27db70e0806e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ical()instanceof ICalCalendar)",
                  "err": {},
                  "uuid": "be66cf7d-a9b8-4ac0-8b11-63ff309fc15d",
                  "parentUUID": "a8407ee6-d5df-4204-bdb2-27db70e0806e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4db52594-d111-4777-98af-3820baef60dd",
                "be66cf7d-a9b8-4ac0-8b11-63ff309fc15d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2100ad11-f891-4779-81b7-f8d63f74c6d2",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarm)",
                  "err": {},
                  "uuid": "6386f4c4-960a-4061-878f-40aad3778c68",
                  "parentUUID": "2100ad11-f891-4779-81b7-f8d63f74c6d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarmType)",
                  "err": {},
                  "uuid": "7eb84b06-b7ea-45ac-9eb8-af55ff5de352",
                  "parentUUID": "2100ad11-f891-4779-81b7-f8d63f74c6d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6386f4c4-960a-4061-878f-40aad3778c68",
                "7eb84b06-b7ea-45ac-9eb8-af55ff5de352"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "14600960-f5c6-4cea-b506-487ff3498c5b",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendee)",
                  "err": {},
                  "uuid": "3f5bdbd9-c848-4149-b185-56981a147e21",
                  "parentUUID": "14600960-f5c6-4cea-b506-487ff3498c5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeType)",
                  "err": {},
                  "uuid": "0ae42e9b-d645-4074-9aba-e23cf0bb3519",
                  "parentUUID": "14600960-f5c6-4cea-b506-487ff3498c5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeRole)",
                  "err": {},
                  "uuid": "6c82ddbf-b038-42bf-9dbd-b13f2d3e1cb7",
                  "parentUUID": "14600960-f5c6-4cea-b506-487ff3498c5b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeStatus)",
                  "err": {},
                  "uuid": "deac54fc-e1c7-4452-919e-172a0da024f0",
                  "parentUUID": "14600960-f5c6-4cea-b506-487ff3498c5b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f5bdbd9-c848-4149-b185-56981a147e21",
                "0ae42e9b-d645-4074-9aba-e23cf0bb3519",
                "6c82ddbf-b038-42bf-9dbd-b13f2d3e1cb7",
                "deac54fc-e1c7-4452-919e-172a0da024f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b82b6290-e4ac-4036-90fa-4ff8272e7c1a",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendar)",
                  "err": {},
                  "uuid": "b2d7ca70-0462-4a68-954f-4abf12963763",
                  "parentUUID": "b82b6290-e4ac-4036-90fa-4ff8272e7c1a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendarMethod)",
                  "err": {},
                  "uuid": "e343a029-3829-4182-91ae-6365eb620d33",
                  "parentUUID": "b82b6290-e4ac-4036-90fa-4ff8272e7c1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b2d7ca70-0462-4a68-954f-4abf12963763",
                "e343a029-3829-4182-91ae-6365eb620d33"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c850ae8-627a-463d-adaa-42ede4eb6e04",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCategory)",
                  "err": {},
                  "uuid": "4ebf98e2-bc1e-495e-91b0-47d3dd51c680",
                  "parentUUID": "1c850ae8-627a-463d-adaa-42ede4eb6e04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4ebf98e2-bc1e-495e-91b0-47d3dd51c680"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "38525db7-5b62-4455-aca5-8c3d624e7d2d",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEvent)",
                  "err": {},
                  "uuid": "d668fdfa-d2ad-4a64-828a-1f377b809452",
                  "parentUUID": "38525db7-5b62-4455-aca5-8c3d624e7d2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventStatus)",
                  "err": {},
                  "uuid": "52ffbf21-d874-400e-bf8f-11b5b717df2a",
                  "parentUUID": "38525db7-5b62-4455-aca5-8c3d624e7d2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventBusyStatus)",
                  "err": {},
                  "uuid": "b061fc26-6a63-436f-91cb-6d745b0a0996",
                  "parentUUID": "38525db7-5b62-4455-aca5-8c3d624e7d2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventTransparency)",
                  "err": {},
                  "uuid": "ad4edf2e-a3fe-46e1-9c17-c72ff1827a81",
                  "parentUUID": "38525db7-5b62-4455-aca5-8c3d624e7d2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d668fdfa-d2ad-4a64-828a-1f377b809452",
                "52ffbf21-d874-400e-bf8f-11b5b717df2a",
                "b061fc26-6a63-436f-91cb-6d745b0a0996",
                "ad4edf2e-a3fe-46e1-9c17-c72ff1827a81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fbe17873-9468-499d-9daf-3e4c242a21bc",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventRepeatingFreq)",
                  "err": {},
                  "uuid": "5debcda7-4da7-41a0-bc88-eaf2a9173ce9",
                  "parentUUID": "fbe17873-9468-499d-9daf-3e4c242a21bc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalWeekday)",
                  "err": {},
                  "uuid": "55faa02a-387b-4bc9-816b-dbd551a0d21c",
                  "parentUUID": "fbe17873-9468-499d-9daf-3e4c242a21bc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5debcda7-4da7-41a0-bc88-eaf2a9173ce9",
                "55faa02a-387b-4bc9-816b-dbd551a0d21c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e943b638-578a-4965-bad7-d78dfd057bdc",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDate===\"function\")",
                  "err": {},
                  "uuid": "662df626-9392-4076-abe2-d92bca0d7d65",
                  "parentUUID": "e943b638-578a-4965-bad7-d78dfd057bdc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDateTZ===\"function\")",
                  "err": {},
                  "uuid": "ea340748-0bb6-46ca-bf4f-809aa7b28153",
                  "parentUUID": "e943b638-578a-4965-bad7-d78dfd057bdc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof escape===\"function\")",
                  "err": {},
                  "uuid": "936aa4bc-3f80-4e92-a1ae-6a2235d4db69",
                  "parentUUID": "e943b638-578a-4965-bad7-d78dfd057bdc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof foldLines===\"function\")",
                  "err": {},
                  "uuid": "1c0dbf41-9666-427d-b991-00de82db86e1",
                  "parentUUID": "e943b638-578a-4965-bad7-d78dfd057bdc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "662df626-9392-4076-abe2-d92bca0d7d65",
                "ea340748-0bb6-46ca-bf4f-809aa7b28153",
                "936aa4bc-3f80-4e92-a1ae-6a2235d4db69",
                "1c0dbf41-9666-427d-b991-00de82db86e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6f0ee242-01b3-4d0f-aa7f-d71f0a8fea3c",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "da2e735f-8955-468a-9443-80b60061ea65",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,start:moment(\"2016-04-30T22:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Europe/Berlin\"});const str=calendar.toString();assert.ok(str.indexOf(\"DTSTART;VALUE=DATE:20160501\")>-1)",
                  "err": {},
                  "uuid": "76971f49-d7fe-4441-af70-8dbc52861cfa",
                  "parentUUID": "da2e735f-8955-468a-9443-80b60061ea65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,start:moment(\"2016-05-01T03:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Brazil/East\"});const str=calendar.toString();assert.ok(str.indexOf(\"DTSTART;VALUE=DATE:20160501\")>-1)",
                  "err": {},
                  "uuid": "f431c335-7255-4b7f-85aa-b242872d1909",
                  "parentUUID": "da2e735f-8955-468a-9443-80b60061ea65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76971f49-d7fe-4441-af70-8dbc52861cfa",
                "f431c335-7255-4b7f-85aa-b242872d1909"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cca34d8f-a916-4e5e-b229-1562cec28822",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,end:moment(\"2016-05-01T00:00:00.000Z\"),repeating:{byDay:[ICalWeekday.SU],bySetPos:3,count:3,freq:ICalEventRepeatingFreq.MONTHLY,interval:1},start:moment(\"2016-04-30T22:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\"});const str=calendar.toString();assert.ok(str.indexOf(\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3\")>-1)",
                  "err": {},
                  "uuid": "151dd570-36b9-48c4-9d6f-f4bb8cb15c9f",
                  "parentUUID": "cca34d8f-a916-4e5e-b229-1562cec28822",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking all elements of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking all elements of the byDay array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{allDay:true,end:moment(\"2016-05-01T00:00:00.000Z\"),repeating:{byDay:[ICalWeekday.MO,ICalWeekday.FR],bySetPos:3,count:3,freq:ICalEventRepeatingFreq.MONTHLY,interval:1},start:moment(\"2016-04-30T22:00:00.000Z\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\"});const str=calendar.toString();assert.ok(str.indexOf(\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO,FR;BYSETPOS=3\")>-1)",
                  "err": {},
                  "uuid": "debe64b5-080a-44e2-b712-71746a48df86",
                  "parentUUID": "cca34d8f-a916-4e5e-b229-1562cec28822",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "151dd570-36b9-48c4-9d6f-f4bb8cb15c9f",
                "debe64b5-080a-44e2-b712-71746a48df86"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e6bcc818-0b77-495a-86cc-2c945c433608",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{end:moment(1553219772e3),recurrenceId:moment(1553219772e3),start:moment(1553219772e3),timezone:\"America/La_Paz\"}],timezone:\"America/Buenos_Aires\"});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "2faab64e-f116-4248-8b07-79233bc93ab1",
                  "parentUUID": "e6bcc818-0b77-495a-86cc-2c945c433608",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{end:moment(1553219772e3),recurrenceId:moment(1553219772e3),start:moment(1553219772e3),timezone:\"America/La_Paz\"}],timezone:\"America/Buenos_Aires\"});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "874aae6f-3e6c-4843-8898-6f48783aff44",
                  "parentUUID": "e6bcc818-0b77-495a-86cc-2c945c433608",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{end:moment(1553219772e3),recurrenceId:moment(1553219772e3),start:moment(1553219772e3),timezone:\"America/La_Paz\"}],timezone:\"America/Buenos_Aires\"});const str=calendar.toString();assert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`)>-1,str)",
                  "err": {},
                  "uuid": "50dcaa04-d860-4249-9490-753c1dd6c73c",
                  "parentUUID": "e6bcc818-0b77-495a-86cc-2c945c433608",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2faab64e-f116-4248-8b07-79233bc93ab1",
                "874aae6f-3e6c-4843-8898-6f48783aff44",
                "50dcaa04-d860-4249-9490-753c1dd6c73c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e944908-1ab0-4224-8971-d72f1a570914",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{repeating:{count:12,exclude:moment(\"2020-12-13T00:00:00+01:00\"),freq:ICalEventRepeatingFreq.MONTHLY},start:moment(\"2020-08-13T00:00:00+01:00\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"Europe/Berlin\"});const str=calendar.toString();assert.ok(str.indexOf(\"EXDATE;TZID=Europe/Berlin:20201213T000000\")>-1)",
                  "err": {},
                  "uuid": "2b7074a8-32f5-4398-b8b7-b42e7b62ecdc",
                  "parentUUID": "8e944908-1ab0-4224-8971-d72f1a570914",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{repeating:{count:12,exclude:moment(\"2020-12-13T00:00:00-05:00\"),freq:ICalEventRepeatingFreq.MONTHLY},start:moment(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}],prodId:\"//superman-industries.com//ical-generator//EN\",timezone:\"America/New_York\"});const str=calendar.toString();assert.ok(str.indexOf(\"EXDATE;TZID=America/New_York:20201213T000000\")>-1)",
                  "err": {},
                  "uuid": "2fac4146-99a4-426d-ae8d-e65158d1614c",
                  "parentUUID": "8e944908-1ab0-4224-8971-d72f1a570914",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b7074a8-32f5-4398-b8b7-b42e7b62ecdc",
                "2fac4146-99a4-426d-ae8d-e65158d1614c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "32602076-5a99-42c1-80c4-fce654164401",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",location:{geo:{lat:34.05223,lon:-118.24368},radius:400,title:\"Los Angeles, California, United States\"},stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"SUMMARY:Example Event\",\"LOCATION:Los Angeles\\\\, California\\\\, United States\",\"X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel\",\" es\\\\, California\\\\, United States:geo:34.05223,-118.24368\",\"GEO:34.05223;-118.24368\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "be0306f3-fc73-400e-a44f-c3a7359c32ed",
                  "parentUUID": "32602076-5a99-42c1-80c4-fce654164401",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be0306f3-fc73-400e-a44f-c3a7359c32ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03e7fbdb-899a-45a8-81f8-52d7b9722392",
              "title": "Issue #377",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not escape quotes in summary",
                  "fullTitle": "Issues Issue #377 should not escape quotes in summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:'My \"quoted\" string'}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",'SUMMARY:My \"quoted\" string',\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "9fcf9804-32c2-4549-9556-583a9b933ddf",
                  "parentUUID": "03e7fbdb-899a-45a8-81f8-52d7b9722392",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9fcf9804-32c2-4549-9556-583a9b933ddf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe2d392e-df2a-4471-a7b7-03d5a549e2f6",
              "title": "Issue #442",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate floating repeat until value if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat until value if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "bd294378-1674-43c0-b849-617db2c197bf",
                  "parentUUID": "fe2d392e-df2a-4471-a7b7-03d5a549e2f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate floating repeat exclusion dates if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat exclusion dates if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "67ae0a5a-c1d4-452d-8479-f48848f5be50",
                  "parentUUID": "fe2d392e-df2a-4471-a7b7-03d5a549e2f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "bd294378-1674-43c0-b849-617db2c197bf",
                "67ae0a5a-c1d4-452d-8479-f48848f5be50"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4cb00404-4d39-42fe-a892-90fcbec5bd42",
              "title": "Issue #459",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.repeating should work with `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work with `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",repeating:\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",\"SUMMARY:Example Event\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "ecd7717d-6368-43ae-85a1-fac0f0d317dc",
                  "parentUUID": "4cb00404-4d39-42fe-a892-90fcbec5bd42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "event.repeating should work without `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work without `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical({events:[{id:\"foo\",repeating:\"FREQ=MONTHLY;COUNT=3;INTERVAL=1\",stamp:new Date(\"2020-08-13T00:00:00-05:00\"),start:new Date(\"2020-08-13T00:00:00-05:00\"),summary:\"Example Event\"}]});assert.strictEqual(calendar.toString(),[\"BEGIN:VCALENDAR\",\"VERSION:2.0\",\"PRODID:-//sebbo.net//ical-generator//EN\",\"BEGIN:VEVENT\",\"UID:foo\",\"SEQUENCE:0\",\"DTSTAMP:20200813T050000Z\",\"DTSTART:20200813T050000Z\",\"RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1\",\"SUMMARY:Example Event\",\"END:VEVENT\",\"END:VCALENDAR\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "460f5475-82b9-450c-b102-fd798f5d7f0b",
                  "parentUUID": "4cb00404-4d39-42fe-a892-90fcbec5bd42",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecd7717d-6368-43ae-85a1-fac0f0d317dc",
                "460f5475-82b9-450c-b102-fd798f5d7f0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b4708000-fd38-460b-9f42-df5f339cf436",
              "title": "Issue #569 / 570",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.location should work with `geo` only",
                  "fullTitle": "Issues Issue #569 / 570 event.location should work with `geo` only",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event=ical().createEvent({end:new Date(\"2020-06-15T01:00:00Z\"),id:\"12345\",stamp:new Date(\"2020-06-15T00:00:00Z\"),start:new Date(\"2020-06-15T00:00:00Z\"),summary:\"Hello\"});event.location({geo:{lat:52.51147570081018,lon:13.342200696373846}});assert.strictEqual(event.toString(),[\"BEGIN:VEVENT\",\"UID:12345\",\"SEQUENCE:0\",\"DTSTAMP:20200615T000000Z\",\"DTSTART:20200615T000000Z\",\"DTEND:20200615T010000Z\",\"SUMMARY:Hello\",\"GEO:52.51147570081018;13.342200696373846\",\"END:VEVENT\",\"\"].join(\"\\r\\n\"))",
                  "err": {},
                  "uuid": "6c499e9c-bfc1-464f-abc7-8d3a998ffd09",
                  "parentUUID": "b4708000-fd38-460b-9f42-df5f339cf436",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c499e9c-bfc1-464f-abc7-8d3a998ffd09"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fa28e262-6142-4525-a7d5-59fbc0218dea",
              "title": "Issue #581",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.start and event.end should be swappable",
                  "fullTitle": "Issues Issue #581 event.start and event.end should be swappable",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar=ical();const event=calendar.createEvent({end:\"2024-02-29T17:20:00.000Z\",start:\"2024-02-29T17:00:00.000Z\",summary:\"Test Event\"});event.start(\"2024-02-29T19:00:00.000Z\");event.end(\"2024-02-29T19:20:00.000Z\");const start=event.start();assert.ok(typeof start===\"string\");assert.strictEqual(start,\"2024-02-29T19:00:00.000Z\");const end=event.end();assert.ok(typeof end===\"string\");assert.strictEqual(end,\"2024-02-29T19:20:00.000Z\")",
                  "err": {},
                  "uuid": "c03e8865-1574-450a-b8f9-cedcdd1fc471",
                  "parentUUID": "fa28e262-6142-4525-a7d5-59fbc0218dea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c03e8865-1574-450a-b8f9-cedcdd1fc471"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "94e96b49-22bd-4f24-a106-d63f47e73575",
              "title": "Issue #618",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should also produce an error",
                  "fullTitle": "Issues Issue #618 should also produce an error",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(()=>{const calendar=ical();calendar.createEvent({location:{address:null,geo:{lat:null,lon:null},title:\"Empty Venue\"},start:new Date,summary:\"Test Event\"})},/`location` isn't formatted correctly/)",
                  "err": {},
                  "uuid": "eb1a1e9c-c97c-4270-b89f-8580d3b38033",
                  "parentUUID": "94e96b49-22bd-4f24-a106-d63f47e73575",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb1a1e9c-c97c-4270-b89f-8580d3b38033"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "96629892-3967-41c6-8060-da0a5ede02f6",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "218c4b33-20a3-4822-9d13-aaa2b898ac5e",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "d830d7e9-b4c9-4120-81b9-26d77c8fb9d7",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "3e78c440-6db3-4c82-9b7f-e740b069e808",
                      "parentUUID": "d830d7e9-b4c9-4120-81b9-26d77c8fb9d7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "cb800a8d-f7f3-4a0c-9c4b-b57ce2218e77",
                      "parentUUID": "d830d7e9-b4c9-4120-81b9-26d77c8fb9d7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",true,false),\"20180705\")",
                      "err": {},
                      "uuid": "e9865838-61a3-40c4-9003-c91147b2364e",
                      "parentUUID": "d830d7e9-b4c9-4120-81b9-26d77c8fb9d7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,\"2018-07-05T18:24:00.052Z\",true,true),\"20180705\")",
                      "err": {},
                      "uuid": "1c274937-b9cb-4bca-8ee4-57655107b60e",
                      "parentUUID": "d830d7e9-b4c9-4120-81b9-26d77c8fb9d7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "9d4ff0b3-aa32-45cb-a574-38f89939586a",
                      "parentUUID": "d830d7e9-b4c9-4120-81b9-26d77c8fb9d7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "aedd9aa3-a60b-421b-b509-18063e52920b",
                      "parentUUID": "d830d7e9-b4c9-4120-81b9-26d77c8fb9d7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",true,false),\"20180705\")",
                      "err": {},
                      "uuid": "c0dd0768-85be-4a2e-bde4-3d41ef56801d",
                      "parentUUID": "d830d7e9-b4c9-4120-81b9-26d77c8fb9d7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",\"2018-07-05T18:24:00.052\",true,true),\"20180705\")",
                      "err": {},
                      "uuid": "ec4096a8-fa11-4d07-91cb-9ff13d171d7f",
                      "parentUUID": "d830d7e9-b4c9-4120-81b9-26d77c8fb9d7",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with / prefixed global timezones",
                      "fullTitle": "ICalTools formatDate() Date / String should work with / prefixed global timezones",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"/Europe/Berlin\",\"2018-07-05T18:24:00.052\",false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "4178bec5-8e48-431a-a157-fcf557a54b16",
                      "parentUUID": "d830d7e9-b4c9-4120-81b9-26d77c8fb9d7",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3e78c440-6db3-4c82-9b7f-e740b069e808",
                    "cb800a8d-f7f3-4a0c-9c4b-b57ce2218e77",
                    "e9865838-61a3-40c4-9003-c91147b2364e",
                    "1c274937-b9cb-4bca-8ee4-57655107b60e",
                    "9d4ff0b3-aa32-45cb-a574-38f89939586a",
                    "aedd9aa3-a60b-421b-b509-18063e52920b",
                    "c0dd0768-85be-4a2e-bde4-3d41ef56801d",
                    "ec4096a8-fa11-4d07-91cb-9ff13d171d7f",
                    "4178bec5-8e48-431a-a157-fcf557a54b16"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                  "title": "TZDate",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,new TZDate(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "7b750374-1121-4ce0-bb0f-9cc08c2740db",
                      "parentUUID": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,new TZDate(\"2018-07-05T18:24:00.052Z\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "8e49d55f-1f73-4790-bec9-fc2bfe6d85f2",
                      "parentUUID": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,new TZDate(\"2018-07-05T18:24:00.052Z\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "e2395605-60f0-42b0-9e9f-42af52025af5",
                      "parentUUID": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,new TZDate(\"2018-07-05T18:24:00.052Z\"),true,true),\"20180705\")",
                      "err": {},
                      "uuid": "7d065cfa-eb4b-4028-9519-82a4337c3d32",
                      "parentUUID": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T202400\")",
                      "err": {},
                      "uuid": "c0c0a39c-27c2-4fbd-a6df-68c0c94bf829",
                      "parentUUID": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052Z\"),false,true),\"20180705T202400\")",
                      "err": {},
                      "uuid": "60bc4971-64be-4ed7-9cd0-f93a8e7fd711",
                      "parentUUID": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052Z\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "ccb5e5ce-52dd-4fe9-ac82-fc486d79cd06",
                      "parentUUID": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() TZDate timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052\"),true,true),\"20180705\")",
                      "err": {},
                      "uuid": "78735238-afb4-45de-ab24-e58382fb3264",
                      "parentUUID": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with / prefixed global timezones",
                      "fullTitle": "ICalTools formatDate() TZDate should work with / prefixed global timezones",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"/Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T202400\")",
                      "err": {},
                      "uuid": "b8925937-4ef4-41a1-92fe-d2b390ee2883",
                      "parentUUID": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should ignore TZDate timezone",
                      "fullTitle": "ICalTools formatDate() TZDate should ignore TZDate timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,new TZDate(\"2018-07-05T18:24:00.052+02:00\",\"Europe/Berlin\"),false,false),\"20180705T162400Z\")",
                      "err": {},
                      "uuid": "3a491ffc-1f49-4c50-8efb-bf58ca4c06c6",
                      "parentUUID": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work prefer timezone argument over TZDate timezone",
                      "fullTitle": "ICalTools formatDate() TZDate should work prefer timezone argument over TZDate timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Europe/Berlin\",new TZDate(\"2018-07-05T18:24:00.052+02:00\",\"Asia/Tokyo\"),false,false),\"20180705T182400\")",
                      "err": {},
                      "uuid": "a93e315f-b839-4c09-8271-f385a43822fe",
                      "parentUUID": "a17c1216-f243-4e26-93fe-29a5ba92dc89",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7b750374-1121-4ce0-bb0f-9cc08c2740db",
                    "8e49d55f-1f73-4790-bec9-fc2bfe6d85f2",
                    "e2395605-60f0-42b0-9e9f-42af52025af5",
                    "7d065cfa-eb4b-4028-9519-82a4337c3d32",
                    "c0c0a39c-27c2-4fbd-a6df-68c0c94bf829",
                    "60bc4971-64be-4ed7-9cd0-f93a8e7fd711",
                    "ccb5e5ce-52dd-4fe9-ac82-fc486d79cd06",
                    "78735238-afb4-45de-ab24-e58382fb3264",
                    "b8925937-4ef4-41a1-92fe-d2b390ee2883",
                    "3a491ffc-1f49-4c50-8efb-bf58ca4c06c6",
                    "a93e315f-b839-4c09-8271-f385a43822fe"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8a5f349b-6004-4e45-9e9f-81b126cb2d0a",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,moment(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "c82f00d0-32cd-46f9-9100-f4bc7f4f3066",
                      "parentUUID": "8a5f349b-6004-4e45-9e9f-81b126cb2d0a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",moment(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "98e2f589-70ae-4156-b06f-834d629f869b",
                      "parentUUID": "8a5f349b-6004-4e45-9e9f-81b126cb2d0a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,moment(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "c35e52f3-39cd-4c42-90b3-4701a188f8c0",
                      "parentUUID": "8a5f349b-6004-4e45-9e9f-81b126cb2d0a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c82f00d0-32cd-46f9-9100-f4bc7f4f3066",
                    "98e2f589-70ae-4156-b06f-834d629f869b",
                    "c35e52f3-39cd-4c42-90b3-4701a188f8c0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "bce86c7d-a2c3-46e4-996b-f9329c4b1d43",
                  "title": "moment-timezone.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,momentTz(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "58184459-4eab-477d-84d1-e2f5ec6dd2c4",
                      "parentUUID": "bce86c7d-a2c3-46e4-996b-f9329c4b1d43",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",momentTz(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "3596831d-bad9-4080-a0fc-d2975d6dde4c",
                      "parentUUID": "bce86c7d-a2c3-46e4-996b-f9329c4b1d43",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,momentTz(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "dcba9247-c2cc-4cd2-bdda-5e42569996cd",
                      "parentUUID": "bce86c7d-a2c3-46e4-996b-f9329c4b1d43",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "58184459-4eab-477d-84d1-e2f5ec6dd2c4",
                    "3596831d-bad9-4080-a0fc-d2975d6dde4c",
                    "dcba9247-c2cc-4cd2-bdda-5e42569996cd"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "8ef7487b-0d64-4140-81c2-a9e7f20f342f",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "7cafd6f4-f0b4-49de-8d3d-032b59b0043e",
                      "parentUUID": "8ef7487b-0d64-4140-81c2-a9e7f20f342f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",DateTime.fromISO(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "276f3d61-4306-46f5-9401-1229ea48cf0f",
                      "parentUUID": "8ef7487b-0d64-4140-81c2-a9e7f20f342f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "e9f36384-b714-457e-a3d1-5ed6a26807f8",
                      "parentUUID": "8ef7487b-0d64-4140-81c2-a9e7f20f342f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2018-07-05T18:24:00.052\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "25f6d7d9-87f2-4162-b73d-1220f19e4394",
                      "parentUUID": "8ef7487b-0d64-4140-81c2-a9e7f20f342f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag, non floating, and date with timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag, non floating, and date with timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,DateTime.fromISO(\"2024-03-17T00:00:00.000+01:00\",{setZone:true}),true),\"20240317\")",
                      "err": {},
                      "uuid": "4a49478e-f926-4c59-ac68-5c3ba8887129",
                      "parentUUID": "8ef7487b-0d64-4140-81c2-a9e7f20f342f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7cafd6f4-f0b4-49de-8d3d-032b59b0043e",
                    "276f3d61-4306-46f5-9401-1229ea48cf0f",
                    "e9f36384-b714-457e-a3d1-5ed6a26807f8",
                    "25f6d7d9-87f2-4162-b73d-1220f19e4394",
                    "4a49478e-f926-4c59-ac68-5c3ba8887129"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "77bc3303-93b7-44b6-b9ce-4d859fb2406a",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T182400Z\")",
                      "err": {},
                      "uuid": "94a2b82b-63ee-4b0d-b310-b9c58aaba568",
                      "parentUUID": "77bc3303-93b7-44b6-b9ce-4d859fb2406a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(\"Canada/Saskatchewan\",dayjs(\"2018-07-05T18:24:00.052Z\"),false,false),\"20180705T122400\")",
                      "err": {},
                      "uuid": "994b9677-3e2d-4d87-bb8a-314dff2e09c6",
                      "parentUUID": "77bc3303-93b7-44b6-b9ce-4d859fb2406a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052\"),false,true),\"20180705T182400\")",
                      "err": {},
                      "uuid": "c8fe6890-f642-4086-8a71-e9113d086dc9",
                      "parentUUID": "77bc3303-93b7-44b6-b9ce-4d859fb2406a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null,dayjs(\"2018-07-05T18:24:00.052\"),true,false),\"20180705\")",
                      "err": {},
                      "uuid": "b00d814a-6671-4387-b383-49acf0398ec9",
                      "parentUUID": "77bc3303-93b7-44b6-b9ce-4d859fb2406a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "94a2b82b-63ee-4b0d-b310-b9c58aaba568",
                    "994b9677-3e2d-4d87-bb8a-314dff2e09c6",
                    "c8fe6890-f642-4086-8a71-e9113d086dc9",
                    "b00d814a-6671-4387-b383-49acf0398ec9"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f4f6c48c-7d24-447b-a3bb-39ddc03c2bfd",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed={timezone:\"Europe/Berlin\"};assert.strictEqual(formatDateTZ(\"Europe/Berlin\",\"DSTART\",moment(\"2018-07-02T15:48:05.000Z\"),ed),\"DSTART;TZID=Europe/Berlin:20180702T174805\")",
                  "err": {},
                  "uuid": "e052b3f2-eb9d-41e8-ae7e-5f3d7698734f",
                  "parentUUID": "f4f6c48c-7d24-447b-a3bb-39ddc03c2bfd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null,\"DSTART\",\"2018-07-02T15:48:05.000Z\",{}),\"DSTART:20180702T154805Z\")",
                  "err": {},
                  "uuid": "6cbd3216-0b29-4b60-b468-7fe74c0b2534",
                  "parentUUID": "f4f6c48c-7d24-447b-a3bb-39ddc03c2bfd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null,\"DSTART\",\"2018-07-02T15:48:05.000Z\"),\"DSTART:20180702T154805Z\")",
                  "err": {},
                  "uuid": "19c464a2-7ddc-4c65-a743-8f0e1443c669",
                  "parentUUID": "f4f6c48c-7d24-447b-a3bb-39ddc03c2bfd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e052b3f2-eb9d-41e8-ae7e-5f3d7698734f",
                "6cbd3216-0b29-4b60-b468-7fe74c0b2534",
                "19c464a2-7ddc-4c65-a743-8f0e1443c669"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a87af532-d6b4-4d3a-8517-13b98c6c9b91",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\\\ipsum\",false),\"Lorem \\\\\\\\ipsum\")",
                  "err": {},
                  "uuid": "60143ec0-f554-4b7f-9544-62eef7a553b7",
                  "parentUUID": "a87af532-d6b4-4d3a-8517-13b98c6c9b91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem ;ipsum\",false),\"Lorem \\\\;ipsum\")",
                  "err": {},
                  "uuid": "cb33fe9a-bfa1-441a-aeae-596ea54e0417",
                  "parentUUID": "a87af532-d6b4-4d3a-8517-13b98c6c9b91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem, ipsum\",false),\"Lorem\\\\, ipsum\")",
                  "err": {},
                  "uuid": "30b686f4-3c65-4ad8-8de7-4bb140fed0ec",
                  "parentUUID": "a87af532-d6b4-4d3a-8517-13b98c6c9b91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\ripsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "4d6f8ccc-c8c2-4d56-a2e2-68cf4d446772",
                  "parentUUID": "a87af532-d6b4-4d3a-8517-13b98c6c9b91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\nipsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "8b76c941-860b-48df-8341-548909b36f73",
                  "parentUUID": "a87af532-d6b4-4d3a-8517-13b98c6c9b91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape(\"Lorem \\r\\nipsum\",false),\"Lorem \\\\nipsum\")",
                  "err": {},
                  "uuid": "889e243e-b855-43cb-b377-daa8c398dc4b",
                  "parentUUID": "a87af532-d6b4-4d3a-8517-13b98c6c9b91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \" in text when inQuotes = true",
                  "fullTitle": "ICalTools escape() should escape \" in text when inQuotes = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum',true),'Lorem \\\\\"ipsum')",
                  "err": {},
                  "uuid": "f3403854-0dd5-4f79-b5d8-ff97d7d4d170",
                  "parentUUID": "a87af532-d6b4-4d3a-8517-13b98c6c9b91",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not escape \" in text when inQuotes = false",
                  "fullTitle": "ICalTools escape() should not escape \" in text when inQuotes = false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum',false),'Lorem \"ipsum')",
                  "err": {},
                  "uuid": "603ca979-fa97-4b61-888f-e79a05ae39d8",
                  "parentUUID": "a87af532-d6b4-4d3a-8517-13b98c6c9b91",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "60143ec0-f554-4b7f-9544-62eef7a553b7",
                "cb33fe9a-bfa1-441a-aeae-596ea54e0417",
                "30b686f4-3c65-4ad8-8de7-4bb140fed0ec",
                "4d6f8ccc-c8c2-4d56-a2e2-68cf4d446772",
                "8b76c941-860b-48df-8341-548909b36f73",
                "889e243e-b855-43cb-b377-daa8c398dc4b",
                "f3403854-0dd5-4f79-b5d8-ff97d7d4d170",
                "603ca979-fa97-4b61-888f-e79a05ae39d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa83588c-8ed0-4078-88c6-bb10481a7773",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines(\"12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981\"),\"12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981\")",
                  "err": {},
                  "uuid": "178f3ea3-0b3a-4ecc-86fe-fb004fb6152b",
                  "parentUUID": "aa83588c-8ed0-4078-88c6-bb10481a7773",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines(\"\\u{1F44B}\\u{1F3FC}12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981\"),\"\\u{1F44B}\\u{1F3FC}12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981\")",
                  "err": {},
                  "uuid": "3aca0e3b-ae5d-4af0-b787-fd79a912562e",
                  "parentUUID": "aa83588c-8ed0-4078-88c6-bb10481a7773",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "178f3ea3-0b3a-4ecc-86fe-fb004fb6152b",
                "3aca0e3b-ae5d-4af0-b787-fd79a912562e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a53fe01d-c5fa-4687-b2e4-c846c65eaa0f",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "d06a5ded-5c4e-4ef8-acaf-50b009bf66e5",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=new Date;assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "fe935fd8-7ae1-43ba-a75d-d6fe075625f7",
                      "parentUUID": "d06a5ded-5c4e-4ef8-acaf-50b009bf66e5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=new Date(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "5819971c-2051-4377-b5da-2b31b74534f4",
                      "parentUUID": "d06a5ded-5c4e-4ef8-acaf-50b009bf66e5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "fe935fd8-7ae1-43ba-a75d-d6fe075625f7",
                    "5819971c-2051-4377-b5da-2b31b74534f4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "ffc1d64c-4ad3-4331-bc5d-ae67d8cd35b3",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=\"2021-03-28T13:15:23.587Z\";assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "9262307d-54ca-4df7-ba57-cd3de1b82e39",
                      "parentUUID": "ffc1d64c-4ad3-4331-bc5d-ae67d8cd35b3",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=\"foo\";assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "68014d22-c577-4c2b-9efd-2942fb0dac71",
                      "parentUUID": "ffc1d64c-4ad3-4331-bc5d-ae67d8cd35b3",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9262307d-54ca-4df7-ba57-cd3de1b82e39",
                    "68014d22-c577-4c2b-9efd-2942fb0dac71"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e51e4ce8-8aa6-4fc0-906e-736d0b10b197",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=DateTime.now();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "0741b4e1-5fdb-4933-9620-31b2512635bd",
                      "parentUUID": "e51e4ce8-8aa6-4fc0-906e-736d0b10b197",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=DateTime.fromISO(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "d317200f-14b3-4bd2-b2d1-9fcb374ae3a6",
                      "parentUUID": "e51e4ce8-8aa6-4fc0-906e-736d0b10b197",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0741b4e1-5fdb-4933-9620-31b2512635bd",
                    "d317200f-14b3-4bd2-b2d1-9fcb374ae3a6"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "266bbb74-16dc-4a1d-85ab-66a44bd20d97",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=moment();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "353b46ca-dfb9-43c9-b6cb-c89f76a45444",
                      "parentUUID": "266bbb74-16dc-4a1d-85ab-66a44bd20d97",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=moment(\"foo\",\"MM/DD/YYYY\",true);assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "04539cef-9dc1-4101-8096-c3948e2cda32",
                      "parentUUID": "266bbb74-16dc-4a1d-85ab-66a44bd20d97",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "353b46ca-dfb9-43c9-b6cb-c89f76a45444",
                    "04539cef-9dc1-4101-8096-c3948e2cda32"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0068c257-95b7-400a-836c-c1baa0a27e58",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=dayjs();assert.equal(checkDate(date,\"foo\"),date)",
                      "err": {},
                      "uuid": "77882ee4-93ce-42c6-961a-ea642ec9f849",
                      "parentUUID": "0068c257-95b7-400a-836c-c1baa0a27e58",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date=dayjs(\"foo\");assert.throws(()=>{checkDate(date,\"foo\")},/`foo` has to be a valid date!/)",
                      "err": {},
                      "uuid": "63066369-e8d3-4a7a-9abd-623263f09ae3",
                      "parentUUID": "0068c257-95b7-400a-836c-c1baa0a27e58",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "77882ee4-93ce-42c6-961a-ea642ec9f849",
                    "63066369-e8d3-4a7a-9abd-623263f09ae3"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0f19891f-1677-4f52-af0e-4d0cd777b8dd",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(date.toJSON()),date)",
                  "err": {},
                  "uuid": "f6b3a3d2-7913-4ba6-ac6a-c19c72ad4c51",
                  "parentUUID": "0f19891f-1677-4f52-af0e-4d0cd777b8dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(date),date)",
                  "err": {},
                  "uuid": "db410a46-c808-4d23-9ebe-201d8c4b8c79",
                  "parentUUID": "0f19891f-1677-4f52-af0e-4d0cd777b8dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(moment(date)),date)",
                  "err": {},
                  "uuid": "9c9e718b-30ff-4e04-bad7-585a5e6df073",
                  "parentUUID": "0f19891f-1677-4f52-af0e-4d0cd777b8dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment-timezone object",
                  "fullTitle": "ICalTools toDate() should work with moment-timezone object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(momentTz(date)),date)",
                  "err": {},
                  "uuid": "ada026f0-3bb4-4c9b-a3d2-9c914590d71a",
                  "parentUUID": "0f19891f-1677-4f52-af0e-4d0cd777b8dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(dayjs(date)),date)",
                  "err": {},
                  "uuid": "ec9d6f56-d966-442c-98cd-84eaa48000a5",
                  "parentUUID": "0f19891f-1677-4f52-af0e-4d0cd777b8dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date=new Date;assert.deepStrictEqual(toDate(DateTime.fromJSDate(date)),date)",
                  "err": {},
                  "uuid": "b757f075-ba32-4563-9d8e-a0e3009223fc",
                  "parentUUID": "0f19891f-1677-4f52-af0e-4d0cd777b8dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6b3a3d2-7913-4ba6-ac6a-c19c72ad4c51",
                "db410a46-c808-4d23-9ebe-201d8c4b8c79",
                "9c9e718b-30ff-4e04-bad7-585a5e6df073",
                "ada026f0-3bb4-4c9b-a3d2-9c914590d71a",
                "ec9d6f56-d966-442c-98cd-84eaa48000a5",
                "b757f075-ba32-4563-9d8e-a0e3009223fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f0f86d8-47e2-4178-bbdc-e29a653626bb",
              "title": "toDurationString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ICalTools toDurationString() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(toDurationString(0),\"PT0S\");assert.strictEqual(toDurationString(1),\"PT1S\");assert.strictEqual(toDurationString(60),\"PT1M\");assert.strictEqual(toDurationString(3600),\"PT1H\");assert.strictEqual(toDurationString(86400),\"P1D\");assert.strictEqual(toDurationString(-3600),\"-PT1H\")",
                  "err": {},
                  "uuid": "fc61759c-3b93-4fea-8639-f571207c749c",
                  "parentUUID": "6f0f86d8-47e2-4178-bbdc-e29a653626bb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc61759c-3b93-4fea-8639-f571207c749c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "73398bd2-15a3-43e6-b236-9f4fa67e3738",
          "title": "ical-generator Types",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/types.ts",
          "file": "/test/types.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "stubs should be compatible with third party libraries",
              "fullTitle": "ical-generator Types stubs should be compatible with third party libraries",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(dayJsTest,\"day.js stub should be compatible\");assert.ok(luxonTest,\"luxon stub should be compatible\");assert.ok(momentTest,\"moment stub should be compatible\");assert.ok(momentTimezoneTest,\"moment-timezone stub should be compatible\");assert.ok(rruleTest,\"rrule stub should be compatible\");assert.ok(dateFnsTzTest,\"date-fns/tz stub should be compatible\")",
              "err": {},
              "uuid": "215a2d5f-7f05-4a35-99f9-6b294f621aa1",
              "parentUUID": "73398bd2-15a3-43e6-b236-9f4fa67e3738",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "calendar data should be compatible with calendar json data",
              "fullTitle": "ical-generator Types calendar data should be compatible with calendar json data",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.ok(attendeeJson,\"attendee json data should be compatible\");assert.ok(calendarJson,\"calendar json data should be compatible\");assert.ok(categoryJson,\"category json data should be compatible\");assert.ok(eventJson,\"event json data should be compatible\")",
              "err": {},
              "uuid": "27aac5b8-f88a-40ad-b9d3-6f8a16df607e",
              "parentUUID": "73398bd2-15a3-43e6-b236-9f4fa67e3738",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "215a2d5f-7f05-4a35-99f9-6b294f621aa1",
            "27aac5b8-f88a-40ad-b9d3-6f8a16df607e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}